"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[9649],{3905:function(n,t,e){e.d(t,{Zo:function(){return l},kt:function(){return c}});var _=e(7294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var _=Object.getOwnPropertySymbols(n);t&&(_=_.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,_)}return e}function a(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function p(n,t){if(null==n)return{};var e,_,r=function(n,t){if(null==n)return{};var e,_,r={},o=Object.keys(n);for(_=0;_<o.length;_++)e=o[_],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(_=0;_<o.length;_++)e=o[_],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var s=_.createContext({}),i=function(n){var t=_.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):a(a({},t),n)),e},l=function(n){var t=i(n.components);return _.createElement(s.Provider,{value:t},n.children)},f={inlineCode:"code",wrapper:function(n){var t=n.children;return _.createElement(_.Fragment,{},t)}},d=_.forwardRef((function(n,t){var e=n.components,r=n.mdxType,o=n.originalType,s=n.parentName,l=p(n,["components","mdxType","originalType","parentName"]),d=i(e),c=r,T=d["".concat(s,".").concat(c)]||d[c]||f[c]||o;return e?_.createElement(T,a(a({ref:t},l),{},{components:e})):_.createElement(T,a({ref:t},l))}));function c(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var o=e.length,a=new Array(o);a[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=n,p.mdxType="string"==typeof n?n:r,a[1]=p;for(var i=2;i<o;i++)a[i]=e[i];return _.createElement.apply(null,a)}return _.createElement.apply(null,e)}d.displayName="MDXCreateElement"},4957:function(n,t,e){e.r(t),e.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return p},metadata:function(){return i},toc:function(){return f}});var _=e(7462),r=e(3366),o=(e(7294),e(3905)),a=["components"],p={},s=void 0,i={permalink:"/longyu.github.io/blog/dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898",editUrl:"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898.md",source:"@site/blog/dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898.md",title:"dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898",description:"\u95ee\u9898\u63cf\u8ff0",date:"2022-06-21T00:32:49.000Z",formattedDate:"2022\u5e746\u670821\u65e5",tags:[],readingTime:9,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"dpdk/l2fwd \u652f\u6301 x710 \u901a\u8fc7 fdir \u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587",permalink:"/longyu.github.io/blog/dpdk/l2fwd \u652f\u6301 x710 \u901a\u8fc7 fdir \u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587"},nextItem:{title:"dpdk \u4e2d mbuf \u7684\u7ed3\u6784",permalink:"/longyu.github.io/blog/dpdk/\u4e0d\u61c2 dpdk mbuf \u7ed3\u6784\uff1f\u6b64\u7bc7\u6587\u7ae0\u5e26\u4f60\u8d85\u795e"}},l={authorsImageUrls:[]},f=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u5f02\u5e38 hash \u914d\u7f6e",id:"\u5f02\u5e38-hash-\u914d\u7f6e",level:2},{value:"\u6d41\u91cf\u914d\u6bd4",id:"\u6d41\u91cf\u914d\u6bd4",level:2},{value:"\u6d4b\u8bd5\u9a8c\u8bc1\u8fc7\u7a0b",id:"\u6d4b\u8bd5\u9a8c\u8bc1\u8fc7\u7a0b",level:2},{value:"\u6839\u636e\u6d4b\u8bd5\u9879\u76ee\u5f97\u51fa\u7684\u521d\u6b65\u7ed3\u8bba",id:"\u6839\u636e\u6d4b\u8bd5\u9879\u76ee\u5f97\u51fa\u7684\u521d\u6b65\u7ed3\u8bba",level:2},{value:"\u63d0\u95ee\u73af\u8282",id:"\u63d0\u95ee\u73af\u8282",level:2},{value:"\u4fe1\u606f\u6269\u5145\u73af\u8282",id:"\u4fe1\u606f\u6269\u5145\u73af\u8282",level:2},{value:"\u9488\u5bf9\u5206\u7247\u62a5\u6587 hash \u5b57\u6bb5\u8bbe\u5b9a hash_filter \u6d4b\u8bd5\u9879\u76ee",id:"\u9488\u5bf9\u5206\u7247\u62a5\u6587-hash-\u5b57\u6bb5\u8bbe\u5b9a-hash_filter-\u6d4b\u8bd5\u9879\u76ee",level:2}],d={toc:f};function c(n){var t=n.components,e=(0,r.Z)(n,a);return(0,o.kt)("wrapper",(0,_.Z)({},d,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,o.kt)("p",null,"\u5f53 rss_hf \u4e2d\u914d\u7f6e\u4e86 ",(0,o.kt)("strong",{parentName:"p"},"ETH_RSS_FRAG_IPV4")," \u4e0e ",(0,o.kt)("strong",{parentName:"p"},"ETH_RSS_NONFRAG_IPV4_TCP")," \u53c2\u6570\u540e\uff0c\u4e00\u4e9b\u8fde\u63a5\u7684\u5206\u7247\u62a5\u6587\u4f1a\u88ab hash \u5230\u5176\u5b83\u961f\u5217\u4e2d\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u7531\u4e8e\u8fd9\u4e9b\u5206\u7247\u7684\u62a5\u6587\u6ca1\u6709 L4 port number"),"\u3002"),(0,o.kt)("p",null,"\u5f53\u4e0d\u914d\u7f6e ",(0,o.kt)("strong",{parentName:"p"},"ETH_RSS_NONFRAG_IPV4_TCP")," \u65f6\uff0c",(0,o.kt)("strong",{parentName:"p"},"ETH_RSS_FRAG_IPV4")," \u54c8\u5e0c\u51fd\u6570\u4e0d\u4f1a\u5e94\u7528\u5230\u975e\u5206\u7247\u62a5\u6587\u4e0a\uff0c\u8fd9\u4e9b\u62a5\u6587\u5c06\u4f1a\u88ab\u6295\u9012\u5230\u961f\u5217 0\u3002"),(0,o.kt)("h2",{id:"\u5f02\u5e38-hash-\u914d\u7f6e"},"\u5f02\u5e38 hash \u914d\u7f6e"),(0,o.kt)("p",null," \u914d\u7f6e\u5185\u5bb9\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"       #define RSS_X710_KEY_SIZE 52\n\n         static unsigned char tr_rss_key_x710[] = {\n           0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n           0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n           0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n           0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n           0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n           0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n           0x6d, 0x5a, 0x6d, 0x5a,\n       };\n  \n       port_conf->rxmode.mq_mode = ETH_MQ_RX_RSS;\n\n       port_conf->rx_adv_conf.rss_conf.rss_key = tr_rss_key_x710;\n       port_conf->rx_adv_conf.rss_conf.rss_hf = ETH_RSS_PROTO_MASK;\n       port_conf->rx_adv_conf.rss_conf.rss_key_len = RSS_X710_KEY_SIZE;\n}\n")),(0,o.kt)("p",null,"\u8bbe\u7f6e\u4e0a\u9762\u7684 rss_key\uff0c\u4e14 rss_hf \u914d\u7f6e ",(0,o.kt)("strong",{parentName:"p"},"ETH_RSS_PROTO_MASK"),"\uff0c\u80fd hash \u5230\u591a\u961f\u5217\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u4e0d\u5206\u7247\u62a5\u6587\u6b63\u5e38\uff0ctcp \u5206\u7247\u62a5\u6587\u5b58\u5728\u95ee\u9898"),"\u3002"),(0,o.kt)("h2",{id:"\u6d41\u91cf\u914d\u6bd4"},"\u6d41\u91cf\u914d\u6bd4"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"tcp \u975e\u5206\u7247\u6d41\uff0c\u6e90 ip \u4e0e\u76ee\u7684 ip 100:100 \u5206\u5e03\u3002")),(0,o.kt)("h2",{id:"\u6d4b\u8bd5\u9a8c\u8bc1\u8fc7\u7a0b"},"\u6d4b\u8bd5\u9a8c\u8bc1\u8fc7\u7a0b"),(0,o.kt)("p",null,"\u4e0b\u9762\u7684\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u9996\u5148\u6253 ",(0,o.kt)("strong",{parentName:"p"},"100:100 \u7684 tcp \u975e\u5206\u7247\u6d41\uff0c\u80fd\u591f hash \u5230\u591a\u961f\u5217\u540e\u4fee\u6539\u4e3a\u6709\u5206\u7247\u7684 tcp \u6d41\uff0c\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u3002")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"1.\u4f7f\u7528\u7f51\u5361\u9ed8\u8ba4\u7684 rss_key\uff0c\u4e14\u4fee\u6539 rss_hf \u4e3a ETH_RSS_IPV4 | ETH_RSS_IPV6")),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7ed3\u679c\uff1a\u4e0d\u80fd hash \u5230\u591a\u961f\u5217\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"2.\u4f7f\u7528\u9ed8\u8ba4\u7684 rss_key \u5e76\u914d\u7f6e\u7f51\u5361 hash_filter\uff0c\u4ee3\u7801\u6765\u81ea google")),(0,o.kt)("p",null,"\u8865\u4e01\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'struct rte_eth_conf new_port_conf = {\n  .rxmode = {\n    .mq_mode = ETH_MQ_RX_RSS,\n  },\n  .rx_adv_conf = {\n    .rss_conf = {\n        .rss_hf = ETH_RSS_IP |\n              ETH_RSS_TCP |\n              ETH_RSS_UDP |\n              ETH_RSS_SCTP,\n    }\n   },\n};\n\n\n#define UINT32_BIT (CHAR_BIT * sizeof(uint32_t))\nint sym_hash_enable(int port_id, uint32_t ftype, enum rte_eth_hash_function function)\n{\n    struct rte_eth_hash_filter_info info;\n    int ret = 0;\n    uint32_t idx = 0;\n    uint32_t offset = 0;\n\n    memset(&info, 0, sizeof(info));\n\n    ret = rte_eth_dev_filter_supported(port_id, RTE_ETH_FILTER_HASH);\n    if (ret < 0) {\n        printf("RTE_ETH_FILTER_HASH not supported on port: %d",\n                         port_id);\n        return ret;\n    }\n\n    info.info_type = RTE_ETH_HASH_FILTER_GLOBAL_CONFIG;\n    info.info.global_conf.hash_func = function;\n\n    idx = ftype / UINT32_BIT;\n    offset = ftype % UINT32_BIT;\n    info.info.global_conf.valid_bit_mask[idx] |= (1ULL << offset);\n    info.info.global_conf.sym_hash_enable_mask[idx] |=\n                        (1ULL << offset);\n\n    ret = rte_eth_dev_filter_ctrl(port_id, RTE_ETH_FILTER_HASH,\n                                  RTE_ETH_FILTER_SET, &info);\n    if (ret < 0)\n    {\n        printf("Cannot set global hash configurations"\n                        "on port %u", port_id);\n        return ret;\n    }\n\n    return 0;\n}\n\nint sym_hash_set(int port_id, int enable)\n{\n    int ret = 0;\n    struct rte_eth_hash_filter_info info;\n\n    memset(&info, 0, sizeof(info));\n\n    ret = rte_eth_dev_filter_supported(port_id, RTE_ETH_FILTER_HASH);\n    if (ret < 0) {\n        printf("RTE_ETH_FILTER_HASH not supported on port: %d",\n                         port_id);\n        return ret;\n    }\n\n    info.info_type = RTE_ETH_HASH_FILTER_SYM_HASH_ENA_PER_PORT;\n    info.info.enable = enable;\n    ret = rte_eth_dev_filter_ctrl(port_id, RTE_ETH_FILTER_HASH,\n                        RTE_ETH_FILTER_SET, &info);\n\n    if (ret < 0)\n    {\n        printf("Cannot set symmetric hash enable per port "\n                        "on port %u", port_id);\n        return ret;\n    }\n\n    return 0;\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"dev_configure")," \u4f7f\u7528 ",(0,o.kt)("strong",{parentName:"p"},"new_port_conf")," \u914d\u7f6e\uff0c\u5e76\u5728 ",(0,o.kt)("strong",{parentName:"p"},"dev_configure")," \u524d\u6267\u884c\u5982\u4e0b\u4ee3\u7801\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"                sym_hash_enable(portid, RTE_ETH_FLOW_NONFRAG_IPV4_TCP, RTE_ETH_HASH_FUNCTION_TOEPLITZ);\n                sym_hash_enable(portid, RTE_ETH_FLOW_NONFRAG_IPV4_UDP, RTE_ETH_HASH_FUNCTION_TOEPLITZ);\n                sym_hash_enable(portid, RTE_ETH_FLOW_FRAG_IPV4, RTE_ETH_HASH_FUNCTION_TOEPLITZ);\n                sym_hash_enable(portid, RTE_ETH_FLOW_NONFRAG_IPV4_SCTP, RTE_ETH_HASH_FUNCTION_TOEPLITZ);\n                sym_hash_enable(portid, RTE_ETH_FLOW_NONFRAG_IPV4_OTHER, RTE_ETH_HASH_FUNCTION_TOEPLITZ);\n\n                sym_hash_set(portid, 1);\n")),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7ed3\u679c\uff1a",(0,o.kt)("strong",{parentName:"p"},"\u80fd\u591f hash \u5f00\uff0c\u4f46\u662f tcp \u5206\u7247\u62a5\u6587\u4ecd\u65e7\u6709\u95ee\u9898\u3002")),(0,o.kt)("p",null,"3.",(0,o.kt)("strong",{parentName:"p"},"\u6d4b\u8bd5\u4f7f\u7528 0x6d\u30010x5a .... \u7684 rss_key\uff0c\u4fee\u6539 rss_hf flag \u5185\u5bb9\u4e3a ETH_RSS_IPV4 | ETH_RSS_IPV6")),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7ed3\u679c\uff1a\u4e0d\u80fd hash \u5230\u591a\u961f\u5217\u3002"),(0,o.kt)("p",null,"4.",(0,o.kt)("strong",{parentName:"p"},"\u6d4b\u8bd5\u4f7f\u7528\u9ed8\u8ba4\u7684 rss_key\uff0c\u5e76\u5728\u6267\u884c dev_configure \u524d\u6dfb\u52a0 filter_ctrl \u7684\u8865\u4e01\u4ee3\u7801")),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7ed3\u679c\uff1a\u80fd\u591f hash \u5230\u591a\u961f\u5217\uff0ctcp \u5206\u7247\u62a5\u6587 hash \u5f02\u5e38\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"5.\u6d4b\u8bd5\u8bbe\u7f6e rss_hf \u4e3a ETH_RSS_IP flag")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"        static unsigned char tr_rss_key_x710[] = {\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a,\n        };\n        \n    #define RSS_X710_KEY_SIZE 52\n\n    port_conf->rxmode.mq_mode = ETH_MQ_RX_RSS;\n    port_conf->rxmode.max_rx_pkt_len = ETHER_MAX_LEN;\n    port_conf->rxmode.split_hdr_size = 0;\n    port_conf->rxmode.header_split   = 0; /**< Header Split disabled */\n    port_conf->rxmode.hw_ip_checksum = 0; /**< IP checksum offload enabled */\n    port_conf->rxmode.hw_vlan_filter = 0; /**< VLAN filtering disabled */\n    port_conf->rxmode.hw_vlan_strip  = 0;\n    port_conf->rxmode.hw_vlan_extend = 0;\n    port_conf->rxmode.jumbo_frame    = 0; /**< Jumbo Frame Support disabled */\n    port_conf->rxmode.hw_strip_crc   = 0; /**< CRC stripped by hardware */\n\n    port_conf->txmode.mq_mode = ETH_MQ_TX_NONE;\n\n    port_conf->rx_adv_conf.rss_conf.rss_key = tr_rss_key_x710;\n    port_conf->rx_adv_conf.rss_conf.rss_hf = ETH_RSS_IP;\n    port_conf->rx_adv_conf.rss_conf.rss_key_len = RSS_X710_KEY_SIZE;\n")),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7ed3\u679c\uff1a\u4e0d\u80fd hash \u5230\u591a\u961f\u5217\u3002"),(0,o.kt)("p",null,"6.",(0,o.kt)("strong",{parentName:"p"},"\u4e0d\u8bbe\u7f6e rss_key\uff0c\u53ea\u8bbe\u7f6e rss_hf \u4e3a ETH_RSS_PROTO_MASK")," "),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7ed3\u679c\uff1a\u80fd\u591f hash \u5230\u591a\u961f\u5217\uff0ctcp \u5206\u7247\u62a5\u6587 hash \u5f02\u5e38\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"7.\u4e0d\u8bbe\u7f6e rss_key\uff0c\u53ea\u8bbe\u7f6e rss_hf \u4e3a ETH_RSS_IP")," "),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7ed3\u679c\uff1a\u4e0d\u80fd hash \u5230\u591a\u961f\u5217\u3002"),(0,o.kt)("p",null,"8.",(0,o.kt)("strong",{parentName:"p"},"\u4e0d\u8bbe\u7f6e rss_key\uff0c\u8bbe\u7f6e rss_hf \u503c\u5982\u4e0b"),"\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"        ETH_RSS_NONFRAG_IPV4_TCP | \\\n        ETH_RSS_NONFRAG_IPV4_UDP | \\\n        ETH_RSS_NONFRAG_IPV4_SCTP | \\\n        ETH_RSS_L2_PAYLOAD | \\\n        ETH_RSS_IPV6_TCP_EX\n")),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7ed3\u679c\uff1a\u80fd\u591f hash \u5230\u591a\u961f\u5217\uff0ctcp \u5206\u7247\u62a5\u6587 hash \u5f02\u5e38\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"9.\u4e0d\u8bbe\u7f6e rss_key\uff0c\u8bbe\u7f6e rss_hf \u503c\u5982\u4e0b\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"        ETH_RSS_NONFRAG_IPV4_TCP | \\\n        ETH_RSS_NONFRAG_IPV4_UDP | \\\n        ETH_RSS_NONFRAG_IPV4_SCTP)\n")),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7ed3\u679c\uff1a\u80fd\u591f hash \u5230\u5bf9\u961f\u5217\uff0ctcp \u5206\u7247\u62a5\u6587 hash \u5f02\u5e38\u3002"),(0,o.kt)("ol",{start:10},(0,o.kt)("li",{parentName:"ol"},"\u4e0d\u8bbe\u7f6e rss_key\uff0c\u8bbe\u7f6e rss_hf \u503c\u5982\u4e0b\uff1a ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"ETH_RSS_NONFRAG_IPV4_TCP\n")),(0,o.kt)("p",null,"\u6d4b\u8bd5\u7ed3\u679c\uff1a\u80fd\u591f hash \u5230\u591a\u5bf9\u5217\uff0ctcp \u5206\u7247\u62a5\u6587 hash \u5f02\u5e38\u3002"),(0,o.kt)("h2",{id:"\u6839\u636e\u6d4b\u8bd5\u9879\u76ee\u5f97\u51fa\u7684\u521d\u6b65\u7ed3\u8bba"},"\u6839\u636e\u6d4b\u8bd5\u9879\u76ee\u5f97\u51fa\u7684\u521d\u6b65\u7ed3\u8bba"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u53ea\u6253 tcp \u975e\u5206\u7247\u62a5\u6587\u7684\u60c5\u51b5\u4e0b\uff0crss_hf \u8bbe\u5b9a\u5185\u5bb9\u5fc5\u987b\u5305\u542b ETH_RSS_NONFRAG_IPV4_TCP \u624d\u80fd hash \u5230\u591a\u961f\u5217\uff01")),(0,o.kt)("h2",{id:"\u63d0\u95ee\u73af\u8282"},"\u63d0\u95ee\u73af\u8282"),(0,o.kt)("p",null,"1.\u771f\u7684\u7406\u89e3\u4e86\u95ee\u9898\u5417\uff1f"),(0,o.kt)("p",null,"\u80fd\u591f\u6e05\u6670\u63cf\u8ff0\u95ee\u9898\uff0c\u6ca1\u6709\u504f\u5dee\u3002"),(0,o.kt)("p",null,"2.\u6536\u96c6\u5230\u7684\u4fe1\u606f\u4e2d\u6709\u54ea\u4e9b\u53ef\u53c2\u7167\u5185\u5bb9\uff1f"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"82599 \u4f7f\u7528\u5bf9\u79f0 rss_key \u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e0d\u9700\u8981\u989d\u5916\u914d\u7f6e\uff0c\u95ee\u9898\u6307\u5411 XL710 \u7f51\u5361\u7684\u7279\u6027\u3002")),(0,o.kt)("p",null,"3.\u7f51\u4e0a\u6709\u6ca1\u6709\u76f8\u5173\u4fe1\u606f\uff1f"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"XL710 \u7684 rss hash \u5b58\u5728\u95ee\u9898\uff0c\u9700\u8981\u914d\u7f6e filter_ctrl \u6765\u4f7f\u80fd\u4e00\u4e9b\u5bc4\u5b58\u5668"),"\uff0c\u7f51\u4e0a\u627e\u5230\u7684\u4ee3\u7801\u6d4b\u8bd5\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u53ef\u80fd\u5b58\u5728\u4ee3\u7801\u672c\u8eab\u95ee\u9898\u53ca\u4f7f\u7528\u95ee\u9898\u4e0a\uff0c\u9700\u8981\u60f3\u65b9\u6cd5\u786e\u8ba4\u3002")),(0,o.kt)("p",null,"4.\u662f\u5426\u80fd\u591f\u4ece\u624b\u518c\u4e2d\u627e\u5230\u4e00\u4e9b\u86db\u4e1d\u9a6c\u8ff9\uff1f"),(0,o.kt)("p",null,"\u4f7f\u7528\u624b\u518c\u4e2d\u7684 rss_key \u4ecd\u65e7\u6709\u95ee\u9898\u3002"),(0,o.kt)("p",null,"5.\u624b\u518c\u4e2d\u63d0\u5230\u7684 hash key \u7684\u6709\u6548\u6027\u9700\u8981\u786e\u8ba4"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u5f85\u786e\u8ba4")),(0,o.kt)("p",null,"6.\u4ece\u7f51\u4e0a\u8fd8\u80fd\u5426\u6536\u96c6\u5230\u66f4\u591a\u7684\u4fe1\u606f\uff1f"),(0,o.kt)("p",null,"\u8fdb\u4e00\u6b65\u641c\u7d22\uff0c\u627e\u5230 ",(0,o.kt)("a",{parentName:"p",href:"https://dev.dpdk.narkive.com/AIj6ALhm/dpdk-dev-symmetry-for-tcp-packets-on-x710-intel"},"[dpdk-dev] Symmetry for TCP packets on X710 Intel ")," \u8fd9\u4e2a\u94fe\u63a5\u3002"),(0,o.kt)("h2",{id:"\u4fe1\u606f\u6269\u5145\u73af\u8282"},"\u4fe1\u606f\u6269\u5145\u73af\u8282"),(0,o.kt)("p",null,"dpdk \u5b98\u65b9 bugzilla \u68c0\u7d22\uff1a"),(0,o.kt)("p",null,"\u7ed3\u679c\uff1a\u65e0\u76f8\u5173\u5185\u5bb9"),(0,o.kt)("h2",{id:"\u9488\u5bf9\u5206\u7247\u62a5\u6587-hash-\u5b57\u6bb5\u8bbe\u5b9a-hash_filter-\u6d4b\u8bd5\u9879\u76ee"},"\u9488\u5bf9\u5206\u7247\u62a5\u6587 hash \u5b57\u6bb5\u8bbe\u5b9a hash_filter \u6d4b\u8bd5\u9879\u76ee"),(0,o.kt)("p",null,"\u4ed4\u7ec6\u9605\u8bfb ",(0,o.kt)("a",{parentName:"p",href:"https://dev.dpdk.narkive.com/AIj6ALhm/dpdk-dev-symmetry-for-tcp-packets-on-x710-intel"},"[dpdk-dev] Symmetry for TCP packets on X710 Intel ")," \u53d1\u73b0\u4e0e\u6211\u4eec\u9047\u5230\u7684\u95ee\u9898\u975e\u5e38\u543b\u5408\u3002"),(0,o.kt)("p",null,"\u518d\u6b21\u56de\u5230\u95ee\u9898\u63cf\u8ff0\u4e0a\uff1a"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u5f53\u914d\u7f6e\u4e86 ETH_RSS_FRAG_IPV4 \u4e0e ETH_RSS_NONFRAG_IPV4_TCP \u53c2\u6570\u540e\uff0c\u4e00\u4e9b\u8fde\u63a5\u7684\u5206\u7247\u62a5\u6587\u4f1a\u88ab hash \u5230\u5176\u5b83\u961f\u5217\u4e2d\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u7531\u4e8e\u8fd9\u4e9b\u5206\u7247\u7684\u62a5\u6587\u6ca1\u6709 L4 port number"),"\u3002")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u5f53\u4f60\u4e0d\u914d\u7f6e ETH_RSS_NONFRAG_IPV4_TCP \u65f6\uff0cETH_RSS_FRAG_IPV4 \u54c8\u5e0c\u51fd\u6570\u4e0d\u4f1a\u5e94\u7528\u5230\u975e\u5206\u7247\u62a5\u6587\u4e0a\uff0c\u8fd9\u4e9b\u62a5\u6587\u5c06\u4f1a\u88ab\u6295\u9012\u5230\u961f\u5217 0\u3002")),(0,o.kt)("p",null,"\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u5206\u7247 tcp \u62a5\u6587\uff0c\u53ef\u4ee5\u8bbe\u5b9a\u975e\u5206\u7247 tcp \u62a5\u6587\u53ea\u4f7f\u7528\u6e90\u4e0e\u76ee\u7684 ip \u8fdb\u884c hash\uff0c\u601d\u8def\u6e05\u6670\u660e\u4e86\uff01"),(0,o.kt)("p",null,"\u4ece ",(0,o.kt)("a",{parentName:"p",href:"https://dev.dpdk.narkive.com/AIj6ALhm/dpdk-dev-symmetry-for-tcp-packets-on-x710-intel"},"[dpdk-dev] Symmetry for TCP packets on X710 Intel "),"  \u4e2d\u6458\u5f55\u5e76\u4fee\u6539\u4ee3\u7801\u4e3a\u5982\u4e0b\u5185\u5bb9\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'        #define UINT64_BIT (CHAR_BIT * sizeof(uint64_t))\n        #define RSS_X710_KEY_SIZE 52\n\n        static unsigned char tr_rss_key_x710[] = {\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\n            0x6d, 0x5a, 0x6d, 0x5a,\n        };\n        \n        \n        port_conf->rxmode.mq_mode = ETH_MQ_RX_RSS;\n        port_conf->rx_adv_conf.rss_conf.rss_key = tr_rss_key_x710;\n        port_conf->rx_adv_conf.rss_conf.rss_key_len = RSS_X710_KEY_SIZE;\n        port_conf.rx_adv_conf.rss_conf.rss_hf = ETH_RSS_IPV4    |               ETH_RSS_FRAG_IPV4\n| ETH_RSS_NONFRAG_IPV4_TCP | ETH_RSS_NONFRAG_IPV4_UDP |\nETH_RSS_NONFRAG_IPV4_SCTP | ETH_RSS_NONFRAG_IPV4_OTHER | ETH_RSS_IPV6 |\nETH_RSS_FRAG_IPV6 | ETH_RSS_NONFRAG_IPV6_TCP | ETH_RSS_NONFRAG_IPV6_UDP\n| ETH_RSS_NONFRAG_IPV6_SCTP | ETH_RSS_NONFRAG_IPV6_OTHER;\n        \n        struct rte_eth_hash_filter_info hinfo;\n        uint32_t idx = 0;\n        uint32_t offset = 0;\n        uint32_t ftype;\n\n        // specific commands for X710\n        // select per ipv4 tcp - src ipv4\n        memset(&hinfo, 0, sizeof (hinfo));\n        hinfo.info_type = RTE_ETH_HASH_FILTER_INPUT_SET_SELECT;\n        hinfo.info.input_set_conf.flow_type = RTE_ETH_FLOW_NONFRAG_IPV4_TCP;\n        hinfo.info.input_set_conf.field[0] = RTE_ETH_INPUT_SET_L3_SRC_IP4;\n        hinfo.info.input_set_conf.inset_size = 1;\n        hinfo.info.input_set_conf.op = RTE_ETH_INPUT_SET_SELECT;\n        ret = rte_eth_dev_filter_ctrl(portid, RTE_ETH_FILTER_HASH,\n                                RTE_ETH_FILTER_SET, &hinfo);\n        if (ret < 0)\n        {\n                printf("Failure: set select ipv4 tcp (src ipv4) for port %hhu\\n", portid);\n        }\n\n        // add per ipv4 tcp - dst ipv4\n        memset(&hinfo, 0, sizeof (hinfo));\n        hinfo.info_type = RTE_ETH_HASH_FILTER_INPUT_SET_SELECT;\n        hinfo.info.input_set_conf.flow_type = RTE_ETH_FLOW_NONFRAG_IPV4_TCP;\n        hinfo.info.input_set_conf.field[0] = RTE_ETH_INPUT_SET_L3_DST_IP4;\n        hinfo.info.input_set_conf.inset_size = 1;\n        hinfo.info.input_set_conf.op = RTE_ETH_INPUT_SET_ADD;\n        ret = rte_eth_dev_filter_ctrl(portid, RTE_ETH_FILTER_HASH,\n                    RTE_ETH_FILTER_SET, &hinfo);\n        if (ret < 0)\n        {\n            printf("Failure: set add ipv4 tcp (dst ipv4) for port %hhu\\n", portid);\n        }\n\n        // hash global config ipv4 tcp\n        memset(&hinfo, 0, sizeof (hinfo));\n        hinfo.info_type = RTE_ETH_HASH_FILTER_GLOBAL_CONFIG;\n        hinfo.info.global_conf.hash_func = RTE_ETH_HASH_FUNCTION_DEFAULT;\n        ftype = RTE_ETH_FLOW_NONFRAG_IPV4_TCP;\n        idx = ftype / UINT64_BIT;\n        offset = ftype % UINT64_BIT;\n        hinfo.info.global_conf.valid_bit_mask[idx] |= (1ULL << offset);\n        hinfo.info.global_conf.sym_hash_enable_mask[idx] |= (1ULL << offset);\n        ret = rte_eth_dev_filter_ctrl(portid, RTE_ETH_FILTER_HASH,\n                RTE_ETH_FILTER_SET, &hinfo);\n        if (ret < 0)\n        {\n            printf("Cannot set global hash configurations for port %hhu protoipv4 tcp\\n", portid);\n        }\n')),(0,o.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u4e2d filter_ctrl \u8bbe\u5b9a\u4ee3\u7801\u653e\u5230 tx \u4e0e rx queue setup \u4e4b\u540e\u6267\u884c\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u6d4b\u8bd5\u786e\u8ba4 ipv4 tcp \u5206\u7247\u62a5\u6587\u6b63\u5e38 hash!")),(0,o.kt)("p",null,"\u5bf9\u4e8e ipv6 tcp \u5206\u7247\u62a5\u6587 hash\uff0c\u53ef\u4ee5\u53c2\u7167\u4e0a\u8ff0\u8fc7\u7a0b\u914d\u7f6e RTE_ETH_FLOW_NONFRAG_IPV6_TCP flow type\uff0c\u5b9e\u6d4b\u6709\u6548\uff01"))}c.isMDXComponent=!0}}]);