"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[2155],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return u}});var s=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,s)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,s,r=function(t,e){if(null==t)return{};var n,s,r={},a=Object.keys(t);for(s=0;s<a.length;s++)n=a[s],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(s=0;s<a.length;s++)n=a[s],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=s.createContext({}),o=function(t){var e=s.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},d=function(t){var e=o(t.components);return s.createElement(c.Provider,{value:e},t.children)},_={inlineCode:"code",wrapper:function(t){var e=t.children;return s.createElement(s.Fragment,{},e)}},l=s.forwardRef((function(t,e){var n=t.components,r=t.mdxType,a=t.originalType,c=t.parentName,d=p(t,["components","mdxType","originalType","parentName"]),l=o(n),u=r,k=l["".concat(c,".").concat(u)]||l[u]||_[u]||a;return n?s.createElement(k,i(i({ref:e},d),{},{components:n})):s.createElement(k,i({ref:e},d))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=n.length,i=new Array(a);i[0]=l;var p={};for(var c in e)hasOwnProperty.call(e,c)&&(p[c]=e[c]);p.originalType=t,p.mdxType="string"==typeof t?t:r,i[1]=p;for(var o=2;o<a;o++)i[o]=n[o];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}l.displayName="MDXCreateElement"},2850:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return _}});var s=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],p={},c="dpdk \u95ee\u9898\u5206\u6790\uff1aice 100G \u7f51\u5361 rx_packets \u4e0e rx_bytes \u7edf\u8ba1\u95ee\u9898",o={unversionedId:"\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u95ee\u9898\u6848\u4f8b/\u63a5\u53e3\u95ee\u9898/dpdk \u95ee\u9898\u5206\u6790\uff1aice 100G \u7f51\u5361 rx_packets \u4e0e rx_bytes \u7edf\u8ba1\u95ee\u9898",id:"\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u95ee\u9898\u6848\u4f8b/\u63a5\u53e3\u95ee\u9898/dpdk \u95ee\u9898\u5206\u6790\uff1aice 100G \u7f51\u5361 rx_packets \u4e0e rx_bytes \u7edf\u8ba1\u95ee\u9898",title:"dpdk \u95ee\u9898\u5206\u6790\uff1aice 100G \u7f51\u5361 rx_packets \u4e0e rx_bytes \u7edf\u8ba1\u95ee\u9898",description:"\u95ee\u9898\u63cf\u8ff0",source:"@site/docs/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u95ee\u9898\u6848\u4f8b/\u63a5\u53e3\u95ee\u9898/dpdk \u95ee\u9898\u5206\u6790\uff1aice 100G \u7f51\u5361 rx_packets \u4e0e rx_bytes \u7edf\u8ba1\u95ee\u9898.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u95ee\u9898\u6848\u4f8b/\u63a5\u53e3\u95ee\u9898",slug:"/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u95ee\u9898\u6848\u4f8b/\u63a5\u53e3\u95ee\u9898/dpdk \u95ee\u9898\u5206\u6790\uff1aice 100G \u7f51\u5361 rx_packets \u4e0e rx_bytes \u7edf\u8ba1\u95ee\u9898",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u95ee\u9898\u6848\u4f8b/\u63a5\u53e3\u95ee\u9898/dpdk \u95ee\u9898\u5206\u6790\uff1aice 100G \u7f51\u5361 rx_packets \u4e0e rx_bytes \u7edf\u8ba1\u95ee\u9898",draft:!1,editUrl:"https://github.com/longyuwlz/longyu.github.io/docs/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u95ee\u9898\u6848\u4f8b/\u63a5\u53e3\u95ee\u9898/dpdk \u95ee\u9898\u5206\u6790\uff1aice 100G \u7f51\u5361 rx_packets \u4e0e rx_bytes \u7edf\u8ba1\u95ee\u9898.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Unsupported SFP+ Module",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u95ee\u9898\u6848\u4f8b/\u63a5\u53e3\u95ee\u9898/Unsupported SFP+ Module"},next:{title:"dpdk \u95ee\u9898\u5206\u6790\uff1a\u4e0d\u517c\u5bb9\u5149\u6a21\u5757\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\u95ee\u9898\u5b9a\u4f4d",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u95ee\u9898\u6848\u4f8b/\u63a5\u53e3\u95ee\u9898/dpdk \u95ee\u9898\u5206\u6790\uff1a\u4e0d\u517c\u5bb9\u5149\u6a21\u5757\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\u95ee\u9898\u5b9a\u4f4d"}},d={},_=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u624b\u518c\u4e2d\u7684\u76f8\u5173\u4fe1\u606f",id:"\u624b\u518c\u4e2d\u7684\u76f8\u5173\u4fe1\u606f",level:2},{value:"dpdk-20.11 ice \u9a71\u52a8\u4ee3\u7801\u5206\u6790",id:"dpdk-2011-ice-\u9a71\u52a8\u4ee3\u7801\u5206\u6790",level:2},{value:"\u89e3\u51b3\u65b9\u6cd5",id:"\u89e3\u51b3\u65b9\u6cd5",level:2}],l={toc:_};function u(t){var e=t.components,n=(0,r.Z)(t,i);return(0,a.kt)("wrapper",(0,s.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dpdk-\u95ee\u9898\u5206\u6790ice-100g-\u7f51\u5361-rx_packets-\u4e0e-rx_bytes-\u7edf\u8ba1\u95ee\u9898"},"dpdk \u95ee\u9898\u5206\u6790\uff1aice 100G \u7f51\u5361 rx_packets \u4e0e rx_bytes \u7edf\u8ba1\u95ee\u9898"),(0,a.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"ipackets \u51cf\u6389 imissed \u7edf\u8ba1\u7684\u95ee\u9898\nice 100G \u7f51\u5361\u83b7\u53d6\u7684 ipackets \u4f1a\u51cf\u6389 imissed \u7684\u62a5\u6587\uff0c\u6b64\u65f6\u7edf\u8ba1\u7684\u662f",(0,a.kt)("strong",{parentName:"p"},"\u8f6f\u4ef6\u5b9e\u9645\u4ece\u7f51\u5361\u6536\u5305\u7684 pps"),"\uff0c\u4f46",(0,a.kt)("strong",{parentName:"p"},"\u6536\u5305\u7684 bps \u4e2d\u6ca1\u6709\u51cf\u6389\u8fd9\u90e8\u5206\u62a5\u6587\u957f\u5ea6"),"\u4e14\u786c\u4ef6\u4e0d\u80fd\u63d0\u4f9b\u8fd9\u90e8\u5206\u4fe1\u606f\u7528\u4e8e\u8ba1\u7b97\uff0c\u4e3a\u6b64\u5c4f\u853d ipackets \u4e2d\u51cf\u6389 imissed \u62a5\u6587\u7684\u7edf\u8ba1\u4ee5\u4fee\u590d pps \u663e\u793a\u95ee\u9898\u3002")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"ibytes \u6bcf\u4e2a\u62a5\u6587\u51cf\u6389 crc \u957f\u5ea6\u5bfc\u81f4\u663e\u793a\u5e26\u5bbd\u53d8\u5c11\u95ee\u9898\nice 100G \u7f51\u5361 ibytes \u7edf\u8ba1\u4f1a\u4e3a\u6bcf\u4e2a\u62a5\u6587\u51cf\u6389 crc \u957f\u5ea6\uff0cbps \u53d8\u5c0f\u3002"))),(0,a.kt)("h2",{id:"\u624b\u518c\u4e2d\u7684\u76f8\u5173\u4fe1\u606f"},"\u624b\u518c\u4e2d\u7684\u76f8\u5173\u4fe1\u606f"),(0,a.kt)("p",null,"\u63a5\u53e3\u6536\u5230\u7684\u6b63\u786e\u62a5\u6587\u5b57\u8282\u7edf\u8ba1\uff1a"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/1744616813c44ea5bf64683006062ad6.png",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"}),(0,a.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/1bd8d0fd18db4926a7ff409232e1065f.png",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"}),"vsi \u6536\u5230\u7684\u6b63\u786e\u7684\u62a5\u6587\u7edf\u8ba1\uff1a\n",(0,a.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/457d38d2252c4ab0a22be3d7d5c39da8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})),(0,a.kt)("h2",{id:"dpdk-2011-ice-\u9a71\u52a8\u4ee3\u7801\u5206\u6790"},"dpdk-20.11 ice \u9a71\u52a8\u4ee3\u7801\u5206\u6790"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"ice_stats_get \u51fd\u6570\u4ee3\u7801\uff1a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"/* Get all statistics of a port */\nstatic int\nice_stats_get(struct rte_eth_dev *dev, struct rte_eth_stats *stats)\n{\n        struct ice_pf *pf = ICE_DEV_PRIVATE_TO_PF(dev->data->dev_private);\n        struct ice_hw *hw = ICE_DEV_PRIVATE_TO_HW(dev->data->dev_private);\n        struct ice_hw_port_stats *ns = &pf->stats; /* new stats */\n\n        /* call read registers - updates values, now write them to struct */\n        ice_read_stats_registers(pf, hw);\n\n        stats->ipackets = pf->main_vsi->eth_stats.rx_unicast +\n                          pf->main_vsi->eth_stats.rx_multicast +\n                          pf->main_vsi->eth_stats.rx_broadcast -\n                          pf->main_vsi->eth_stats.rx_discards;\n        stats->opackets = ns->eth.tx_unicast +\n                          ns->eth.tx_multicast +\n                          ns->eth.tx_broadcast;\n        stats->ibytes   = pf->main_vsi->eth_stats.rx_bytes;\n        stats->obytes   = ns->eth.tx_bytes;\n        stats->oerrors  = ns->eth.tx_errors +\n                          pf->main_vsi->eth_stats.tx_errors;\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"ibytes \u4e3a\u8f93\u51fa\u7684\u503c\uff0c\u4ece pf->main_vsi->eth_stats.rx_bytes \u5b57\u6bb5\u4e2d\u83b7\u53d6\u3002")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"ice_read_stats_registers")," \u51fd\u6570\u4e2d\u4ece\u5bc4\u5b58\u5668\u4e2d\u8bfb\u53d6\u6536\u53d1\u5305\u5b57\u8282\u957f\u5ea6\uff0c\u6b64\u51fd\u6570\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"struct ice_hw_port_stats *ns = &pf->stats; /* new stats */\n        struct ice_hw_port_stats *os = &pf->stats_offset; /* old stats */\n\n        /* Get statistics of struct ice_eth_stats */\n        ice_stat_update_40(hw, GLPRT_GORCH(hw->port_info->lport),\n                           GLPRT_GORCL(hw->port_info->lport),\n                           pf->offset_loaded, &os->eth.rx_bytes,\n                           &ns->eth.rx_bytes);\n\n.........\n\n/* Workaround: CRC size should not be included in byte statistics,\n         * so subtract RTE_ETHER_CRC_LEN from the byte counter for each rx\n         * packet.\n         * Add crc len size because it's not be included in ns->eth.rx_bytes!\n         */\n        /*\n        ns->eth.rx_bytes -= (ns->eth.rx_unicast + ns->eth.rx_multicast +\n                             ns->eth.rx_broadcast) * RTE_ETHER_CRC_LEN;\n        */\n")),(0,a.kt)("p",null,"\u8bfb\u53d6\u53d1\u5305\u5b57\u8282\u957f\u5ea6\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"ice_stat_update_40(hw, GLPRT_GOTCH(hw->port_info->lport),\n                           GLPRT_GOTCL(hw->port_info->lport),\n                           pf->offset_loaded, &os->eth.tx_bytes,\n                           &ns->eth.tx_bytes);\n")),(0,a.kt)("p",null,"\u5f53 ",(0,a.kt)("strong",{parentName:"p"},"pf->main_vsi")," \u5b58\u5728\u65f6\uff0c\u8c03\u7528 ",(0,a.kt)("strong",{parentName:"p"},"ice_update_vsi_stats")," \u7ee7\u7eed\u83b7\u53d6 ",(0,a.kt)("strong",{parentName:"p"},"vsi")," \u7684\u7edf\u8ba1\u4fe1\u606f\u3002\u76f8\u5173\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"static void\nice_update_vsi_stats(struct ice_vsi *vsi)\n{\n        struct ice_eth_stats *oes = &vsi->eth_stats_offset;\n        struct ice_eth_stats *nes = &vsi->eth_stats;\n        struct ice_hw *hw = ICE_VSI_TO_HW(vsi);\n        int idx = rte_le_to_cpu_16(vsi->vsi_id);\n\n        ice_stat_update_40(hw, GLV_GORCH(idx), GLV_GORCL(idx),\n                           vsi->offset_loaded, &oes->rx_bytes,\n                           &nes->rx_bytes);\n\n.........\n\nvsi->old_rx_bytes = nes->rx_bytes;\n        /* exclude CRC bytes */\n        nes->rx_bytes -= (nes->rx_unicast + nes->rx_multicast +\n                          nes->rx_broadcast) * RTE_ETHER_CRC_LEN;\n")),(0,a.kt)("p",null,"ice \u9a71\u52a8\u4e2d\uff0cibytes \u662f\u4f7f\u7528 ",(0,a.kt)("strong",{parentName:"p"},"ice_update_vsi_stats")," \u4e2d\u83b7\u53d6\u7684 ",(0,a.kt)("strong",{parentName:"p"},"pf->vsi->eth_stats->rx_bytes")," \u7684\u503c\uff0c\u6b64\u503c\u4e3a\u6bcf\u4e2a\u6536\u5230\u7684\u62a5\u6587\u51cf\u6389\u4e86 crc len \u957f\u5ea6\u3002"),(0,a.kt)("h2",{id:"\u89e3\u51b3\u65b9\u6cd5"},"\u89e3\u51b3\u65b9\u6cd5"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u53bb\u6389 ipackets \u51cf\u6389 rx_discards \u7edf\u8ba1\u7684\u903b\u8f91"),(0,a.kt)("li",{parentName:"ol"},"\u5c06 ibytes \u7684\u6570\u636e\u6e90\u4fee\u6539\u4e3a ns->eth.rx_bytes \u5e76\u53bb\u6389\u4e3a\u6bcf\u4e2a\u62a5\u6587\u51cf\u6389 crc len \u7684\u903b\u8f91\u3002")))}u.isMDXComponent=!0}}]);