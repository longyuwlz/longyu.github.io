"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[5258],{3905:function(e,n,i){i.d(n,{Zo:function(){return d},kt:function(){return u}});var t=i(7294);function c(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){c(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function l(e,n){if(null==e)return{};var i,t,c=function(e,n){if(null==e)return{};var i,t,c={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(c[i]=e[i]);return c}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(c[i]=e[i])}return c}var p=t.createContext({}),s=function(e){var n=t.useContext(p),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},d=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},o={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},_=t.forwardRef((function(e,n){var i=e.components,c=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),_=s(i),u=c,v=_["".concat(p,".").concat(u)]||_[u]||o[u]||r;return i?t.createElement(v,a(a({ref:n},d),{},{components:i})):t.createElement(v,a({ref:n},d))}));function u(e,n){var i=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var r=i.length,a=new Array(r);a[0]=_;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:c,a[1]=l;for(var s=2;s<r;s++)a[s]=i[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,i)}_.displayName="MDXCreateElement"},7974:function(e,n,i){i.r(n),i.d(n,{assets:function(){return d},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return o}});var t=i(7462),c=i(3366),r=(i(7294),i(3905)),a=["components"],l={},p="lspci \u4e0e setpci",s={unversionedId:"\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/setpci \u547d\u4ee4\u4e0e\u5185\u6838 pci_enable_device \u4e0e pci_disable_device \u51fd\u6570",id:"\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/setpci \u547d\u4ee4\u4e0e\u5185\u6838 pci_enable_device \u4e0e pci_disable_device \u51fd\u6570",title:"lspci \u4e0e setpci",description:"lspci -nvv \u67e5\u770b\u5230\u7684\u90e8\u5206\u4fe1\u606f\uff1a",source:"@site/docs/\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/setpci \u547d\u4ee4\u4e0e\u5185\u6838 pci_enable_device \u4e0e pci_disable_device \u51fd\u6570.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790",slug:"/\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/setpci \u547d\u4ee4\u4e0e\u5185\u6838 pci_enable_device \u4e0e pci_disable_device \u51fd\u6570",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/setpci \u547d\u4ee4\u4e0e\u5185\u6838 pci_enable_device \u4e0e pci_disable_device \u51fd\u6570",draft:!1,editUrl:"https://github.com/longyuwlz/longyu.github.io/docs/\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/setpci \u547d\u4ee4\u4e0e\u5185\u6838 pci_enable_device \u4e0e pci_disable_device \u51fd\u6570.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"pciutils \u529f\u80fd\u53ca\u5176\u5b9e\u73b0\u5206\u6790",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/pciutils \u529f\u80fd\u53ca\u5176\u5b9e\u73b0\u5206\u6790"},next:{title:"shell umask \u5185\u5efa\u547d\u4ee4\u7684\u539f\u7406\u53ca\u5176\u80cc\u540e\u7684\u5185\u6838\u6001\u884c\u4e3a",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/shell umask \u5185\u5efa\u547d\u4ee4\u7684\u539f\u7406\u53ca\u5176\u80cc\u540e\u7684\u5185\u6838\u6001\u884c\u4e3a"}},d={},o=[{value:"1. \u67e5\u770b setpci \u652f\u6301\u8bfb\u53d6\u7684 pci \u914d\u7f6e\u7a7a\u95f4\u5bc4\u5b58\u5668",id:"1-\u67e5\u770b-setpci-\u652f\u6301\u8bfb\u53d6\u7684-pci-\u914d\u7f6e\u7a7a\u95f4\u5bc4\u5b58\u5668",level:2},{value:"2. \u8bfb\u53d6\u76f8\u5173\u5b57\u6bb5\u914d\u7f6e\u7a7a\u95f4\u7684\u503c",id:"2-\u8bfb\u53d6\u76f8\u5173\u5b57\u6bb5\u914d\u7f6e\u7a7a\u95f4\u7684\u503c",level:2},{value:"1. pci_enable_device",id:"1-pci_enable_device",level:2},{value:"pci_enable_device_flags",id:"pci_enable_device_flags",level:2},{value:"do_pci_enable_device \u51fd\u6570\u4e3b\u8981\u4ee3\u7801",id:"do_pci_enable_device-\u51fd\u6570\u4e3b\u8981\u4ee3\u7801",level:2},{value:"pci_disable_device \u51fd\u6570",id:"pci_disable_device-\u51fd\u6570",level:2},{value:"do_pci_disable_device \u51fd\u6570",id:"do_pci_disable_device-\u51fd\u6570",level:2}],_={toc:o};function u(e){var n=e.components,i=(0,c.Z)(e,a);return(0,r.kt)("wrapper",(0,t.Z)({},_,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lspci-\u4e0e-setpci"},"lspci \u4e0e setpci"),(0,r.kt)("p",null,"lspci -nvv \u67e5\u770b\u5230\u7684\u90e8\u5206\u4fe1\u606f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"01:00.0 0200: 1af4:1041 (rev 01)\n       Subsystem: 1af4:1100\n        Physical Slot: 0\n        Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx+\n        Status: Cap+ 66MHz- UDF- FastB2B- ParErr- DEVSEL=fast >TAbort- <TAbort- <MAbort- >SERR- <PERR- INTx-\n")),(0,r.kt)("p",null,"lspci \u901a\u8fc7\u8bfb\u53d6\u63a5\u53e3\u7684 pci \u914d\u7f6e\u7a7a\u95f4\u83b7\u53d6",(0,r.kt)("strong",{parentName:"p"},"\u6e90\u4fe1\u606f"),"\uff0c\u7136\u540e\u8fdb\u884c",(0,r.kt)("strong",{parentName:"p"},"\u89e3\u6790"),"\u5e76\u8f93\u51fa\u89e3\u6790\u7684\u7ed3\u679c\u3002setpci \u53ef\u4ee5\u7528\u6765",(0,r.kt)("strong",{parentName:"p"},"\u8bfb\u53d6\u3001\u4fee\u6539"),"\u63a5\u53e3 pci \u914d\u7f6e\u7a7a\u95f4\u7684\u5185\u5bb9\u3002"),(0,r.kt)("p",null,"\u4e0b\u9762\u6211\u4f7f\u7528 setpci \u8bfb\u53d6\u4e0a\u8ff0 lspci -nvv \u8f93\u51fa\u8bbf\u95ee\u7684\u4e00\u4e9b pci \u914d\u7f6e\u7a7a\u95f4\u5185\u5bb9\u3002"),(0,r.kt)("h1",{id:"\u4f7f\u7528-setpci-\u8bfb\u53d6-pci-\u914d\u7f6e\u7a7a\u95f4"},"\u4f7f\u7528 setpci \u8bfb\u53d6 pci \u914d\u7f6e\u7a7a\u95f4"),(0,r.kt)("h2",{id:"1-\u67e5\u770b-setpci-\u652f\u6301\u8bfb\u53d6\u7684-pci-\u914d\u7f6e\u7a7a\u95f4\u5bc4\u5b58\u5668"},"1. \u67e5\u770b setpci \u652f\u6301\u8bfb\u53d6\u7684 pci \u914d\u7f6e\u7a7a\u95f4\u5bc4\u5b58\u5668"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"root@virt-debian10:/home/longyu# setpci --dumpregs | head -n 10\ncap pos w name\n     00 W VENDOR_ID\n     02 W DEVICE_ID\n     04 W COMMAND\n     06 W STATUS\n     08 B REVISION\n     09 B CLASS_PROG\n     0a W CLASS_DEVICE\n     0c B CACHE_LINE_SIZE\n     0d B LATENCY_TIMER\n")),(0,r.kt)("p",null,"\u7b2c\u4e00\u5217\u8868\u793a\u504f\u79fb\u91cf\uff0c\u7b2c\u4e8c\u5217\u8868\u793a\u6570\u636e\u7684\u957f\u5ea6\uff08W \u8868\u793a\u4e00\u4e2a\u5b57\u957f\u5373\u4e24\u4e2a\u5b57\u8282\u957f\u5ea6\uff0cB \u8868\u793a\u4e00\u4e2a\u5b57\u8282\u957f\u5ea6\uff09\uff0c\u7b2c\u4e09\u5217\u8868\u793a\u6570\u636e\u5b57\u6bb5\u7684\u540d\u79f0\u3002\u4f8b\u5982 0x00 \u5904\u7684\u4e00\u4e2a\u5b57\u4e3a vendor id \u7684\u503c\uff0c0x02 \u5904\u7684\u4e00\u4e2a\u5b57\u4e3a device id \u7684\u503c\uff0c0x04 \u5904\u5219\u4e3a COMMAND \u7684\u503c\u7b49\u7b49\u3002"),(0,r.kt)("h2",{id:"2-\u8bfb\u53d6\u76f8\u5173\u5b57\u6bb5\u914d\u7f6e\u7a7a\u95f4\u7684\u503c"},"2. \u8bfb\u53d6\u76f8\u5173\u5b57\u6bb5\u914d\u7f6e\u7a7a\u95f4\u7684\u503c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"root@virt-debian10:/home/longyu# setpci -s 01:00.0 00.w\n1af4\nroot@virt-debian10:/home/longyu# setpci -s 01:00.0 02.w\n1041\nroot@virt-debian10:/home/longyu# setpci -s 01:00.0 04.w\n0507\nroot@virt-debian10:/home/longyu# setpci -s 01:00.0 06.w\n0010\nroot@virt-debian10:/home/longyu# setpci -s 01:00.0 08.b\n01\nroot@virt-debian10:/home/longyu# setpci -s 01:00.0 09.b\n00\nroot@virt-debian10:/home/longyu# setpci -s 01:00.0 0a.w\n0200\nroot@virt-debian10:/home/longyu# setpci -s 01:00.0 0c.b\n00\nroot@virt-debian10:/home/longyu# setpci -s 01:00.0 0d.b\n00\n")),(0,r.kt)("p",null,"\u4e0a\u8ff0\u547d\u4ee4\u884c\u4e2d\uff0c-s \u6307\u5b9a\u8bbf\u95ee\u7684 pci \u8bbe\u5907\uff0cxxx.","[wb]"," \u8868\u793a\u9700\u8981\u8bfb\u53d6\u7684\u914d\u7f6e\u7a7a\u95f4\u504f\u79fb\u91cf\u4e0e\u957f\u5ea6\uff0c\u53ef\u4ee5\u770b\u5230\u8bfb\u53d6\u7684\u503c\u4e0e\u6587\u9996 lspci -nvv \u7684\u90e8\u5206\u8f93\u51fa\uff08vendor id\u3001device id\uff09\u4e00\u81f4\u3002"),(0,r.kt)("h1",{id:"\u4f7f\u7528-setpci-\u5199\u5165-pci-\u914d\u7f6e\u7a7a\u95f4\u5bc4\u5b58\u5668"},"\u4f7f\u7528 setpci \u5199\u5165 pci \u914d\u7f6e\u7a7a\u95f4\u5bc4\u5b58\u5668"),(0,r.kt)("p",null,"\u8fd9\u91cc\u6211\u4ee5\u5199\u5165 pci \u914d\u7f6e\u7a7a\u95f4 COMMAND \u5bc4\u5b58\u5668\u4e3a\u4f8b\u8fdb\u884c\u63cf\u8ff0\u3002"),(0,r.kt)("p",null,"\u5199\u5165\u524d\u7684 pci \u914d\u7f6e\u7a7a\u95f4 command \u5bc4\u5b58\u5668\u4fe1\u606f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"    Control: I/O+ Mem+ BusMaster+ SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR+ FastB2B- DisINTx+\n")),(0,r.kt)("p",null,"\u6267\u884c\u5199\u5165\u547d\u4ee4\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"root@virt-debian10:/home/longyu# setpci  -s 01:00.0 04.W=0\n")),(0,r.kt)("p",null,"setpci \u8bfb\u53d6\u5199\u5165\u4fe1\u606f\u786e\u8ba4\u5199\u5165\u751f\u6548\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"root@virt-debian10:/home/longyu# setpci -s 08:00.0 04.W\n0000\n")),(0,r.kt)("p",null,"\u91cd\u65b0\u67e5\u770b lspci \u663e\u793a\u4fe1\u606f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"    Control: I/O- Mem- BusMaster- SpecCycle- MemWINV- VGASnoop- ParErr- Stepping- SERR- FastB2B- DisINTx-\n")),(0,r.kt)("p",null,"\u80fd\u591f\u770b\u5230\u5199\u5165\u751f\u6548\u4e86\u3002\u6ce8\u610f",(0,r.kt)("strong",{parentName:"p"},"\u4e0d\u8981\u5199\u5165"),"\u4e00\u4e2a\u3010\u6b63\u5728\u4f7f\u7528\u3011\u7684 pci \u7f51\u5361\u7684\u4e0a\u8ff0 ",(0,r.kt)("strong",{parentName:"p"},"COMMAND")," \u914d\u7f6e\u7a7a\u95f4\u5bc4\u5b58\u5668\uff0c\u4e00\u65e6\u5199\u5165\u4f1a\u9020\u6210\u7f51\u5361\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002"),(0,r.kt)("h1",{id:"pci_enable_device-\u4e0e-pci_disable_device-\u5bf9-pci-\u914d\u7f6e\u7a7a\u95f4\u7684\u8bbe\u5b9a"},"pci_enable_device \u4e0e pci_disable_device \u5bf9 pci \u914d\u7f6e\u7a7a\u95f4\u7684\u8bbe\u5b9a"),(0,r.kt)("p",null,"\u4e0b\u6587\u4e2d\u7684\u4ee3\u7801\u6458\u81ea ",(0,r.kt)("strong",{parentName:"p"},"3.16.35")," \u5185\u6838\u3002"),(0,r.kt)("h2",{id:"1-pci_enable_device"},"1. pci_enable_device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"/**\n * pci_enable_device - Initialize device before it's used by a driver.\n * @dev: PCI device to be initialized\n *\n *  Initialize device before it's used by a driver. Ask low-level code\n *  to enable I/O and memory. Wake up the device if it was suspended.\n *  Beware, this function can fail.\n *\n *  Note we don't actually enable the device many times if we call\n *  this function repeatedly (we just increment the count).\n */\nint pci_enable_device(struct pci_dev *dev)\n{\n        return pci_enable_device_flags(dev, IORESOURCE_MEM | IORESOURCE_IO);\n}\nEXPORT_SYMBOL(pci_enable_device);\n")),(0,r.kt)("h2",{id:"pci_enable_device_flags"},"pci_enable_device_flags"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"static int pci_enable_device_flags(struct pci_dev *dev, unsigned long flags)\n{\n        struct pci_dev *bridge;\n        int err;\n        int i, bars = 0;\n\n        /*\n         * Power state could be unknown at this point, either due to a fresh\n         * boot or a device removal call.  So get the current power state\n         * so that things like MSI message writing will behave as expected\n         * (e.g. if the device really is in D0 at enable time).\n         */\n        if (dev->pm_cap) {\n                u16 pmcsr;\n                pci_read_config_word(dev, dev->pm_cap + PCI_PM_CTRL, &pmcsr);\n                dev->current_state = (pmcsr & PCI_PM_CTRL_STATE_MASK);\n        }\n\n        if (atomic_inc_return(&dev->enable_cnt) > 1)\n                return 0;               /* already enabled */\n\n.........\n\n        /* only skip sriov related */\n        for (i = 0; i <= PCI_ROM_RESOURCE; i++)\n                if (dev->resource[i].flags & flags)\n                        bars |= (1 << i);\n        for (i = PCI_BRIDGE_RESOURCES; i < DEVICE_COUNT_RESOURCE; i++)\n                if (dev->resource[i].flags & flags)\n                        bars |= (1 << i);\n\n        err = do_pci_enable_device(dev, bars);\n        if (err < 0)\n                atomic_dec(&dev->enable_cnt);\n")),(0,r.kt)("p",null,"\u6b64\u51fd\u6570\u4e2d\u4f1a\u4f7f\u7528\u6bcf\u4e2a\u8bbe\u5907\u7684\u4f7f\u80fd\u8ba1\u6570\u5224\u5b9a\u662f\u5426\u5df2\u7ecf\u4f7f\u80fd\u8fc7\uff0c",(0,r.kt)("strong",{parentName:"p"},"\u5df2\u7ecf\u4f7f\u80fd\u8fc7\u5219\u4e0d\u518d\u4f7f\u80fd"),"\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\u6b64\u51fd\u6570\u6838\u5fc3\u5728\u4e8e\u8c03\u7528 do_pci_enable_device \u51fd\u6570\u3002"),(0,r.kt)("h2",{id:"do_pci_enable_device-\u51fd\u6570\u4e3b\u8981\u4ee3\u7801"},"do_pci_enable_device \u51fd\u6570\u4e3b\u8981\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"static int do_pci_enable_device(struct pci_dev *dev, int bars)\n{\n        int err;\n        struct pci_dev *bridge;\n        u16 cmd;\n        u8 pin;\n\n        err = pci_set_power_state(dev, PCI_D0);\n        if (err < 0 && err != -EIO)\n                return err;\n\n.........\n\n        err = pcibios_enable_device(dev, bars);\n        if (err < 0)\n                return err;\n        pci_fixup_device(pci_fixup_enable, dev);\n\n        if (dev->msi_enabled || dev->msix_enabled)\n                return 0;\n\n        pci_read_config_byte(dev, PCI_INTERRUPT_PIN, &pin);\n        if (pin) {\n                pci_read_config_word(dev, PCI_COMMAND, &cmd);\n                if (cmd & PCI_COMMAND_INTX_DISABLE)\n                        pci_write_config_word(dev, PCI_COMMAND,\n                                              cmd & ~PCI_COMMAND_INTX_DISABLE);\n        }\n\n        return 0;\n}\n")),(0,r.kt)("p",null,"do_pci_enable_device \u51fd\u6570\u9996\u5148\u8bbe\u5b9a\u8bbe\u5907\u7684\u7535\u6e90\u72b6\u6001\u4e3a ",(0,r.kt)("strong",{parentName:"p"},"PCI_D0")," \u72b6\u6001\u3002\u7136\u540e\u9996\u5148\u8c03\u7528 ",(0,r.kt)("strong",{parentName:"p"},"pcibios_enable_device")," \u505a\u4e00\u4e9b\u3010\u67b6\u6784\u76f8\u5173\u3011\u7684 pci \u8bbe\u5907\u4f7f\u80fd\u64cd\u4f5c\u3002"),(0,r.kt)("p",null,"\u4e2d\u95f4\u8df3\u8fc7\u4e86\u6211\u4e0d\u592a\u719f\u6089\u7684 pci \u6865\u7684\u914d\u7f6e\u903b\u8f91\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"pci_fixup_device")," \u7528\u4e8e\u4fee\u590d\u4e00\u4e9b\u53ef\u6062\u590d\u7684\u9519\u8bef\u3002\u6b64\u540e\u5bf9\u4e8e\u672a\u4f7f\u80fd msi \u4e0e misx \u7684 pci \u8bbe\u5907\uff0c\u8bfb\u53d6 pci \u914d\u7f6e\u7a7a\u95f4\u4e2d\u7684\u4e2d\u65ad\u5f15\u811a\u3002\u5f53\u8bbe\u5907\u7ed1\u5b9a\u5230\u4e00\u4e2a\u4e2d\u65ad\u5f15\u811a\u4e0a\u65f6\uff0c\u8bfb\u53d6 PCI \u914d\u7f6e\u7a7a\u95f4\u7684\u63a7\u5236\u5b57\u8282 04 \u504f\u79fb\u5904\u7684\u4e00\u4e2a\u5b57\u8282\uff0c\u6839\u636e\u8bfb\u53d6\u7684\u7ed3\u679c\u5224\u65ad INTX \u662f\u5426\u5f00\u542f\uff0c\u672a\u5f00\u542f\uff0c\u5219\u4f7f\u80fd INTX \u4e2d\u65ad\u3002"),(0,r.kt)("h2",{id:"pci_disable_device-\u51fd\u6570"},"pci_disable_device \u51fd\u6570"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'/**\n * pci_disable_device - Disable PCI device after use\n * @dev: PCI device to be disabled\n *\n * Signal to the system that the PCI device is not in use by the system\n * anymore.  This only involves disabling PCI bus-mastering, if active.\n *\n * Note we don\'t actually disable the device until all callers of\n * pci_enable_device() have called pci_disable_device().\n */\nvoid pci_disable_device(struct pci_dev *dev)\n{\n        struct pci_devres *dr;\n\n        dr = find_pci_dr(dev);\n        if (dr)\n                dr->enabled = 0;\n\n        dev_WARN_ONCE(&dev->dev, atomic_read(&dev->enable_cnt) <= 0,\n                      "disabling already-disabled device");\n\n        if (atomic_dec_return(&dev->enable_cnt) != 0)\n                return;\n\n        do_pci_disable_device(dev);\n\n        dev->is_busmaster = 0;\n}\nEXPORT_SYMBOL(pci_disable_device);\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"pci_disable_device")," \u7528\u4e8e\u3010\u7981\u7528\u3011\u4e00\u4e2a pci \u8bbe\u5907\uff0c\u5f53\u8bbe\u5907\u5df2\u7ecf\u88ab\u7981\u7528\u65f6\uff0c\u4f1a\u6253\u5370\u7981\u7528\u4e00\u4e2a\u5df2\u7ecf\u7981\u7528\u8fc7\u7684\u8bbe\u5907\u7684 oops \u544a\u8b66\u4fe1\u606f\u3002"),(0,r.kt)("p",null,"\u6b64\u540e\u8bfb\u53d6\u4f7f\u80fd\u6807\u8bb0\uff0c\u539f\u5b50\u51cf 1 \u540e\u4e0d\u4e3a 0 \u65f6\u6b64\u51fd\u6570\u76f4\u63a5\u8fd4\u56de\u3002\u6b63\u5e38\u6d41\u7a0b\u7ee7\u7eed\u8c03\u7528 do_pci_disable_device \u51fd\u6570\u3002"),(0,r.kt)("h2",{id:"do_pci_disable_device-\u51fd\u6570"},"do_pci_disable_device \u51fd\u6570"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"static void do_pci_disable_device(struct pci_dev *dev)\n{\n        u16 pci_command;\n\n        pci_read_config_word(dev, PCI_COMMAND, &pci_command);\n        if (pci_command & PCI_COMMAND_MASTER) {\n                pci_command &= ~PCI_COMMAND_MASTER;\n                pci_write_config_word(dev, PCI_COMMAND, pci_command);\n        }\n\n        pcibios_disable_device(dev);\n}\n")),(0,r.kt)("p",null,"\u6b64\u51fd\u6570\u4e2d\u8bfb\u53d6 pci \u914d\u7f6e\u7a7a\u95f4 04 \u504f\u79fb\u5904\u4e24\u4e2a\u5b57\u8282\u5927\u5c0f\u7684\u63a7\u5236\u4fe1\u606f\uff0c\u6e05\u9664 PCI_COMMAND_MASTER \u6807\u5fd7\u540e\u91cd\u65b0\u5199\u56de\u5230\u914d\u7f6e\u7a7a\u95f4\u4e2d\u3002\u6700\u540e\u8c03\u7528 pcibios_disable_device \u6765\u6267\u884c\u4e00\u4e9b\u67b6\u6784\u76f8\u5173\u7684\u4f7f\u80fd\u64cd\u4f5c\u3002"))}u.isMDXComponent=!0}}]);