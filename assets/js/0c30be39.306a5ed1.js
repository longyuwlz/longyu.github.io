"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[922],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return i}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function _(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):_(_({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},o={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=d(n),i=r,c=u["".concat(p,".").concat(i)]||u[i]||o[i]||l;return n?a.createElement(c,_(_({ref:t},m),{},{components:n})):a.createElement(c,_({ref:t},m))}));function i(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,_=new Array(l);_[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,_[1]=s;for(var d=2;d<l;d++)_[d]=n[d];return a.createElement.apply(null,_)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1932:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return i},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return o}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),_=["components"],s={},p="\u6536\u53d1\u5305\u5411\u91cf\u51fd\u6570\u5b9e\u73b0\u5206\u6790",d={permalink:"/longyu.github.io/blog/dpdk/dpdk \u6536\u53d1\u5305\u51fd\u6570\u5206\u6790\uff1adpdk-20.11 ice sse \u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u5173\u952e\u8fc7\u7a0b\u5206\u6790",editUrl:"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u6536\u53d1\u5305\u51fd\u6570\u5206\u6790\uff1adpdk-20.11 ice sse \u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u5173\u952e\u8fc7\u7a0b\u5206\u6790.md",source:"@site/blog/dpdk/dpdk \u6536\u53d1\u5305\u51fd\u6570\u5206\u6790\uff1adpdk-20.11 ice sse \u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u5173\u952e\u8fc7\u7a0b\u5206\u6790.md",title:"\u6536\u53d1\u5305\u5411\u91cf\u51fd\u6570\u5b9e\u73b0\u5206\u6790",description:"\u6536\u5305\u51fd\u6570\u4e3b\u4f53\u903b\u8f91",date:"2022-06-21T00:32:49.000Z",formattedDate:"2022\u5e746\u670821\u65e5",tags:[],readingTime:16.61,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"dpdk/dpdk \u5bf9 numa \u7684\u4f7f\u7528\u4e0e\u591a numa \u67b6\u6784\u4e0b\u6027\u80fd\u8c03\u4f18\u7684\u57fa\u7840",permalink:"/longyu.github.io/blog/dpdk/dpdk \u5bf9 numa \u7684\u4f7f\u7528\u4e0e\u591a numa \u67b6\u6784\u4e0b\u6027\u80fd\u8c03\u4f18\u7684\u57fa\u7840"},nextItem:{title:"dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898",permalink:"/longyu.github.io/blog/dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898"}},m={authorsImageUrls:[]},o=[{value:"\u6536\u5305\u51fd\u6570\u4e3b\u4f53\u903b\u8f91",id:"\u6536\u5305\u51fd\u6570\u4e3b\u4f53\u903b\u8f91",level:2},{value:"mbuf_initializer \u5b57\u6bb5\u7528\u4e8e\u521d\u59cb\u5316\u6bcf\u4e2a mbuf",id:"mbuf_initializer-\u5b57\u6bb5\u7528\u4e8e\u521d\u59cb\u5316\u6bcf\u4e2a-mbuf",level:3},{value:"1. \u8bbe\u7f6e crc \u63a9\u7801\u7684\u503c\uff0c\u5bf9\u4e00\u4e2a mbuf \u8fdb\u884c\u5904\u7406\uff0c\u540c\u65f6\u5c06 pkt_len \u4e0e data_len \u51cf\u53bb crc_len \u957f\u5ea6",id:"1-\u8bbe\u7f6e-crc-\u63a9\u7801\u7684\u503c\u5bf9\u4e00\u4e2a-mbuf-\u8fdb\u884c\u5904\u7406\u540c\u65f6\u5c06-pkt_len-\u4e0e-data_len-\u51cf\u53bb-crc_len-\u957f\u5ea6",level:3},{value:"2. \u8bbe\u7f6e\u540e\u7eed\u8fd0\u884c\u7684\u63a9\u7801",id:"2-\u8bbe\u7f6e\u540e\u7eed\u8fd0\u884c\u7684\u63a9\u7801",level:3},{value:"3. \u8bbe\u7f6e EOP \u63a9\u7801\u503c\u3001dd mask\u3001eop mask",id:"3-\u8bbe\u7f6e-eop-\u63a9\u7801\u503cdd-maskeop-mask",level:3},{value:"4. \u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u6574\u961f\u5217\uff0c\u9700\u8981\u5219\u6267\u884c\u961f\u5217\u91cd\u6574\u64cd\u4f5c",id:"4-\u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u6574\u961f\u5217\u9700\u8981\u5219\u6267\u884c\u961f\u5217\u91cd\u6574\u64cd\u4f5c",level:3},{value:"5. \u83b7\u53d6\u5f53\u524d\u8f6f\u4ef6\u53ef\u7528\u63cf\u8ff0\u7b26\u5e76\u9884\u53d6\u63cf\u8ff0\u7b26",id:"5-\u83b7\u53d6\u5f53\u524d\u8f6f\u4ef6\u53ef\u7528\u63cf\u8ff0\u7b26\u5e76\u9884\u53d6\u63cf\u8ff0\u7b26",level:3},{value:"6. \u586b\u5145 mbuf dataroom \u7269\u7406\u5730\u5740\u5230\u63cf\u8ff0\u7b26<strong>\u51fd\u6570\u4e3b\u4f53\u5411\u91cf\u6307\u4ee4</strong>",id:"6-\u586b\u5145-mbuf-dataroom-\u7269\u7406\u5730\u5740\u5230\u63cf\u8ff0\u7b26\u51fd\u6570\u4e3b\u4f53\u5411\u91cf\u6307\u4ee4",level:3},{value:"7. \u5224\u65ad\u5f53\u524d\u63cf\u8ff0\u7b26\u7684 dd \u4f4d\u662f\u5426\u4e3a 1\uff0c\u4e3a 1 \u8868\u793a\u81f3\u5c11\u6709\u4e00\u4e2a\u62a5\u6587",id:"7-\u5224\u65ad\u5f53\u524d\u63cf\u8ff0\u7b26\u7684-dd-\u4f4d\u662f\u5426\u4e3a-1\u4e3a-1-\u8868\u793a\u81f3\u5c11\u6709\u4e00\u4e2a\u62a5\u6587",level:3},{value:"8. \u5f00\u59cb\u6279\u91cf\u4ece rx desc \u5411 mbuf \u8f6c\u6362",id:"8-\u5f00\u59cb\u6279\u91cf\u4ece-rx-desc-\u5411-mbuf-\u8f6c\u6362",level:3},{value:"<strong>\u4f7f\u7528\u5411\u91cf\u6307\u4ee4\u4ece\u63cf\u8ff0\u7b26\u8f6c\u5316\u4e3a mbuf \u7684\u5173\u952e\u8fc7\u7a0b</strong>",id:"\u4f7f\u7528\u5411\u91cf\u6307\u4ee4\u4ece\u63cf\u8ff0\u7b26\u8f6c\u5316\u4e3a-mbuf-\u7684\u5173\u952e\u8fc7\u7a0b",level:2},{value:"\u5c06\u56db\u4e2a\u63cf\u8ff0\u7b26\u5408\u5e76\u4e3a\u4e00\u4e2a\u7684\u5411\u91cf\u51fd\u6570\u903b\u8f91\u5206\u6790",id:"\u5c06\u56db\u4e2a\u63cf\u8ff0\u7b26\u5408\u5e76\u4e3a\u4e00\u4e2a\u7684\u5411\u91cf\u51fd\u6570\u903b\u8f91\u5206\u6790",level:2},{value:"\u53d1\u5305\u51fd\u6570\u5b9e\u73b0\u5206\u6790",id:"\u53d1\u5305\u51fd\u6570\u5b9e\u73b0\u5206\u6790",level:2}],u={toc:o};function i(e){var t=e.components,n=(0,r.Z)(e,_);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"\u6536\u5305\u51fd\u6570\u4e3b\u4f53\u903b\u8f91"},"\u6536\u5305\u51fd\u6570\u4e3b\u4f53\u903b\u8f91"),(0,l.kt)("h3",{id:"mbuf_initializer-\u5b57\u6bb5\u7528\u4e8e\u521d\u59cb\u5316\u6bcf\u4e2a-mbuf"},"mbuf_initializer \u5b57\u6bb5\u7528\u4e8e\u521d\u59cb\u5316\u6bcf\u4e2a mbuf"),(0,l.kt)("p",null,"mbuf_initializer \u5b57\u6bb5\u521d\u59cb\u5316\u7684\u5185\u5bb9\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    /* next 8 bytes are initialised on RX descriptor rearm */\n    RTE_MARKER64 rearm_data;\n    uint16_t data_off;\n\n    /**\n     * Reference counter. Its size should at least equal to the size\n     * of port field (16 bits), to support zero-copy broadcast.\n     * It should only be accessed using the following functions:\n     * rte_mbuf_refcnt_update(), rte_mbuf_refcnt_read(), and\n     * rte_mbuf_refcnt_set(). The functionality of these functions (atomic,\n     * or non-atomic) is controlled by the RTE_MBUF_REFCNT_ATOMIC flag.\n     */\n    uint16_t refcnt;\n    uint16_t nb_segs;         /**< Number of segments. */\n\n    /** Input port (16 bits to support more than 256 virtual ports).\n     * The event eth Tx adapter uses this field to specify the output port.\n     */\n    uint16_t port;\n")),(0,l.kt)("p",null,"\u8fd9\u90e8\u5206\u503c\u6bcf\u4e2a\u62a5\u6587\u57fa\u672c\u4e00\u81f4\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"mbuf_initialized \u7ed3\u6784\u7684\u5185\u5bb9\uff1a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    mbuf_initialized -----\x3e----------------------\n                      16b | data_off             | RTE_PKTMBUF_HEADROOM\n                      16b | refcnt               | 1\n                      16b | nb_segs              | 1\n                      16b | port_id              | rxq->port_id\n\n")),(0,l.kt)("p",null,"\u5411\u91cf\u51fd\u6570\u542b\u4e49\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"__m128i _mm_set_epi64x(__int64 q1, __int64 q0);\n\u8bbe\u7f6e\u4e24\u4e2a 64 bit \u6574\u578b\u503c\nresult = [ q0 , q1 ]\n")),(0,l.kt)("p",null,"\u521d\u59cb\u5316 mbuf_init \u7ed3\u6784\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"const __m128i mbuf_init = _mm_set_epi64x(0, rxq->mbuf_initializer);\n")),(0,l.kt)("p",null,"\u6267\u884c\u540e mbuf_init \u7684\u503c :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    mbuf_init  -----------\x3e------------------------\n                      16b | data_off             | RTE_PKTMBUF_HEADROOM\n                      16b | refcnt               | 1\n                      16b | nb_segs              | 1\n                      16b | port_id              | rxq->port_id\n                      32b | 0                    |\n                      32b | 0                    |\n\n")),(0,l.kt)("h3",{id:"1-\u8bbe\u7f6e-crc-\u63a9\u7801\u7684\u503c\u5bf9\u4e00\u4e2a-mbuf-\u8fdb\u884c\u5904\u7406\u540c\u65f6\u5c06-pkt_len-\u4e0e-data_len-\u51cf\u53bb-crc_len-\u957f\u5ea6"},"1. \u8bbe\u7f6e crc \u63a9\u7801\u7684\u503c\uff0c\u5bf9\u4e00\u4e2a mbuf \u8fdb\u884c\u5904\u7406\uff0c\u540c\u65f6\u5c06 pkt_len \u4e0e data_len \u51cf\u53bb crc_len \u957f\u5ea6"),(0,l.kt)("p",null,"\u5411\u91cf\u51fd\u6570\u542b\u4e49\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"__m128i _mm_set_epi16(short w7, short w6, short w5, short w4, short w3, short w2, short\nw1, short w0);\n\n\u8bbe\u7f6e 8 \u4e2a\u6709\u7b26\u53f7 16bit \u6574\u578b\nresult = [ w0 , w1 , \u2026 , w7 ]\n")),(0,l.kt)("p",null,"\u9a71\u52a8\u63a9\u7801\u8bbe\u7f6e\u76f8\u5173\u4ee3\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    __m128i crc_adjust = _mm_set_epi16\n                (0, 0, 0,       /* ignore non-length fields */\n                 -rxq->crc_len, /* sub crc on data_len */\n                 0,          /* ignore high-16bits of pkt_len */\n                 -rxq->crc_len, /* sub crc on pkt_len */\n                 0, 0           /* ignore pkt_type field */\n                );\n\n")),(0,l.kt)("p",null,"\u6b64\u5904\u7684\u63a9\u7801\u8bbe\u7f6e\u7528\u4e8e\u540e\u7eed\u57fa\u4e8e\u5411\u91cf\u5355\u4f4d\u5bf9\u591a\u4e2a\u62a5\u6587\u540c\u65f6\u8ba1\u7b97\u3002"),(0,l.kt)("h3",{id:"2-\u8bbe\u7f6e\u540e\u7eed\u8fd0\u884c\u7684\u63a9\u7801"},"2. \u8bbe\u7f6e\u540e\u7eed\u8fd0\u884c\u7684\u63a9\u7801"),(0,l.kt)("p",null,"mbuf \u4e2d\u76f8\u5173\u7684\u5b57\u6bb5\u7ed3\u6784\uff1a"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"\u53d8\u91cf\u540d\u79f0"),(0,l.kt)("th",{parentName:"tr",align:null},"\u53d8\u91cf\u5bbd\u5ea6"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pkt_type"),(0,l.kt)("td",{parentName:"tr",align:null},"32")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pkt_len"),(0,l.kt)("td",{parentName:"tr",align:null},"64")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"data_len"),(0,l.kt)("td",{parentName:"tr",align:null},"80")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"vlan_macip"),(0,l.kt)("td",{parentName:"tr",align:null},"96")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rss_hash"),(0,l.kt)("td",{parentName:"tr",align:null},"128")))),(0,l.kt)("p",null,"\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    const __m128i zero = _mm_setzero_si128();\n    /* mask to shuffle from desc. to mbuf */\n    const __m128i shuf_msk = _mm_set_epi8\n            (0xFF, 0xFF,\n             0xFF, 0xFF,  /* rss hash parsed separately */\n             11, 10,      /* octet 10~11, 16 bits vlan_macip */\n             5, 4,        /* octet 4~5, 16 bits data_len */\n             0xFF, 0xFF,  /* skip high 16 bits pkt_len, zero out */\n             5, 4,        /* octet 4~5, low 16 bits pkt_len */\n             0xFF, 0xFF,  /* pkt_type set as unknown */\n             0xFF, 0xFF   /* pkt_type set as unknown */\n            );\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"0xFF \u8868\u793a\u5c06\u5bf9\u5e94\u5b57\u8282\u7684\u503c\u6e05 0\uff0c\u6700\u9ad8\u4f4d\u4e0d\u4e3a 1 \u8868\u793a\u9009\u62e9 a","[n & 0xf]"," \u5b57\u8282\u503c\u3002"),"\n\u6b64\u63a9\u7801",(0,l.kt)("strong",{parentName:"p"},"\u8df3\u8fc7 pkt_len \u7684\u9ad8 16-bit"),"\u3002"),(0,l.kt)("h3",{id:"3-\u8bbe\u7f6e-eop-\u63a9\u7801\u503cdd-maskeop-mask"},"3. \u8bbe\u7f6e EOP \u63a9\u7801\u503c\u3001dd mask\u3001eop mask"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    const __m128i eop_shuf_mask = _mm_set_epi8(0xFF, 0xFF,\n                           0xFF, 0xFF,\n                           0xFF, 0xFF,\n                           0xFF, 0xFF,\n                           0xFF, 0xFF,\n                           0xFF, 0xFF,\n                           0x04, 0x0C,\n                           0x00, 0x08);\n\n    /**\n     * compile-time check the above crc_adjust layout is correct.\n     * NOTE: the first field (lowest address) is given last in set_epi16\n     * call above.\n     */\n    RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, pkt_len) !=\n             offsetof(struct rte_mbuf, rx_descriptor_fields1) + 4);\n    RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=\n             offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);\n\n    /* 4 packets DD mask */\n    const __m128i dd_check = _mm_set_epi64x(0x0000000100000001LL,\n                        0x0000000100000001LL);\n    /* 4 packets EOP mask */\n    const __m128i eop_check = _mm_set_epi64x(0x0000000200000002LL,\n                         0x0000000200000002LL);\n\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"dd_check \u4e0e eop_check \u9488\u5bf9 rx \u63cf\u8ff0\u7b26\uff0c\u540c\u65f6\u5bf9\u4e24\u4e2a\u63cf\u8ff0\u7b26\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u63cf\u8ff0\u7b26\u5360\u636e 64-bit"),"\u3002"),(0,l.kt)("h3",{id:"4-\u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u6574\u961f\u5217\u9700\u8981\u5219\u6267\u884c\u961f\u5217\u91cd\u6574\u64cd\u4f5c"},"4. \u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u6574\u961f\u5217\uff0c\u9700\u8981\u5219\u6267\u884c\u961f\u5217\u91cd\u6574\u64cd\u4f5c"),(0,l.kt)("p",null,"\u7533\u8bf7 ",(0,l.kt)("strong",{parentName:"p"},"ICE_RXQ_REARM_THRESH")," \u4e2a mbuf\uff0c\u7136\u540e\u5c06 ",(0,l.kt)("strong",{parentName:"p"},"mbuf dataroom \u7684\u7269\u7406\u5730\u5740\u586b\u5145\u5230\u7a7a\u95f2\u7684\u63cf\u8ff0\u7b26\u4e2d\u3002")),(0,l.kt)("h3",{id:"5-\u83b7\u53d6\u5f53\u524d\u8f6f\u4ef6\u53ef\u7528\u63cf\u8ff0\u7b26\u5e76\u9884\u53d6\u63cf\u8ff0\u7b26"},"5. \u83b7\u53d6\u5f53\u524d\u8f6f\u4ef6\u53ef\u7528\u63cf\u8ff0\u7b26\u5e76\u9884\u53d6\u63cf\u8ff0\u7b26"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u666e\u901a\u51fd\u6570\u903b\u8f91\uff0c\u8bfb\u53d6\u63cf\u8ff0\u7b26\u4e2d\u7684\u6807\u5fd7\uff0c\u5f53\u6ca1\u6709\u53ef\u7528\u63cf\u8ff0\u7b26\u65f6\uff0c\u51fd\u6570\u76f4\u63a5\u8fd4\u56de\u3002")),(0,l.kt)("h3",{id:"6-\u586b\u5145-mbuf-dataroom-\u7269\u7406\u5730\u5740\u5230\u63cf\u8ff0\u7b26\u51fd\u6570\u4e3b\u4f53\u5411\u91cf\u6307\u4ee4"},"6. \u586b\u5145 mbuf dataroom \u7269\u7406\u5730\u5740\u5230\u63cf\u8ff0\u7b26",(0,l.kt)("strong",{parentName:"h3"},"\u51fd\u6570\u4e3b\u4f53\u5411\u91cf\u6307\u4ee4")),(0,l.kt)("p",null,"\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    /* Initialize the mbufs in vector, process 2 mbufs in one loop */\n    for (i = 0; i < ICE_RXQ_REARM_THRESH; i += 2, rxep += 2) {\n        __m128i vaddr0, vaddr1;\n\n        mb0 = rxep[0].mbuf;\n        mb1 = rxep[1].mbuf;\n\n        /* load buf_addr(lo 64bit) and buf_iova(hi 64bit) */\n        RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, buf_iova) !=\n                 offsetof(struct rte_mbuf, buf_addr) + 8);\n        vaddr0 = _mm_loadu_si128((__m128i *)&mb0->buf_addr);\n        vaddr1 = _mm_loadu_si128((__m128i *)&mb1->buf_addr);\n\n        /* convert pa to dma_addr hdr/data */\n        dma_addr0 = _mm_unpackhi_epi64(vaddr0, vaddr0);\n        dma_addr1 = _mm_unpackhi_epi64(vaddr1, vaddr1);\n\n        /* add headroom to pa values */\n        dma_addr0 = _mm_add_epi64(dma_addr0, hdr_room);\n        dma_addr1 = _mm_add_epi64(dma_addr1, hdr_room);\n\n        /* flush desc with pa dma_addr */\n        _mm_store_si128((__m128i *)&rxdp++->read, dma_addr0);\n        _mm_store_si128((__m128i *)&rxdp++->read, dma_addr1);\n    }\n\n")),(0,l.kt)("p",null,"mbuf \u4e2d\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u7ed3\u6784\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"typedef uint64_t rte_iova_t;\n.........\n\n    void *buf_addr;           /**< Virtual address of segment buffer. */\n    /**\n     * Physical address of segment buffer.\n     * Force alignment to 8-bytes, so as to ensure we have the exact\n     * same mbuf cacheline0 layout for 32-bit and 64-bit. This makes\n     * working on vector drivers easier.\n     */\n    rte_iova_t buf_iova __rte_aligned(sizeof(rte_iova_t));\n\n")),(0,l.kt)("p",null,"\u4f7f\u7528 ",(0,l.kt)("strong",{parentName:"p"},"128-bit")," \u5bc4\u5b58\u5668\uff0c\u4e00\u6b21\u5c06 ",(0,l.kt)("strong",{parentName:"p"},"buf_addr \u4e0e buf_iova \u5730\u5740\u52a0\u8f7d\u5230\u4e00\u4e2a 128-bit \u7684\u53d8\u91cf\u4e2d"),"\uff0c",(0,l.kt)("strong",{parentName:"p"},"\u4f4e 64-bit \u5b58\u50a8 buf_addr\uff0c\u9ad8 64-bit \u5b58\u50a8 buf_iova \u5730\u5740"),"\u3002"),(0,l.kt)("p",null,"6.1 ",(0,l.kt)("strong",{parentName:"p"},"\u6bcf\u6b21\u5904\u7406\u4e24\u4e2a rxd\uff0c\u9996\u5148\u5c06\u7b2c\u4e00\u7ec4 rxep mbuf \u5730\u5740\u5206\u522b\u52a0\u8f7d\u5230 mb0 \u4e0e mb1 \u4e24\u4e2a mbuf \u7ed3\u6784\u4e2d")),(0,l.kt)("p",null,"6.2 ",(0,l.kt)("strong",{parentName:"p"},"\u5c06 mb0 \u7684\u865a\u62df\u5730\u5740\u52a0\u8f7d\u5230 vaddr0 128-bit \u4e2d\uff0c\u5c06 mb1 \u7684\u865a\u62df\u5730\u5740\u52a0\u8f7d\u5230 vaddr1 128-bit \u4e2d")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u5904\u7406\u540e vaddr0 \u4e0e vaddr1 \u5185\u5bb9\u793a\u4f8b\uff1a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"        vaddr0 --\x3e------------------      vaddr1 ----\x3e---------------\n        hi-64b --\x3e|  mb0->buf_iova |     hi-64b  ---\x3e| mb1->buf_iova|\n        lo-64b --\x3e|  mb0->buf_addr |     lo-64b  ---\x3e| mb1->buf_addr|\n                  ------------------                 ----------------\n\n")),(0,l.kt)("p",null,"6.3 ",(0,l.kt)("strong",{parentName:"p"},"\u8c03\u6574 vaddr0\u3001vaddr1 \u4e2d buf_iova \u7684\u4f4d\u7f6e")),(0,l.kt)("p",null,"\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"        /* convert pa to dma_addr hdr/data */\n        dma_addr0 = _mm_unpackhi_epi64(vaddr0, vaddr0);\n        dma_addr1 = _mm_unpackhi_epi64(vaddr1, vaddr1);\n")),(0,l.kt)("p",null,"\u6267\u884c\u540e vaddr0 \u4e0e vaddr1 \u7ed3\u6784\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"        dma_addr0 --\x3e-----------------     dma_addr1 -----\x3e----------------\n        hi-64b   --\x3e|  mb0->buf_iova |     hi-64b     ---\x3e| mb1->buf_iova |\n        lo-64b   --\x3e|  mb0->buf_iova |     lo-64b     ---\x3e| mb1->buf_iova |\n                  ------------------                      ----------------\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"6.4 \u4f7f\u7528 dma_addr0 \u52a0\u4e0a hdr_room \u5c06\u5730\u5740\u6307\u5411 dataroom \u7684\u7269\u7406\u5730\u5740")),(0,l.kt)("p",null,"\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    /* add headroom to pa values */\n    dma_addr0 = _mm_add_epi64(dma_addr0, hdr_room);\n    dma_addr1 = _mm_add_epi64(dma_addr1, hdr_room);\n")),(0,l.kt)("p",null,"\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u540e\u7684\u503c\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    dma_addr0 --\x3e----------------------------        dma_addr--\x3e---------------------------\n    hi-64b   --\x3e|  mb0->buf_iova + hdr_room |      hi-64b   ---\x3e| mb1->buf_iova + hdr_room |\n    lo-64b   --\x3e|  mb0->buf_iova + hdr_room |      lo-64b   ---\x3e| mb1->buf_iova + hdr_room |\n              -------------------------------                   ----------------------------\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"6.5 \u5c06 dma_addr \u5b58\u50a8\u5230\u63cf\u8ff0\u7b26\u4e2d")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"        /* flush desc with pa dma_addr */\n        _mm_store_si128((__m128i *)&rxdp++->read, dma_addr0);\n        _mm_store_si128((__m128i *)&rxdp++->read, dma_addr1);\n")),(0,l.kt)("p",null,"rx_desc \u4e2d\u62a5\u6587\u5730\u5740\u76f8\u5173\u5b9a\u4e49\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"        __le64 pkt_addr; /* Packet buffer address */\n        __le64 hdr_addr; /* Header buffer address */\n")),(0,l.kt)("p",null,"\u666e\u901a\u6536\u5305\u51fd\u6570\u4e2d\u8bbe\u7f6e\u5185\u5bb9\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"        /**\n         * fill the read format of descriptor with physic address in\n         * new allocated mbuf: nmb\n         */\n        rxdp->read.hdr_addr = 0;\n        rxdp->read.pkt_addr = dma_addr;\n")),(0,l.kt)("p",null,"\u666e\u901a\u6536\u5305\u51fd\u6570\u4e2d ",(0,l.kt)("strong",{parentName:"p"},"hdr_addr \u8bbe\u7f6e\u4e3a 0\uff0csse \u4e2d\u5374\u8bbe\u5b9a\u4e3a\u4e86 dma_addr\uff0c\u8fd9\u91cc\u6709\u673a\u5173\uff01")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"6.6 \u66f4\u65b0\u8f6f\u4ef6\u53d8\u91cf\u503c")),(0,l.kt)("h3",{id:"7-\u5224\u65ad\u5f53\u524d\u63cf\u8ff0\u7b26\u7684-dd-\u4f4d\u662f\u5426\u4e3a-1\u4e3a-1-\u8868\u793a\u81f3\u5c11\u6709\u4e00\u4e2a\u62a5\u6587"},"7. \u5224\u65ad\u5f53\u524d\u63cf\u8ff0\u7b26\u7684 dd \u4f4d\u662f\u5426\u4e3a 1\uff0c\u4e3a 1 \u8868\u793a\u81f3\u5c11\u6709\u4e00\u4e2a\u62a5\u6587"),(0,l.kt)("h3",{id:"8-\u5f00\u59cb\u6279\u91cf\u4ece-rx-desc-\u5411-mbuf-\u8f6c\u6362"},"8. \u5f00\u59cb\u6279\u91cf\u4ece rx desc \u5411 mbuf \u8f6c\u6362"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u8f6c\u6362\u524d\u6dfb\u52a0\u5982\u4e0b\u65ad\u8a00\uff0c\u786e\u4fdd mbuf \u4e2d\u5b57\u6bb5\u7684\u504f\u79fb\u6b63\u786e\u3002")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    /**\n     * Compile-time verify the shuffle mask\n     * NOTE: some field positions already verified above, but duplicated\n     * here for completeness in case of future modifications.\n     */\n    RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, pkt_len) !=\n             offsetof(struct rte_mbuf, rx_descriptor_fields1) + 4);\n    RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=\n             offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);\n    RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=\n             offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);\n    RTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=\n             offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);\n")),(0,l.kt)("h2",{id:"\u4f7f\u7528\u5411\u91cf\u6307\u4ee4\u4ece\u63cf\u8ff0\u7b26\u8f6c\u5316\u4e3a-mbuf-\u7684\u5173\u952e\u8fc7\u7a0b"},(0,l.kt)("strong",{parentName:"h2"},"\u4f7f\u7528\u5411\u91cf\u6307\u4ee4\u4ece\u63cf\u8ff0\u7b26\u8f6c\u5316\u4e3a mbuf \u7684\u5173\u952e\u8fc7\u7a0b")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"1. \u8fdb\u5165 for \u5faa\u73af\uff0c\u6bcf\u6b21\u5904\u7406 4 \u4e2a\u63cf\u8ff0\u7b26\uff0c\u586b\u5145 4 \u4e2a mbuf\uff08\u6b64\u5904\u5047\u5b9a\u4e3a\u8fd9\u79cd\u60c5\u51b5\uff09"),"\n",(0,l.kt)("strong",{parentName:"p"},"2. \u52a0\u8f7d\u63cf\u8ff0\u7b26\u4e2d\u7684 mbuf \u4e0e\u63cf\u8ff0\u7b26\u5185\u5bb9\u5230 128-bit \u53d8\u91cf\u4e2d")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u4e00\u4e2a 128-bit \u52a0\u8f7d\u4e24\u4e2a mbuf \u5730\u5740"),"\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"     mbp1 ----\x3e-------------------------\n     hi-64    | sw_ring[pos + 1]->mbuf |\n     lo-64    | sw_ring[pos]->mbuf     |\n               -------------------------\n\n     mbp2 ----\x3e-------------------------\n     hi-64    | sw_ring[pos + 2]->mbuf |\n     lo-64    | sw_ring[pos + 3]->mbuf |\n              --------------------------\n\n")),(0,l.kt)("p",null,"\u52a0\u8f7d\u56db\u4e2a\u63cf\u8ff0\u7b26\u5230\u56db\u4e2a 128-bit \u7684 desc \u53d8\u91cf\u4e2d\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"        descs[3] = _mm_loadu_si128((__m128i *)(rxdp + 3));\n        rte_compiler_barrier();\n\n        /* B.2 copy 2 64 bit or 4 32 bit mbuf point into rx_pkts */\n        _mm_storeu_si128((__m128i *)&rx_pkts[pos], mbp1);\n\n        descs[2] = _mm_loadu_si128((__m128i *)(rxdp + 2));\n        rte_compiler_barrier();\n        /* B.1 load 2 mbuf point */\n        descs[1] = _mm_loadu_si128((__m128i *)(rxdp + 1));\n        rte_compiler_barrier();\n        descs[0] = _mm_loadu_si128((__m128i *)(rxdp));\n\n")),(0,l.kt)("p",null,"\u5728\u6bcf\u4e2a desc \u52a0\u8f7d\u65f6\u90fd\u6dfb\u52a0\u4e86",(0,l.kt)("strong",{parentName:"p"},"\u7f16\u8bd1\u5c4f\u969c\uff0c\u907f\u514d\u4f18\u5316\u4ea7\u751f\u95ee\u9898"),"\uff0c\u52a0\u8f7d\u540e desc \u7ed3\u6784\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"desc[0]  --\x3e rxdp[0]\ndesc[1]  --\x3e rxdp[1]\ndesc[2]  --\x3e rxdp[2]\ndesc[3]  --\x3e rxdp[3]\n\n")),(0,l.kt)("p",null,"\u63a5\u6536\u63cf\u8ff0\u7b26\u5b9a\u4e49\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"union ice_32b_rx_flex_desc {\n    struct {\n        __le64 pkt_addr; /* Packet buffer address */\n        __le64 hdr_addr; /* Header buffer address */\n                 /* bit 0 of hdr_addr is DD bit */\n        __le64 rsvd1;\n        __le64 rsvd2;\n    } read;\n    struct {\n        /* Qword 0 */\n        u8 rxdid; /* descriptor builder profile ID */\n        u8 mir_id_umb_cast; /* mirror=[5:0], umb=[7:6] */\n        __le16 ptype_flex_flags0; /* ptype=[9:0], ff0=[15:10] */\n        __le16 pkt_len; /* [15:14] are reserved */\n        __le16 hdr_len_sph_flex_flags1; /* header=[10:0] */\n                        /* sph=[11:11] */\n                        /* ff1/ext=[15:12] */\n\n        /* Qword 1 */\n        __le16 status_error0;\n        __le16 l2tag1;\n        __le16 flex_meta0;\n        __le16 flex_meta1;\n\n        /* Qword 2 */\n        __le16 status_error1;\n        u8 flex_flags2;\n        u8 time_stamp_low;\n        __le16 l2tag2_1st;\n        __le16 l2tag2_2nd;\n\n        /* Qword 3 */\n        __le16 flex_meta2;\n        __le16 flex_meta3;\n        union {\n            struct {\n                __le16 flex_meta4;\n                __le16 flex_meta5;\n            } flex;\n            __le32 ts_high;\n        } flex_ts;\n    } wb; /* writeback */\n};\n\n")),(0,l.kt)("p",null,"\u5355\u4e2a desc \u52a0\u8f7d\u540e\u5185\u5bb9\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"}," Qword 1   hi-64\n Qword 0   lo-64\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u6ce8\u610f\u987a\u5e8f\u4e3a\u4ece\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u52a0\u8f7d"),"\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"3. \u5c06 mbuf \u5730\u5740\u586b\u5145\u5230 rx_pkts \u6570\u7ec4\u4e2d")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"\n    /* B.2 copy 2 64 bit or 4 32 bit mbuf point into rx_pkts */\n    _mm_storeu_si128((__m128i *)&rx_pkts[pos], mbp1);\n\n    /* B.2 copy 2 mbuf point into rx_pkts  */\n    _mm_storeu_si128((__m128i *)&rx_pkts[pos + 2], mbp2);\n\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"4. \u5f53\u8bbe\u7f6e\u4e86 split_packet \u540e\uff0c\u9884\u53d6 mbuf \u4e2d\u7684\u7b2c\u4e8c\u4e2a cache line")),(0,l.kt)("p",null,"   \u5728 mbuf \u7ed3\u6784\u4e2d\u4f7f\u7528\u4e0d\u5360\u7a7a\u95f4\u7684\u53d8\u91cf\u6807\u8bc6\u6bcf\u4e00\u4e2a cache line \u7684\u8d77\u59cb\u4f4d\u7f6e\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"5. \u5c06 desc \u4e2d\u7684\u5b57\u6bb5\u586b\u5145\u5230 pktmbuf \u4e2d")),(0,l.kt)("p",null,"\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"        /* D.1 pkt 3,4 convert format from desc to pktmbuf */\n        pkt_mb3 = _mm_shuffle_epi8(descs[3], shuf_msk);\n        pkt_mb2 = _mm_shuffle_epi8(descs[2], shuf_msk);\n\n        /* D.1 pkt 1,2 convert format from desc to pktmbuf */\n        pkt_mb1 = _mm_shuffle_epi8(descs[1], shuf_msk);\n        pkt_mb0 = _mm_shuffle_epi8(descs[0], shuf_msk);\n\n        /* C.1 4=>2 filter staterr info only */\n        sterr_tmp2 = _mm_unpackhi_epi32(descs[3], descs[2]);\n        /* C.1 4=>2 filter staterr info only */\n        sterr_tmp1 = _mm_unpackhi_epi32(descs[1], descs[0]);\n\n")),(0,l.kt)("p",null,"\u63a9\u7801\u503c\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    const __m128i shuf_msk = _mm_set_epi8\n            (0xFF, 0xFF,\n             0xFF, 0xFF,  /* rss hash parsed separately */\n             11, 10,      /* octet 10~11, 16 bits vlan_macip */\n             5, 4,        /* octet 4~5, 16 bits data_len */\n             0xFF, 0xFF,  /* skip high 16 bits pkt_len, zero out */\n             5, 4,        /* octet 4~5, low 16 bits pkt_len */\n             0xFF, 0xFF,  /* pkt_type set as unknown */\n             0xFF, 0xFF   /* pkt_type set as unknown */\n            );\n\n")),(0,l.kt)("p",null,"rx \u63cf\u8ff0\u7b26\u4e0e mbuf \u4e2d\u7684\u76f8\u5173\u5b57\u6bb5\u5b9a\u4e49\u6458\u5f55\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"        /* Qword 0 */\n        u8 rxdid; /* descriptor builder profile ID */\n        u8 mir_id_umb_cast; /* mirror=[5:0], umb=[7:6] */\n        __le16 ptype_flex_flags0; /* ptype=[9:0], ff0=[15:10] */\n        __le16 pkt_len; /* [15:14] are reserved */\n        __le16 hdr_len_sph_flex_flags1; /* header=[10:0] */\n                        /* sph=[11:11] */\n                        /* ff1/ext=[15:12] */\n\n        /* Qword 1 */\n        __le16 status_error0;\n        __le16 l2tag1;\n        __le16 flex_meta0;\n        __le16 flex_meta1;\n\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"union {\n    uint32_t packet_type; /**< L2/L3/L4 and tunnel information.\n    ...................\n};\n\nuint32_t pkt_len;         /**< Total pkt len: sum of all segments. */\nuint16_t data_len;        /**< Amount of data in segment buffer. */\n/** VLAN TCI (CPU order), valid if PKT_RX_VLAN is set. */\nuint16_t vlan_tci;\n\nunion {\n    union {\n        uint32_t rss;     /**< RSS hash result if RSS enabled */\n\n")),(0,l.kt)("p",null,"\u6267\u884c ",(0,l.kt)("strong",{parentName:"p"},"__mm_shuffle_epi8")," \u51fd\u6570\uff0c\u8bbe\u7f6e ",(0,l.kt)("strong",{parentName:"p"},"pkt_len\u3001data_len\u3001vlan_tci\uff0c\u6e05\u7a7a packet_type\u3001rss"),"\u3002"),(0,l.kt)("p",null,"\u5411\u91cf\u51fd\u6570\u8c03\u7528\u4ee3\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"pkt_mb3 = _mm_shuffle_epi8(descs[3], shuf_msk);\n")),(0,l.kt)("p",null,"\u8c03\u7528\u4e4b\u540e pkt_mb3 \u7684\u7ed3\u6784\u5185\u5bb9\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"pkt_mb3 ----\x3e-------------------------------------------\n            | 0                       |\n            ---------------------------\n            | 0                       |   mbuf->packet_type\n            ---------------------------\n            | 0                       |\n            ---------------------------\n            | 0                       |\n            ---------------------------------------------\n            |  desc[3].pkt_len low 8b |\n            ---------------------------\n            |  desc[3].pkt_len high 8b|\n            ---------------------------   mbuf->pkt_len\n            | 0                       |\n            ---------------------------\n            | 0                       |\n            ----------------------------------------------\n            | desc[3].pkt_len low 8b  |\n            ---------------------------   mbuf->data_len\n            | desc[3].pkt_len hith 8b |\n            ----------------------------------------------\n            | desc[3].l2tag1 low 8b   |\n            ---------------------------   mbuf->vlan_tci\n            | desc[3].l2tag1 low 8b   |\n            -----------------------------------------------\n            | 0                       |\n            ---------------------------\n            | 0                       |   mbuf->rss\n            ---------------------------\n            | 0                       |\n            ---------------------------\n            | 0                       |\n            -----------------------------------------------\n\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"pkt_mb2\u3001pkt_mb1\u3001pkt_mb0 \u7ed3\u6784\u7c7b\u4f3c"),"\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"6. \u8fc7\u6ee4 staterr \u4fe1\u606f")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"        /* C.1 4=>2 filter staterr info only */\n        sterr_tmp2 = _mm_unpackhi_epi32(descs[3], descs[2]);\n        /* C.1 4=>2 filter staterr info only */\n        sterr_tmp1 = _mm_unpackhi_epi32(descs[1], descs[0]);\n\n")),(0,l.kt)("p",null,"\u5411\u91cf\u51fd\u6570\u542b\u4e49\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"__m128i _mm_unpackhi_epi32(__m128i a, __m128i b);\n\u4ea4\u66ff\u9ad82\u4f4d\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f732bit\u6574\u6570\nresult = [ a2 , b2 , a3, b3 ]\n\n")),(0,l.kt)("p",null,"rx desc \u4e2d\u76f8\u5173\u7ed3\u6784\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"        /* Qword 0 */\n        u8 rxdid; /* descriptor builder profile ID */\n        u8 mir_id_umb_cast; /* mirror=[5:0], umb=[7:6] */\n        __le16 ptype_flex_flags0; /* ptype=[9:0], ff0=[15:10] */\n        __le16 pkt_len; /* [15:14] are reserved */\n        __le16 hdr_len_sph_flex_flags1; /* header=[10:0] */\n                        /* sph=[11:11] */\n                        /* ff1/ext=[15:12] */\n\n        /* Qword 1 */\n        __le16 status_error0;\n        __le16 l2tag1;\n        __le16 flex_meta0;\n        __le16 flex_meta1;\n\n")),(0,l.kt)("p",null,"\u6267\u884c\u540e sterr_tmp2 \u7ed3\u6784\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"     sterr_tmp2 ----\x3e-----------------------------------\n                     | desc[3].l2tag1 + status_error0  |\n                     | desc[2].l2tag1 + status_error0  |\n                     | desc[3].flex_meta0 + flex_meta1 |\n                     | desc[2].flex_meta0 + flex_meta1 |\n                     -----------------------------------\n\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"7. \u5c06 rx olflags \u6620\u5c04\u5230 mbuf \u4e2d")),(0,l.kt)("h2",{id:"\u5c06\u56db\u4e2a\u63cf\u8ff0\u7b26\u5408\u5e76\u4e3a\u4e00\u4e2a\u7684\u5411\u91cf\u51fd\u6570\u903b\u8f91\u5206\u6790"},"\u5c06\u56db\u4e2a\u63cf\u8ff0\u7b26\u5408\u5e76\u4e3a\u4e00\u4e2a\u7684\u5411\u91cf\u51fd\u6570\u903b\u8f91\u5206\u6790"),(0,l.kt)("p",null,"ice_rx_desc \u90e8\u5206\u5b9a\u4e49\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    struct {\n        /* Qword 0 */\n        u8 rxdid; /* descriptor builder profile ID */\n        u8 mir_id_umb_cast; /* mirror=[5:0], umb=[7:6] */\n        __le16 ptype_flex_flags0; /* ptype=[9:0], ff0=[15:10] */\n        __le16 pkt_len; /* [15:14] are reserved */\n        __le16 hdr_len_sph_flex_flags1; /* header=[10:0] */\n                        /* sph=[11:11] */\n                        /* ff1/ext=[15:12] */\n\n        /* Qword 1 */\n        __le16 status_error0;\n        __le16 l2tag1;\n        __le16 flex_meta0;\n        __le16 flex_meta1;\n\n        /* Qword 2 */\n        __le16 status_error1;\n        u8 flex_flags2;\n        u8 time_stamp_low;\n        __le16 l2tag2_1st;\n        __le16 l2tag2_2nd;\n\n        /* Qword 3 */\n        __le16 flex_meta2;\n        __le16 flex_meta3;\n")),(0,l.kt)("p",null,"\u5408\u5e76 4 \u4e2a\u63cf\u8ff0\u7b26\u6807\u5fd7\u4fe1\u606f\u7684\u5411\u91cf\u51fd\u6570\u8c03\u7528\u4ee3\u7801\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    /* merge 4 descriptors */\n    flags = _mm_unpackhi_epi32(descs[0], descs[1]);\n    tmp_desc = _mm_unpackhi_epi32(descs[2], descs[3]);\n    tmp_desc = _mm_unpacklo_epi64(flags, tmp_desc);\n    tmp_desc = _mm_and_si128(tmp_desc, desc_mask);\n\n")),(0,l.kt)("p",null,"\u7b2c\u4e00\u6b65\u6267\u884c\u540e flags \u7684\u5e03\u5c40:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"   flags -----------\x3e---------------------------------\n                    |  desc[0].status_error0 l2tag1  |\n                    |  desc[1].status_error0 l2tag1  |\n                    |  desc[0].flex_meta0 flex_meta1 |\n                    |  desc[1].flex_meta0 flex_meta1 |\n\n")),(0,l.kt)("p",null,"\u7b2c\u4e8c\u6b65\u6267\u884c\u540e tmp_desc \u7684\u5e03\u5c40:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"   tmp_desc --------\x3e---------------------------------\n                    |  desc[2].status_error0 l2tag1  |\n                    |  desc[3].status_error0 l2tag1  |\n                    |  desc[2].flex_meta0 flex_meta1 |\n                    |  desc[3].flex_meta0 flex_meta1 |\n\n")),(0,l.kt)("p",null,"\u7b2c\u4e09\u6b65\u6267\u884c\u540e tmp_desc \u7684\u5e03\u5c40:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"   tmp_desc --------\x3e---------------------------------\n                    | desc[0].status_error0 l2tag1  |\n                    | desc[1].status_error0 l2tag1  |\n                    | desc[2].status_error0 l2tag1  |\n                    | desc[3].status_error0 l2tag1  |\n")),(0,l.kt)("p",null,"desc_mask \u5185\u5bb9\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    /* mask everything except checksum, RSS and VLAN flags.\n     * bit6:4 for checksum.\n     * bit12 for RSS indication.\n     * bit13 for VLAN indication.\n     */\n    const __m128i desc_mask = _mm_set_epi32(0x3070, 0x3070,\n                        0x3070, 0x3070);\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u5408\u5e76\u64cd\u4f5c\u540e\uff0c\u8bbe\u7f6e\u56db\u4e2a\u63cf\u8ff0\u7b26\u4e2d checksum\u3001rss\u3001vlan \u7684\u503c\u3002")),(0,l.kt)("h2",{id:"\u53d1\u5305\u51fd\u6570\u5b9e\u73b0\u5206\u6790"},"\u53d1\u5305\u51fd\u6570\u5b9e\u73b0\u5206\u6790"),(0,l.kt)("p",null,"tx \u7684\u903b\u8f91\u975e\u5e38\u7b80\u5355\uff0c\u8981\u7528 mbuf \u4e2d\u7684\u5b57\u6bb5\u586b\u5145\u4e00\u4e2a ice_tx_desc \u7ed3\u6784\uff0c\u4f7f\u7528\u5230\u7684 sse \u5411\u91cf\u51fd\u6570\u903b\u8f91\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"static inline void\nice_vtx1(volatile struct ice_tx_desc *txdp,\n     struct rte_mbuf *pkt, uint64_t flags)\n{\n    uint64_t high_qw =\n        (ICE_TX_DESC_DTYPE_DATA |\n         ((uint64_t)flags  << ICE_TXD_QW1_CMD_S) |\n         ((uint64_t)pkt->data_len << ICE_TXD_QW1_TX_BUF_SZ_S));\n\n    __m128i descriptor = _mm_set_epi64x(high_qw,\n                pkt->buf_iova + pkt->data_off);\n    _mm_store_si128((__m128i *)txdp, descriptor);\n}\n")),(0,l.kt)("p",null,"ice_tx_desc \u7ed3\u6784\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"/* Tx Descriptor */\nstruct ice_tx_desc {\n        __le64 buf_addr; /* Address of descriptor's data buf */\n        __le64 cmd_type_offset_bsz;\n};\n")),(0,l.kt)("p",null,"\u53d1\u5305\u51fd\u6570\u9700\u8981\u586b\u5145 ",(0,l.kt)("strong",{parentName:"p"},"mbuf dataroom \u8d77\u59cb\u5730\u5740\u7684\u7269\u7406\u5730\u5740\u4ee5\u53ca\u4e00\u4e9b\u53d1\u9001\u6807\u5fd7\u5230\u53d1\u9001\u63cf\u8ff0\u7b26\u4e2d"),"\uff0cice_tx_desc \u4e3a 128bit\uff0c\u586b\u5145\u4e00\u6b21\u5c31\u80fd\u591f\u5b58\u50a8\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u3002"),(0,l.kt)("h1",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,l.kt)("p",null,"dpdk \u5185\u90e8\u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u4f7f\u7528",(0,l.kt)("strong",{parentName:"p"},"\u786c\u4ef6\u5411\u91cf\u6307\u4ee4"),"\u4f18\u5316\u4f20\u7edf\u7684\u6536\u53d1\u5305\u8fc7\u7a0b\uff0c\u4e3b\u8981\u7684\u4f18\u5316\u5185\u5bb9\u96c6\u4e2d\u5728",(0,l.kt)("strong",{parentName:"p"},"\u6536\u5305\u903b\u8f91\u4e0a"),"\uff0c\u53d1\u5305\u7684\u4e3b\u8981\u8fc7\u7a0b\u4e3a dma \u64cd\u4f5c\uff0c\u4f18\u5316\u7a7a\u95f4\u975e\u5e38\u6709\u9650\u3002"),(0,l.kt)("p",null,"dpdk \u6536\u53d1\u5305 burst \u8fc7\u7a0b\u662f\u4e00\u4e2a\u975e\u5e38\u4ee3\u8868\u6027\u7684\u6279\u91cf\u5316\u5904\u7406\u573a\u666f\uff0c\u5c06",(0,l.kt)("strong",{parentName:"p"},"\u786c\u4ef6\u5411\u91cf\u6307\u4ee4\u96c6\u6210\u5230\u6279\u91cf\u5316\u4e0a"),"\uff0c\u5e26\u6765\u4e86",(0,l.kt)("strong",{parentName:"p"},"\u5c0f\u5305\u6027\u80fd\u7684\u663e\u8457\u63d0\u5347"),"\u4ee5\u53ca\u7a0b\u5e8f cpu \u5360\u7528\u7387\u7684\u4e0b\u964d\uff0c\u662f",(0,l.kt)("strong",{parentName:"p"},"\u6316\u6398\u786c\u4ef6\u7279\u6027"),"\u8fbe\u6210\u6027\u80fd\u4f18\u5316\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u6848\u4f8b\u3002"),(0,l.kt)("p",null,"\u540c\u65f6\u9700\u8981\u8bf4\u660e\u7684\u662f dpdk \u4f7f\u7528\u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570",(0,l.kt)("strong",{parentName:"p"},"\u9700\u8981\u6ee1\u8db3\u4e00\u5b9a\u7684\u6761\u4ef6"),"\uff0c\u8fd9\u4e2a\u6761\u4ef6\u56e0",(0,l.kt)("strong",{parentName:"p"},"\u7f51\u5361\u4e0d\u540c"),"\u800c\u6709\u6240\u533a\u522b\uff0c\u8fd9\u4e9b\u6761\u4ef6\u5305\u62ec\u4e86 dpdk \u63a5\u53e3\u521d\u59cb\u5316\u65f6\u914d\u7f6e\u7684\u4e00\u4e9b\u786c\u4ef6\u5378\u8f7d\u529f\u80fd\uff0c\u9700\u8981\u975e\u5e38\u6ce8\u610f\uff01"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u5907\u6ce8\uff1adpdk \u5185\u90e8\u4e0d\u76f4\u63a5\u4f7f\u7528\u5411\u91cf\u6307\u4ee4\u800c\u662f\u901a\u8fc7\u4f7f\u7528\u4e00\u5c42\u5c01\u88c5\u51fd\u6570\u6765\u95f4\u63a5\u8c03\u7528\uff01")))}i.isMDXComponent=!0}}]);