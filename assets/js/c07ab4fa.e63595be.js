"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[9154],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return c}});var r=n(7294);function _(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){_(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,_=function(t,e){if(null==t)return{};var n,r,_={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(_[n]=t[n]);return _}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(_[n]=t[n])}return _}var p=r.createContext({}),a=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=a(t.components);return r.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},s=r.forwardRef((function(t,e){var n=t.components,_=t.mdxType,o=t.originalType,p=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),s=a(n),c=_,f=s["".concat(p,".").concat(c)]||s[c]||u[c]||o;return n?r.createElement(f,l(l({ref:e},d),{},{components:n})):r.createElement(f,l({ref:e},d))}));function c(t,e){var n=arguments,_=e&&e.mdxType;if("string"==typeof t||_){var o=n.length,l=new Array(o);l[0]=s;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:_,l[1]=i;for(var a=2;a<o;a++)l[a]=n[a];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},7308:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return i},metadata:function(){return a},toc:function(){return u}});var r=n(7462),_=n(3366),o=(n(7294),n(3905)),l=["components"],i={},p=void 0,a={permalink:"/longyu.github.io/blog/dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790",editUrl:"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790.md",source:"@site/blog/dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790.md",title:"dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790",description:"l2fwd \u662f dpdk \u4e8c\u5c42\u8f6c\u53d1\u793a\u4f8b\uff0c\u5b83\u4f1a\u5c06\u4e00\u4e2a\u53e3\u6536\u5230\u7684\u62a5\u6587\u7ecf\u8fc7\u76f8\u90bb\u53e3\u8f6c\u53d1\u51fa\u53bb\uff0c\u5728\u65e5\u5e38\u6d4b\u8bd5\u4e2d\u7ecf\u5e38\u7528\u5230\u3002",date:"2022-06-21T00:32:49.000Z",formattedDate:"2022\u5e746\u670821\u65e5",tags:[],readingTime:20.015,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790",permalink:"/longyu.github.io/blog/dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790"},nextItem:{title:"\u95ee\u9898\u63cf\u8ff0",permalink:"/longyu.github.io/blog/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u4e0e\u5185\u6838\u5185\u5b58\u6cc4\u9732\u95ee\u9898"}},d={authorsImageUrls:[]},u=[{value:"l2fwd \u521d\u59cb\u5316 eal \u5e76\u89e3\u6790\u53c2\u6570",id:"l2fwd-\u521d\u59cb\u5316-eal-\u5e76\u89e3\u6790\u53c2\u6570",level:2},{value:"l2fwd_parse_args \u51fd\u6570",id:"l2fwd_parse_args-\u51fd\u6570",level:2},{value:"\u521b\u5efa pktmbuf pool \u5e76 reset l2fwd_dst_ports \u7ed3\u6784\u4f53",id:"\u521b\u5efa-pktmbuf-pool-\u5e76-reset-l2fwd_dst_ports-\u7ed3\u6784\u4f53",level:2},{value:"\u521d\u59cb\u5316\u8f6c\u53d1\u7aef\u53e3\u5173\u7cfb\u6570\u7ec4",id:"\u521d\u59cb\u5316\u8f6c\u53d1\u7aef\u53e3\u5173\u7cfb\u6570\u7ec4",level:2},{value:"\u521d\u59cb\u5316\u6bcf\u4e2a lcore \u4e0a\u7ed1\u5b9a\u7684\u6536\u5305\u7aef\u53e3\u5173\u7cfb\u6570\u7ec4",id:"\u521d\u59cb\u5316\u6bcf\u4e2a-lcore-\u4e0a\u7ed1\u5b9a\u7684\u6536\u5305\u7aef\u53e3\u5173\u7cfb\u6570\u7ec4",level:2},{value:"\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u4f7f\u80fd\u7684\u63a5\u53e3",id:"\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u4f7f\u80fd\u7684\u63a5\u53e3",level:2},{value:"\u5728\u6bcf\u4e2a lcore \u4e0a\u8fd0\u884c l2fwd_launch_one_lcore \u51fd\u6570",id:"\u5728\u6bcf\u4e2a-lcore-\u4e0a\u8fd0\u884c-l2fwd_launch_one_lcore-\u51fd\u6570",level:2},{value:"\u6536\u53d1\u5305\u7ebf\u7a0b\u7684\u6267\u884c\u8fc7\u7a0b",id:"\u6536\u53d1\u5305\u7ebf\u7a0b\u7684\u6267\u884c\u8fc7\u7a0b",level:2}],s={toc:u};function c(t){var e=t.components,n=(0,_.Z)(t,l);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"l2fwd \u662f dpdk \u4e8c\u5c42\u8f6c\u53d1\u793a\u4f8b\uff0c\u5b83\u4f1a\u5c06\u4e00\u4e2a\u53e3\u6536\u5230\u7684\u62a5\u6587\u7ecf\u8fc7\u76f8\u90bb\u53e3\u8f6c\u53d1\u51fa\u53bb\uff0c\u5728\u65e5\u5e38\u6d4b\u8bd5\u4e2d\u7ecf\u5e38\u7528\u5230\u3002"),(0,o.kt)("p",null,"\u4e0b\u9762\u6211\u4ece\u6e90\u7801\u5165\u624b\uff0c\u5206\u6790\u4e0b l2fwd \u5185\u90e8\u7684\u5de5\u4f5c\u539f\u7406\u3002"),(0,o.kt)("h2",{id:"l2fwd-\u521d\u59cb\u5316-eal-\u5e76\u89e3\u6790\u53c2\u6570"},"l2fwd \u521d\u59cb\u5316 eal \u5e76\u89e3\u6790\u53c2\u6570"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'516 int\n517 main(int argc, char **argv)\n518 {\n519     struct lcore_queue_conf *qconf;\n520     struct rte_eth_dev_info dev_info;\n521     int ret;\n522     uint8_t nb_ports;\n523     uint8_t nb_ports_available;\n524     uint8_t portid, last_port;\n525     unsigned lcore_id, rx_lcore_id;\n526     unsigned nb_ports_in_mask = 0;\n527 \n528     /* init EAL */\n529     ret = rte_eal_init(argc, argv);\n530     if (ret < 0)\n531         rte_exit(EXIT_FAILURE, "Invalid EAL arguments\\n");\n532     argc -= ret;\n533     argv += ret;\n534 \n535     force_quit = false;\n536     signal(SIGINT, signal_handler);\n537     signal(SIGTERM, signal_handler);\n538 \n539     /* parse application arguments (after the EAL ones) */\n540     ret = l2fwd_parse_args(argc, argv);\n541     if (ret < 0)\n542         rte_exit(EXIT_FAILURE, "Invalid L2FWD arguments\\n");\n')),(0,o.kt)("p",null,"\u7b2c 529 \u884c\u8c03\u7528 rte_eal_init \u521d\u59cb\u5316 eal \u73af\u5883\uff0c\u7531\u4e8e rte_eal_init \u4e2d\u4f1a\u5bf9 dpdk \u5185\u90e8\u7684\u53c2\u6570\u8fdb\u884c\u89e3\u6790\uff0cl2fwd \u9700\u8981\u8c03\u6574 argc \u4e0e argv \u7684\u4f4d\u7f6e\u4ee5\u89e3\u6790 l2fwd \u81ea\u5b9a\u4e49\u7684\u53c2\u6570\u3002"),(0,o.kt)("p",null,"\u7b2c 535 \u5c06 force_quit \u53d8\u91cf\u8bbe\u7f6e\u4e3a false\uff0c536 ~ 537 \u884c\u6ce8\u518c\u4e86 SIGINT \u4e0e SIGTERM \u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570 signal_handler\uff0c\u6b64\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'506 static void\n507 signal_handler(int signum)\n508 {\n509     if (signum == SIGINT || signum == SIGTERM) {\n510         printf("\\n\\nSignal %d received, preparing to exit...\\n",\n511                 signum);\n512         force_quit = true;\n513     }\n514 }\n')),(0,o.kt)("p",null,"signal_handler \u51fd\u6570\u5411\u7ec8\u7aef\u6253\u5370\u51c6\u5907\u9000\u51fa\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u5c06 force_quit \u8bbe\u7f6e\u4e3a true\uff0c\u5f53\u6536\u53d1\u5305\u7ebf\u7a0b\u68c0\u6d4b\u5230 force_quit \u4e3a true \u540e\u4e3b\u52a8\u9000\u51fa\uff0c\u7a0b\u5e8f\u4e3b\u52a8\u7ec8\u6b62\uff0c\u9000\u51fa\u524d\u4f1a\u91ca\u653e\u5360\u7528\u7684\u63a5\u53e3\uff0c\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'709     for (portid = 0; portid < nb_ports; portid++) {\n710         if ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\n711             continue;\n712         printf("Closing port %d...", portid);\n713         rte_eth_dev_stop(portid);\n714         rte_eth_dev_close(portid);\n715         printf(" Done\\n");\n716     }\n717     printf("Bye...\\n");\n')),(0,o.kt)("p",null,"\u5728 for \u5faa\u73af\u4e2d\u5224\u65ad\u5f53\u524d\u63a5\u53e3\u662f\u5426\u662f l2fwd \u4f7f\u80fd\u7684\u63a5\u53e3\uff0c\u662f\u5219\u6253\u5370\u4fe1\u606f\u4fe1\u606f\u5e76 stop \u4e0e close \u63a5\u53e3\uff0c\u5426\u5219\u8df3\u8fc7\u63a5\u53e3\u3002"),(0,o.kt)("p",null,"\u7b2c 540 \u884c\u8c03\u7528\u7684 l2fwd_parse_args \u89e3\u6790 l2fwd \u5185\u90e8\u5b9a\u4e49\u7684\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u5728 ",(0,o.kt)("inlineCode",{parentName:"p"},"--"),"\u4e4b\u540e\u8f93\u5165\uff0c\u4e0e dpdk \u5185\u90e8\u53c2\u6570\u9694\u79bb\u5f00\u3002"),(0,o.kt)("h2",{id:"l2fwd_parse_args-\u51fd\u6570"},"l2fwd_parse_args \u51fd\u6570"),(0,o.kt)("p",null,"l2fwd \u652f\u6301\u4e09\u4e2a\u53c2\u6570\uff0c-p \u53c2\u6570\u4f7f\u7528\u5341\u516d\u8fdb\u5236\u63a9\u7801\u8868\u793a\u8981\u4f7f\u80fd\u7684\u63a5\u53e3\uff0c\u6bcf\u4e00\u4f4d\u8868\u793a\u4e00\u4e2a\u63a5\u53e3\uff1b-q \u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6bcf\u4e2a\u6838\u4e0a\u7684\u961f\u5217\u6570\u76ee\uff1b-T \u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u65f6\u95f4\u5468\u671f\uff0c\u4e0d\u592a\u5e38\u7528\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'380 /* Parse the argument given in the command line of the application */\n381 static int\n382 l2fwd_parse_args(int argc, char **argv)\n383 {\n384     int opt, ret;\n385     char **argvopt;\n386     int option_index;\n387     char *prgname = argv[0];\n388     static struct option lgopts[] = {\n389         {NULL, 0, 0, 0}\n390     };\n391 \n392     argvopt = argv;\n393 \n394     while ((opt = getopt_long(argc, argvopt, "p:q:T:",\n395                   lgopts, &option_index)) != EOF) {\n396 \n397         switch (opt) {\n398         /* portmask */\n399         case \'p\':\n400             l2fwd_enabled_port_mask = l2fwd_parse_portmask(optarg);\n401             if (l2fwd_enabled_port_mask == 0) {\n402                 printf("invalid portmask\\n");\n403                 l2fwd_usage(prgname);\n404                 return -1;\n405             }\n406             break;\n407 \n408         /* nqueue */\n409         case \'q\':\n410             l2fwd_rx_queue_per_lcore = l2fwd_parse_nqueue(optarg);\n411             if (l2fwd_rx_queue_per_lcore == 0) {\n412                 printf("invalid queue number\\n");\n413                 l2fwd_usage(prgname);\n414                 return -1;\n415             }\n416             break;\n417 \n418         /* timer period */\n419         case \'T\':\n420             timer_period = l2fwd_parse_timer_period(optarg) * 1000 * TIMER_MILLISECOND;\n421             if (timer_period < 0) {\n422                 printf("invalid timer period\\n");\n423                 l2fwd_usage(prgname);\n424                 return -1;\n425             }   \n426             break;\n427             \n428         /* long options */\n429         case 0:\n430             l2fwd_usage(prgname);\n431             return -1;\n432             \n433         default:\n434             l2fwd_usage(prgname);\n435             return -1;\n436         }   \n437     }   \n438 \n439     if (optind >= 0)\n440         argv[optind-1] = prgname;\n441 \n442     ret = optind-1;\n443     optind = 0; /* reset getopt lib */\n444     return ret;\n')),(0,o.kt)("p",null,"\u7b2c 532 \u4e0e 533 \u884c\u5bf9 argc \u4e0e argv \u8fdb\u884c\u4e86\u8c03\u6574\uff0cl2fwd \u5f97\u4ee5\u6b63\u5e38\u89e3\u6790\u5185\u90e8\u53c2\u6570\u3002l2fwd_parse_args \u8c03\u7528\u5173\u7cfb\u89c1\u4e0b\u56fe\uff1a"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/20210419211237930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"}),"\nl2fwd \u901a\u8fc7 getopt_long \u4f9d\u6b21\u89e3\u6790\u6bcf\u4e2a\u53c2\u6570\uff0coptarg \u6307\u5411\u53c2\u6570\u7684\u503c\uff0c\u901a\u8fc7\u8c03\u7528 strtoul\u3001strtol \u6765\u89e3\u6790\u53c2\u6570\u503c\u5e76\u5b58\u50a8\u5230\u76f8\u5e94\u7684\u53d8\u91cf\u4e2d\u3002"),(0,o.kt)("p",null,"\u53c2\u6570\u89e3\u6790\u5b8c\u6210\u540e\uff0cl2fwd_enabled_port_mask \u53d8\u91cf\u4fdd\u5b58 l2fwd \u7a0b\u5e8f\u8981\u4f7f\u80fd\u7684\u63a5\u53e3\uff0cl2fwd_rx_queue_per_lcore \u53d8\u91cf\u4fdd\u5b58\u6bcf\u4e00\u4e2a\u903b\u8f91\u6838\u4e0a\u7684 rx \u961f\u5217\u6570\u76ee\uff0ctimer_period \u4fdd\u5b58 drain \u7684\u65f6\u95f4\u3002"),(0,o.kt)("h2",{id:"\u521b\u5efa-pktmbuf-pool-\u5e76-reset-l2fwd_dst_ports-\u7ed3\u6784\u4f53"},"\u521b\u5efa pktmbuf pool \u5e76 reset l2fwd_dst_ports \u7ed3\u6784\u4f53"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'544     /* create the mbuf pool */\n545     l2fwd_pktmbuf_pool = rte_pktmbuf_pool_create("mbuf_pool", NB_MBUF, 32,\n546         0, RTE_MBUF_DEFAULT_BUF_SIZE, rte_socket_id());\n547     if (l2fwd_pktmbuf_pool == NULL)\n548         rte_exit(EXIT_FAILURE, "Cannot init mbuf pool\\n");\n549 \n550     nb_ports = rte_eth_dev_count();\n551     if (nb_ports == 0)\n552         rte_exit(EXIT_FAILURE, "No Ethernet ports - bye\\n");\n553 \n554     if (nb_ports > RTE_MAX_ETHPORTS)\n555         nb_ports = RTE_MAX_ETHPORTS;\n556 \n557     /* reset l2fwd_dst_ports */\n558     for (portid = 0; portid < RTE_MAX_ETHPORTS; portid++)\n559         l2fwd_dst_ports[portid] = 0;\n560     last_port = 0;\n')),(0,o.kt)("p",null,"\u7b2c 545 \u884c\u521b\u5efa\u4e86 l2fwd \u7684 pktmbuf \u5185\u5b58\u6c60\uff0cpktmbuf \u7edf\u4e00\u5728 pktmbuf \u5185\u5b58\u6c60\u4e2d\u5206\u914d\u56de\u6536\uff0c\u5f53\u521b\u5efa\u5931\u8d25\u540e l2fwd \u6253\u5370\u5931\u8d25\u4fe1\u606f\u5e76\u9000\u51fa\u3002"),(0,o.kt)("p",null,"550~556 \u884c\u83b7\u53d6\u53ef\u7528\u7684\u63a5\u53e3\u6570\u91cf\uff0c\u5f53\u6570\u91cf\u4e3a 0 \u65f6\u6253\u5370\u5931\u8d25\u4fe1\u606f\u540e\u9000\u51fa\uff0c\u5f53\u6570\u91cf\u5927\u4e8e config \u4e2d\u914d\u7f6e\u7684\u6700\u5927\u63a5\u53e3\u6570\u76ee\u65f6\uff0c\u5c06 nb_ports \u91cd\u7f6e\u4e3a\u652f\u6301\u7684\u6700\u5927\u63a5\u53e3\u6570\u76ee\u3002"),(0,o.kt)("p",null,"557~560 \u884c reset \u4e86 l2fwd_dst_ports\uff0c\u6b64\u6570\u7ec4\u7528\u4e8e\u4fdd\u5b58\u76f8\u90bb\u8f6c\u53d1\u63a5\u53e3\u7684\u5173\u7cfb\uff0c\u5728\u6536\u53d1\u5305\u7ebf\u7a0b\u4e2d\u88ab\u8bbf\u95ee\u7528\u4e8e\u786e\u5b9a\u53d1\u5305\u4f7f\u7528\u7684\u7aef\u53e3\u53f7\u3002"),(0,o.kt)("h2",{id:"\u521d\u59cb\u5316\u8f6c\u53d1\u7aef\u53e3\u5173\u7cfb\u6570\u7ec4"},"\u521d\u59cb\u5316\u8f6c\u53d1\u7aef\u53e3\u5173\u7cfb\u6570\u7ec4"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'562     /*\n563      * Each logical core is assigned a dedicated TX queue on each port.\n564      */\n565     for (portid = 0; portid < nb_ports; portid++) {\n566         /* skip ports that are not enabled */\n567         if ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\n568             continue;\n569 \n570         if (nb_ports_in_mask % 2) {\n571             l2fwd_dst_ports[portid] = last_port;\n572             l2fwd_dst_ports[last_port] = portid;\n573         }\n574         else\n575             last_port = portid;\n576 \n577         nb_ports_in_mask++;\n578 \n579         rte_eth_dev_info_get(portid, &dev_info);\n580     }\n581     if (nb_ports_in_mask % 2) {\n582         printf("Notice: odd number of ports in portmask.\\n");\n583         l2fwd_dst_ports[last_port] = last_port;\n584     }\n')),(0,o.kt)("p",null,"565~584 \u5b8c\u6210 l2fwd_dst_ports \u7aef\u53e3\u7684\u5173\u8054\u8868\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u786e\u5b9a\u6bcf\u4e2a\u4f7f\u80fd\u7aef\u53e3\u7684\u53d1\u5305\u7aef\u53e3"),"\u3002\u5f53\u4f7f\u80fd\u7684\u7aef\u53e3\u6570\u76ee\u4e3a\u5076\u6570\u65f6\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u4e0a\u4e00\u4e2a\u53e3\u4f7f\u7528\u4e0b\u4e00\u4e2a\u53e3\u53d1\u5305\uff0c\u4e0b\u4e00\u4e2a\u53e3\u4f7f\u7528\u4e0a\u4e00\u4e2a\u53e3\u53d1\u5305"),"\uff0c\u5f53\u4f7f\u80fd\u7684\u7aef\u53e3\u6570\u76ee\u4e3a\u5947\u6570\u65f6\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u6700\u540e\u7684\u5355\u4e2a\u53e3\u53d1\u5305\u4f7f\u7528\u5f53\u524d\u53e3"),"\u3002"),(0,o.kt)("h2",{id:"\u521d\u59cb\u5316\u6bcf\u4e2a-lcore-\u4e0a\u7ed1\u5b9a\u7684\u6536\u5305\u7aef\u53e3\u5173\u7cfb\u6570\u7ec4"},"\u521d\u59cb\u5316\u6bcf\u4e2a lcore \u4e0a\u7ed1\u5b9a\u7684\u6536\u5305\u7aef\u53e3\u5173\u7cfb\u6570\u7ec4"),(0,o.kt)("p",null,"l2fwd \u652f\u6301\u5728\u5355\u4e2a lcore \u4e0a\u7ed1\u5b9a\u591a\u4e2a\u53e3\u8fdb\u884c\u6536\u5305\uff0c\u4e3a\u6b64 l2fwd \u5b9a\u4e49\u4e86 lcore_queue_conf \u7ed3\u6784\u4f53\uff0c\u6b64\u7ed3\u6784\u4f53\u7684\u6570\u91cf\u4e3a\u7cfb\u7edf\u652f\u6301\u7684 lcore \u7684\u6700\u5927\u503c\u3002"),(0,o.kt)("p",null,"\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-\uff43"},"101 static unsigned int l2fwd_rx_queue_per_lcore = 1;\n102 \n103 #define MAX_RX_QUEUE_PER_LCORE 16\n104 #define MAX_TX_QUEUE_PER_PORT 16\n105 struct lcore_queue_conf {\n106     unsigned n_rx_port;\n107     unsigned rx_port_list[MAX_RX_QUEUE_PER_LCORE];\n108 } __rte_cache_aligned;\n109 struct lcore_queue_conf lcore_queue_conf[RTE_MAX_LCORE];  \n")),(0,o.kt)("p",null,"n_rx_port \u4ee3\u8868\u4e00\u4e2a lcore_queue_conf \u4e2d\u7ed1\u5b9a\u7684\u6536\u5305\u7aef\u53e3\u6570\u76ee\uff0crx_port_list \u4e2d\u4fdd\u5b58 lcore_queue_conf \u4e2d\u7684\u6bcf\u4e00\u4e2a\u6536\u5305\u7aef\u53e3\u7684 portid\u3002"),(0,o.kt)("p",null,"\u7b2c 109 \u884c\u5b9a\u4e49 RTE_MAX_LCORE \u7684\u4f5c\u7528\u5728\u4e8e\u901a\u8fc7\u4f7f\u7528 lcore_id \u8fd9\u79cd\u6bcf\u7ebf\u7a0b\u6570\u636e\u6765\u9694\u79bb\u6bcf\u4e2a lcore \u7684 queue_conf \u914d\u7f6e\u3002"),(0,o.kt)("p",null,"lcore_queue_conf \u521d\u59cb\u5316\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'586     rx_lcore_id = 0;\n587     qconf = NULL;\n588 \n589     /* Initialize the port/queue configuration of each logical core */\n590     for (portid = 0; portid < nb_ports; portid++) {\n591         /* skip ports that are not enabled */\n592         if ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\n593             continue;\n594 \n595         /* get the lcore_id for this port */\n596         while (rte_lcore_is_enabled(rx_lcore_id) == 0 ||\n597                lcore_queue_conf[rx_lcore_id].n_rx_port ==\n598                l2fwd_rx_queue_per_lcore) {\n599             rx_lcore_id++;\n600             if (rx_lcore_id >= RTE_MAX_LCORE)\n601                 rte_exit(EXIT_FAILURE, "Not enough cores\\n");\n602         }\n603 \n604         if (qconf != &lcore_queue_conf[rx_lcore_id])\n605             /* Assigned a new logical core in the loop above. */\n606             qconf = &lcore_queue_conf[rx_lcore_id];\n607 \n608         qconf->rx_port_list[qconf->n_rx_port] = portid;\n609         qconf->n_rx_port++;\n610         printf("Lcore %u: RX port %u\\n", rx_lcore_id, (unsigned) portid);\n611     }\n612 \n613     nb_ports_available = nb_ports;\n')),(0,o.kt)("p",null,"596 ~ 603 \u884c\u4e3a\u5f53\u524d port \u627e\u5230\u4e00\u4e2a\u53ef\u7528\u7684 lcore_id\uff0c\u5f53 lcore_id \u88ab\u4f7f\u80fd\uff0c\u4e14\u6b64 lcore_id \u5bf9\u5e94\u7684 queue_conf \u4e2d\u7ed1\u5b9a\u7684\u6536\u5305\u63a5\u53e3\u6570\u76ee\u4e0d\u7b49\u4e8e l2fwd_rx_queue_per_lcore\uff08\u89e3\u6790\u53c2\u6570\u8bbe\u5b9a\u7684\u6bcf\u4e2a\u6838\u4e0a\u7684\u961f\u5217\u6570\u76ee\uff09\u65f6\uff0c\u6b64 lcore_id \u53ef\u7528\u3002"),(0,o.kt)("p",null,"\u4e0d\u6ee1\u8db3\u5982\u4e0a\u8981\u6c42\u65f6\uff0clcore_id \u9012\u589e\uff0c\u5f53 lcore_id \u7684\u6570\u76ee\u8d85\u8fc7\u7cfb\u7edf\u652f\u6301\u7684\u6700\u5927 lcore \u6570\u76ee\u65f6\uff0c\u7a0b\u5e8f\u6253\u5370\u5f02\u5e38\u4fe1\u606f\u5e76\u9000\u51fa\u3002"),(0,o.kt)("p",null,"604~606 \u884c\u83b7\u53d6\u5f53\u524d\u63a5\u53e3\u4f7f\u7528\u7684 lcore \u5bf9\u5e94\u7684 lcore_queue_conf \u7ed3\u6784\u4f53\u5730\u5740\uff0c608~610 \u884c\u5c06\u5f53\u524d\u7684 portid \u8d4b\u503c\u7ed9 lcore_queue_conf \u7ed3\u6784\u4f53\u4e2d rx_port_list \u6570\u7ec4\u4e2d\u7684\u5bf9\u5e94\u9879\u76ee\uff0c\u7136\u540e\u5bf9 n_rx_port \u52a0 1\uff0c\u8868\u793a\u6b64 lcore_queue_conf \u4e2d\u7ed1\u5b9a\u7684\u7aef\u53e3\u6570\u76ee\u53c8\u589e\u52a0\u4e86\u4e00\u4e2a\u3002"),(0,o.kt)("p",null,"l2fwd \u9ed8\u8ba4\u5728\u4e00\u4e2a lcore \u4e0a\u7ed1\u5b9a\u4e00\u4e2a\u63a5\u53e3\uff0c\u8fd9\u6837\u4f7f\u80fd\u4e86\u51e0\u4e2a\u63a5\u53e3\u5c31\u9700\u8981\u76f8\u5e94\u6570\u76ee\u7684 lcore\uff0c\u5f53 lcore \u4e0d\u8db3\u65f6\u5c31\u4f1a\u56e0\u4e3a\u65e0\u6cd5\u5206\u914d lcore \u800c\u9000\u51fa\u3002"),(0,o.kt)("h2",{id:"\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u4f7f\u80fd\u7684\u63a5\u53e3"},"\u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u4f7f\u80fd\u7684\u63a5\u53e3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'613     nb_ports_available = nb_ports;\n614\n615     /* Initialise each port */\n616     for (portid = 0; portid < nb_ports; portid++) {\n617         /* skip ports that are not enabled */\n618         if ((l2fwd_enabled_port_mask & (1 << portid)) == 0) {\n619             printf("Skipping disabled port %u\\n", (unsigned) portid);\n620             nb_ports_available--;\n621             continue;\n622         }\n623         /* init port */\n624         printf("Initializing port %u... ", (unsigned) portid);\n625         fflush(stdout);\n626         ret = rte_eth_dev_configure(portid, 1, 1, &port_conf);\n627         if (ret < 0)\n628             rte_exit(EXIT_FAILURE, "Cannot configure device: err=%d, port=%u\\n",\n629                   ret, (unsigned) portid);\n630 \n631         rte_eth_macaddr_get(portid,&l2fwd_ports_eth_addr[portid]);\n632 \n633         /* init one RX queue */\n634         fflush(stdout);\n635         ret = rte_eth_rx_queue_setup(portid, 0, nb_rxd,\n636                          rte_eth_dev_socket_id(portid),\n637                          NULL,\n638                          l2fwd_pktmbuf_pool);\n639         if (ret < 0)\n640             rte_exit(EXIT_FAILURE, "rte_eth_rx_queue_setup:err=%d, port=%u\\n",\n641                   ret, (unsigned) portid);\n642 \n643         /* init one TX queue on each port */\n644         fflush(stdout);\n645         ret = rte_eth_tx_queue_setup(portid, 0, nb_txd,\n646                 rte_eth_dev_socket_id(portid),\n647                 NULL);\n648         if (ret < 0)\n649             rte_exit(EXIT_FAILURE, "rte_eth_tx_queue_setup:err=%d, port=%u\\n",\n650                 ret, (unsigned) portid);\n651 \n652         /* Initialize TX buffers */\n653         tx_buffer[portid] = rte_zmalloc_socket("tx_buffer",\n654                 RTE_ETH_TX_BUFFER_SIZE(MAX_PKT_BURST), 0,\n655                 rte_eth_dev_socket_id(portid));\n656         if (tx_buffer[portid] == NULL)                                    \n660         rte_eth_tx_buffer_init(tx_buffer[portid], MAX_PKT_BURST);\n661 \n662         ret = rte_eth_tx_buffer_set_err_callback(tx_buffer[portid],\n663                 rte_eth_tx_buffer_count_callback,\n664                 &port_statistics[portid].dropped);\n665         if (ret < 0)\n666                 rte_exit(EXIT_FAILURE, "Cannot set error callback for "\n667                         "tx buffer on port %u\\n", (unsigned) portid);\n668 \n669         /* Start device */\n670         ret = rte_eth_dev_start(portid);\n671         if (ret < 0)\n672             rte_exit(EXIT_FAILURE, "rte_eth_dev_start:err=%d, port=%u\\n",\n673                   ret, (unsigned) portid);\n674 \n675         printf("done: \\n");\n676 \n677         rte_eth_promiscuous_enable(portid);\n678 \n679         printf("Port %u, MAC address: %02X:%02X:%02X:%02X:%02X:%02X\\n\\n",\n680                 (unsigned) portid,\n681                 l2fwd_ports_eth_addr[portid].addr_bytes[0],\n682                 l2fwd_ports_eth_addr[portid].addr_bytes[1],\n683                 l2fwd_ports_eth_addr[portid].addr_bytes[2],\n684                 l2fwd_ports_eth_addr[portid].addr_bytes[3],\n685                 l2fwd_ports_eth_addr[portid].addr_bytes[4],\n686                 l2fwd_ports_eth_addr[portid].addr_bytes[5]);\n687 \n688         /* initialize port stats */\n689         memset(&port_statistics, 0, sizeof(port_statistics));\n690     }\n')),(0,o.kt)("p",null,"\u7b2c 613 \u884c\u5c06 nb_port_available \u53d8\u91cf\u7684\u503c\u8bbe\u7f6e\u4e3a nb_ports\uff0c\u5176\u503c\u4ee3\u8868 dpdk \u53ef\u7528\u7684\u63a5\u53e3\u6570\u76ee\uff0c\u68c0\u6d4b\u5230\u4e00\u4e2a dpdk \u53ef\u7528\u800c l2fwd \u5374\u6ca1\u4f7f\u80fd\u7684\u63a5\u53e3\uff0c\u90fd\u5c06 nb_port_available \u7684\u503c\u51cf\u4e00\uff0c\u5f53 for \u5faa\u73af\u904d\u5386\u5b8c\u6210\u540e\uff0c\u5224\u65ad nb_port_available \u7684\u503c\uff0c\u5982\u679c\u53d8\u4e3a 0\uff0c\u8bf4\u660e\u6ca1\u6709\u4f7f\u80fd\u4e00\u4e2a\u63a5\u53e3\uff0c\u6253\u5370\u62a5\u9519\u4fe1\u606f\u5e76\u9000\u51fa\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'692     if (!nb_ports_available) {\n693         rte_exit(EXIT_FAILURE,\n694             "All available ports are disabled. Please set portmask.\\n");\n695     }   \n')),(0,o.kt)("p",null,"\u5f53\u81f3\u5c11\u6709\u4e00\u4e2a\u63a5\u53e3\u4f7f\u80fd\u65f6\uff0c623 \u884c\u4e4b\u540e\u7684\u903b\u8f91\u4f1a\u88ab\u6267\u884c\u3002626 \u884c\u8c03\u7528 rte_eth_dev_configure \u914d\u7f6e\u4f7f\u7528\u4e00\u4e2a\u6536\u53d1\u961f\u5217\uff0c\u4e14\u8bbe\u7f6e port_conf\u3002"),(0,o.kt)("p",null,"631 \u884c\u83b7\u53d6\u5f53\u524d\u63a5\u53e3\u7684 mac \u5730\u5740\u5e76\u586b\u5145\u5230 l2fwd_ports_eth_addr \u6570\u7ec4\u4e2d\u5f53\u524d\u63a5\u53e3\u5360\u7528\u7684\u8868\u9879\u4e2d\uff0c\u8fd9\u4e00 mac \u5730\u5740\u5728 l2fwd_simple_forward \u51fd\u6570\u4fee\u6539\u62a5\u6587\u7684\u6e90 mac \u5730\u5740\u65f6\u88ab\u4f7f\u7528\uff0c\u662f\u5178\u578b\u7684\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u6848\u4f8b\u3002"),(0,o.kt)("p",null,"633 \uff5e650 \u884c\u521d\u59cb\u5316 rx queue \u4e0e tx queue\uff0c\u8bbe\u7f6e\u6bcf\u4e2a queue \u4e0a\u7684\u63cf\u8ff0\u7b26\u6570\u76ee\u53ca\u4f7f\u7528\u7684 pktmbuf \u5185\u5b58\u6c60\uff0c\u5f53\u8bbe\u7f6e\u5931\u8d25\u65f6\u6253\u5370\u5f02\u5e38\u4fe1\u606f\u540e\u9000\u51fa\u3002"),(0,o.kt)("p",null,"652~668 \u884c\u521d\u59cb\u5316\u5f53\u524d port \u7684 rte_eth_dev_tx_buffer \u7ed3\u6784\uff0c\u6b64\u7ed3\u6784\u5b9a\u4e49\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-\uff43"},"struct rte_eth_dev_tx_buffer {\n    buffer_tx_error_fn error_callback;\n    void *error_userdata;\n    uint16_t size;           /**< Size of buffer for buffered tx */\n    uint16_t length;         /**< Number of packets in the array */\n    struct rte_mbuf *pkts[];\n    /**< Pending packets to be sent on explicit flush or when full */\n};\n")),(0,o.kt)("p",null,"\u53ef\u4ee5\u770b\u5230 pkts \u6570\u7ec4\u6ca1\u6709\u8bbe\u5b9a\u5927\u5c0f\uff0c\u7b2c 653 \u884c\u8c03\u7528 rte_zmalloc_socket \u7684\u65f6\u5019\uff0c\u4f20\u9012\u7684\u5927\u5c0f\u4e3a RTE_ETH_TX_BUFFER_SIZE(MAX_PKT_BURST)\u3002"),(0,o.kt)("p",null,"RTE_ETH_TX_BUFFER_SIZE \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a"),(0,o.kt)("p",null,"#define RTE_ETH_TX_BUFFER_SIZE(sz) \\\n(sizeof(struct rte_eth_dev_tx_buffer) + (sz) ",(0,o.kt)("em",{parentName:"p"}," sizeof(struct rte_mbuf "),"))"),(0,o.kt)("p",null,"\u53ef\u4ee5\u53d1\u73b0\u5b83\u989d\u5916\u521b\u5efa\u4e86 MAX_PKT_BURST \u4e2a\u6307\u9488\uff0cpkts \u5c31\u6307\u5411\u8fd9\u4e00\u989d\u5916\u5185\u5b58\u533a\u57df\uff0c\u80fd\u591f\u76f4\u63a5\u83b7\u53d6\u586b\u5145\u7684 mbuf \u5730\u5740\u3002"),(0,o.kt)("p",null,"\u7b2c 660 \u884c\u521d\u59cb\u5316 tx_buffer\uff0c\u6ce8\u610f\u6b64\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u6307\u5b9a\u4e86\u4e00\u4e2a\u9600\u503c\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u5f53 tx_buffer \u4e2d\u7684\u5305\u6570\u76ee\u4f4e\u4e8e\u6b64\u9600\u503c\u65f6 rte_eth_tx_buffer \u4e0d\u4f1a\u7acb\u523b\u53d1\u5305\u51fa\u53bb\uff0c\u7c7b\u4f3c\u4e8e\u7f13\u51b2\u529f\u80fd"),"\u3002 "),(0,o.kt)("p",null,"\u540c\u65f6\u9700\u8981\u8bf4\u660e\u7684\u662f rte_eth_tx_buffer_init \u4f1a\u6ce8\u518c\u4e00\u4e2a\u9ed8\u8ba4\u7684\u56de\u8c03\u51fd\u6570 rte_eth_tx_buffer_drop_callback\uff0c\u6b64\u56de\u8c03\u51fd\u6570\u4f1a",(0,o.kt)("strong",{parentName:"p"},"\u8c03\u7528 rte_pktmbuf_free \u5c06\u6ca1\u6709\u6210\u529f\u53d1\u9001\u51fa\u53bb\u7684\u5305\u91ca\u653e\u6389\uff0c\u7f3a\u5c11\u8fd9\u4e00\u8fc7\u7a0b\u4f1a\u5bfc\u81f4 mbuf \u6cc4\u9732\uff01")),(0,o.kt)("p",null,"662~668 \u884c\u91cd\u65b0\u6ce8\u518c\u4e86\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u6b64\u56de\u8c03\u51fd\u6570\u5728\u8c03\u7528 rte_pktmbuf_free \u91ca\u653e\u672a\u6210\u529f\u53d1\u9001\u7684\u62a5\u6587\u540e\u4f1a\u5c06\u672a\u6210\u529f\u53d1\u9001\u7684\u62a5\u6587\u6570\u76ee\u52a0\u5230\u6bcf\u4e2a\u63a5\u53e3\u7684 dropped \u5b57\u6bb5\u4e0a\u3002"),(0,o.kt)("p",null,"669~689 \u884c\u9996\u5148 start \u63a5\u53e3\uff0c\u7136\u540e\u5f00\u542f\u6df7\u6dc6\u6a21\u5f0f\uff0c\u8f93\u51fa\u5f53\u524d\u63a5\u53e3\u7684 mac \u5730\u5740\u5e76\u6e05\u7a7a l2fwd \u7684\u63a5\u53e3\u7edf\u8ba1\u6570\u636e\u3002"),(0,o.kt)("p",null,"start \u63a5\u53e3\u65f6\u4f1a up \u63a5\u53e3\uff0c\u53ea\u6709\u5f53\u63a5\u53e3\u5904\u4e8e up \u72b6\u6001\u624d\u80fd\u6b63\u5e38\u6536\u53d1\u5305\uff0c\u5728\u6536\u53d1\u5305\u4e4b\u524d\u9700\u8981\u68c0\u67e5\u63a5\u53e3\u94fe\u8def\u72b6\u6001\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"697     check_all_ports_link_status(nb_ports, l2fwd_enabled_port_mask);\n")),(0,o.kt)("p",null,"697 \u884c\u5c31\u662f\u68c0\u67e5\u63a5\u53e3 link \u72b6\u6001\u7684\u903b\u8f91\uff0ccheck_all_ports_link_status \u4f1a\u5728 9s \u5185\u4e0d\u65ad\u8c03\u7528 rte_eth_link_get_nowait \u83b7\u53d6\u6bcf\u4e00\u4e2a\u63a5\u53e3\u7684 link \u72b6\u6001\uff0c\u5f53\u6240\u6709\u4f7f\u80fd\u63a5\u53e3\u90fd up\u3001timeout \u65f6\uff0c\u51fd\u6570\u4f1a\u8bbe\u7f6e print_flag \u53d8\u91cf\u4e3a 1\uff0c\u6253\u5370\u63a5\u53e3\u72b6\u6001\u4fe1\u606f\u540e\u8fd4\u56de\u3002"),(0,o.kt)("h2",{id:"\u5728\u6bcf\u4e2a-lcore-\u4e0a\u8fd0\u884c-l2fwd_launch_one_lcore-\u51fd\u6570"},"\u5728\u6bcf\u4e2a lcore \u4e0a\u8fd0\u884c l2fwd_launch_one_lcore \u51fd\u6570"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"699     ret = 0;\n700     /* launch per-lcore init on every lcore */\n701     rte_eal_mp_remote_launch(l2fwd_launch_one_lcore, NULL, CALL_MASTER);\n702     RTE_LCORE_FOREACH_SLAVE(lcore_id) {\n703         if (rte_eal_wait_lcore(lcore_id) < 0) {\n704             ret = -1;\n705             break;\n706         }\n707     }\n")),(0,o.kt)("p",null,"701 \u884c\u8c03\u7528 rte_eal_mp_remote_launch \u5728\u6bcf\u4e2a\u4f7f\u80fd\u7684 lcore \u4e0a\u521d\u59cb\u5316\u5c06\u8981\u8fd0\u884c\u7684\u51fd\u6570\uff0c\u8bbe\u5b9a\u6bcf\u4e2a lcore \u5bf9\u5e94\u7684 lcore_config \u6570\u636e\u7ed3\u6784\uff0c\u5e76\u7acb\u5373\u6267\u884c\u3002"),(0,o.kt)("p",null,"702~707 \u884c\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a slave lcore \u7ebf\u7a0b\u7684\u72b6\u6001\uff0c\u5f53 rte_eal_wait_lcore \u51fd\u6570\u8fd4\u56de\u503c\u5c0f\u4e8e 0 \u65f6\u8df3\u51fa\u5faa\u73af\u3002"),(0,o.kt)("h2",{id:"\u6536\u53d1\u5305\u7ebf\u7a0b\u7684\u6267\u884c\u8fc7\u7a0b"},"\u6536\u53d1\u5305\u7ebf\u7a0b\u7684\u6267\u884c\u8fc7\u7a0b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"311 static int\n312 l2fwd_launch_one_lcore(__attribute__((unused)) void *dummy)                                                                                                              \n313 {\n314     l2fwd_main_loop();\n315     return 0;\n316 }\n")),(0,o.kt)("p",null,"l2fwd_lanuch_one_lcore \u4f1a\u5728\u6bcf\u4e00\u4e2a\u6536\u53d1\u5305\u7ebf\u7a0b\u4e0a\u6267\u884c\uff0c\u5b83\u901a\u8fc7\u8c03\u7528 l2fwd_main_loop \u5b8c\u6210\u5de5\u4f5c\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-\uff43"},'213 /* main processing loop */\n214 static void\n215 l2fwd_main_loop(void)\n216 {\n217     struct rte_mbuf *pkts_burst[MAX_PKT_BURST];\n218     struct rte_mbuf *m;\n219     int sent;\n220     unsigned lcore_id;\n221     uint64_t prev_tsc, diff_tsc, cur_tsc, timer_tsc;\n222     unsigned i, j, portid, nb_rx;\n223     struct lcore_queue_conf *qconf;\n224     const uint64_t drain_tsc = (rte_get_tsc_hz() + US_PER_S - 1) / US_PER_S *\n225             BURST_TX_DRAIN_US;\n226     struct rte_eth_dev_tx_buffer *buffer;\n227 \n228     prev_tsc = 0;\n229     timer_tsc = 0;\n230 \n231     lcore_id = rte_lcore_id();\n232     qconf = &lcore_queue_conf[lcore_id];\n233 \n234     if (qconf->n_rx_port == 0) {\n235         RTE_LOG(INFO, L2FWD, "lcore %u has nothing to do\\n", lcore_id);\n236         return;\n237     }\n238 \n239     RTE_LOG(INFO, L2FWD, "entering main loop on lcore %u\\n", lcore_id);\n240 \n241     for (i = 0; i < qconf->n_rx_port; i++) {\n242 \n243         portid = qconf->rx_port_list[i];\n244         RTE_LOG(INFO, L2FWD, " -- lcoreid=%u portid=%u\\n", lcore_id,\n245             portid);\n246 \n247     }\n')),(0,o.kt)("p",null,"231 \u884c\u83b7\u53d6\u5230\u5f53\u524d\u7ebf\u7a0b\u7684 lcore_id\uff0c232 \u884c\u4f7f\u7528\u83b7\u53d6\u5230\u7684 lcore_id\uff0c\u83b7\u53d6\u5230 lcore_queue_conf \u4e2d\u7684\u8868\u9879\u3002"),(0,o.kt)("p",null,"234 \u884c\u5224\u65ad\u5f53\u524d lcore \u7ed1\u5b9a\u7684\u6536\u5305\u7aef\u53e3\u6570\u76ee\uff0c\u4e3a 0 \u8868\u793a\u4e0d\u6536\u5305\uff0c\u8fd9\u4e00\u822c\u662f master \u7ebf\u7a0b\u3002"),(0,o.kt)("p",null,"241~247 \u884c\u6253\u5370\u5f53\u524d lcore \u7ed1\u5b9a\u7684\u6bcf\u4e2a\u7aef\u53e3\u53f7\u7684 port_id\u3002\u5b8c\u6210\u4e86\u8fd9\u4e9b\u64cd\u4f5c\u540e\uff0c\u8fdb\u5165\u5230 while \u5faa\u73af\u4e2d\uff0c\u6ce8\u610f\u5faa\u73af\u7ec8\u6b62\u6761\u4ef6\u4e3a force_quit \u4e3a true\uff0c\u5f53 l2fwd \u6536\u5230 SIGINT\u3001SIGTERM \u4fe1\u53f7\u65f6\u5c31\u4f1a\u5c06 force_quit \u8bbe\u7f6e\u4e3a true\uff0c\u6536\u53d1\u5305\u7ebf\u7a0b\u68c0\u6d4b\u5230\u540e\u5c31\u4f1a\u9000\u51fa\u5faa\u73af\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"249     while (!force_quit) {\n250 \n251         cur_tsc = rte_rdtsc();\n252 \n253         /*\n254          * TX burst queue drain\n255          */\n256         diff_tsc = cur_tsc - prev_tsc;\n257         if (unlikely(diff_tsc > drain_tsc)) {\n258 \n259             for (i = 0; i < qconf->n_rx_port; i++) {\n260 \n261                 portid = l2fwd_dst_ports[qconf->rx_port_list[i]];\n262                 buffer = tx_buffer[portid];\n263 \n264                 sent = rte_eth_tx_buffer_flush(portid, 0, buffer);\n265                 if (sent)\n266                     port_statistics[portid].tx += sent;\n267 \n268             }\n269 \n270             /* if timer is enabled */\n271             if (timer_period > 0) {\n272 \n273                 /* advance the timer */\n274                 timer_tsc += diff_tsc;\n275 \n276                 /* if timer has reached its timeout */\n277                 if (unlikely(timer_tsc >= (uint64_t) timer_period)) {\n278 \n279                     /* do this only on master core */\n280                     if (lcore_id == rte_get_master_lcore()) {\n281                         print_stats();\n282                         /* reset the timer */\n283                         timer_tsc = 0;\n284                     }\n285                 }\n286             }\n287 \n288             prev_tsc = cur_tsc;\n289         }\n291         /*\n292          * Read packet from RX queues\n293          */\n294         for (i = 0; i < qconf->n_rx_port; i++) {\n295 \n296             portid = qconf->rx_port_list[i];\n297             nb_rx = rte_eth_rx_burst((uint8_t) portid, 0,\n298                          pkts_burst, MAX_PKT_BURST);\n299 \n300             port_statistics[portid].rx += nb_rx;\n301 \n302             for (j = 0; j < nb_rx; j++) {\n303                 m = pkts_burst[j];\n304                 rte_prefetch0(rte_pktmbuf_mtod(m, void *));\n305                 l2fwd_simple_forward(m, portid);\n306             }\n307         }\n308     }\n309 }\n")),(0,o.kt)("p",null,"\u6536\u53d1\u5305\u7ebf\u7a0b\u7b2c\u4e00\u6b21\u6267\u884c\u65f6\u4f1a\u5148\u6267\u884c 294~307 \u884c\u8fd9\u4e2a\u5faa\u73af\uff0c\u6b64\u5faa\u73af\u4f9d\u6b21\u5728\u5f53\u524d lcore \u7ed1\u5b9a\u7684\u7aef\u53e3\u4e0a\u6536\u5305\uff0c\u6536\u5230\u5305\u540e\u5148\u589e\u52a0 port_statistics \u4e2d\u7684 rx \u7edf\u8ba1\uff0c\u7136\u540e\u5bf9\u6536\u5230\u7684\u6bcf\u4e2a\u62a5\u6587\u8c03\u7528 l2fwd_simple_forward\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"188 static void\n189 l2fwd_simple_forward(struct rte_mbuf *m, unsigned portid)\n190 {\n191     struct ether_hdr *eth;\n192     void *tmp;\n193     unsigned dst_port;\n194     int sent;\n195     struct rte_eth_dev_tx_buffer *buffer;\n196 \n197     dst_port = l2fwd_dst_ports[portid];\n198     eth = rte_pktmbuf_mtod(m, struct ether_hdr *);\n199 \n200     /* 02:00:00:00:00:xx */\n201     tmp = &eth->d_addr.addr_bytes[0];\n202     *((uint64_t *)tmp) = 0x000000000002 + ((uint64_t)dst_port << 40);\n203 \n204     /* src addr */\n205     ether_addr_copy(&l2fwd_ports_eth_addr[dst_port], &eth->s_addr);\n206 \n207     buffer = tx_buffer[dst_port];\n208     sent = rte_eth_tx_buffer(dst_port, 0, buffer, m);\n209     if (sent)\n210         port_statistics[dst_port].tx += sent;\n211 }\n")),(0,o.kt)("p",null,"l2fwd_simple_forward \u51fd\u6570\u4e2d\u9996\u5148\u83b7\u53d6\u5f53\u524d\u63a5\u53e3\u7684\u8f6c\u53d1\u63a5\u53e3\uff0c\u7136\u540e\u5c06\u8f6c\u53d1\u63a5\u53e3\u7684 mac \u5730\u5740\u586b\u5145\u5230\u62a5\u6587\u7684\u6e90 mac \u5730\u5740\u5904\u3002"),(0,o.kt)("p",null,"\u586b\u5145\u5b8c\u6210\u7684\u62a5\u6587\u901a\u8fc7\u8c03\u7528 rte_eth_tx_buffer \u6295\u9012\u5230\u5f53\u524d lcore \u7684 tx_buffer \u4e2d\uff0c\u5f53 tx_buffer \u4e2d\u7684\u62a5\u6587\u6570\u76ee\u5c0f\u4e8e\u95e8\u9650\u503c\uff0832\uff09\u7684\u65f6\u5019\u62a5\u6587\u4e0d\u4f1a\u7acb\u523b\u53d1\u9001\u51fa\u53bb\u3002"),(0,o.kt)("p",null,"\u4e3a\u6b64 l2fwd \u8bbe\u5b9a\u4e86\u4e00\u4e2a drain \u5ef6\u65f6\uff0c\u5b83\u7684\u65f6\u95f4\u662f 100 us\uff0c\u7531\u4e8e l2fwd \u4f7f\u7528 tsc \u6765\u8ba1\u65f6\uff0c224 \u884c\u5c06 100us \u8f6c\u5316\u4e3a\u4e86 tsc \u5468\u671f\u6570\u76ee\u3002"),(0,o.kt)("p",null,"251 \u884c\u9996\u5148\u8bb0\u5f55\u5f53\u524d\u7684 tsc \u65f6\u95f4\uff0c\u51cf\u53bb\u4e0a\u4e00\u6b21\u8bb0\u5f55\u7684\u65f6\u95f4\u5c31\u5f97\u5230\u4e86\u5ef6\u65f6\uff0c\u5f53\u5ef6\u65f6\u5927\u4e8e 100us \u7684\u65f6\u5019\uff0c\u904d\u5386\u5f53\u524d lcore \u4e0a\u7ed1\u5b9a\u7684\u6bcf\u4e00\u4e2a\u7aef\u53e3\uff0c\u8c03\u7528 rte_eth_tx_buffer_flush \u6765\u7acb\u523b\u53d1\u51fa buffer \u4e2d\u7684\u62a5\u6587\uff0c\u7136\u540e\u589e\u52a0\u53d1\u5305\u7edf\u8ba1\u3002"),(0,o.kt)("p",null,"270~287 \u884c\u9996\u5148\u5224\u65ad timer_period \u662f\u5426\u4f7f\u80fd\uff0c\u5f53\u4f7f\u80fd\u65f6\uff0c\u8c03\u6574\u5b9a\u65f6\u5668\u7684\u503c\uff08timer_tsc \u7684\u503c\uff09\uff0c\u5f53 timer_tsc \u7684\u503c\u5927\u4e8e\u7b49\u4e8e timer_period \u8868\u793a\u4e00\u4e2a\u5468\u671f\u5230\u8fbe\uff0c280~284 \u884c\u5224\u65ad\u5f53\u524d\u7ebf\u7a0b\u662f\u5426\u662f\u7ba1\u7406\u7ebf\u7a0b\uff0c\u662f\u7ba1\u7406\u7ebf\u7a0b\u5219\u8c03\u7528 print_stats \u8f93\u51fa\u7edf\u8ba1\uff0c\u7136\u540e\u6e05\u7a7a timer_tsc \u91cd\u65b0\u8ba1\u6570\u3002"),(0,o.kt)("p",null,"288 \u884c\u66f4\u65b0\u4e0a\u4e00\u6b21\u7684 tsc \u65f6\u95f4\uff0c\u8fd9\u5c31\u5b8c\u6210\u4e86\u6574\u4e2a\u8fc7\u7a0b\uff01"))}c.isMDXComponent=!0}}]);