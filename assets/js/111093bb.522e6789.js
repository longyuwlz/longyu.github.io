"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[8539],{3905:function(n,t,e){e.d(t,{Zo:function(){return f},kt:function(){return d}});var r=e(7294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function o(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function u(n,t){if(null==n)return{};var e,r,i=function(n,t){if(null==n)return{};var e,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var c=r.createContext({}),_=function(n){var t=r.useContext(c),e=t;return n&&(e="function"==typeof n?n(t):o(o({},t),n)),e},f=function(n){var t=_(n.components);return r.createElement(c.Provider,{value:t},n.children)},s={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(n,t){var e=n.components,i=n.mdxType,a=n.originalType,c=n.parentName,f=u(n,["components","mdxType","originalType","parentName"]),l=_(e),d=i,g=l["".concat(c,".").concat(d)]||l[d]||s[d]||a;return e?r.createElement(g,o(o({ref:t},f),{},{components:e})):r.createElement(g,o({ref:t},f))}));function d(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var a=e.length,o=new Array(a);o[0]=l;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=n,u.mdxType="string"==typeof n?n:i,o[1]=u;for(var _=2;_<a;_++)o[_]=e[_];return r.createElement.apply(null,o)}return r.createElement.apply(null,e)}l.displayName="MDXCreateElement"},5536:function(n,t,e){e.r(t),e.d(t,{assets:function(){return f},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return u},metadata:function(){return _},toc:function(){return s}});var r=e(7462),i=e(3366),a=(e(7294),e(3905)),o=["components"],u={},c="\u65e0\u53c2\u51fd\u6570\u7684\u5e94\u7528\u4e0e\u9650\u5236",_={unversionedId:"\u6280\u672f\u535a\u5ba2/\u8f6f\u4ef6\u5f00\u53d1\u8bed\u8a00/C/\u65e0\u53c2\u51fd\u6570\u7684\u5e94\u7528\u4e0e\u9650\u5236",id:"\u6280\u672f\u535a\u5ba2/\u8f6f\u4ef6\u5f00\u53d1\u8bed\u8a00/C/\u65e0\u53c2\u51fd\u6570\u7684\u5e94\u7528\u4e0e\u9650\u5236",title:"\u65e0\u53c2\u51fd\u6570\u7684\u5e94\u7528\u4e0e\u9650\u5236",description:"\u5728 C90 \u6807\u51c6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u65e0\u53c2\u6570\u4fe1\u606f\u7684\u51fd\u6570\u3002\u4e00\u4e2a\u793a\u4f8b\u5982\u4e0b\uff1a",source:"@site/docs/\u6280\u672f\u535a\u5ba2/\u8f6f\u4ef6\u5f00\u53d1\u8bed\u8a00/C/\u65e0\u53c2\u51fd\u6570\u7684\u5e94\u7528\u4e0e\u9650\u5236.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/\u8f6f\u4ef6\u5f00\u53d1\u8bed\u8a00/C",slug:"/\u6280\u672f\u535a\u5ba2/\u8f6f\u4ef6\u5f00\u53d1\u8bed\u8a00/C/\u65e0\u53c2\u51fd\u6570\u7684\u5e94\u7528\u4e0e\u9650\u5236",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/\u8f6f\u4ef6\u5f00\u53d1\u8bed\u8a00/C/\u65e0\u53c2\u51fd\u6570\u7684\u5e94\u7528\u4e0e\u9650\u5236",draft:!1,editUrl:"https://github.com/longyuwlz/longyu.github.io/docs/\u6280\u672f\u535a\u5ba2/\u8f6f\u4ef6\u5f00\u53d1\u8bed\u8a00/C/\u65e0\u53c2\u51fd\u6570\u7684\u5e94\u7528\u4e0e\u9650\u5236.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5f3a\u7b26\u53f7\u4e0e\u5f31\u7b26\u53f7\u7684\u95ee\u9898\u4e0e\u5e94\u7528\u573a\u666f",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/\u8f6f\u4ef6\u5f00\u53d1\u8bed\u8a00/C/\u5f3a\u7b26\u53f7\u4e0e\u5f31\u7b26\u53f7\u7684\u95ee\u9898\u4e0e\u5e94\u7528\u573a\u666f"},next:{title:"\u8fd4\u56de\u4e00\u4e2a\u6808\u4e2d\u6570\u636e\u7684\u6280\u5de7",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/\u8f6f\u4ef6\u5f00\u53d1\u8bed\u8a00/C/\u8fd4\u56de\u4e00\u4e2a\u6808\u4e2d\u6570\u636e\u7684\u6280\u5de7"}},f={},s=[],l={toc:s};function d(n){var t=n.components,e=(0,i.Z)(n,o);return(0,a.kt)("wrapper",(0,r.Z)({},l,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u65e0\u53c2\u51fd\u6570\u7684\u5e94\u7528\u4e0e\u9650\u5236"},"\u65e0\u53c2\u51fd\u6570\u7684\u5e94\u7528\u4e0e\u9650\u5236"),(0,a.kt)("p",null,"\u5728 C90 \u6807\u51c6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u65e0\u53c2\u6570\u4fe1\u606f\u7684\u51fd\u6570\u3002\u4e00\u4e2a\u793a\u4f8b\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"    void no_arg_func();\n")),(0,a.kt)("p",null,"\u4f7f\u7528\u7a7a\u7684\u5c0f\u62ec\u53f7\u6765\u8868\u793a\u6ca1\u6709\u53c2\u6570\u4fe1\u606f\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u83b7\u53d6\u5230\u53c2\u6570\u4fe1\u606f\uff0c\u4e5f\u5c31\u4e0d\u4f1a\u8fdb\u884c\u53c2\u6570\u68c0\u67e5\uff0c\u56e0\u6b64\u4f60\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u5e94\u7528\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'    #include <stdio.h>\n    #include <stdarg.h>\n    \n    #define MAXARGC 2\n    \n    #define TEST_BEGIN() \\\n      printf("some variable initialized, or something else\\n")\n    \n    #define TEST_END() \\\n      printf("some teardown procedure, or something else\\n");\n    \n    /* function prototype */\n    extern int init_data(const char *name, int id);\n    extern char *find_name(int id);\n    extern int find_id(const char *name);\n    extern int destroy_data(int id);\n    \n    typedef void (*func_t)();\n    \n    extern void execute_a_test(func_t text_func, int count, ...);\n    \n    int main(int argc, char *argv[])\n    {\n      execute_a_test((func_t)init_data, 2, "test", -5);\n      execute_a_test((func_t)find_name, 1, -5);\n      execute_a_test((func_t)find_id, 1, "test");\n      execute_a_test((func_t)destroy_data, 1, -5);\n      \n      return 0;\n    }\n    \n    int init_data(const char *name, int id)\n    {\n      printf("name is %s, id is %d, %s\\n", name, id, __func__);\n    }\n    \n    char *find_name(int id)\n    {\n      printf("id is %d, %s\\n", id, __func__);\n    }\n    \n    int find_id(const char *name)\n    {\n      printf("name is %s, %s\\n", name, __func__);\n    }\n    \n    int destroy_data(int id)\n    {\n      printf("id is %d, %s\\n", id,  __func__);\n    }\n    \n    void execute_a_test(func_t test_func, int count, ...)\n    {\n      long argument[MAXARGC];\n      int i = 0;\n      va_list ap;\n      \n      if (test_func == NULL) {\n        return;\n      }\n    \n      va_start(ap, count);\n      for (; i < count; i++) {\n        argument[i] = va_arg(ap, long);\n      }\n      va_end(ap);\n    \n      TEST_BEGIN();\n      (*test_func)(argument[0], argument[1]);\n      TEST_END();\n    }\n')),(0,a.kt)("p",null,"\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u9700\u8981\u6d4b\u8bd5\u56db\u4e2a\u51fd\u6570\uff0c\u8fd9\u56db\u4e2a\u51fd\u6570\u7684\u6d4b\u8bd5\u8fc7\u7a0b\u5927\u540c\u5c0f\u5f02\uff0c\u5b83\u4eec\u6700\u5927\u7684\u533a\u522b\u5728\u4e8e\u53c2\u6570\u4e2a\u6570\u7684\u4e0d\u540c\u3002\u5728\u8fd9\u91cc\u6211\u4f7f\u7528\u65e0\u53c2\u51fd\u6570\u5c06\u56db\u4e2a\u5f85\u6d4b\u8bd5\u51fd\u6570\u5f3a\u8f6c\u540e\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u5230 execute_a_test \u4e2d\uff0c\u901a\u8fc7\u53ef\u53d8\u957f\u53c2\u6570\u7edf\u4e00\u4e0d\u540c\u53c2\u6570\uff0c\u4ee5\u6700\u957f\u7684\u53c2\u6570\u4e2a\u6570\u6765\u8c03\u7528\u51fd\u6570\uff0c\u4e0d\u533a\u5206\u6307\u9488\u4e0e\u503c\uff0c\u7531\u4e8e test_func \u6ca1\u6709\u53c2\u6570\u4fe1\u606f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u4efb\u610f\u4e2a\u6570\u7684\u53c2\u6570\uff0c\u591a\u4f59\u7684\u53c2\u6570\u5b50\u51fd\u6570\u4e0d\u4f1a\u4f7f\u7528\uff0c\u4e0d\u4f1a\u9020\u6210\u95ee\u9898\u3002"),(0,a.kt)("p",null,"execute_a_test \u51fd\u6570\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u4fee\u6539\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"    void execute_a_test(func_t test_func, int count, ...)\n    {\n      long argument[MAXARGC];\n      int i = 0;\n      va_list ap;\n      \n      if (test_func == NULL) {\n        return;\n      }\n    \n      va_start(ap, count);\n      for (; i < count; i++) {\n        argument[i] = va_arg(ap, long);\n      }\n      va_end(ap);\n    \n      TEST_BEGIN();\n      if (count == 1) {\n        (*test_func)(argument[0]);\n      } else if (count == 2) {\n        (*test_func)(argument[0], argument[1]);\n      }\n      TEST_END();\n    }\n")),(0,a.kt)("p",null,"\u8fd9\u4e2a\u4fee\u6539\u907f\u514d\u4e86\u4f20\u9012\u591a\u4f59\u53c2\u6570\u7684\u95ee\u9898\uff0c\u4f46\u662f\u52a0\u5165\u7684\u6761\u4ef6\u5206\u652f\u4f1a\u964d\u4f4e\u7a0b\u5e8f\u7684\u6027\u80fd\u3002"),(0,a.kt)("p",null,"\u65e0\u53c2\u51fd\u6570\u662f c \u8bed\u8a00\u7684\u65e7\u6807\u51c6\u4e2d\u652f\u6301\u7684\u7279\u6027\uff0c\u65b0\u6807\u51c6\u867d\u7136\u80fd\u591f\u517c\u5bb9\u65e7\u6807\u51c6\uff0c\u4f46\u6700\u597d\u4e0d\u8981\u4f7f\u7528\u65e0\u53c2\u51fd\u6570\u3002\u8fd9\u6837\u6211\u4eec\u5bf9\u4e0a\u8ff0\u7a0b\u5e8f\u518d\u6b21\u8fdb\u884c\u4fee\u6539\uff0c\u6539\u4e3a\u4e0d\u4f7f\u7528\u65e0\u53c2\u51fd\u6570\u7684\u5b9e\u73b0\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'    #include <stdio.h>\n    #include <stdarg.h>\n    \n    #define TEST_BEGIN()                                        \\\n      printf("some variable initialized, or something else\\n")\n    \n    #define TEST_END() \\\n      printf("some teardown procedure, or something else\\n");\n    \n    /* function prototype */\n    extern int init_data(const char *name, int id);\n    extern char *find_name(int id);\n    extern int find_id(const char *name);\n    extern int destroy_data(int id);\n    \n    typedef int (*func_one)(long);\n    typedef int (*func_two)(long, long);\n    \n    extern void execute_a_test(func_two func, long arg1, long arg2);\n    extern void execute_one_arg_functest(func_one func, long arg);\n    extern void execute_two_arg_functest(func_two func, long arg1, long arg2);\n    \n    int main(int argc, char *argv[])\n    {\n      execute_a_test((func_two)init_data, (long)"test", (long)-5);\n      execute_a_test((func_two)find_name, (long)-5, (long)0);\n      execute_a_test((func_two)find_id, (long)"test", (long)0);\n      execute_a_test((func_two)destroy_data, (long)-5, (long)0);\n    \n      execute_two_arg_functest((func_two)init_data, (long)"test", (long)-5);\n      execute_one_arg_functest((func_one)find_name, (long)-5);\n      execute_one_arg_functest((func_one)find_id, (long)"test");\n      execute_one_arg_functest((func_one)destroy_data, (long)-5);\n      \n      return 0;\n    }\n    \n    int init_data(const char *name, int id)\n    {\n      printf("name is %s, id is %d, %s\\n", name, id, __func__);\n    }\n    \n    char *find_name(int id)\n    {\n      printf("id is %d, %s\\n", id, __func__);\n    }\n    \n    int find_id(const char *name)\n    {\n      printf("name is %s, %s\\n", name, __func__);\n    }\n    \n    int destroy_data(int id)\n    {\n      printf("id is %d, %s\\n", id,  __func__);\n    }\n    \n    void execute_a_test(func_two func, long arg1, long arg2)\n    {\n      if (func == NULL) {\n        return;\n      }\n    \n      TEST_BEGIN();\n      (*func)(arg1, arg2);\n      TEST_END();\n    }\n    \n    void execute_one_arg_functest(func_one func, long arg)\n    {\n      if (func == NULL) {\n        return;\n      }\n    \n      TEST_BEGIN();\n      (*func)(arg);\n      TEST_END();\n    }\n    \n    void execute_two_arg_functest(func_two func, long arg1, long arg2)\n    {\n      if (func == NULL) {\n        return;\n      }\n    \n      TEST_BEGIN();\n      (*func)(arg1, arg2);\n      TEST_END();\n    }\n    \n')),(0,a.kt)("p",null,"\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u4f7f\u7528\u4e86\u591a\u6b21\u5f3a\u8f6c\uff0c\u8fd9\u662f\u4e00\u5927\u4e0d\u8db3\u3002\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5c06\u6307\u9488\u4e0e\u503c\u5206\u5f00\uff0c\u7f16\u5199\u5355\u72ec\u7684\u51fd\u6570\uff0c\u4f46\u8fd9\u6837\u53c8\u4f1a\u589e\u5f3a\u4ee3\u7801\u7684\u8026\u5408\u5ea6\u3002\u5199\u6765\u5199\u53bb\u8fd8\u662f\u89c9\u5f97\u4f7f\u7528\u53ef\u53d8\u957f\u53c2\u6570\u53ef\u80fd\u66f4\u597d\u70b9\uff01\u6700\u7ec8\u7248\u51fd\u6570\u5982\u4e0b:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"    void execute_a_test(func_t test_func, int count, ...)\n    {\n      long argument[MAXARGC];\n      int i = 0;\n      va_list ap;\n    \n      if (test_func == NULL) {\n        return;\n      }\n    \n      va_start(ap, count);\n      for (; i < count; i++) {\n        argument[i] = va_arg(ap, long);\n      }\n      va_end(ap);\n    \n      TEST_BEGIN();\n      if (count == 1) {\n        (*(func_one)test_func)(argument[0]);\n      } else if (count == 2) {\n        (*(func_two)test_func)(argument[0], argument[1]);\n      }\n      TEST_END();\n    }\n")))}d.isMDXComponent=!0}}]);