"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[5229],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return s}});var l=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var _=l.createContext({}),c=function(e){var n=l.useContext(_),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return l.createElement(_.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},m=l.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,_=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(t),s=a,k=m["".concat(_,".").concat(s)]||m[s]||d[s]||r;return t?l.createElement(k,o(o({ref:n},p),{},{components:t})):l.createElement(k,o({ref:n},p))}));function s(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=m;var i={};for(var _ in n)hasOwnProperty.call(n,_)&&(i[_]=n[_]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<r;c++)o[c]=t[c];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9631:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return _},default:function(){return s},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var l=t(7462),a=t(3366),r=(t(7294),t(3905)),o=["components"],i={},_=void 0,c={permalink:"/longyu.github.io/blog/dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898",editUrl:"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898.md",source:"@site/blog/dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898.md",title:"dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898",description:"\u524d\u8a00",date:"2022-06-21T00:32:49.000Z",formattedDate:"2022\u5e746\u670821\u65e5",tags:[],readingTime:15.47,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"\u6536\u53d1\u5305\u5411\u91cf\u51fd\u6570\u5b9e\u73b0\u5206\u6790",permalink:"/longyu.github.io/blog/dpdk/dpdk \u6536\u53d1\u5305\u51fd\u6570\u5206\u6790\uff1adpdk-20.11 ice sse \u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u5173\u952e\u8fc7\u7a0b\u5206\u6790"},nextItem:{title:"dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u53ca\u5176\u90e8\u5206\u6f14\u8fdb\u8fc7\u7a0b",permalink:"/longyu.github.io/blog/dpdk/dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u53ca\u5176\u6f14\u8fdb\u8fc7\u7a0b\u5206\u6790"}},p={authorsImageUrls:[]},d=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u95ee\u9898\u5b9a\u4f4d\u8fc7\u7a0b",id:"\u95ee\u9898\u5b9a\u4f4d\u8fc7\u7a0b",level:2},{value:"1. \u54ea\u4e00\u628a\u9501\u83b7\u53d6\u4e0d\u5230\uff1f",id:"1-\u54ea\u4e00\u628a\u9501\u83b7\u53d6\u4e0d\u5230",level:3},{value:"2. \u83b7\u53d6\u4e0d\u5230\u7684\u9501\u5230\u5e95\u662f\u88ab\u8c01\u5360\u7528\u7684\uff1f",id:"2-\u83b7\u53d6\u4e0d\u5230\u7684\u9501\u5230\u5e95\u662f\u88ab\u8c01\u5360\u7528\u7684",level:3},{value:"3. gdb \u67e5\u770b rte_mem_config \u6587\u4ef6\u7684\u5185\u5bb9",id:"3-gdb-\u67e5\u770b-rte_mem_config-\u6587\u4ef6\u7684\u5185\u5bb9",level:3},{value:"4. \u8fd8\u80fd\u505a\u4e9b\u4ec0\u4e48\uff1f",id:"4-\u8fd8\u80fd\u505a\u4e9b\u4ec0\u4e48",level:3},{value:"\u95ee\u9898\u51fa\u73b0\u51e0\u6b21\u540e\u53d1\u73b0\u7684\u5173\u952e\u4fe1\u606f",id:"\u95ee\u9898\u51fa\u73b0\u51e0\u6b21\u540e\u53d1\u73b0\u7684\u5173\u952e\u4fe1\u606f",level:2},{value:"\u5b58\u5728\u95ee\u9898\u7684\u4ee3\u7801\u5728\u54ea\u91cc\uff1f",id:"\u5b58\u5728\u95ee\u9898\u7684\u4ee3\u7801\u5728\u54ea\u91cc",level:2},{value:"\u672c\u5730\u6a21\u62df\u95ee\u9898",id:"\u672c\u5730\u6a21\u62df\u95ee\u9898",level:2},{value:"\u4fee\u6539\u4ee3\u7801\u6d4b\u8bd5",id:"\u4fee\u6539\u4ee3\u7801\u6d4b\u8bd5",level:2},{value:"\u662f\u5426\u6709\u5176\u5b83\u7c7b\u4f3c\u95ee\u9898\uff1f",id:"\u662f\u5426\u6709\u5176\u5b83\u7c7b\u4f3c\u95ee\u9898",level:2},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}],m={toc:d};function s(e){var n=e.components,t=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,l.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u524d\u8a00"},"\u524d\u8a00"),(0,r.kt)("p",null,"\u5728 ",(0,r.kt)("a",{parentName:"p",href:"https://blog.csdn.net/Longyu_wlz/article/details/124261738"},"\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848\u4e4b dpdk \u8fdb\u7a0b\u6b7b\u9501")," \u8fd9\u7bc7\u535a\u5ba2\u4e2d\uff0c\u6211\u63cf\u8ff0\u4e86 dpdk \u591a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u7684\u7528\u6237\u6001\u9501\u5728\u4e34\u754c\u533a\u88ab\u5f02\u5e38\u6740\u6b7b\u540e\u65e0\u6cd5\u518d\u83b7\u53d6\u5230\u9501\u7684\u95ee\u9898\u3002\u4fee\u6539\u7684\u65b9\u6848\u662f\u5c06\u8fd9\u4e9b\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u7684\u9501\u4fee\u6539\u4e3a pthread mutex \u4e92\u65a5\u9501\u3002"),(0,r.kt)("p",null,"\u524d\u671f\u7684\u6d4b\u8bd5\u9a8c\u8bc1\u4e0e\u4ee3\u7801 review \u53ca\u96c6\u6210\u6d4b\u8bd5\u90fd\u6ca1\u6709\u53d1\u73b0\u5f02\u5e38\uff0c\u6700\u8fd1\u5374\u53d1\u73b0\u53c8\u51fa\u73b0\u4e86\u6b7b\u9501\u7684\u95ee\u9898\u3002\u6700\u5f00\u59cb\u6211\u7684\u60f3\u6cd5\u662f\u73b0\u5728\u4f7f\u7528\u4e86 mutex \u9501\uff0c\u51fa\u73b0\u4e86\u6b7b\u9501\u4e5f\u80fd\u591f\u627e\u5230\u662f\u8c01\u5360\u6709\u4e86\u9501\uff0c\u95ee\u9898\u5e94\u8be5\u4e0d\u592a\u56f0\u96be\uff0c\u5b9e\u9645\u64cd\u4f5c\u8d77\u6765\u5374\u53d1\u73b0\u6709\u4e9b\u60f3\u5f53\u7136\u3002"),(0,r.kt)("p",null,"\u5728\u672c\u6587\u4e2d\u6211\u5c06\u5b8c\u6574\u5730\u63cf\u8ff0\u8fd9\u4e00\u65b0\u6b7b\u9501\u95ee\u9898\u5b9a\u4f4d\u7684\u8fc7\u7a0b\u3002"),(0,r.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,r.kt)("p",null,"\u95ee\u9898\u7684\u8868\u9762\u73b0\u8c61\u662f\u67d0\u4e2a\u8fd0\u884c\u5728 docker \u5bb9\u5668\u5185\u7684 dpdk \u4e1a\u52a1\u7a0b\u5e8f\u4e00\u76f4\u65e0\u6cd5\u542f\u52a8\uff0c\u4f7f\u7528 gdb \u67e5\u770b\u8c03\u7528\u6808\uff0c\u53d1\u73b0\u5361\u5728\u5982\u4e0b\u4f4d\u7f6e\u5904\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"#0  0x00007ffff14034ed in __lll_lock_wait () from target:/lib64/libpthread.so.0\n#1  0x00007ffff13fedcb in _L_lock_883 () from target:/lib64/libpthread.so.0\n#2  0x00007ffff13fec98 in pthread_mutex_lock () from target:/lib64/libpthread.so.0\n#3  0x00007ffff22267d9 in rte_mutex_lock () from target:/lib64/libdpdk.so\n#4  0x00007ffff223835f in malloc_heap_alloc () from target:/lib64/libdpdk.so\n#5  0x00007ffff2233337 in rte_malloc_socket () from target:/lib64/libdpdk.so\n#6  0x00007ffff223bd1d in rte_service_init () from target:/lib64/libdpdk.so\n#7  0x00007ffff22160c1 in rte_eal_init () from target:/lib64/libdpdk.so\n#10 0x000000000043e51d in main ()\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"rte_mutex_lock \u51fd\u6570\u662f\u5bf9 pthread_mutex_lock")," \u51fd\u6570\u7684\u3010\u5c01\u88c5\u3011\uff0c\u4ece\u51fd\u6570\u8c03\u7528\u6808\u4e0a\u770b\uff0c\u8fdb\u7a0b\u65e0\u6cd5\u6b63\u5e38\u542f\u52a8\u7684\u539f\u56e0\u662f\u65e0\u6cd5\u6210\u529f\u83b7\u53d6\u5230 mutex \u9501\u3002"),(0,r.kt)("h2",{id:"\u95ee\u9898\u5b9a\u4f4d\u8fc7\u7a0b"},"\u95ee\u9898\u5b9a\u4f4d\u8fc7\u7a0b"),(0,r.kt)("h3",{id:"1-\u54ea\u4e00\u628a\u9501\u83b7\u53d6\u4e0d\u5230"},"1. \u54ea\u4e00\u628a\u9501\u83b7\u53d6\u4e0d\u5230\uff1f"),(0,r.kt)("p",null,"\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"/* this will try lower page sizes first */\nstatic void *\nmalloc_heap_alloc_on_heap_id(const char *type, size_t size,\n        unsigned int heap_id, unsigned int flags, size_t align,\n        size_t bound, bool contig)\n{\n    struct rte_mem_config *mcfg = rte_eal_get_configuration()->mem_config;\n    struct malloc_heap *heap = &mcfg->malloc_heaps[heap_id];\n    unsigned int size_flags = flags & ~RTE_MEMZONE_SIZE_HINT_ONLY;\n    int socket_id;\n    void *ret;\n\n    rte_spinlock_lock(&(heap->lock));\n")),(0,r.kt)("p",null,"\u786e\u8ba4\u662f\u83b7\u53d6\u4e0d\u5230 rte_mem_config \u4e2d\u67d0\u4e2a malloc_heaps \u7684\u591a\u8fdb\u7a0b\u5171\u4eab\u9501\u3002"),(0,r.kt)("h3",{id:"2-\u83b7\u53d6\u4e0d\u5230\u7684\u9501\u5230\u5e95\u662f\u88ab\u8c01\u5360\u7528\u7684"},"2. \u83b7\u53d6\u4e0d\u5230\u7684\u9501\u5230\u5e95\u662f\u88ab\u8c01\u5360\u7528\u7684\uff1f"),(0,r.kt)("p",null,"\u7f16\u8bd1\u76f8\u540c\u7248\u672c\u7684 dpdk-procinfo \u8c03\u8bd5\u83b7\u53d6\u5230\u5982\u4e0b\u4fe1\u606f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'(gdb) bt\n#0  0x00007ffff6eacbfc in __lll_lock_wait () from /usr/local/lib/libpthread.so.0\n#1  0x00007ffff6ea84df in _L_lock_520 () from /usr/local/lib/libpthread.so.0\n#2  0x00007ffff6ea82df in pthread_mutex_lock () from /usr/local/lib/libpthread.so.0\n#3  0x000000000066e3b9 in rte_mutex_lock (mutex=0x3fffdcffd180) at dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c:93\n#4  0x000000000067ff3f in malloc_heap_alloc_on_heap_id (contig=false, bound=0, align=64, flags=0, heap_id=0, size=8192, type=0x3fffdcffa000 "\\356o.\\001c\\001\\v\\023\\004")\n    at dpdk-19.11/lib/librte_eal/common/malloc_heap.c:646\n#5  malloc_heap_alloc (type=type@entry=0xc02a2e "rte_services", size=8192, socket_arg=<optimized out>, socket_arg@entry=-1, flags=flags@entry=0, align=64, bound=bound@entry=0,\n    contig=false) at dpdk-19.11/lib/librte_eal/common/malloc_heap.c:724\n#6  0x000000000067af17 in rte_malloc_socket (type=type@entry=0xc02a2e "rte_services", size=size@entry=8192, align=align@entry=64, socket_arg=<optimized out>, socket_arg@entry=-1)\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:60\n#7  0x000000000067afa5 in rte_zmalloc_socket (type=type@entry=0xc02a2e "rte_services", size=size@entry=8192, align=align@entry=64, socket=socket@entry=-1)\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:79\n#8  0x000000000067afba in rte_zmalloc (type=type@entry=0xc02a2e "rte_services", size=size@entry=8192, align=align@entry=64)\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:99\n#9  0x000000000067afee in rte_calloc (type=type@entry=0xc02a2e "rte_services", num=num@entry=64, size=size@entry=128, align=align@entry=64)\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:117\n#10 0x00000000006838fd in rte_service_init () at dpdk-19.11/lib/librte_eal/common/rte_service.c:84\n#11 0x000000000065dca1 in rte_eal_init (argc=<optimized out>, argv=<optimized out>) at dpdk-19.11/lib/librte_eal/linux/eal/eal.c:1266\n#12 0x0000000000558a1c in main (argc=6, argv=0x7fffffffe8c8) at dpdk-19.11/app/proc-info/main.c:1771\n(gdb) frame 3\n#3  0x000000000066e3b9 in rte_mutex_lock (mutex=0x3fffdcffd180) at dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c:93\n93      dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c: No such file or directory.\n(gdb) print mutex\n$1 = (pthread_mutex_t *) 0x3fffdcffd180\n(gdb) print *mutex\n$2 = {__data = {__lock = 2, __count = 0, __owner = 14901, __nusers = 1, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}},\n  __size = "\\002\\000\\000\\000\\000\\000\\000\\000\\065:\\000\\000\\001", \'\\000\' <repeats 26 times>, __align = 2}\n')),(0,r.kt)("p",null,"\u7531\u4e8e\u6211\u5bf9 mutex \u4e2d\u4e0d\u540c\u7ed3\u6784\u7684\u542b\u4e49\u5e76\u4e0d\u6e05\u695a\uff0c\u6211\u5148\u5728\u672c\u5730\u5199\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 demo\uff0c\u7136\u540e\u89c2\u5bdf\u5360\u6709\u4e86\u9501\u4e4b\u540e mutex \u4e00\u4e9b\u5b57\u6bb5\u7684\u542b\u4e49\uff0c\u786e\u8ba4 ",(0,r.kt)("strong",{parentName:"p"},"__owner")," \u5b57\u6bb5\u8868\u793a\u3010\u5360\u6709\u9501\u7684\u7ebf\u7a0b\u3001\u8fdb\u7a0b id\u3011\u3002"),(0,r.kt)("p",null,"\u4e8e\u662f\u80fd\u591f\u786e\u8ba4\u8fd9\u628a\u9501\u88ab ",(0,r.kt)("strong",{parentName:"p"},"14901")," \u7ebf\u7a0b\u6301\u6709\uff0c\u7136\u800c\u8fd9\u4e2a\u7ebf\u7a0b\u5728\u7cfb\u7edf\u4e2d",(0,r.kt)("strong",{parentName:"p"},"\u5e76\u4e0d\u5b58\u5728"),"\uff0c\u4e5f\u6ca1\u6709\u770b\u5230\u5176\u5b83\u7684\u5f02\u5e38\u4fe1\u606f\uff0c\u8868\u660e\u8fd9\u4e2a\u8fdb\u7a0b\u65e9\u5df2\u7ecf\u88ab kill \u6389\u4e86\u3002"),(0,r.kt)("h3",{id:"3-gdb-\u67e5\u770b-rte_mem_config-\u6587\u4ef6\u7684\u5185\u5bb9"},"3. gdb \u67e5\u770b rte_mem_config \u6587\u4ef6\u7684\u5185\u5bb9"),(0,r.kt)("p",null,"\u66fe\u7ecf\u5b9a\u4f4d\u8fc7\u4e00\u4e2a rte_mem_config\u6587\u4ef6\u5185\u5bb9\u88ab\u7834\u574f\u5bfc\u81f4\u6b7b\u9501\u7684\u95ee\u9898\uff0c\u6b64\u540e\u6bcf\u6b21\u90fd\u4f1a\u5148\u786e\u8ba4\u4e0b rte_mem_config \u6587\u4ef6\u7684\u5185\u5bb9\u662f\u5426\u6b63\u5e38\u3002\u4e8e\u662f\u7528 gdb \u6253\u5370\u76f8\u5173\u4fe1\u606f\uff0c\u90e8\u5206\u6458\u5f55\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"(gdb) print /x  *rte_config->mem_config\n$9 = {\n  magic = 0x12e6fee,\n  version = 0x130b0163,\n  nchannel = 0x4,\n  nrank = 0x0,\n  mlock = {\n    __data = {\n      __lock = 0x0,\n      __count = 0x1,\n      __owner = 0x0,\n      __nusers = 0x0,\n      __kind = 0x90,\n      __spins = 0x0,\n      __list = {\n        __prev = 0x0,\n        __next = 0x0\n      }\n    },\n    __size = {0x0, 0x0, 0x0, 0x0, 0x1, 0x0 <repeats 11 times>, 0x90, 0x0 <repeats 23 times>},\n    __align = 0x100000000\n  },\n.................................................................\n  memzones = {\n    name = {0x6d, 0x65, 0x6d, 0x7a, 0x6f, 0x6e, 0x65, 0x0 <repeats 57 times>},\n    count = 0x27,\n    len = 0xa00,\n    elt_sz = 0x48,\n    data = 0x3fffdd000000,\n    rwlock = {\n      __data = {\n        __lock = 0x0,\n        __count = 0x1,\n        __owner = 0x0,\n        __nusers = 0x0,\n        __kind = 0x90,\n        __spins = 0x0,\n        __list = {\n          __prev = 0x0,\n          __next = 0x0\n        }\n      },\n      __size = {0x0, 0x0, 0x0, 0x0, 0x1, 0x0 <repeats 11 times>, 0x90, 0x0 <repeats 23 times>},\n      __align = 0x100000000\n    }\n  },\n  memsegs = {{\n      {\n        base_va = 0x3fffdd200000,\n        addr_64 = 0x3fffdd200000\n      },\n      page_sz = 0x200000,\n      socket_id = 0x0,\n      version = 0xa1,\n      len = 0x400000000,\n      external = 0x0,\n      heap = 0x1,\n      memseg_arr = {\n        name = {0x6d, 0x65, 0x6d, 0x73, 0x65, 0x67, 0x2d, 0x32, 0x30, 0x34, 0x38, 0x6b, 0x2d, 0x30, 0x2d, 0x30, 0x0 <repeats 48 times>},\n        count = 0x1b,\n        len = 0x2000,\n        elt_sz = 0x30,\n        data = 0x3fffdd02e000,\n        rwlock = {\n          __data = {\n            __lock = 0x0,\n            __count = 0x1,\n            __owner = 0x0,\n            __nusers = 0x0,\n            __kind = 0x90,\n            __spins = 0x0,\n            __list = {\n              __prev = 0x0,\n              __next = 0x0\n            }\n          },\n          __size = {0x0, 0x0, 0x0, 0x0, 0x1, 0x0 <repeats 11 times>, 0x90, 0x0 <repeats 23 times>},\n          __align = 0x100000000\n        }\n      }\n    }\n ..................................................\n  malloc_heaps = {{\n      lock = {\n        __data = {\n          __lock = 0x2,\n          __count = 0x0,\n          __owner = 0x3a35,\n          __nusers = 0x1,\n          __kind = 0x0,\n          __spins = 0x0,\n          __list = {\n            __prev = 0x0,\n            __next = 0x0\n          }\n        },\n        __size = {0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x35, 0x3a, 0x0, 0x0, 0x1, 0x0 <repeats 27 times>},\n        __align = 0x2\n      },\n.....................................................................\n")),(0,r.kt)("p",null,"\u521d\u6b21\u6d4f\u89c8\u5e76\u6ca1\u6709\u53d1\u73b0\u5565\u5f02\u5e38\uff0c\u4f46\u5176\u5b9e\u95ee\u9898\u5df2\u7ecf\u9690\u542b\u5728\u4e0a\u9762\u6536\u96c6\u7684\u4fe1\u606f\u91cc\u4e86\uff0c\u8fd9\u91cc\u5bb9\u6211\u5148\u5356\u4e2a\u5173\u5b50\uff0c\u8fd9\u6837\u624d\u66f4\u8d34\u5207\u5b9a\u4f4d\u6b64\u95ee\u9898\u7684\u771f\u5b9e\u8fc7\u7a0b\u3002"),(0,r.kt)("h3",{id:"4-\u8fd8\u80fd\u505a\u4e9b\u4ec0\u4e48"},"4. \u8fd8\u80fd\u505a\u4e9b\u4ec0\u4e48\uff1f"),(0,r.kt)("p",null,"\u5b9a\u4f4d\u5230\u8fd9\u4e00\u6b65\uff0c\u5c3d\u7ba1\u80fd\u591f\u786e\u5b9a\u9501\u786e\u5b9e\u662f\u88ab\u5176\u5b83\u8fdb\u7a0b\u5360\u7528\u800c\u65e0\u6cd5\u88ab\u83b7\u53d6\u5230\uff0c\u4f46\u5360\u7528\u8fdb\u7a0b\u65e9\u5df2\u7ecf",(0,r.kt)("strong",{parentName:"p"},"\u6d88\u5931\u5f97\u65e0\u5f71\u65e0\u8e2a"),"\uff0c\u53ea\u7559\u4e0b\u4e2a\u65e0\u7528\u7684\u73b0\u573a\u6839\u672c\u5b9a\u4f4d\u4e0d\u4e86\u95ee\u9898\u3002\u4e8e\u662f\u6211\u5224\u65ad\u5df2\u7ecf\u5565\u90fd\u505a\u4e0d\u4e86\u4e86\uff0c\u53ea\u80fd\u5148\u6062\u590d\u73af\u5883\u7ee7\u7eed\u6d4b\u8bd5\u4e86\u3002"),(0,r.kt)("p",null,"\u540c\u65f6\u6211\u60f3\u5230\u4e86\u5982\u4e0b\u51e0\u4e2a\u95ee\u9898\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u9700\u8981\u786e\u5b9a\u5360\u7740\u9501\u7684\u8fdb\u7a0b\u5230\u5e95\u662f\u54ea\u4e2a\uff0c\u91cd\u65b0\u590d\u73b0\u95ee\u9898\uff0c\u590d\u73b0\u524d\u4e0d\u65ad ps aux \u4fdd\u5b58\u7ed3\u679c\uff0c\u95ee\u9898\u590d\u73b0\u540e\u5373\u53ef\u4ee5\u5224\u65ad\u662f\u54ea\u4e2a\u7a0b\u5e8f\u6ca1\u6709\u91ca\u653e"),(0,r.kt)("p",{parentName:"li"},"\u505a\u8fd9\u4e2a\u6d4b\u8bd5\u7684\u76ee\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u7f29\u5c0f\u8303\u56f4\uff0c\u5374\u5e76\u4e0d\u80fd\u4e00\u6b21\u5c31\u5b9a\u4f4d\u5230\u95ee\u9898\u3002")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"\u524d\u671f\u5bf9\u9501\u5f02\u5e38\u56de\u6536\u7684\u9a8c\u8bc1\u8fc7\u7a0b\u662f\u5426\u5b58\u5728\u95ee\u9898\uff1f\n\u524d\u671f\u5404\u79cd\u4e34\u754c\u533a\u5f02\u5e38\u9000\u51fa\u90fd\u6d4b\u8bd5\u8fc7\uff0c\u5747\u6d4b\u8bd5\u901a\u8fc7\uff0c\u5b58\u5728\u95ee\u9898\u7684\u6982\u7387\u5f88\u5c0f\u3002"))),(0,r.kt)("h2",{id:"\u95ee\u9898\u51fa\u73b0\u51e0\u6b21\u540e\u53d1\u73b0\u7684\u5173\u952e\u4fe1\u606f"},"\u95ee\u9898\u51fa\u73b0\u51e0\u6b21\u540e\u53d1\u73b0\u7684\u5173\u952e\u4fe1\u606f"),(0,r.kt)("p",null,"\u6b64\u540e\uff0c\u95ee\u9898\u53c8\u590d\u73b0\u4e86\u51e0\u6b21\uff0c\u6bcf\u6b21\u590d\u73b0\u65f6\uff0c\u6211\u57fa\u672c\u4e0a\u90fd\u67e5\u770b\u7c7b\u4f3c\u7684\u4fe1\u606f\uff0c\u67e5\u770b\u4e86\u51e0\u6b21\u540e\uff0c\u6211\u7a81\u7136\u53d1\u73b0\u4e86\u4e00\u4e2a\u660e\u663e\u7684\u95ee\u9898\u2014\u2014malloc_heaps \u4e2d\u7684 mutex lock \u7684 ",(0,r.kt)("strong",{parentName:"p"},"__kind")," \u5b57\u6bb5\u4e3a 0x0\uff0c\u800c\u5176\u5b83\u7c7b\u4f3c\u7684 ",(0,r.kt)("strong",{parentName:"p"},"mutex lock")," \u7684 ",(0,r.kt)("strong",{parentName:"p"},"__kind")," \u5b57\u6bb5\u4e3a ",(0,r.kt)("strong",{parentName:"p"},"0x90"),"\u3002\u91cd\u65b0\u7ffb\u4e86\u4e0b\u51e0\u6b21\u590d\u73b0\u65f6\u6536\u96c6\u5230\u7684\u4fe1\u606f\uff0c\u53d1\u73b0\u90fd\u6709\u8fd9\u4e2a\u7279\u5f81\u3002\u4e0a\u6587\u4e2d\u5356\u7684\u5173\u5b50\u5230\u6b64\u63ed\u6653\u3002"),(0,r.kt)("p",null,"\u5177\u4f53\u7684\u5bf9\u6bd4\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"   rwlock = {\n          __data = {\n            __lock = 0x0,\n            __count = 0x1,\n            __owner = 0x0,\n            __nusers = 0x0,\n            __kind = 0x90,\n            __spins = 0x0,\n            __list = {\n              __prev = 0x0,\n              __next = 0x0\n            }\n\nmalloc_heaps = {{\n      lock = {\n        __data = {\n          __lock = 0x2,\n          __count = 0x0,\n          __owner = 0x3a35,\n          __nusers = 0x1,\n          __kind = 0x0,\n          __spins = 0x0,\n          __list = {\n            __prev = 0x0,\n            __next = 0x0\n          }\n        },\n")),(0,r.kt)("p",null,"\u5f53\u65f6\u6211\u5728\u5c1d\u8bd5\u7528 mutex \u66ff\u6362 dpdk \u591a\u8fdb\u7a0b\u4e4b\u95f4\u7528\u6237\u6001\u9501\u65f6\u66fe\u7ecf\u5206\u6790\u8fc7 ",(0,r.kt)("strong",{parentName:"p"},"__kind")," \u8fd9\u4e2a\u5b57\u6bb5\uff0c\u786e\u5b9a\u5b83\u662f",(0,r.kt)("strong",{parentName:"p"},"\u5728\u8bbe\u7f6e mutex \u5c5e\u6027\u7684\u65f6\u5019\u88ab\u8d4b\u503c"),"\u3002"),(0,r.kt)("p",null,"\u5bf9\u4e8e dpdk \u591a\u8fdb\u7a0b\u5171\u4eab\u9501\u7684\u573a\u666f\uff0c",(0,r.kt)("strong",{parentName:"p"},"\u521d\u59cb\u5316 mutex \u9501\u7684\u65f6\u5019\u9700\u8981\u8bbe\u5b9a PTHREAD_PROCESS_SHARED \u4e0e PTHREAD_MUTEX_ROBUST \u5c5e\u6027"),"\uff0c\u6b63\u5e38\u7684 ",(0,r.kt)("strong",{parentName:"p"},"__kind")," \u5e94\u8be5\u662f ",(0,r.kt)("strong",{parentName:"p"},"0x90"),"\u3002"),(0,r.kt)("p",null,"\u5728\u8fd9\u4e2a\u95ee\u9898\u91cc\u8fd9\u628a mutex \u9501\u3010\u672a\u521d\u59cb\u5316\u3011\u5c31\u88ab\u4f7f\u7528\uff0c\u5b83\u4e0d\u652f\u6301\u5f02\u5e38\u56de\u6536\uff0c\u8fd9\u6837\u5728\u83b7\u53d6\u5230\u8fd9\u628a\u9501\u540e\u6ca1\u6709\u91ca\u653e\u9501\u8fdb\u7a0b\u5c31\u88ab\u5f02\u5e38\u6740\u6b7b\u65f6\u5c31\u4f1a\u5bfc\u81f4\u5176\u5b83\u9700\u8981\u518d\u6b21\u83b7\u53d6\u8fd9\u628a\u9501\u7684\u8fdb\u7a0b\u6b7b\u9501\u3002"),(0,r.kt)("h2",{id:"\u5b58\u5728\u95ee\u9898\u7684\u4ee3\u7801\u5728\u54ea\u91cc"},"\u5b58\u5728\u95ee\u9898\u7684\u4ee3\u7801\u5728\u54ea\u91cc\uff1f"),(0,r.kt)("p",null,"\u9605\u8bfb\u4ee3\u7801\uff0c\u786e\u8ba4\u5982\u4e0b dpdk \u4ee3\u7801\u5b58\u5728\u95ee\u9898\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'int\nrte_eal_malloc_heap_init(void)\n{\n    struct rte_mem_config *mcfg = rte_eal_get_configuration()->mem_config;\n    unsigned int i;\n\n    if (internal_config.match_allocations) {\n        RTE_LOG(DEBUG, EAL, "Hugepages will be freed exactly as allocated.\\n");\n    }\n\n    if (rte_eal_process_type() == RTE_PROC_PRIMARY) {\n        /* assign min socket ID to external heaps */\n        mcfg->next_socket_id = EXTERNAL_HEAP_MIN_SOCKET_ID;\n\n        /* assign names to default DPDK heaps */\n        for (i = 0; i < rte_socket_count(); i++) {\n            struct malloc_heap *heap = &mcfg->malloc_heaps[i];\n            char heap_name[RTE_HEAP_NAME_MAX_LEN];\n            int socket_id = rte_socket_id_by_idx(i);\n\n            snprintf(heap_name, sizeof(heap_name),\n                    "socket_%i", socket_id);\n            strlcpy(heap->name, heap_name, RTE_HEAP_NAME_MAX_LEN);\n            heap->socket_id = socket_id;\n        }\n    }\n.............................................................\n')),(0,r.kt)("p",null,"dpdk \u539f\u751f\u4f7f\u7528 ",(0,r.kt)("strong",{parentName:"p"},"spinlock")," \u4fdd\u62a4 ",(0,r.kt)("strong",{parentName:"p"},"malloc_heaps")," \u7ed3\u6784\uff0c",(0,r.kt)("strong",{parentName:"p"},"spinlock")," \u7684\u521d\u59cb\u5316\u503c\u4e3a 0\u3002\u7531\u4e8e rte_mem_config \u4e2d malloc_heaps \u6240\u6709\u5b57\u6bb5\u7684\u521d\u503c\u5c31\u662f 0\uff0c\u6240\u4ee5\u5b83\u5e76\u6ca1\u6709\u663e\u793a\u8c03\u7528 rte_spinlock_init \u51fd\u6570\u6765\u521d\u59cb\u5316 spinlock\uff0c",(0,r.kt)("strong",{parentName:"p"},"\u800crte_spinlock_init \u672c\u8eab\u5c31\u4f1a\u5c06 spinlock cnt \u503c\u521d\u59cb\u5316\u4e3a 0\uff0c\u6ca1\u6709\u521d\u59cb\u5316\u4e5f\u4e0d\u5f71\u54cd\u6b63\u5e38\u6267\u884c\u3002")),(0,r.kt)("p",null,"\u4f46\u662f\u5f53\u628a ",(0,r.kt)("strong",{parentName:"p"},"spinlock")," \u6362\u4e3a ",(0,r.kt)("strong",{parentName:"p"},"mutex")," \u65f6\u5c31\u3010\u5fc5\u987b\u521d\u59cb\u5316\u3011\uff0c\u4e0d\u7136\u9501\u3010\u4e0d\u80fd\u56de\u6536\u3011\uff0c\u8fd9\u6837\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\u4e2d\u88ab\u6740\u6389\u5c31\u4f1a\u5bfc\u81f4\u6b7b\u9501\uff0c\u8fd9\u5c31\u662f\u672c\u6587\u6240\u63cf\u8ff0\u95ee\u9898\u7684\u6839\u672c\u539f\u56e0\u3002"),(0,r.kt)("h2",{id:"\u672c\u5730\u6a21\u62df\u95ee\u9898"},"\u672c\u5730\u6a21\u62df\u95ee\u9898"),(0,r.kt)("p",null,"\u5c06 dpdk \u4ee3\u7801\u4fee\u6539\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'Index: lib/librte_eal/common/malloc_heap.c\n===================================================================\n--- lib/librte_eal/common/malloc_heap.c\n+++ lib/librte_eal/common/malloc_heap.c\n@@ -645,6 +645,12 @@\n+#ifndef F_OK\n+#define F_OK 0\n+#endif\n+       if((access("/tmp/abnormal_exit", F_OK)) != -1) {\n+               exit(-1);\n+       }\n\n        align = align == 0 ? 1 : align;\n')),(0,r.kt)("p",null,"\u6d4b\u8bd5\u6b65\u9aa4\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u91cd\u65b0\u7f16\u8bd1 dpdk \u540e\u8fd0\u884c l2wd"),(0,r.kt)("li",{parentName:"ol"},"\u521b\u5efa /tmp/abnormal_exit"),(0,r.kt)("li",{parentName:"ol"},"\u8fd0\u884c dpdk-procinfo"),(0,r.kt)("li",{parentName:"ol"},"\u91cd\u65b0\u8fd0\u884c dpdk-procinfo")),(0,r.kt)("p",null,"dpdk-procinfo \u6d4b\u8bd5\u8fc7\u7a0b\u8bb0\u5f55\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'root@debian:/home/longyu/dpdk-19.11-mutex-lock-test# touch /tmp/abnormal_exit\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# ./dpdk-procinfo -- --stats\nEAL: Detected 8 lcore(s)\nEAL: Detected 1 NUMA nodes\nEAL: Multi-process socket /var/run/dpdk/rte/mp_socket_3885_1494910686fd8\nEAL: Selected IOVA mode \'PA\'\nEAL: Probing VFIO support...\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# gdb --args ./dpdk-procinfo -- --stats\nGNU gdb (Debian 10.1-1.7) 10.1.90.20210103-git\n...........................................................................\nReading symbols from ./dpdk-procinfo...\n(gdb) start\n...........................................................................\n(gdb) c\nContinuing.\nEAL: Detected 8 lcore(s)\nEAL: Detected 1 NUMA nodes\n[New Thread 0x7ffff77e3700 (LWP 3905)]\nEAL: Multi-process socket /var/run/dpdk/rte/mp_socket_3901_1494f794ad440\n[New Thread 0x7ffff6fe2700 (LWP 3906)]\nEAL: Selected IOVA mode \'PA\'\nEAL: Probing VFIO support...\n^C\nThread 1 "dpdk-procinfo" received signal SIGINT, Interrupt.\n__lll_lock_wait (futex=futex@entry=0x3ffe92ffd180, private=0) at lowlevellock.c:52\n52      lowlevellock.c: No such file or directory.\n(gdb) bt\n#0  __lll_lock_wait (futex=futex@entry=0x3ffe92ffd180, private=0) at lowlevellock.c:52\n#1  0x00007ffff79d5843 in __GI___pthread_mutex_lock (mutex=mutex@entry=0x3ffe92ffd180) at ../nptl/pthread_mutex_lock.c:80\n#2  0x000000000066e3b9 in rte_mutex_lock (mutex=mutex@entry=0x3ffe92ffd180)\n    at dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c:93\n#3  0x000000000067ff51 in malloc_heap_alloc_on_heap_id (contig=false, bound=0, align=64, flags=0, heap_id=0, size=8192,\n    type=0x3ffe92ffd180 "\\002") at dpdk-19.11/lib/librte_eal/common/malloc_heap.c:646\n#4  malloc_heap_alloc (type=type@entry=0xc02a7e "rte_services", size=8192, socket_arg=<optimized out>, socket_arg@entry=-1,\n    flags=flags@entry=0, align=64, bound=bound@entry=0, contig=false)\n    at dpdk-19.11/lib/librte_eal/common/malloc_heap.c:730\n#5  0x000000000067af17 in rte_malloc_socket (type=type@entry=0xc02a7e "rte_services", size=size@entry=8192, align=align@entry=64,\n    socket_arg=<optimized out>, socket_arg@entry=-1)\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:60\n#6  0x000000000067afa5 in rte_zmalloc_socket (type=type@entry=0xc02a7e "rte_services", size=size@entry=8192, align=align@entry=64,\n    socket=socket@entry=-1) at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:79\n#7  0x000000000067afba in rte_zmalloc (type=type@entry=0xc02a7e "rte_services", size=size@entry=8192, align=align@entry=64)\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:99\n#8  0x000000000067afee in rte_calloc (type=type@entry=0xc02a7e "rte_services", num=num@entry=64, size=size@entry=128,\n    align=align@entry=64) at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:117\n#9  0x000000000068392d in rte_service_init ()\n    at dpdk-19.11/lib/librte_eal/common/rte_service.c:84\n#10 0x000000000065dca1 in rte_eal_init (argc=<optimized out>, argv=<optimized out>)\n    at dpdk-19.11/lib/librte_eal/linux/eal/eal.c:1266\n#11 0x0000000000558a1c in main (argc=6, argv=0x7fffffffe5b8)\n    at dpdk-19.11/app/proc-info/main.c:1771\n\n(gdb) frame 2\n#2  0x000000000066e3b9 in rte_mutex_lock (mutex=mutex@entry=0x3ffe92ffd180)\n    at dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c:93\n93      dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c: No such file or directory.\n(gdb) print *mutex\n$1 = {__data = {__lock = 2, __count = 0, __owner = 3885, __nusers = 1, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}},\n  __size = "\\002\\000\\000\\000\\000\\000\\000\\000-\\017\\000\\000\\001", \'\\000\' <repeats 26 times>, __align = 2}\n')),(0,r.kt)("p",null,"\u901a\u8fc7\u63a7\u5236 ",(0,r.kt)("strong",{parentName:"p"},"/tmp/abnormal_exit")," \u6587\u4ef6\u7684\u521b\u5efa\u89e6\u53d1\u4e34\u754c\u533a\u5f02\u5e38\u9000\u51fa\uff0c\u9000\u51fa\u540e\u91cd\u65b0\u8fd0\u884c ",(0,r.kt)("strong",{parentName:"p"},"dpdk-procinfo")," \u7a0b\u5e8f\u786e\u8ba4\u80fd\u591f\u590d\u73b0\u51fa\u4e0e\u672c\u6587\u63cf\u8ff0\u7684\u95ee\u9898\u5b8c\u5168\u4e00\u6837\u7684\u73b0\u8c61\uff0c\u800c\u6b64\u65f6 ",(0,r.kt)("strong",{parentName:"p"},"3885")," \u8fdb\u7a0b\u5df2\u7ecf\u4e0d\u5b58\u5728\uff0c\u9501\u4e0d\u80fd\u91ca\u653e\u3002"),(0,r.kt)("h2",{id:"\u4fee\u6539\u4ee3\u7801\u6d4b\u8bd5"},"\u4fee\u6539\u4ee3\u7801\u6d4b\u8bd5"),(0,r.kt)("p",null,"\u6d4b\u8bd5\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'Index: lib/librte_eal/common/malloc_heap.c\n===================================================================\n--- lib/librte_eal/common/malloc_heap.c\n+++ lib/librte_eal/common/malloc_heap.c\n@@ -645,6 +645,12 @@\n+#ifndef F_OK\n+#define F_OK 0\n+#endif\n+       if((access("/tmp/abnormal_exit", F_OK)) != -1) {\n+               exit(-1);\n+       }\n\n        align = align == 0 ? 1 : align;\n\n@@ -1391,6 +1397,11 @@\n                                        "socket_%i", socket_id);\n                        strlcpy(heap->name, heap_name, RTE_HEAP_NAME_MAX_LEN);\n                        heap->socket_id = socket_id;\n+                       rte_mutex_init(&heap->lock);\n                }\n        }\n')),(0,r.kt)("p",null,"\u6838\u5fc3\u4fee\u6539\u662f\u5728",(0,r.kt)("strong",{parentName:"p"},"\u521d\u59cb\u5316 malloc_heaps \u7684\u65f6\u5019\u8c03\u7528 rte_mutex_init \u51fd\u6570\u521d\u59cb\u5316 mutex \u4e92\u65a5\u9501"),"\u3002"),(0,r.kt)("p",null,"\u91cd\u65b0\u7f16\u8bd1 l2fwd \u4e0e dpdk-procinfo \u8fdb\u884c\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u6b65\u9aa4\u5982\u4e0b\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u8fd0\u884c l2wd"),(0,r.kt)("li",{parentName:"ol"},"\u521b\u5efa /tmp/abnormal_exit"),(0,r.kt)("li",{parentName:"ol"},"\u8fd0\u884c dpdk-procinfo"),(0,r.kt)("li",{parentName:"ol"},"\u5220\u9664 /tmp/abnormal_exit \u6587\u4ef6\u5e76\u91cd\u65b0\u8fd0\u884c dpdk-procinfo")),(0,r.kt)("p",null,"\u7b2c\u56db\u6b65 dpdk-procinfo \u80fd\u591f\u6b63\u5e38\u8fd0\u884c\u8868\u660e\u9501\u88ab\u91ca\u653e\uff0c\u95ee\u9898\u5f97\u5230\u4fee\u590d\uff01\u6d4b\u8bd5\u8fc7\u7a0b\u8bb0\u5f55\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"root@debian:/home/longyu/dpdk-19.11-mutex-lock-test# rm -rf /tmp/abnormal_exit\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# touch /tmp/abnormal_exit\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# ./dpdk-procinfo -- --stats\nEAL: Detected 8 lcore(s)\nEAL: Detected 1 NUMA nodes\nEAL: Multi-process socket /var/run/dpdk/rte/mp_socket_3936_14a881225806c\nEAL: Selected IOVA mode 'PA'\nEAL: Probing VFIO support...\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# rm -rf /tmp/abnormal_exit\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# ./dpdk-procinfo -- --stats\nEAL: Detected 8 lcore(s)\nEAL: Detected 1 NUMA nodes\nEAL: Multi-process socket /var/run/dpdk/rte/mp_socket_3946_14a91b7d40de5\nEAL: Selected IOVA mode 'PA'\nEAL: Probing VFIO support...\nEAL: PCI device 0000:00:11.0 on NUMA socket -1\nEAL:   Invalid NUMA socket, default to 0\nEAL:   probe driver: 8086:100f net_e1000_em\nEAL: PCI device 0000:00:12.0 on NUMA socket -1\nEAL:   Invalid NUMA socket, default to 0\nEAL:   probe driver: 8086:100f net_e1000_em\nEAL: PCI device 0000:00:13.0 on NUMA socket -1\nEAL:   Invalid NUMA socket, default to 0\nEAL:   probe driver: 8086:100f net_e1000_em\n\n  ######################## NIC statistics for port 0  ########################\n............................................................\n")),(0,r.kt)("p",null,"\u5f53\u7a0b\u5e8f\u672a\u91ca\u653e\u9501\u9000\u51fa\u540e\uff0c\u91cd\u65b0\u8fd0\u884c dpdk-procinfo \u7a0b\u5e8f\u80fd\u591f\u83b7\u5f97\u9501\uff0c\u6d4b\u8bd5\u901a\u8fc7\uff01"),(0,r.kt)("h2",{id:"\u662f\u5426\u6709\u5176\u5b83\u7c7b\u4f3c\u95ee\u9898"},"\u662f\u5426\u6709\u5176\u5b83\u7c7b\u4f3c\u95ee\u9898\uff1f"),(0,r.kt)("p",null,"review \u4ee3\u7801\uff0c\u76f8\u5173\u7684\u95ee\u9898\u53ea\u6709\u4e00\u5904\uff0c\u5176\u5b83\u4f4d\u7f6e\u6b63\u5e38\u521d\u59cb\u5316\u3002"),(0,r.kt)("h2",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,r.kt)("p",null,"\u5c3d\u7ba1\u672c\u6587\u63cf\u8ff0\u7684\u95ee\u9898\u542c\u4e0a\u53bb\u6709\u4e9b\u9ad8\u5927\u4e0a\uff0c\u53ef\u771f\u6b63\u89e6\u53d1\u95ee\u9898\u7684\u70b9\u5374\u975e\u5e38\u5c0f\uff0c\u5c3d\u7ba1\u5b83\u5c0f\u5374\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e9b\u5173\u952e\u7684\u95ee\u9898\u3002"),(0,r.kt)("p",null,"\u5728\u7f16\u7801\u7684\u65f6\u5019\u5c3d\u91cf\u3010\u4e0d\u505a\u9690\u5f0f\u5730\u5047\u8bbe\u3011\uff0c\u8fd9\u79cd\u5047\u8bbe\u5e26\u6765\u4e86\u975e\u5e38\u5dee\u7684\u6269\u5c55\u6027\uff0c\u5f53\u5176\u4ed6\u4eba\u6539\u9020\u5b58\u5728\u5047\u8bbe\u7684\u4ee3\u7801\u65f6\u4e0d\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e9b\u4f9d\u8d56\u5c31\u53ef\u80fd\u5e26\u6765\u4e25\u91cd\u7684\u540e\u679c\u3002"),(0,r.kt)("p",null,"\u9664\u4e86\u6b63\u5411\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e4b\u5916\uff0c\u4ece\u53cd\u9762\u6765\u770b\u5176\u5b9e\u9700\u8981\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u5ba1\u89c6\u76f8\u5173\u3010\u4fee\u6539\u7684\u4e00\u81f4\u6027\u3011\uff0c\u5373\u8fd0\u884c\u65f6",(0,r.kt)("strong",{parentName:"p"},"\u7279\u5f81\u5b57\u6bb5\u503c\u7684\u4e00\u81f4\u6027"),"\uff0c\u800c\u4e0d\u662f\u53ea\u9a8c\u8bc1\u529f\u80fd\u3002\u62ff\u672c\u6587\u63cf\u8ff0\u7684\u95ee\u9898\u6765\u8bf4\uff0c\u5c31\u662f\u4e0d\u540c\u7684 mutex \u7684 __kind \u5b57\u6bb5\u7684\u503c\u662f\u5426\u4e00\u81f4\u3002"))}s.isMDXComponent=!0}}]);