"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[6638],{3905:function(n,e,t){t.d(e,{Zo:function(){return c},kt:function(){return p}});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var s=r.createContext({}),u=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},c=function(n){var e=u(n.components);return r.createElement(s.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,a=n.originalType,s=n.parentName,c=o(n,["components","mdxType","originalType","parentName"]),m=u(t),p=i,_=m["".concat(s,".").concat(p)]||m[p]||d[p]||a;return t?r.createElement(_,l(l({ref:e},c),{},{components:t})):r.createElement(_,l({ref:e},c))}));function p(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var a=t.length,l=new Array(a);l[0]=m;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=n,o.mdxType="string"==typeof n?n:i,l[1]=o;for(var u=2;u<a;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5768:function(n,e,t){t.r(e),t.d(e,{assets:function(){return c},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),l=["components"],o={},s="\u521b\u5efa\u5185\u6838\u7ebf\u7a0b\u5e76\u901a\u8fc7\u5185\u6838\u7ebf\u7a0b\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f",u={unversionedId:"\u6280\u672f\u535a\u5ba2/linux-system/\u5185\u6838\u6a21\u5757/\u5185\u6838\u7ebf\u7a0b/\u521b\u5efa\u5185\u6838\u7ebf\u7a0b\u5e76\u901a\u8fc7\u5185\u6838\u7ebf\u7a0b\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f",id:"\u6280\u672f\u535a\u5ba2/linux-system/\u5185\u6838\u6a21\u5757/\u5185\u6838\u7ebf\u7a0b/\u521b\u5efa\u5185\u6838\u7ebf\u7a0b\u5e76\u901a\u8fc7\u5185\u6838\u7ebf\u7a0b\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f",title:"\u521b\u5efa\u5185\u6838\u7ebf\u7a0b\u5e76\u901a\u8fc7\u5185\u6838\u7ebf\u7a0b\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f",description:"\u8fd9\u91cc\u4f7f\u7528\u7684\u5185\u6838\u4e3a linux-4.0 \u5185\u6838\u3002",source:"@site/docs/\u6280\u672f\u535a\u5ba2/linux-system/\u5185\u6838\u6a21\u5757/\u5185\u6838\u7ebf\u7a0b/\u521b\u5efa\u5185\u6838\u7ebf\u7a0b\u5e76\u901a\u8fc7\u5185\u6838\u7ebf\u7a0b\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/linux-system/\u5185\u6838\u6a21\u5757/\u5185\u6838\u7ebf\u7a0b",slug:"/\u6280\u672f\u535a\u5ba2/linux-system/\u5185\u6838\u6a21\u5757/\u5185\u6838\u7ebf\u7a0b/\u521b\u5efa\u5185\u6838\u7ebf\u7a0b\u5e76\u901a\u8fc7\u5185\u6838\u7ebf\u7a0b\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/\u5185\u6838\u6a21\u5757/\u5185\u6838\u7ebf\u7a0b/\u521b\u5efa\u5185\u6838\u7ebf\u7a0b\u5e76\u901a\u8fc7\u5185\u6838\u7ebf\u7a0b\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f",draft:!1,editUrl:"https://github.com/longyuwlz/longyu.github.io/docs/\u6280\u672f\u535a\u5ba2/linux-system/\u5185\u6838\u6a21\u5757/\u5185\u6838\u7ebf\u7a0b/\u521b\u5efa\u5185\u6838\u7ebf\u7a0b\u5e76\u901a\u8fc7\u5185\u6838\u7ebf\u7a0b\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Program xxx tried to access /dev/mem between f0000-\uff1e100000.",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/\u5185\u6838\u6a21\u5757/\u5185\u5b58/Program xxx tried to access xxx"},next:{title:"could not insert module test.ko: Invalid parameters",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/\u5185\u6838\u6a21\u5757/\u5b9e\u73b0\u539f\u7406/could not insert module test.ko: Invalid parameters"}},c={},d=[{value:"\u5185\u6838\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f\u793a\u4f8b",id:"\u5185\u6838\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f\u793a\u4f8b",level:2}],m={toc:d};function p(n){var e=n.components,t=(0,i.Z)(n,l);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u521b\u5efa\u5185\u6838\u7ebf\u7a0b\u5e76\u901a\u8fc7\u5185\u6838\u7ebf\u7a0b\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f"},"\u521b\u5efa\u5185\u6838\u7ebf\u7a0b\u5e76\u901a\u8fc7\u5185\u6838\u7ebf\u7a0b\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f"),(0,a.kt)("p",null,"\u8fd9\u91cc\u4f7f\u7528\u7684\u5185\u6838\u4e3a linux-4.0 \u5185\u6838\u3002"),(0,a.kt)("p",null,"patch \u8d34\u5230\u8fd9\u91cc\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-patch"},'diff --git a/./linux-4.0-orig/linux-4.0/init/main.c b/./linux-4.0/init/main.c\nindex 6f0f1c5..88837d9 100644\n--- a/./linux-4.0-orig/linux-4.0/init/main.c\n+++ b/./linux-4.0/init/main.c\n@@ -379,6 +379,69 @@ static void __init setup_command_line(char *command_line)\n \n static __initdata DECLARE_COMPLETION(kthreadd_done);\n \n+\n+static int mykthread_run_umode_handler(int event_id)\n+{\n+    char *argv[3], *envp[4], *buffer = NULL;\n+    int i = 0, value;\n+\n+    argv[i++] = myevent_handler;\n+\n+    if (!(buffer = kmalloc(32, GFP_KERNEL)))\n+       return -ENOMEM;\n+\n+    sprintf(buffer, "TROUBLED_DS=%d", event_id);\n+\n+    if (!argv[0])\n+       return -EINVAL;\n+\n+    argv[i] = NULL;\n+\n+    i = 0;\n+\n+    /* minimal command environment */\n+    envp[i++] = "HOME=/";\n+    envp[i++] = "PATH=/sbin:/bin:/usr/sbin:/usr/bin";\n+    envp[i++] = buffer;\n+    envp[i] = NULL;\n+\n+    value = call_usermodehelper(argv[0], argv, envp, 0);\n+\n+    kfree(buffer);\n+    return 0;\n+}\n+\n+static int mykthread(void *unused)\n+{\n+    int sigusr_count = 0;\n+   \n+   /* Setup a clean context for our children to inherit. */\n+   set_task_comm(current, "mykthread");\n+\n+   /* Request delivery of SIGKILL */\n+\n+   /* The  thread sleeps on this wait queue until it\'s woken up\n+    * by parts of the kernel in charge of sensing the health of\n+     * data structures of i nterest */\n+   \n+   while (1) {\n+       set_current_state(TASK_INTERRUPTIBLE);\n+       schedule();\n+\n+       if (signal_pending(current)) {\n+           flush_signals(current);\n+           sigusr_count++;\n+       }\n+       mykthread_run_umode_handler(sigusr_count);\n+   } \n+   \n+   set_current_state(TASK_RUNNING);    \n+   \n+   return 0;\n+}\n+\n static noinline void __init_refok rest_init(void)\n {\n    int pid;\n@@ -392,6 +455,7 @@ static noinline void __init_refok rest_init(void)\n    kernel_thread(kernel_init, NULL, CLONE_FS);\n    numa_default_policy();\n    pid = kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES);\n+   kernel_thread(mykthread, NULL, CLONE_FS | CLONE_FILES); \n    rcu_read_lock();\n    kthreadd_task = find_task_by_pid_ns(pid, &init_pid_ns);\n    rcu_read_unlock();\ndiff --git a/./linux-4.0-orig/linux-4.0/include/linux/sysctl.h b/./linux-4.0/include/linux/sysctl.h\nindex b7361f8..7fc854e 100644\n--- a/./linux-4.0-orig/linux-4.0/include/linux/sysctl.h\n+++ b/./linux-4.0/include/linux/sysctl.h\n@@ -34,6 +34,8 @@ struct ctl_table_root;\n struct ctl_table_header;\n struct ctl_dir;\n \n+extern char myevent_handler[];\n+\n typedef int proc_handler (struct ctl_table *ctl, int write,\n              void __user *buffer, size_t *lenp, loff_t *ppos);\n \ndiff --git a/./linux-4.0-orig/linux-4.0/kernel/sysctl.c b/./linux-4.0/kernel/sysctl.c\nindex ce410bb..e02e8b0 100644\n--- a/./linux-4.0-orig/linux-4.0/kernel/sysctl.c\n+++ b/./linux-4.0/kernel/sysctl.c\n@@ -95,6 +95,10 @@\n \n #if defined(CONFIG_SYSCTL)\n \n+\n+char myevent_handler[256];\n+EXPORT_SYMBOL(myevent_handler);\n+\n /* External variables not in a header file. */\n extern int max_threads;\n extern int suid_dumpable;\n@@ -724,6 +728,13 @@ static struct ctl_table kern_table[] = {\n        .mode       = 0555,\n        .child      = usermodehelper_table,\n    },\n+        {\n+         .procname = "myevent_handler",\n+         .data = &myevent_handler,\n+         .maxlen = 256,\n+         .mode = 0644,\n+         .proc_handler = &proc_dostring,\n+        },\n    {\n        .procname   = "overflowuid",\n        .data       = &overflowuid,\n')),(0,a.kt)("p",null,"kern_table \u4e2d\u6dfb\u52a0\u7684\u8868\u9879\u4e2d\uff0c.data \u6307\u5411\u7684\u662f\u4e00\u5757\u5185\u5b58\u533a\u57df\uff0cmyevent_handler \u662f\u4e00\u4e2a\u9759\u6001\u6570\u7ec4\uff0c\u7528\u6765\u5b58\u50a8 handler \u7684\u547d\u4ee4\u540d\u79f0\u3002"),(0,a.kt)("p",null,"\u539f\u4e66\u4e2d\u7684\u4ee3\u7801\u5b58\u5728\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"waitqueue \u6682\u65f6\u4e0d\u77e5\u9053\u548b\u6837\u6d4b\u8bd5\uff0c\u5c31\u7528\u4fe1\u53f7\u6765\u641e")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u63a5\u6536\u5230\u4fe1\u53f7\u540e\u8981\u8c03\u7528 flush_signals() \u6765\u6e05\u9664 task struct \u4e2d\u7684\u6807\u5fd7\u5b57\u6bb5\uff0c\u4e0d\u7136\u4f1a\u4e00\u76f4\u89e6\u53d1")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"flush_signals \u51fd\u6570\u8c03\u7528\u524d\u83b7\u53d6 sighand \u81ea\u65cb\u9501\u4f1a\u5361\u6b7b\uff0c\u5e94\u8be5\u662f\u6b64\u65f6\u81ea\u65cb\u9501\u5df2\u7ecf\u88ab\u5360\u7528")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u4e0d\u9700\u8981\u6267\u884c signal_allow \u6765\u663e\u793a\u7684\u4f7f\u80fd\u4fe1\u53f7\uff0c\u8c03\u7528 sigismember \u5b8f\u5224\u65ad\u7684\u65f6\u5019\u4f1a\u5931\u8d25")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"\u5f53\u5185\u6838\u7ebf\u7a0b\u76f4\u63a5\u8fd4\u56de\u65f6\uff0c\u6709\u5982\u4e0b oops \u4fe1\u606f\u3002"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-oops"},"/ # kill -9 3\ntask sighand blocked\ntask sighand unblocked\nout\nkthread mykthread exited\nUnable to handle kernel NULL pointer dereference at virtual address 00000000\npgd = 80004000\n[00000000] *pgd=00000000\nInternal error: Oops: 80000017 [#1] SMP ARM\nModules linked in:\nCPU: 0 PID: 3 Comm: mykthread Not tainted 4.0.0 #30\nHardware name: ARM-Versatile Express\ntask: 8c048980 ti: 8c05e000 task.ti: 8c05e000\nPC is at 0x0\nLR is at 0x0\npc : [<00000000>]    lr : [<00000000>]    psr: 00000013\nsp : 8c05fff8  ip : 00000000  fp : 00000000\nr10: 00000000  r9 : 00000000  r8 : 00000000\nr7 : 00000000  r6 : 00000000  r5 : 00000000  r4 : 00000000\nr3 : 00000000  r2 : 00000000  r1 : 00000000  r0 : 00000000\nFlags: nzcv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment kernel\nControl: 10c5387d  Table: 6c21806a  DAC: 00000015\nProcess mykthread (pid: 3, stack limit = 0x8c05e210)\nStack: (0x8c05fff8 to 0x8c060000)\nffe0:                                                       00000000 00000000\nCode: bad PC value\n[ end trace c752e7bdfd2aa50f ]\n")))),(0,a.kt)("p",null,"\u7f51\u4e0a\u641c\u7d22\u7684\u7f51\u9875\u63cf\u8ff0\u5185\u6838\u7ebf\u7a0b\u76f4\u63a5\u8fd4\u56de\u5e94\u8be5\u662f\u6b63\u5e38\u7684\uff0c\u5728\u5185\u6838\u6e90\u7801\u4e2d\u6ca1\u6709\u641c\u7d22\u5230\u7ebf\u7a0b\u9000\u51fa\u7684\u4ee3\u7801\u3002"),(0,a.kt)("p",null,"\u5185\u6838\u5e94\u8be5\u662f",(0,a.kt)("strong",{parentName:"p"},"\u76d1\u63a7"),"\u67d0\u79cd\u4e8b\u4ef6\u6216\u6570\u636e\u7ed3\u6784\uff0c\u5f53",(0,a.kt)("strong",{parentName:"p"},"\u51fa\u73b0\u95ee\u9898"),"\u65f6\uff0c",(0,a.kt)("strong",{parentName:"p"},"\u5524\u9192")," mykthread \u5185\u6838\u7ebf\u7a0b\u6765",(0,a.kt)("strong",{parentName:"p"},"\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f\u901a\u77e5\u7528\u6237"),"\u3002\u8fd9\u91cc\u76f4\u63a5\u4ee5",(0,a.kt)("strong",{parentName:"p"},"\u4fe1\u53f7\u7684\u5f62\u5f0f\u89e6\u53d1\u4e8b\u4ef6\u6765\u6a21\u62df"),"\u3002"),(0,a.kt)("p",null,"\u539f\u4e66\u4ee3\u7801\u8981\u5b9e\u73b0\u7684\u903b\u8f91\u5982\u4e0b\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u5728 mykthread \u4e2d\u521b\u5efa\u4e00\u4e2a waitqueue\uff0c\u6302\u8d77\u6b64\u5185\u6838\u7ebf\u7a0b\u7b49\u5f85\u4e8b\u4ef6\u53d1\u751f")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"\u5f53\u4e8b\u4ef6\u53d1\u751f\u540e\uff0c\u5728\u53e6\u5916\u7684\u5730\u65b9\u8c03\u7528 wake_up_interruptible(&myevent_waitqueue); \u6765\u5524\u9192 mykthread \u5185\u6838\u7ebf\u7a0b\u4ee5\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f\u901a\u77e5\u7528\u6237\u3002")),(0,a.kt)("p",null,"\u4fee\u6539\u5185\u6838\u7ebf\u7a0b\uff0c\u5728\u6536\u5230\u4fe1\u53f7\u540e\u4e3b\u52a8\u8c03\u7528 ",(0,a.kt)("strong",{parentName:"p"},"do_exit(0)")," \u6765\u9000\u51fa\uff0c\u6d4b\u8bd5\u53d1\u73b0\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u4ea7\u751f oops \u4f46\u662f\u7ebf\u7a0b\u9000\u51fa\u540e\u53d8\u4e3a\u4e86 ",(0,a.kt)("strong",{parentName:"p"},"Zombie")," \u8fdb\u7a0b\uff0c\u8fd9\u5e94\u8be5\u662f\u6ca1\u6709\u7236\u8fdb\u7a0b\u7684\u539f\u56e0\u3002\u5728 kthreadd \u4e2d\u6ca1\u6709\u770b\u5230\u8fd9\u4e2a do_exit(0); \u7684\u8c03\u7528\uff0c",(0,a.kt)("strong",{parentName:"p"},"\u5176\u5b9e kthreadd \u81ea\u4ece\u521b\u5efa\u540e\u5c31\u4e0d\u4f1a\u9000\u51fa"),"\u3002"),(0,a.kt)("h2",{id:"\u5185\u6838\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f\u793a\u4f8b"},"\u5185\u6838\u8c03\u7528\u7528\u6237\u6001\u7a0b\u5e8f\u793a\u4f8b"),(0,a.kt)("p",null,"\u7f51\u4e0a\u641c\u7d22\u5230\uff0c\u9664\u4e86\u4fee\u6539 sysctl.c \u6765\u6ce8\u518c\u4e00\u4e2a\u7528\u6237\u6001 hepler \u94a9\u5b50\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u52a8\u6001\u7684\u6ce8\u518c\uff0c\u76f8\u5173\u7684 demo \u7a0b\u5e8f\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include <linux/wait.h>\n#include <linux/kmod.h>\n#include <linux/module.h>\n#include <linux/slab.h>\n\n#define CMD_LENGTH 256\n\nstatic char cmd_str[CMD_LENGTH];\n\nstatic struct ctl_table_header *ctl_table_header;\n\nstatic struct ctl_table ctl_table[] = {\n    {\n     .procname = "umode_helper",\n     .data = cmd_str,\n     .maxlen = sizeof(cmd_str),\n     .mode = 0644,\n     .proc_handler = proc_dostring,\n     },\n    {},\n};\n\nstatic int run_umode_handler_example(int arg)\n{\n    char *argv[3], *envp[4], *buffer = NULL;\n    int i = 0, value;\n    \n    argv[i++] = cmd_str;\n    \n    if (!(buffer = kmalloc(32, GFP_KERNEL)))\n        return -ENOMEM;\n\n    sprintf(buffer, "TEST_VARIABLE=%s", "hello");\n    \n    if (!argv[0])\n        return -EINVAL;\n\n    argv[i] = NULL;\n\n    i = 0;\n\n    /* minimal command environment */\n    envp[i++] = "HOME=/";\n    envp[i++] = "PATH=/sbin:/bin:/usr/sbin:/usr/bin";\n    envp[i++] = buffer;\n    envp[i] = NULL;\n\n    value = call_usermodehelper(argv[0], argv, envp, UMH_WAIT_PROC);\n    \n    kfree(buffer);\n    return 0;\n}\n\nstatic int __init umode_handler_demo_init(void)\n{\n    ctl_table_header = register_sysctl_table(ctl_table);\n\n    if (!ctl_table_header) {\n        printk(KERN_ERR "ctl_table_header register failed\\n");\n        return -EINVAL;\n    } \n    \n    return 0;\n}\n\nstatic void __exit umode_handler_demo_exit(void)\n{\n    run_umode_handler_example(-1);\n\n    if (ctl_table_header)\n        unregister_sysctl_table(ctl_table_header);\n}\n\nmodule_init(umode_handler_demo_init);\nmodule_exit(umode_handler_demo_exit);\n\nMODULE_DESCRIPTION("umode demo");\nMODULE_AUTHOR("longyu");\nMODULE_LICENSE("GPL");\n')),(0,a.kt)("p",null,"Makefile \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Makefile"},"MODULE_FILENAME=usermodehelper_demo\n\nobj-m += ${MODULE_FILENAME}.o\nKO_FILE=${MODULE_FILENAME}.ko\n\nKROOT= /home/longyu/arm-linux-kernel/linux-4.0\n\nmodules:\n    @${MAKE} -C ${KROOT} ARCH=arm CROSS_COMPILE=arm-none-eabi- M=${PWD} modules\n\nclean:\n    @${MAKE} -C ${KROOT} M=${PWD} clean\n    rm -rf Modules.symvers modules.order\n")),(0,a.kt)("p",null,"\u52a0\u8f7d\u6d4b\u8bd5\u8bb0\u5f55\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'/tmp/host_files # insmod usermodehelper_demo.ko \n/tmp/host_files # cat /bin/test.sh \n#!/bin/sh\n\ntouch /test\necho $TEST_VARIABLE > /test\n/tmp/host_files # echo "/bin/test.sh" > /proc/sys/umode_helper \n/tmp/host_files # cat /proc/sys/umode_helper \n/bin/test.sh\n/tmp/host_files # \n/tmp/host_files # rmmod usermodehelper_demo.ko \nrunning here, argv[0] is /bin/test.sh\n/tmp/host_files # cat /test\nhello\n')))}p.isMDXComponent=!0}}]);