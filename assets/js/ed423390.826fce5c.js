"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[384],{3905:function(e,t,n){n.d(t,{Zo:function(){return i},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},i=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,i=_(e,["components","mdxType","originalType","parentName"]),f=s(n),d=a,u=f["".concat(o,".").concat(d)]||f[d]||c[d]||l;return n?r.createElement(u,p(p({ref:t},i),{},{components:n})):r.createElement(u,p({ref:t},i))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,p=new Array(l);p[0]=f;var _={};for(var o in t)hasOwnProperty.call(t,o)&&(_[o]=t[o]);_.originalType=e,_.mdxType="string"==typeof e?e:a,p[1]=_;for(var s=2;s<l;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3562:function(e,t,n){n.r(t),n.d(t,{assets:function(){return i},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return _},metadata:function(){return s},toc:function(){return c}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),p=["components"],_={},o="\u73af\u5883\u4ecb\u7ecd",s={permalink:"/longyu.github.io/blog/dpdk/\u4f7f\u7528\u5185\u6838\u9a71\u52a8\u4e0a\u624b x710 flow directory \u529f\u80fd",editUrl:"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u4f7f\u7528\u5185\u6838\u9a71\u52a8\u4e0a\u624b x710 flow directory \u529f\u80fd.md",source:"@site/blog/dpdk/\u4f7f\u7528\u5185\u6838\u9a71\u52a8\u4e0a\u624b x710 flow directory \u529f\u80fd.md",title:"\u73af\u5883\u4ecb\u7ecd",description:"i40e \u9a71\u52a8\u7248\u672c\u4e3a 5.0 \u5185\u6838\u4e3b\u7ebf\u7248\u672c\uff0c\u7f51\u5361\u4e3a x710 \u7f51\u5361\u3002\u9700\u8981\u6d4b\u8bd5 flow directory \u529f\u80fd\u80fd\u5426\u6b63\u5e38\u4f7f\u7528\u3002",date:"2022-06-21T00:32:49.000Z",formattedDate:"2022\u5e746\u670821\u65e5",tags:[],readingTime:16.465,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"dpdk mempool_ops",permalink:"/longyu.github.io/blog/dpdk/\u4ee5 rte_mempool_ops_table \u4e3a\u4f8b\u63cf\u8ff0 dpdk \u7a0b\u5e8f\u5e93\u94fe\u63a5\u987a\u5e8f\u5bf9\u7a0b\u5e8f\u6267\u884c\u7684\u5f71\u54cd"},nextItem:{title:"dpdk/\u5173\u95ed stdout \u5f15\u53d1\u7684\u707e\u96be",permalink:"/longyu.github.io/blog/dpdk/\u5173\u95ed stdout \u5f15\u53d1\u7684\u707e\u96be"}},i={authorsImageUrls:[]},c=[{value:"\u5206\u6790 flow-type \u4e3a ether \u65f6\u7684\u6267\u884c\u8fc7\u7a0b",id:"\u5206\u6790-flow-type-\u4e3a-ether-\u65f6\u7684\u6267\u884c\u8fc7\u7a0b",level:2},{value:"ethtool \u4e2d\u7684\u6d41\u7a0b\u5206\u6790",id:"ethtool-\u4e2d\u7684\u6d41\u7a0b\u5206\u6790",level:3},{value:"ntuple \u65b9\u5f0f ioctl \u7684\u53c2\u6570",id:"ntuple-\u65b9\u5f0f-ioctl-\u7684\u53c2\u6570",level:4},{value:"classifier \u65b9\u5f0f ioctl \u7684\u53c2\u6570",id:"classifier-\u65b9\u5f0f-ioctl-\u7684\u53c2\u6570",level:4},{value:"i40e \u5185\u6838\u9a71\u52a8\u652f\u6301\u54ea\u4e00\u79cd\u7c7b\u578b?",id:"i40e-\u5185\u6838\u9a71\u52a8\u652f\u6301\u54ea\u4e00\u79cd\u7c7b\u578b",level:4},{value:"ioctl \u7684\u5185\u6838\u6d41\u7a0b",id:"ioctl-\u7684\u5185\u6838\u6d41\u7a0b",level:3},{value:"\u5bf9 flex filter \u7684\u8ba4\u8bc6",id:"\u5bf9-flex-filter-\u7684\u8ba4\u8bc6",level:2},{value:"\u5c1d\u8bd5\u5206\u6790\u4ee3\u7801\u4ee5\u627e\u5230 flex filter \u4e0d\u80fd\u751f\u6548\u7684\u539f\u56e0",id:"\u5c1d\u8bd5\u5206\u6790\u4ee3\u7801\u4ee5\u627e\u5230-flex-filter-\u4e0d\u80fd\u751f\u6548\u7684\u539f\u56e0",level:2},{value:"\u4fee\u6539\u4ee3\u7801\uff0c\u6253\u5370\u586b\u5145\u7684 raw_packet \u62a5\u6587\u5185\u5bb9",id:"\u4fee\u6539\u4ee3\u7801\u6253\u5370\u586b\u5145\u7684-raw_packet-\u62a5\u6587\u5185\u5bb9",level:2},{value:"\u552f\u4e00\u4e00\u6b21\u6210\u529f\u7684 use-def \u914d\u7f6e\u65f6\u7684 raw_packet \u5185\u5bb9",id:"\u552f\u4e00\u4e00\u6b21\u6210\u529f\u7684-use-def-\u914d\u7f6e\u65f6\u7684-raw_packet-\u5185\u5bb9",level:2},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}],f={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,p);return(0,l.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"i40e \u9a71\u52a8\u7248\u672c\u4e3a 5.0 \u5185\u6838\u4e3b\u7ebf\u7248\u672c\uff0c\u7f51\u5361\u4e3a x710 \u7f51\u5361\u3002\u9700\u8981\u6d4b\u8bd5 flow directory \u529f\u80fd\u80fd\u5426\u6b63\u5e38\u4f7f\u7528\u3002"),(0,l.kt)("h1",{id:"\u7b2c\u4e00\u4e2a\u95ee\u9898\u4e0d\u652f\u6301-flow-type-\u4e3a-ether"},"\u7b2c\u4e00\u4e2a\u95ee\u9898\uff1a\u4e0d\u652f\u6301 flow-type \u4e3a ether"),(0,l.kt)("p",null,"\u4f7f\u7528\u4e0b\u9762\u8fd9\u6761\u547d\u4ee4\uff0c\u8bbe\u5b9a\u4e00\u4e2a flow-type \u4e3a ether \u7c7b\u578b\u7684\u8fc7\u6ee4\u6761\u4ef6\u65f6\u62a5\u4e86 NOTSUPP \u7684\u9519\u8bef\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"ethtool -U enp11s0f0  flow-type ether  ....\n")),(0,l.kt)("h2",{id:"\u5206\u6790-flow-type-\u4e3a-ether-\u65f6\u7684\u6267\u884c\u8fc7\u7a0b"},"\u5206\u6790 flow-type \u4e3a ether \u65f6\u7684\u6267\u884c\u8fc7\u7a0b"),(0,l.kt)("h3",{id:"ethtool-\u4e2d\u7684\u6d41\u7a0b\u5206\u6790"},"ethtool \u4e2d\u7684\u6d41\u7a0b\u5206\u6790"),(0,l.kt)("p",null,"ethtool \u4e2d\u89e3\u6790\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'else if (!strcmp(argp[0], "ether"))\n        flow_type = ETHER_FLOW;\n\n    fsp->flow_type = flow_type;\n')),(0,l.kt)("p",null,"\u5f53 ethtool \u547d\u4ee4\u884c\u4e2d\u8bbe\u5b9a\u4e86 flow-type \u4e3a ether \u65f6\uff0cethtool \u4f1a\u5c06 flow_type \u8bbe\u5b9a\u4e3a ",(0,l.kt)("strong",{parentName:"p"},"ETHER_FLOW"),"\u3002"),(0,l.kt)("p",null,"\u7136\u540e\u7acb\u523b\u5224\u65ad ",(0,l.kt)("strong",{parentName:"p"},"flow_type"),"\uff0c\u5206\u53d1\u5230\u4e0d\u540c\u7684 ",(0,l.kt)("strong",{parentName:"p"},"options")," \u4e2d\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    case ETHER_FLOW:\n        options = rule_nfc_ether;\n        n_opts = ARRAY_SIZE(rule_nfc_ether);\n        break;\n")),(0,l.kt)("p",null,"options \u8868\u793a\u89e3\u6790\u53c2\u6570\u7684\u89c4\u5219\uff0crule_nfc_ether \u5b9a\u4e49\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'static const struct rule_opts rule_nfc_ether[] = {\n    { "src", OPT_MAC, NFC_FLAG_SADDR,\n      offsetof(struct ethtool_rx_flow_spec, h_u.ether_spec.h_source),\n      offsetof(struct ethtool_rx_flow_spec, m_u.ether_spec.h_source) },\n    { "dst", OPT_MAC, NFC_FLAG_DADDR,\n      offsetof(struct ethtool_rx_flow_spec, h_u.ether_spec.h_dest),\n      offsetof(struct ethtool_rx_flow_spec, m_u.ether_spec.h_dest) },\n    { "proto", OPT_BE16, NFC_FLAG_PROTO,\n      offsetof(struct ethtool_rx_flow_spec, h_u.ether_spec.h_proto),\n      offsetof(struct ethtool_rx_flow_spec, m_u.ether_spec.h_proto) },\n    { "action", OPT_U64, NFC_FLAG_RING,\n      offsetof(struct ethtool_rx_flow_spec, ring_cookie), -1 },\n    { "vf", OPT_RING_VF, NFC_FLAG_RING_VF,\n      offsetof(struct ethtool_rx_flow_spec, ring_cookie), -1 },\n    { "queue", OPT_RING_QUEUE, NFC_FLAG_RING_QUEUE,\n      offsetof(struct ethtool_rx_flow_spec, ring_cookie), -1 },\n    { "loc", OPT_U32, NFC_FLAG_LOC,\n      offsetof(struct ethtool_rx_flow_spec, location), -1 },\n    { "vlan-etype", OPT_BE16, NTUPLE_FLAG_VETH,\n      offsetof(struct ethtool_rx_flow_spec, h_ext.vlan_etype),\n      offsetof(struct ethtool_rx_flow_spec, m_ext.vlan_etype) },\n    { "vlan", OPT_BE16, NTUPLE_FLAG_VLAN,\n      offsetof(struct ethtool_rx_flow_spec, h_ext.vlan_tci),\n      offsetof(struct ethtool_rx_flow_spec, m_ext.vlan_tci) },\n    { "user-def", OPT_BE64, NTUPLE_FLAG_UDEF,\n      offsetof(struct ethtool_rx_flow_spec, h_ext.data),\n      offsetof(struct ethtool_rx_flow_spec, m_ext.data) },\n};\n')),(0,l.kt)("p",null,"\u89e3\u6790\u5b8c\u6240\u6709\u7684\u53c2\u6570\u540c\u65f6\u914d\u7f6e\u597d ",(0,l.kt)("strong",{parentName:"p"},"struct ethtool_rx_flow_spec")," \u7ed3\u6784\u4f53\uff0c\u7136\u540e\u8c03\u7528 ",(0,l.kt)("strong",{parentName:"p"},"ioctl")," \u6765\u4e0b\u53d1\u914d\u7f6e\u5230\u7f51\u5361\u3002"),(0,l.kt)("p",null,"\u914d\u7f6e\u65b9\u5f0f\u6709\u4e24\u79cd\u7c7b\u578b\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'        /* attempt to add rule via N-tuple specifier */\n        err = do_srxntuple(ctx, &rx_rule_fs);\n        if (!err)\n            return 0;\n\n        /* attempt to add rule via network flow classifier */\n        err = rxclass_rule_ins(ctx, &rx_rule_fs, rss_context);\n        if (err < 0) {\n            fprintf(stderr, "Cannot insert"\n                " classification rule\\n");\n            return 1;\n        }\n')),(0,l.kt)("p",null,"\u7b2c\u4e00\u79cd\u914d\u7f6e\u65b9\u5f0f\u662f ntuple\uff0c\u7b2c\u4e8c\u79cd\u662f classifier\uff0c\u8fd9\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f",(0,l.kt)("strong",{parentName:"p"},"\u4f20\u9012\u7ed9 ioctl \u7684 ethtool \u5b50\u547d\u4ee4\u5b58\u5728\u533a\u522b"),"\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u5f53\u9a71\u52a8\u4e0d\u652f\u6301 ntuple \u65b9\u5f0f\u914d\u7f6e\u65f6\uff08\u8fd4\u56de\u503c\u4e3a EOPNOTSUPP \u65f6\uff09\uff0c\u4e0d\u4f1a\u6253\u5370\u5931\u8d25\u4fe1\u606f\uff0c\u7ee7\u7eed\u5c1d\u8bd5 classifier \u65b9\u5f0f"),"\u3002"),(0,l.kt)("p",null,"\u5f53\u4e24\u79cd\u65b9\u5f0f\u90fd\u5931\u8d25\u540e\uff0c\u8f6f\u4ef6\u6267\u884c\u5982\u4e0b\u4ee3\u7801\u6253\u5370\u9519\u8bef\u4fe1\u606f\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},'            fprintf(stderr, "Cannot insert"\n                " classification rule\\n");\n')),(0,l.kt)("h4",{id:"ntuple-\u65b9\u5f0f-ioctl-\u7684\u53c2\u6570"},"ntuple \u65b9\u5f0f ioctl \u7684\u53c2\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    /* send rule via N-tuple */\n    ntuplecmd.cmd = ETHTOOL_SRXNTUPLE;\n    err = send_ioctl(ctx, &ntuplecmd);\n")),(0,l.kt)("h4",{id:"classifier-\u65b9\u5f0f-ioctl-\u7684\u53c2\u6570"},"classifier \u65b9\u5f0f ioctl \u7684\u53c2\u6570"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    /* notify netdev of new rule */\n    nfccmd.cmd = ETHTOOL_SRXCLSRLINS;\n    nfccmd.rss_context = rss_context;\n    nfccmd.fs = *fsp;\n    err = send_ioctl(ctx, &nfccmd);\n")),(0,l.kt)("h4",{id:"i40e-\u5185\u6838\u9a71\u52a8\u652f\u6301\u54ea\u4e00\u79cd\u7c7b\u578b"},"i40e \u5185\u6838\u9a71\u52a8\u652f\u6301\u54ea\u4e00\u79cd\u7c7b\u578b?"),(0,l.kt)("p",null,"5.0 \u5185\u6838\u4e2d\uff0cethtool \u6846\u67b6\u4e0d\u652f\u6301 ntuple \u65b9\u5f0f\u3002"),(0,l.kt)("h3",{id:"ioctl-\u7684\u5185\u6838\u6d41\u7a0b"},"ioctl \u7684\u5185\u6838\u6d41\u7a0b"),(0,l.kt)("p",null,"ethool \u8c03\u7528 ioctl \u6700\u7ec8\u4f1a\u8d70\u5230 ",(0,l.kt)("strong",{parentName:"p"},"dev_ethtool")," \u51fd\u6570\u4e2d\uff0c\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d ETHTOOL_SRXCLSRLINS \u88ab\u5206\u53d1\u5230 ethtool_set_rxnfc \u51fd\u6570\u4e2d\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"2705     case ETHTOOL_SRXFH:\n2706     case ETHTOOL_SRXCLSRLDEL:\n2707     case ETHTOOL_SRXCLSRLINS:\n2708         rc = ethtool_set_rxnfc(dev, ethcmd, useraddr);\n2709         break;\n")),(0,l.kt)("p",null,"ethtool_set_rxnfc \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"rc = dev->ethtool_ops->set_rxnfc(dev, &info);\n")),(0,l.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\u5b83\u8c03\u7528\u4e86 ",(0,l.kt)("strong",{parentName:"p"},"ethtool_ops")," \u4e2d\u7684 ",(0,l.kt)("strong",{parentName:"p"},"set_rxnfc")," \u51fd\u6570\u6307\u9488\uff0c\u6b64\u51fd\u6570\u6307\u9488\u5728 ",(0,l.kt)("strong",{parentName:"p"},"i40e_ethtool.c")," \u4e2d\u5b9e\u73b0\uff0c",(0,l.kt)("strong",{parentName:"p"},"i40e_ethtool.c")," \u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"4308 static int i40e_set_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd)\n4309 {\n4310     struct i40e_netdev_priv *np = netdev_priv(netdev);\n4311     struct i40e_vsi *vsi = np->vsi;\n4312     struct i40e_pf *pf = vsi->back;\n4313     int ret = -EOPNOTSUPP;\n4314 \n4315     switch (cmd->cmd) {\n4316     case ETHTOOL_SRXFH:\n4317         ret = i40e_set_rss_hash_opt(pf, cmd);\n4318         break;\n4319     case ETHTOOL_SRXCLSRLINS:\n4320         ret = i40e_add_fdir_ethtool(vsi, cmd);\n4321         break;\n4322     case ETHTOOL_SRXCLSRLDEL:\n4323         ret = i40e_del_fdir_entry(vsi, cmd);\n4324         break;\n4325     default:\n4326         break;\n4327     }\n4328 \n4329     return ret;\n4330 }\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"i40e_add_fdir_ethtool")," \u5728\u771f\u6b63\u8bbe\u5b9a\u5230\u7f51\u5361\u524d\u505a\u4e86\u8bb8\u591a\u68c0\u67e5\uff0c\u5176\u4e2d\u6709 ",(0,l.kt)("strong",{parentName:"p"},"i40e_check_fdir_input_set")," \u8fd9\u4e2a\u5bf9 input_set \u7684\u68c0\u67e5\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"i40e_check_fdir_input_set")," \u4e2d\u5224\u65ad ",(0,l.kt)("strong",{parentName:"p"},"flow_type"),"\uff0c\u5f53\u8fd9\u4e2a\u5b57\u6bb5\u8bbe\u5b9a\u4e3a ",(0,l.kt)("strong",{parentName:"p"},"ETHER_FLOW")," \u6b64\u51fd\u6570\u5c06\u4f1a\u8fd4\u56de -EOPNOTSUPP\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"3801     switch (fsp->flow_type & ~FLOW_EXT) {\n3802     case SCTP_V4_FLOW:\n3803         index = I40E_FILTER_PCTYPE_NONF_IPV4_SCTP;\n3804         fdir_filter_count = &pf->fd_sctp4_filter_cnt;\n3805         break;\n3806     case TCP_V4_FLOW:\n3807         index = I40E_FILTER_PCTYPE_NONF_IPV4_TCP;\n3808         fdir_filter_count = &pf->fd_tcp4_filter_cnt;\n3809         break;\n3810     case UDP_V4_FLOW:\n3811         index = I40E_FILTER_PCTYPE_NONF_IPV4_UDP;\n3812         fdir_filter_count = &pf->fd_udp4_filter_cnt;\n3813         break;\n3814     case IP_USER_FLOW:\n3815         index = I40E_FILTER_PCTYPE_NONF_IPV4_OTHER;\n3816         fdir_filter_count = &pf->fd_ip4_filter_cnt;\n3817         flex_l3 = true;\n3818         break;\n3819     default:\n3820         return -EOPNOTSUPP;\n3821     }\n")),(0,l.kt)("p",null,"\u53ef\u4ee5\u786e\u5b9a\u5bf9\u4e8e\u6267\u884c ",(0,l.kt)("strong",{parentName:"p"},"ethtool -U devname ether xxx")," \u7684\u8bbe\u5b9a linux 5.0 \u7684 i40e \u9a71\u52a8\u5e76\u4e0d\u652f\u6301\uff01"),(0,l.kt)("h1",{id:"\u7b2c\u4e8c\u4e2a\u95ee\u9898\u5982\u4f55\u4e22\u6389\u6240\u6709\u7684-ipv4-udp-\u62a5\u6587"},"\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u4e22\u6389\u6240\u6709\u7684 ipv4 udp \u62a5\u6587?"),(0,l.kt)("p",null,"\u5728\u6d4b\u8bd5\u524d\u6211\u9996\u5148\u6267\u884c ",(0,l.kt)("strong",{parentName:"p"},"ifconfig enp11s0f0 -promisc")," \u547d\u4ee4\u6253\u5f00\u6df7\u6dc6\u6a21\u5f0f\u3002"),(0,l.kt)("p",null,"\u6784\u9020 udp \u62a5\u6587\u5f00\u59cb\u6253\u6d41\uff0c\u7136\u540e\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u80fd\u591f\u4e22\u6389\u6240\u6709\u7684 ipv4 udp \u62a5\u6587\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"ethtool -U enp11s0f0  flow-type udp4  action -1\n")),(0,l.kt)("p",null,"\u8bbe\u5b9a\u5b8c\u6210\u53ef\u4ee5\u901a\u8fc7 ",(0,l.kt)("strong",{parentName:"p"},"ethtool -u enp11s0f0")," \u6765\u67e5\u770b\u914d\u7f6e\u5185\u5bb9\uff0c\u540c\u65f6\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u67e5\u770b ",(0,l.kt)("strong",{parentName:"p"},"fdir_match")," \u8ba1\u6570\u786e\u5b9a\u914d\u7f6e\u751f\u6548\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"ethtool -S enp11s0f0 | grep fdir\n")),(0,l.kt)("p",null,"\u8bbe\u5b9a\u540e\u4f1a\u5f97\u5230\u4e00\u4e2a id\uff0c\u6211\u6d4b\u8bd5\u65f6 id \u662f 7679\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,l.kt)("strong",{parentName:"p"},"ethtool -U enp11s0f0  delete 7679")," \u6765\u79fb\u9664\u8fd9\u4e00\u6761\u914d\u7f6e\u3002"),(0,l.kt)("h1",{id:"\u7b2c\u4e09\u4e2a\u95ee\u9898\u5982\u4f55\u4f7f\u7528-flex-filter-\u529f\u80fd"},"\u7b2c\u4e09\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u4f7f\u7528 flex filter \u529f\u80fd\uff1f"),(0,l.kt)("p",null,"linux \u5185\u6838\u6e90\u7801\u6811 networking/device_drivers/intel/i40e.rst \u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 user-def \u5b57\u6bb5\u6765\u5339\u914d\u534f\u8bae\u7684 payload \u4e2d\u7684\u5b57\u6bb5\u5185\u5bb9\u3002"),(0,l.kt)("p",null,"manual \u8bf4\u660e\u8d34\u5230\u4e0b\u9762\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-manual"},'The driver also supports matching user-defined data within the packet payload.\nThis flexible data is specified using the "user-def" field of the ethtool\ncommand in the following way:\n\n+----------------------------+--------------------------+\n| 31    28    24    20    16 | 15    12    8    4    0  |\n+----------------------------+--------------------------+\n| offset into packet payload | 2 bytes of flexible data |\n+----------------------------+--------------------------+\n\nFor example,\n\n::\n\n  ... user-def 0x4FFFF ...\n\ntells the filter to look 4 bytes into the payload and match that value against\n0xFFFF. The offset is based on the beginning of the payload, and not the \nbeginning of the packet. Thus\n\n::\n\n  flow-type tcp4 ... user-def 0x8BEAF ...\n\nwould match TCP/IPv4 packets which have the value 0xBEAF 8 bytes into the \nTCP/IPv4 payload.\n')),(0,l.kt)("p",null,"\u4e0a\u8ff0\u8bf4\u660e\u4fe1\u606f\u8bb2\u4e86\u4e0b\u9762\u8fd9\u51e0\u4e2a\u5185\u5bb9\uff1a"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"user-def \u53ea\u80fd\u4ece payload \u5f00\u59cb\u5339\u914d"),(0,l.kt)("li",{parentName:"ol"},"user-def \u7531 4 \u5b57\u8282\u7ec4\u6210\uff0c\u9ad8 16 \u4f4d\u7684\u4e24\u4e2a\u5b57\u8282\u4ee3\u8868\u76f8\u5bf9 payload \u7684\u504f\u79fb\u91cf\uff0c\u4f4e 16 \u4f4d\u4e3a\u5339\u914d\u7684\u5185\u5bb9")),(0,l.kt)("p",null,"\u7531\u4e8e flexible data \u7684\u5355\u4f4d\u662f\u4e24\u4e2a\u5b57\u8282\uff0coffset \u53ea\u652f\u6301\u5076\u6570\uff0c\u4e0d\u80fd\u4f7f\u7528\u5947\u6570\u3002\u5b9e\u9645\u6d4b\u8bd5\u65f6\uff0c\u6211\u53d1\u73b0\u6309\u7167\u4e0a\u9762\u7684\u63cf\u8ff0\u914d\u7f6e\u80fd\u591f\u6b63\u5e38\u914d\u7f6e\uff0c\u4f46\u662f\u8fc7\u6ee4\u529f\u80fd\u5e76\u4e0d\u751f\u6548\u3002"),(0,l.kt)("p",null,"\u552f\u4e00\u4e00\u6b21\u751f\u6548\u7684\u547d\u4ee4\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"ethtool -U enp11s0f0 flow-type udp4 user-def 0x0 action -1\nAdded rule with ID 7679\n")),(0,l.kt)("p",null,"\u6d4b\u8bd5\u4eea\u53d1\u9001\u7684 udp \u62a5\u6587\uff0c\u5176 payload \u7684\u524d\u4e24\u4e2a\u5b57\u8282\u90fd\u662f 0\uff0cdmesg \u6709\u5982\u4e0b\u4fe1\u606f\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"[165763.336866] i40e 0000:0b:00.0 enp11s0f0: Input set change requested for udp4 flows:\n[165763.336871] i40e 0000:0b:00.0 enp11s0f0:   Current input set: 2000\n[165763.336874] i40e 0000:0b:00.0 enp11s0f0: Requested input set: 2000\n[165763.336877] i40e 0000:0b:00.0 enp11s0f0: FLEX index 0: Offset -> 0\n")),(0,l.kt)("p",null,"\u6839\u636e\u4e0a\u9762\u7684\u63cf\u8ff0\uff0c\u5f53\u9488\u5bf9 UDPv4 \u8bbe\u7f6e flex \u7684\u65f6\u5019\uff0cpayload \u7684\u8d77\u59cb\u4f4d\u7f6e\u6307\u5411\u7684\u662f UDPv4 \u62a5\u6587\u7684 data \u533a\u57df\u8d77\u59cb\u4f4d\u7f6e\u3002"),(0,l.kt)("p",null,"\u6211\u6784\u9020\u5982\u4e0b udp payload \u5185\u5bb9\u8fdb\u884c\u6d4b\u8bd5\uff1a\n",(0,l.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/20201205111937571.png",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"}),"\n\u6d4b\u8bd5\u547d\u4ee4\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"ethtool -U enp11s0f0 flow-type udp4 user-def 0x9013 action -1\n")),(0,l.kt)("p",null,"dmesg \u7684\u6253\u5370\u4fe1\u606f\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dmesg"},"[163317.273795] i40e 0000:0b:00.0 enp11s0f0: Input set change requested for udp4 flows:\n[163317.273801] i40e 0000:0b:00.0 enp11s0f0:   Current input set: 2000\n[163317.273805] i40e 0000:0b:00.0 enp11s0f0: Requested input set: 2000\n[163317.273808] i40e 0000:0b:00.0 enp11s0f0: FLEX index 0: Offset -> \uff10\n")),(0,l.kt)("p",null,"\u53ef\u4ee5\u786e\u5b9a\u8bbe\u7f6e\u6210\u529f\u4e86\uff0c\u4f46\u662f\u6ca1\u6709\u751f\u6548\uff0c\u6000\u7591\u5927\u5c0f\u7aef\u3001\u504f\u79fb\u91cf\u7684\u5f71\u54cd\u5e76\u90fd\u8fdb\u884c\u4e86\u6392\u67e5\uff0c\u6ca1\u6709\u627e\u5230\u95ee\u9898\u3002"),(0,l.kt)("h2",{id:"\u5bf9-flex-filter-\u7684\u8ba4\u8bc6"},"\u5bf9 flex filter \u7684\u8ba4\u8bc6"),(0,l.kt)("p",null,"flex filter \u662f\u9488\u5bf9\u62a5\u6587\u7684 ",(0,l.kt)("strong",{parentName:"p"},"payload")," \u8fdb\u884c filter\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u65e0\u6cd5\u9488\u5bf9\u62a5\u6587\u7684 header \u8fdb\u884c\u8fc7\u6ee4\uff0c\u4f46\u662f\u5728\u7f51\u7edc\u62a5\u6587\u5c01\u88c5\u4e2d\uff0c",(0,l.kt)("strong",{parentName:"p"},"\u4e0a\u5c42\u7684\u534f\u8bae\u5e27\u53ef\u4ee5\u770b\u505a\u662f\u4e0b\u5c42\u534f\u8bae\u5e27\u7684 payload"),"\uff0e"),(0,l.kt)("p",null,"\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u8981\u8fc7\u6ee4\u4e00\u4e2a 96 \u5b57\u8282\u7684 udp \u62a5\u6587\uff0c\u90a3\u4e48\u8981\u8bbe\u5b9a\u8fc7\u6ee4\u4e00\u4e2a ip \u62a5\u6587\u7684\u547d\u4ee4\uff0c\u56e0\u4e3a\u5728\u8fc7\u6ee4 ip \u62a5\u6587\u7684\u65f6\u5019 udp \u7684\u5934\u662f\u53ef\u89c1\u7684\uff0c\u6709\u4e86\u8fd9\u4e2a\u77e5\u8bc6\uff0c\u7136\u540e\u8ba1\u7b97\u51fa 96 \u5b57\u8282\u652f\u6301\u7684 udp \u5305\u7684\u5927\u5c0f\uff0c\u7f16\u5199\u547d\u4ee4\u3002"),(0,l.kt)("p",null,"\u540c\u65f6\u9700\u8981\u4e86\u89e3\u7684\u662f",(0,l.kt)("strong",{parentName:"p"},"\u63a5\u53e3\u7684\u6df7\u6dc6\u6a21\u5f0f\u53ef\u80fd\u5bf9\u8fc7\u6ee4\u6761\u4ef6\u6709\u5f71\u54cd"),"\uff0c\u6839\u636e\u6d4b\u8bd5\u60c5\u51b5\u770b\uff0c\u5728",(0,l.kt)("strong",{parentName:"p"},"\u5f00\u6df7\u6dc6\u6a21\u5f0f\u540e\u8fc7\u6ee4\u529f\u80fd\u4ecd\u7136\u80fd\u591f\u751f\u6548"),"\u3002"),(0,l.kt)("p",null,"\u6709\u4e86\u4e0a\u9762\u7684\u7406\u89e3\uff0c\u6211\u7ee7\u7eed\u5c1d\u8bd5\u8fc7\u6ee4 udp \u62a5\u6587\u7684 payload \u5b57\u6bb5\uff0c\u7ed3\u679c\u90fd\u5931\u8d25\u4e86\uff0c\u7f51\u4e0a\u641c\u7d22\u4e86\u4e0b\u53d1\u73b0\u76f8\u5173\u7684\u5185\u5bb9\u975e\u5e38\u5c11\uff0c\u770b\u6765\u53ea\u6709\u603c\u4ee3\u7801\u4e86\uff01"),(0,l.kt)("h2",{id:"\u5c1d\u8bd5\u5206\u6790\u4ee3\u7801\u4ee5\u627e\u5230-flex-filter-\u4e0d\u80fd\u751f\u6548\u7684\u539f\u56e0"},"\u5c1d\u8bd5\u5206\u6790\u4ee3\u7801\u4ee5\u627e\u5230 flex filter \u4e0d\u80fd\u751f\u6548\u7684\u539f\u56e0"),(0,l.kt)("p",null,"\u7814\u7a76\u4ee3\u7801\uff0c\u53d1\u73b0\u8bbe\u5b9a\u4e00\u4e2a flow directory \u89c4\u5219\u7684\u6d41\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u9009\u62e9 input set "),(0,l.kt)("li",{parentName:"ol"},"\u83b7\u53d6 fdir \u5bf9\u5e94\u7684 ring"),(0,l.kt)("li",{parentName:"ol"},"\u6839\u636e flow-type \u7b49\u53c2\u6570\u8bbe\u5b9a\u4e00\u4e2a i40e_filter_program_desc \u63cf\u8ff0\u7b26\u5185\u5bb9"),(0,l.kt)("li",{parentName:"ol"},"\u6784\u9020\u4e00\u4e2a\u62a5\u6587\uff0c\u6b64\u62a5\u6587\u6839\u636e flow-type \u7b49\u53c2\u6570\u6765\u8bbe\u5b9a\uff0c\u5b83\u4e5f\u9700\u8981\u5360\u4e00\u4e2a\u63cf\u8ff0\u7b26"),(0,l.kt)("li",{parentName:"ol"},"\u5199\u5165 tail \u8ba9\u7f51\u5361\u5904\u7406\u8fd9\u4e24\u4e2a\u63cf\u8ff0\u7b26"),(0,l.kt)("li",{parentName:"ol"},"\u68c0\u67e5\u8bbe\u5b9a\u662f\u5426\u751f\u6548")),(0,l.kt)("p",null,"i40e_fdir \u51fd\u6570\u8d1f\u8d23\u586b\u5145 i40e_filter_program_desc \u63cf\u8ff0\u7b26\uff0c\u8fd9\u4e2a\u63cf\u8ff0\u7b26\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"struct i40e_filter_program_desc {\n    __le32 qindex_flex_ptype_vsi;\n    __le32 rsvd;\n    __le32 dtype_cmd_cntindex;\n    __le32 fd_id;\n};\n")),(0,l.kt)("p",null,"i40e_fdir \u4ee3\u7801\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"static void i40e_fdir(struct i40e_ring *tx_ring,\n              struct i40e_fdir_filter *fdata, bool add)\n{\n    struct i40e_filter_program_desc *fdir_desc;\n    struct i40e_pf *pf = tx_ring->vsi->back;\n    u32 flex_ptype, dtype_cmd;\n    u16 i;\n\n    /* grab the next descriptor */\n    i = tx_ring->next_to_use;\n    fdir_desc = I40E_TX_FDIRDESC(tx_ring, i);\n\n    i++;\n    tx_ring->next_to_use = (i < tx_ring->count) ? i : 0;\n\n    flex_ptype = I40E_TXD_FLTR_QW0_QINDEX_MASK &\n             (fdata->q_index << I40E_TXD_FLTR_QW0_QINDEX_SHIFT);\n\n    flex_ptype |= I40E_TXD_FLTR_QW0_PCTYPE_MASK &\n              (fdata->pctype << I40E_TXD_FLTR_QW0_PCTYPE_SHIFT);\n\n    flex_ptype |= I40E_TXD_FLTR_QW0_PCTYPE_MASK &\n              (fdata->flex_offset << I40E_TXD_FLTR_QW0_FLEXOFF_SHIFT);\n\n    /* Use LAN VSI Id if not programmed by user */\n    flex_ptype |= I40E_TXD_FLTR_QW0_DEST_VSI_MASK &\n              ((u32)(fdata->dest_vsi ? : pf->vsi[pf->lan_vsi]->id) <<\n               I40E_TXD_FLTR_QW0_DEST_VSI_SHIFT);\n\n    dtype_cmd = I40E_TX_DESC_DTYPE_FILTER_PROG;\n\n    dtype_cmd |= add ?\n             I40E_FILTER_PROGRAM_DESC_PCMD_ADD_UPDATE <<\n             I40E_TXD_FLTR_QW1_PCMD_SHIFT :\n             I40E_FILTER_PROGRAM_DESC_PCMD_REMOVE <<\n             I40E_TXD_FLTR_QW1_PCMD_SHIFT;\n\n    dtype_cmd |= I40E_TXD_FLTR_QW1_DEST_MASK &\n             (fdata->dest_ctl << I40E_TXD_FLTR_QW1_DEST_SHIFT);\n\n    dtype_cmd |= I40E_TXD_FLTR_QW1_FD_STATUS_MASK &\n             (fdata->fd_status << I40E_TXD_FLTR_QW1_FD_STATUS_SHIFT);\n\n    if (fdata->cnt_index) {\n        dtype_cmd |= I40E_TXD_FLTR_QW1_CNT_ENA_MASK;\n        dtype_cmd |= I40E_TXD_FLTR_QW1_CNTINDEX_MASK &\n                 ((u32)fdata->cnt_index <<\n                  I40E_TXD_FLTR_QW1_CNTINDEX_SHIFT);\n    }\n\n    fdir_desc->qindex_flex_ptype_vsi = cpu_to_le32(flex_ptype);\n    fdir_desc->rsvd = cpu_to_le32(0);\n    fdir_desc->dtype_cmd_cntindex = cpu_to_le32(dtype_cmd);\n    fdir_desc->fd_id = cpu_to_le32(fdata->fd_id);\n}\n")),(0,l.kt)("p",null,"\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c",(0,l.kt)("strong",{parentName:"p"},"dtype_cmd")," \u662f\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5b57\u6bb5\uff0c\u5b83\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u5224\u65ad\u8bbe\u5b9a\u5176\u503c\u3002"),(0,l.kt)("p",null,"i40e_fdir \u4e2d\u8bbe\u5b9a\u63cf\u8ff0\u7b26\u5b57\u6bb5\u5185\u5bb9\u5b8c\u6210\u540e\uff0c\u5c06 ",(0,l.kt)("strong",{parentName:"p"},"tx_ring->next_to_use")," \u5411\u540e\u62e8\u4e00\u4e2a\u5355\u4f4d\uff0c\u8868\u793a",(0,l.kt)("strong",{parentName:"p"},"\u5360\u7528\u4e86\u4e00\u4e2a\u63cf\u8ff0\u7b26"),"\u3002"),(0,l.kt)("p",null,"i40e_fdir \u586b\u5145\u5b8c\u6210\u540e\uff0c\u7ee7\u7eed",(0,l.kt)("strong",{parentName:"p"},"\u586b\u5145 raw_packet\uff0c\u5360\u636e\u4e0b\u4e00\u4e2a\u63cf\u8ff0\u7b26"),"\uff0c\u5e76\u8bbe\u5b9a\u76f8\u5173\u7684\u5b57\u6bb5\u3002"),(0,l.kt)("p",null,"\u8fc7\u6ee4 udp \u62a5\u6587\u65f6\u6784\u9020 raw_packet \u62a5\u6587\u7684\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    static char packet[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x08, 0,\n        0x45, 0, 0, 0x1c, 0, 0, 0x40, 0, 0x40, 0x11, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n\n    raw_packet = kzalloc(I40E_FDIR_MAX_RAW_PACKET_SIZE, GFP_KERNEL);\n    if (!raw_packet)\n        return -ENOMEM;\n    memcpy(raw_packet, packet, I40E_UDPIP_DUMMY_PACKET_LEN);\n\n    ip = (struct iphdr *)(raw_packet + IP_HEADER_OFFSET);\n    udp = (struct udphdr *)(raw_packet + IP_HEADER_OFFSET\n          + sizeof(struct iphdr));\n\n    ip->daddr = fd_data->dst_ip;\n    udp->dest = fd_data->dst_port;\n    ip->saddr = fd_data->src_ip;\n    udp->source = fd_data->src_port;\n\n    if (fd_data->flex_filter) {\n        u8 *payload = raw_packet + I40E_UDPIP_DUMMY_PACKET_LEN;\n        __be16 pattern = fd_data->flex_word;\n        u16 off = fd_data->flex_offset;\n\n        *((__force __be16 *)(payload + off)) = pattern;\n    }\n\n    fd_data->pctype = I40E_FILTER_PCTYPE_NONF_IPV4_UDP;\n")),(0,l.kt)("p",null,"\u4f7f\u7528\u4e86 ethtool \u8bbe\u5b9a user-def \u7684\u65f6\u5019 fd_data->flex_filter \u4e3a true\uff0c\u8fd9\u65f6\u53ef\u4ee5\u770b\u5230\u5bf9 udp \u62a5\u6587\u7684 payload + off \u5b57\u6bb5\u7684\u586b\u5145\u903b\u8f91\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"I40E_UDPIP_DUMMY_PACKET_LEN")," \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"#define I40E_UDPIP_DUMMY_PACKET_LEN 42\n")),(0,l.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u8ba1\u7b97\u7684 payload \u7684\u8d77\u59cb\u4f4d\u7f6e\u6b63\u662f udp \u62a5\u6587\u7684 data \u5b57\u6bb5\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002"),(0,l.kt)("p",null,"\u4e0e\u6b64\u7c7b\u4f3c\uff0c\u8fc7\u6ee4 tcpv4 \u62a5\u6587\u65f6\u586b\u5145 payload \u5b57\u6bb5\u7684\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"    if (fd_data->flex_filter) {\n        u8 *payload = raw_packet + I40E_TCPIP_DUMMY_PACKET_LEN;\n        __be16 pattern = fd_data->flex_word;\n        u16 off = fd_data->flex_offset;\n\n        *((__force __be16 *)(payload + off)) = pattern;\n    }\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"I40E_TCPIP_DUMMY_PACKET_LEN")," \u5b8f\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"#define I40E_TCPIP_DUMMY_PACKET_LEN 54\n")),(0,l.kt)("p",null,"\u53ef\u4ee5\u786e\u5b9a ",(0,l.kt)("strong",{parentName:"p"},"tcpv4 flex payload")," \u4ece\u62a5\u6587\u7684\u7b2c 54 \u5b57\u8282\u5f00\u59cb\uff0c\u540c\u7406 ",(0,l.kt)("strong",{parentName:"p"},"ipv4 flex payload")," \u4ece\u62a5\u6587\u7684\u7b2c ",(0,l.kt)("strong",{parentName:"p"},"34")," \u5b57\u8282\u5f00\u59cb\uff0c",(0,l.kt)("strong",{parentName:"p"},"sctp flex payload")," \u4ece\u62a5\u6587\u7684\u7b2c ",(0,l.kt)("strong",{parentName:"p"},"46")," \u5b57\u8282\u5f00\u59cb\u3002"),(0,l.kt)("p",null,"\u6784\u9020\u5b8c\u6210\u4e00\u4e2a raw_packet \u540e\u540c\u6837\u9700\u8981\u586b\u5145\u63cf\u8ff0\u7b26\uff0ctx_ring->next_to_use \u518d\u6b21\u5411\u540e\u62e8\u52a8\u4e00\u4e2a\u5355\u4f4d\u3002\u5b8c\u6210\u4e0a\u8ff0\u8fc7\u7a0b\u540e\uff0c\u6700\u7ec8\u5c06 ",(0,l.kt)("strong",{parentName:"p"},"tx_ring->next_to_use")," \u5199\u5165\u5230 ",(0,l.kt)("strong",{parentName:"p"},"tx_ring->tail")," \u4ee5\u901a\u77e5\u7f51\u5361\u5904\u7406\uff0c t",(0,l.kt)("strong",{parentName:"p"},"x_ring->tail")," \u662f\u7f51\u5361\u4e2d\u6620\u5c04\u7684\u4e00\u4e2a",(0,l.kt)("strong",{parentName:"p"},"\u7269\u7406\u5730\u5740"),"\u3002"),(0,l.kt)("h2",{id:"\u4fee\u6539\u4ee3\u7801\u6253\u5370\u586b\u5145\u7684-raw_packet-\u62a5\u6587\u5185\u5bb9"},"\u4fee\u6539\u4ee3\u7801\uff0c\u6253\u5370\u586b\u5145\u7684 raw_packet \u62a5\u6587\u5185\u5bb9"),(0,l.kt)("p",null,"\u7ecf\u8fc7\u4e0a\u9762\u5bf9 flex filter \u8bbe\u5b9a\u8fc7\u7a0b\u7684\u7814\u7a76\uff0c\u6211\u89c9\u5f97\u53ef\u80fd\u662f\u586b\u5145\u7684 raw_packet \u62a5\u6587\u7684\u5185\u5bb9\u5b58\u5728\u95ee\u9898\uff0c\u6545\u800c\u5728\u9a71\u52a8\u4e2d\u6dfb\u52a0\u4e86\u6253\u5370\u62a5\u6587\u5185\u5bb9\u7684\u64cd\u4f5c\u91cd\u8bd5\u3002"),(0,l.kt)("p",null,"\u6d4b\u8bd5\u8fc7\u7a0b\u8bb0\u5f55\u5982\u4e0b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"[root] # dmesg -c >/dev/null ; ethtool -U enp11s0f0 flow-type udp4 user-def 0x212da action -1; dmesg | grep -A 10 'packet\\[42\\]'\nAdded rule with ID 7679\n[165607.394687] packet[42] is 0\n[165607.394688] packet[43] is 0\n[165607.394689] packet[44] is 12\n[165607.394691] packet[45] is da\n[165607.394692] packet[46] is 0\n[165607.394693] packet[47] is 0\n[165607.394694] packet[48] is 0\n[165607.394696] packet[49] is 0\n[165607.394697] packet[50] is 0\n[165607.394698] packet[51] is 0\n[165607.394700] packet[52] is 0\n")),(0,l.kt)("p",null,"\u6839\u636e\u6253\u51fa\u7684\u62a5\u6587\u5185\u5bb9\u770b\uff0c\u8bbe\u5b9a\u662f\u6b63\u786e\u7684\uff01\u4f46\u662f\u4ecd\u65e7\u6ca1\u6709\u771f\u6b63\u751f\u6548\uff0c\u770b\u6765\u8fd8\u662f\u54ea\u91cc\u6ca1\u6709\u6574\u5bf9\u3002"),(0,l.kt)("h2",{id:"\u552f\u4e00\u4e00\u6b21\u6210\u529f\u7684-use-def-\u914d\u7f6e\u65f6\u7684-raw_packet-\u5185\u5bb9"},"\u552f\u4e00\u4e00\u6b21\u6210\u529f\u7684 use-def \u914d\u7f6e\u65f6\u7684 raw_packet \u5185\u5bb9"),(0,l.kt)("p",null,"\u4e00\u756a\u6298\u817e\u540e\uff0c\u6211\u60f3\u5230\u4e5f\u8bb8\u53ef\u4ee5\u628a\u90a3\u552f\u4e00\u4e00\u6b21\u751f\u6548\u7684 raw_packet \u5185\u5bb9\u6253\u51fa\u6765\uff0c\u770b\u770b\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u7ed3\u679c\u4e5f\u6ca1\u6709\u627e\u5230\u6000\u7591\u70b9\uff0c\u6d4b\u8bd5\u8fc7\u7a0b\u8fd8\u662f\u8bb0\u5f55\u5230\u4e0b\u9762\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"[root] # dmesg -c >/dev/null ; ethtool -U enp11s0f0 flow-type udp4 user-def 0x0 action -1; dmesg | grep -A 10 'packet\\[42\\]'\nAdded rule with ID 7679\n\n[165763.336866] i40e 0000:0b:00.0 enp11s0f0: Input set change requested for udp4 flows:\n[165763.336871] i40e 0000:0b:00.0 enp11s0f0:   Current input set: 2000\n[165763.336874] i40e 0000:0b:00.0 enp11s0f0: Requested input set: 2000\n[165763.336877] i40e 0000:0b:00.0 enp11s0f0: FLEX index 0: Offset -> 0\n[165763.337433] packet[0] is 0\n[165763.337435] packet[1] is 0\n[165763.337436] packet[2] is 0\n[165763.337437] packet[3] is 0\n[165763.337439] packet[4] is e6\n[165763.337440] packet[5] is ff\n[165763.337442] packet[6] is ff\n[165763.337443] packet[7] is ff\n[165763.337444] packet[8] is 0\n[165763.337446] packet[9] is 0\n[165763.337447] packet[10] is 0\n[165763.337448] packet[11] is 0\n[165763.337450] packet[12] is 8\n[165763.337451] packet[13] is 0\n[165763.337452] packet[14] is 45\n[165763.337454] packet[15] is 0\n[165763.337455] packet[16] is 0\n[165763.337456] packet[17] is 1c\n[165763.337458] packet[18] is 0\n[165763.337459] packet[19] is 0\n[165763.337460] packet[20] is 40\n[165763.337462] packet[21] is 0\n[165763.337463] packet[22] is 40\n[165763.337464] packet[23] is 11\n")),(0,l.kt)("h2",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,l.kt)("p",null,"x710 flow directory \u662f\u4e2a\u633a\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u4f46\u662f\u6211\u4eec\u7684\u4e1a\u52a1\u573a\u666f\u4e2d\u4ece\u6765\u6ca1\u6709\u4f7f\u7528\u8fc7\uff0c\u6ca1\u6709\u76f8\u5e94\u7684\u6280\u672f\u79ef\u7d2f\uff0c\u8fd9\u6b21\u641e\u8d77\u6765\u5c31\u663e\u5f97\u56f0\u96be\u91cd\u91cd\u3002"),(0,l.kt)("p",null,"flex filter \u529f\u80fd\u6ca1\u6709\u7528\u8d77\u6765\uff0c\u4f46\u662f\u4e94\u5143\u7ec4\u8fc7\u6ee4\u7b97\u662f\u4e0a\u624b\u4e86\uff0c\u8fd9\u4e2a\u529f\u80fd\u521a\u597d\u80fd\u591f\u89e3\u51b3\u6211\u4eec\u9047\u5230\u7684\u95ee\u9898\uff0c\u4e0d\u8fc7\u5f53\u573a\u666f\u5207\u6362\u5230 dpdk \u4e2d\u65f6\uff0c\u5373\u4fbf\u4e00\u4e2a\u7b80\u5355\u7684\u8fc7\u6ee4 udp \u62a5\u6587\u7684\u529f\u80fd\u4e5f\u7814\u7a76\u4e86\u597d\u51e0\u5929\uff0c\u671f\u95f4\u4e00\u5ea6\u60f3\u653e\u5f03\uff0c\u88ab\u641e\u5230\u60f3\u54ed\uff0c\u6700\u7ec8\u641e\u5b9a\u4e86\u540e\u53c8\u6fc0\u52a8\u5230\u60f3\u54ed\u3002"),(0,l.kt)("p",null,"\u73b0\u5728\u60f3\u60f3\u5728\u67d0\u5929 21:00 \u7684\u65f6\u5019\uff0c\u6211\u5fc3\u6000\u5fd0\u5fd1\u7684\u51c6\u5907\u6d4b\u8bd5\u770b dpdk \u4e2d\u7684 flow directory \u529f\u80fd\u662f\u5426\u751f\u6548\uff0c\u4e4b\u524d\u5df2\u7ecf\u5931\u8d25\u4e86\u597d\u591a\u6b21\u4e86\uff0c\u4ed4\u7ec6 check\uff0c\u6700\u7ec8\u786e\u5b9a\u6210\u529f\u4e86\u540e\uff0c\u6211\u771f\u7684\u6fc0\u52a8\u5230\u773c\u6cea\u5feb\u6389\u4e0b\u6765\uff01"),(0,l.kt)("p",null,"\u8fd9\u5e76\u4e0d\u53ea\u662f\u6280\u672f\u4e0a\u7684\u7a81\u7834\uff0c\u8fd9\u66f4\u662f\u7a81\u7834\u81ea\u6211\u5c40\u9650\u7684\u4e00\u6b21\u6210\u529f\u6848\u4f8b\uff0c\u6211\u7684\u6210\u5c31\u611f\u53c8\u56de\u6765\u4e86\uff01"))}d.isMDXComponent=!0}}]);