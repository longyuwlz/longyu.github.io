"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[8294],{3905:function(t,e,r){r.d(e,{Zo:function(){return o},kt:function(){return _}});var n=r(7294);function s(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function c(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?c(Object(r),!0).forEach((function(e){s(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,n,s=function(t,e){if(null==t)return{};var r,n,s={},c=Object.keys(t);for(n=0;n<c.length;n++)r=c[n],e.indexOf(r)>=0||(s[r]=t[r]);return s}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(n=0;n<c.length;n++)r=c[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(s[r]=t[r])}return s}var p=n.createContext({}),l=function(t){var e=n.useContext(p),r=e;return t&&(r="function"==typeof t?t(e):a(a({},e),t)),r},o=function(t){var e=l(t.components);return n.createElement(p.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var r=t.components,s=t.mdxType,c=t.originalType,p=t.parentName,o=i(t,["components","mdxType","originalType","parentName"]),u=l(r),_=s,g=u["".concat(p,".").concat(_)]||u[_]||d[_]||c;return r?n.createElement(g,a(a({ref:e},o),{},{components:r})):n.createElement(g,a({ref:e},o))}));function _(t,e){var r=arguments,s=e&&e.mdxType;if("string"==typeof t||s){var c=r.length,a=new Array(c);a[0]=u;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:s,a[1]=i;for(var l=2;l<c;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7130:function(t,e,r){r.r(e),r.d(e,{assets:function(){return o},contentTitle:function(){return p},default:function(){return _},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var n=r(7462),s=r(3366),c=(r(7294),r(3905)),a=["components"],i={},p=void 0,l={permalink:"/longyu.github.io/blog/dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898",editUrl:"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898.md",source:"@site/blog/dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898.md",title:"dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898",description:"\u95ee\u9898\u63cf\u8ff0",date:"2022-06-21T00:32:49.000Z",formattedDate:"2022\u5e746\u670821\u65e5",tags:[],readingTime:6.695,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"dpdk/dpdk-16.04 eal \u521d\u59cb\u5316 log \u4fe1\u606f\u89e3\u6790",permalink:"/longyu.github.io/blog/dpdk/dpdk-16.04 eal \u521d\u59cb\u5316 log \u4fe1\u606f\u89e3\u6790"},nextItem:{title:"dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790",permalink:"/longyu.github.io/blog/dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790"}},o={authorsImageUrls:[]},d=[{value:"\u95ee\u9898\u63cf\u8ff0",id:"\u95ee\u9898\u63cf\u8ff0",level:2},{value:"\u95ee\u9898\u5206\u6790",id:"\u95ee\u9898\u5206\u6790",level:2},{value:"\u5e95\u5c42\u9a71\u52a8\u83b7\u53d6\u7f51\u5361\u6536\u53d1\u5305\u5b57\u8282\u7edf\u8ba1\u6570\u636e",id:"\u5e95\u5c42\u9a71\u52a8\u83b7\u53d6\u7f51\u5361\u6536\u53d1\u5305\u5b57\u8282\u7edf\u8ba1\u6570\u636e",level:3},{value:"hw_strip_crc \u5728 igb \u9a71\u52a8\u4e2d\u7684\u5f71\u54cd",id:"hw_strip_crc-\u5728-igb-\u9a71\u52a8\u4e2d\u7684\u5f71\u54cd",level:3},{value:"\u53d1\u5305\u65f6 crc len \u7684\u5904\u7406",id:"\u53d1\u5305\u65f6-crc-len-\u7684\u5904\u7406",level:3},{value:"\u89e3\u51b3\u65b9\u6848",id:"\u89e3\u51b3\u65b9\u6848",level:2},{value:"\u5176\u5b83\u7f51\u5361\u5982\u4f55\u5904\u7406 hw_strip_crc \u914d\u7f6e\u7684\uff1f",id:"\u5176\u5b83\u7f51\u5361\u5982\u4f55\u5904\u7406-hw_strip_crc-\u914d\u7f6e\u7684",level:2}],u={toc:d};function _(t){var e=t.components,r=(0,s.Z)(t,a);return(0,c.kt)("wrapper",(0,n.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"\u95ee\u9898\u63cf\u8ff0"},"\u95ee\u9898\u63cf\u8ff0"),(0,c.kt)("p",null,"i350 igb \u7535\u53e3\uff0c\u8c03\u7528 dpdk rte_eth_stats_get \u83b7\u53d6\u5230\u7684\u63a5\u53e3\u53d1\u5305\u5b57\u8282\u7edf\u8ba1\uff0c\u6bcf\u4e2a\u5305\u5c11\u4e86 crc len \u957f\u5ea6\uff0c\u5bfc\u81f4\u6839\u636e\u6b64\u7edf\u8ba1\u8ba1\u7b97\u7684 bps \u4e0d\u51c6\u786e\u3002"),(0,c.kt)("h2",{id:"\u95ee\u9898\u5206\u6790"},"\u95ee\u9898\u5206\u6790"),(0,c.kt)("h3",{id:"\u5e95\u5c42\u9a71\u52a8\u83b7\u53d6\u7f51\u5361\u6536\u53d1\u5305\u5b57\u8282\u7edf\u8ba1\u6570\u636e"},"\u5e95\u5c42\u9a71\u52a8\u83b7\u53d6\u7f51\u5361\u6536\u53d1\u5305\u5b57\u8282\u7edf\u8ba1\u6570\u636e"),(0,c.kt)("p",null,"igb \u9a71\u52a8\u5e95\u5c42\u7edf\u8ba1\u51fd\u6570\u4e3a eth_igb_stats_get \u51fd\u6570\uff0c\u6b64\u51fd\u6570\u901a\u8fc7\u8bfb\u53d6\u7f51\u5361\u7edf\u8ba1\u76f8\u5173\u5bc4\u5b58\u5668\u5b9e\u73b0\u529f\u80fd\u3002\u5411\u4e0a\u5c42\u8fd4\u56de\u7684\u6536\u53d1\u5305\u5b57\u8282\u7edf\u8ba1\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-c"},"    rte_stats->ibytes   = stats->gorc;\n    rte_stats->obytes   = stats->gotc;\n")),(0,c.kt)("p",null,"\u5e95\u5c42\u8bfb\u5bc4\u5b58\u5668\u5904\u7684\u4ee3\u7801\u903b\u8f91\u5982\u4e0b\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-c"},"/* Workaround CRC bytes included in size, take away 4 bytes/packet */\n    stats->gorc += E1000_READ_REG(hw, E1000_GORCL);\n    stats->gorc += ((uint64_t)E1000_READ_REG(hw, E1000_GORCH) << 32);\n    stats->gorc -= (stats->gprc - old_gprc) * ETHER_CRC_LEN;\n    stats->gotc += E1000_READ_REG(hw, E1000_GOTCL);\n    stats->gotc += ((uint64_t)E1000_READ_REG(hw, E1000_GOTCH) << 32);\n    stats->gotc -= (stats->gptc - old_gptc) * ETHER_CRC_LEN;\n")),(0,c.kt)("p",null,"\u5728\u4e0a\u8ff0\u903b\u8f91\u4e2d\uff0c\u6bcf\u4e2a\u6536\u53d1\u7684\u62a5\u6587\u90fd\u3010\u51cf\u6389 crc len \u957f\u5ea6\u3011\u5b57\u8282\uff0c\u4ee3\u7801\u7684\u6ce8\u91ca\u8868\u660e\u8fd9\u90e8\u5206\u903b\u8f91\u6b63\u662f\u4e3a\u4e86\u89c4\u907f CRC \u5b57\u8282\u88ab\u8ba1\u7b97\u5230\u6bcf\u4e2a\u62a5\u6587\u957f\u5ea6\u4e2d\u7684\u95ee\u9898\u3002"),(0,c.kt)("p",null,"dpdk \u5185\u90e8\u6709\u4e00\u4e2a\u9488\u5bf9\u7f51\u5361\u662f\u5426 strip crc \u7684\u914d\u7f6e\u529f\u80fd\u2014\u2014",(0,c.kt)("strong",{parentName:"p"},"hw_strip_crc"),"\uff0c\u9ed8\u8ba4\u4e3a 0\uff0c\u8868\u660e\u7f51\u5361\u4e0d strip crc\uff0c\u8bbe\u7f6e\u4e3a 1 \u8868\u660e\u7f51\u5361\u4f7f\u80fd strip crc \u529f\u80fd\u3002"),(0,c.kt)("h3",{id:"hw_strip_crc-\u5728-igb-\u9a71\u52a8\u4e2d\u7684\u5f71\u54cd"},"hw_strip_crc \u5728 igb \u9a71\u52a8\u4e2d\u7684\u5f71\u54cd"),(0,c.kt)("p",null,(0,c.kt)("strong",{parentName:"p"},"1. \u5bf9\u786c\u4ef6\u7684\u5f71\u54cd")),(0,c.kt)("p",null,"   \u5728 up \u63a5\u53e3\u7684\u65f6\u5019\uff0c\u4f7f\u7528 igb \u7f51\u5361\u65f6\uff0cdpdk \u4f1a\u8c03\u7528 ",(0,c.kt)("strong",{parentName:"p"},"eth_igb_rx_init")," \u51fd\u6570\uff0c\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u6709\u5bf9 ",(0,c.kt)("strong",{parentName:"p"},"hw_strip_crc")," \u8fdb\u884c\u5224\u65ad\uff0c\u6839\u636e\u5224\u65ad\u7684\u7ed3\u679c\u8bbe\u5b9a\u786c\u4ef6\u72b6\u6001\u3002"),(0,c.kt)("p",null,"   \u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-c"},"    /* Setup the Receive Control Register. */\n            if (dev->data->dev_conf.rxmode.hw_strip_crc) {\n                    rctl |= E1000_RCTL_SECRC; /* Strip Ethernet CRC. */\n    \n                    /* set STRCRC bit in all queues */\n                    if (hw->mac.type == e1000_i350 ||\n                        hw->mac.type == e1000_i210 ||\n                        hw->mac.type == e1000_i211 ||\n                        hw->mac.type == e1000_i354) {\n                            for (i = 0; i < dev->data->nb_rx_queues; i++) {\n                                    rxq = dev->data->rx_queues[i];\n                                    uint32_t dvmolr = E1000_READ_REG(hw,\n                                            E1000_DVMOLR(rxq->reg_idx));\n                                    dvmolr |= E1000_DVMOLR_STRCRC;\n                                    E1000_WRITE_REG(hw, E1000_DVMOLR(rxq->reg_idx), dvmolr);\n                            }\n                    }\n            } else {\n                    rctl &= ~E1000_RCTL_SECRC; /* Do not Strip Ethernet CRC. */\n    \n                    /* clear STRCRC bit in all queues */\n                    if (hw->mac.type == e1000_i350 ||\n                        hw->mac.type == e1000_i210 ||\n                        hw->mac.type == e1000_i211 ||\n                        hw->mac.type == e1000_i354) {\n                            for (i = 0; i < dev->data->nb_rx_queues; i++) {\n                                    rxq = dev->data->rx_queues[i];\n                                    uint32_t dvmolr = E1000_READ_REG(hw,\n                                            E1000_DVMOLR(rxq->reg_idx));\n                                    dvmolr &= ~E1000_DVMOLR_STRCRC;\n                                    E1000_WRITE_REG(hw, E1000_DVMOLR(rxq->reg_idx), dvmolr);\n                            }\n                    }\n            }\n")),(0,c.kt)("p",null,"\u4e0a\u8ff0\u903b\u8f91\u8868\u660e\uff0cigb \u7f51\u5361 dpdk pmd \u9a71\u52a8\u4e2d\uff0chw_strip_crc \u7684\u914d\u7f6e\u5c06\u4f1a\u88ab\u7528\u4e8e\u8bbe\u5b9a\u7f51\u5361\u3010\u63a5\u6536\u63a7\u5236\u5bc4\u5b58\u5668\u3011\u4e0e\u6bcf\u4e2a\u3010\u6536\u5305\u961f\u5217\u7684\u914d\u7f6e\u5bc4\u5b58\u5668\u3011\u3002"),(0,c.kt)("p",null,"\u6211\u4eec\u7684\u7a0b\u5e8f\u9ed8\u8ba4\u662f\u5173\u95ed ",(0,c.kt)("strong",{parentName:"p"},"hw_strip_crc")," \u7684\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7f51\u5361\u4e0d strip crc\uff0c\u540c\u65f6\u83b7\u53d6\u6536\u5305\u5b57\u8282\u7edf\u8ba1\u7684\u65f6\u5019\u4e3a\u6bcf\u4e2a\u6536\u5230\u7684\u5305\u51cf\u6389 crc \u957f\u5ea6\uff0c\u8fd9\u4e2a\u884c\u4e3a\u4e0e\u6ce8\u91ca\u5185\u5bb9\u4e00\u81f4\u3002\u4f46\u662f\u5f53 hw_strip_crc \u4f7f\u80fd\u540e\uff0c\u6536\u5305\u5b57\u8282\u7edf\u8ba1\u4e2d\u4ecd\u65e7\u4e3a\u6bcf\u4e2a\u5305\u51cf\u6389 crc \u957f\u5ea6\uff0c\u8fd9\u91cc\u5b58\u5728\u95ee\u9898\u3002"),(0,c.kt)("p",null,"   ",(0,c.kt)("strong",{parentName:"p"},"\u521d\u6b65\u7684\u89e3\u91ca\u662f\u7f51\u5361 strip crc \u5e76\u4e0d\u4f1a\u5728\u786c\u4ef6\u4fa7\u51cf\u6389\u6bcf\u4e2a\u5305\u7684 crc \u957f\u5ea6\uff0c\u5305\u7684\u5b57\u8282\u7edf\u8ba1\u4e0e hw_strip_crc \u529f\u80fd\u662f\u5426\u4f7f\u80fd\u5e76\u65e0\u5173\u7cfb\u3002")),(0,c.kt)("p",null,"   \u4f7f\u7528 testpmd \u6d4b\u8bd5\uff1a"),(0,c.kt)("ol",null,(0,c.kt)("li",{parentName:"ol"},(0,c.kt)("p",{parentName:"li"},"\u5173\u95ed crc strip"),(0,c.kt)("pre",{parentName:"li"},(0,c.kt)("code",{parentName:"pre",className:"language-c"},"   testpmd> start\n     io packet forwarding - CRC stripping disabled - packets/burst=32\n     nb forwarding cores=1 - nb forwarding ports=1\n     RX queues=1 - RX desc=128 - RX free threshold=32\n     RX threshold registers: pthresh=8 hthresh=8 wthresh=4\n     TX queues=1 - TX desc=512 - TX free threshold=0\n     TX threshold registers: pthresh=8 hthresh=1 wthresh=16\n     TX RS bit threshold=0 - TXQ flags=0x0\n   testpmd> show port stats all\n   \n     ######################## NIC statistics for port 0  ########################\n     RX-packets: 0          RX-missed: 0          RX-bytes:  0\n     RX-errors: 0\n     RX-nombuf:  0\n     TX-packets: 0          TX-errors: 0          TX-bytes:  0\n     ############################################################################\n   testpmd> show port stats all\n   \n     ######################## NIC statistics for port 0  ########################\n     RX-packets: 3          RX-missed: 0          RX-bytes:  180\n     RX-errors: 0\n     RX-nombuf:  0\n     TX-packets: 3          TX-errors: 0          TX-bytes:  180\n     ############################################################################\n")),(0,c.kt)("p",{parentName:"li"},"  \u5bf9\u7aef\u53d1\u51fa 3 \u4e2a 64-byte \u7684\u5305\uff0ccrc_len \u957f\u5ea6\u88ab\u51cf\u6389\u3002\n")),(0,c.kt)("li",{parentName:"ol"},(0,c.kt)("p",{parentName:"li"},"\u5f00\u542f crc strip"),(0,c.kt)("pre",{parentName:"li"},(0,c.kt)("code",{parentName:"pre",className:"language-c"}," testpmd> start\n   io packet forwarding - CRC stripping enabled - packets/burst=32\n   nb forwarding cores=1 - nb forwarding ports=1\n   RX queues=1 - RX desc=128 - RX free threshold=32\n   RX threshold registers: pthresh=8 hthresh=8 wthresh=4\n   TX queues=1 - TX desc=512 - TX free threshold=0\n   TX threshold registers: pthresh=8 hthresh=1 wthresh=16\n   TX RS bit threshold=0 - TXQ flags=0x0\n \n testpmd> show port stats 0\n \n   ######################## NIC statistics for port 0  ########################\n   RX-packets: 6          RX-missed: 0          RX-bytes:  360\n   RX-errors: 0\n   RX-nombuf:  0\n   TX-packets: 6          TX-errors: 0          TX-bytes:  360\n   ############################################################################\n testpmd> show port stats 0\n \n   ######################## NIC statistics for port 0  ########################\n   RX-packets: 9          RX-missed: 0          RX-bytes:  540\n   RX-errors: 0\n   RX-nombuf:  0\n   TX-packets: 9          TX-errors: 0          TX-bytes:  540\n   ############################################################################\n")),(0,c.kt)("p",{parentName:"li"},"\u5bf9\u7aef\u53d1\u51fa 3 \u4e2a 64-byte \u7684\u5305\uff0ccrc_len \u957f\u5ea6\u88ab\u51cf\u6389\uff0c\u4e0e\u5173\u95ed crc strip \u7684\u6548\u679c\u4e00\u81f4\u8868\u660e\u731c\u6d4b\u5408\u7406\u3002\n"))),(0,c.kt)("p",null,(0,c.kt)("strong",{parentName:"p"},"2. \u5bf9\u8f6f\u4ef6\u7684\u5f71\u54cd")),(0,c.kt)("p",null,"   \u5728 eth_igb_rx_init  \u51fd\u6570\u4e2d\u6709\u5982\u4e0b\u4ee3\u7801\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-c"}," rxq->crc_len = (uint8_t)(dev->data->dev_conf.rxmode.hw_strip_crc ?\n                                                         0 : ETHER_CRC_LEN);\n")),(0,c.kt)("p",null,"   \u6b64\u4ee3\u7801\u4f7f\u7528 hw_strip_crc \u914d\u7f6e\u5224\u65ad\uff0c\u6536\u5305\u961f\u5217\u4e2d\u662f\u5426\u51cf\u6389 crc_len\u3002\nhw_strip_crc \u5f00\u542f\u65f6\uff0crxq->crc_len \u957f\u5ea6\u8d4b\u503c\u4e3a 0 \u8868\u660e\u4e0d\u9700\u8981\u51cf\u6389\u6b64\u90e8\u5206\u957f\u5ea6\uff0c\u6b64\u90e8\u5206\u5de5\u4f5c\u7531\u7f51\u5361\u5b8c\u6210\u3002\nhw_strip_crc \u5173\u95ed\u65f6\uff0crxq->crc_len \u8d4b\u503c\u4e3a ETHER_CRC_LEN \u6765\u5728\u6536\u5305\u903b\u8f91\u4e2d\u51cf\u6389 crc_len \u957f\u5ea6\uff0c\u8fd9\u91cc\u6700\u7ec8\u8ba1\u7b97\u5f97\u51fa\u7684\u62a5\u6587\u957f\u5ea6\u4f1a\u586b\u5145\u5230\u62a5\u6587\u6240\u5728 mbuf \u7684 pkt_len \u5b57\u6bb5\u4e2d\u3002"),(0,c.kt)("h3",{id:"\u53d1\u5305\u65f6-crc-len-\u7684\u5904\u7406"},"\u53d1\u5305\u65f6 crc len \u7684\u5904\u7406"),(0,c.kt)("p",null,"\u53d1\u5305\u7684\u65f6\u5019\u9700\u8981\u586b\u5145\u62a5\u6587\u7684 CRC\uff0c\u6ca1\u6709\u7279\u522b\u7684\u5904\u7406\u3002igb dpdk pmd \u9a71\u52a8\u4e2d\u5728\u53d1\u5305\u5b57\u8282\u7edf\u8ba1\u4e2d\u51cf\u6389\u6bcf\u4e2a\u53d1\u51fa\u5305\u7684 CRC \u957f\u5ea6\u3002"),(0,c.kt)("h2",{id:"\u89e3\u51b3\u65b9\u6848"},"\u89e3\u51b3\u65b9\u6848"),(0,c.kt)("p",null,"\u4fee\u6539 igb \u7f51\u5361\u83b7\u53d6\u7f51\u5361\u7edf\u8ba1\u4ee3\u7801\uff0c\u53d6\u6d88\u51cf\u6389\u6bcf\u4e2a\u53d1\u51fa\u5305\u7684 crc len \u7684\u903b\u8f91\u3002\u4fee\u6539 patch \u5982\u4e0b\uff1a"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-c"},"ndex: drivers/net/e1000/igb_ethdev.c\n===================================================================\n--- drivers/net/e1000/igb_ethdev.c     \n+++ drivers/net/e1000/igb_ethdev.c\n@@ -1729,12 +1729,13 @@\n        /* Both registers clear on the read of the high dword */\n\n        /* Workaround CRC bytes included in size, take away 4 bytes/packet */\n+       /* included CRC length to fix igb netcard bps leak */\n        stats->gorc += E1000_READ_REG(hw, E1000_GORCL);\n        stats->gorc += ((uint64_t)E1000_READ_REG(hw, E1000_GORCH) << 32);\n-        stats->gorc -= (stats->gprc - old_gprc) * ETHER_CRC_LEN;\n+       /* stats->gorc -= (stats->gprc - old_gprc) * ETHER_CRC_LEN; */\n        stats->gotc += E1000_READ_REG(hw, E1000_GOTCL);\n        stats->gotc += ((uint64_t)E1000_READ_REG(hw, E1000_GOTCH) << 32);\n-       stats->gotc -= (stats->gptc - old_gptc) * ETHER_CRC_LEN;\n+       /* stats->gotc -= (stats->gptc - old_gptc) * ETHER_CRC_LEN; */\n\n        stats->rnbc += E1000_READ_REG(hw, E1000_RNBC);\n        stats->ruc += E1000_READ_REG(hw, E1000_RUC);\n")),(0,c.kt)("h2",{id:"\u5176\u5b83\u7f51\u5361\u5982\u4f55\u5904\u7406-hw_strip_crc-\u914d\u7f6e\u7684"},"\u5176\u5b83\u7f51\u5361\u5982\u4f55\u5904\u7406 hw_strip_crc \u914d\u7f6e\u7684\uff1f"),(0,c.kt)("p",null,"ixgbe: \u4e0e Igb \u5904\u7406\u8fc7\u7a0b\u4e00\u81f4\uff0c\u786c\u4ef6 + \u8f6f\u4ef6"),(0,c.kt)("p",null,"i40e: \u53ea\u7528\u6765\u8bbe\u7f6e rxq->crc_len\uff0c\u6ca1\u6709\u786c\u4ef6\u76f8\u5173\u914d\u7f6e"),(0,c.kt)("p",null,"ice: \u540c i40e"))}_.isMDXComponent=!0}}]);