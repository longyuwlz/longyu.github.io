"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[9045],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return p}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},d=Object.keys(e);for(r=0;r<d.length;r++)t=d[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(r=0;r<d.length;r++)t=d[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a=r.createContext({}),u=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(a.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,d=e.originalType,a=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=u(t),p=o,f=c["".concat(a,".").concat(p)]||c[p]||m[p]||d;return t?r.createElement(f,l(l({ref:n},s),{},{components:t})):r.createElement(f,l({ref:n},s))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var d=t.length,l=new Array(d);l[0]=c;var i={};for(var a in n)hasOwnProperty.call(n,a)&&(i[a]=n[a]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<d;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5468:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return m}});var r=t(7462),o=t(3366),d=(t(7294),t(3905)),l=["components"],i={},a="udevd \u68c0\u7d22\u5185\u6838\u6a21\u5757\u5e76\u52a0\u8f7d\u7684 demo",u={unversionedId:"\u6280\u672f\u535a\u5ba2/linux-system/systemd/udevd \u68c0\u7d22\u5185\u6838\u6a21\u5757\u5e76\u52a0\u8f7d\u7684 demo",id:"\u6280\u672f\u535a\u5ba2/linux-system/systemd/udevd \u68c0\u7d22\u5185\u6838\u6a21\u5757\u5e76\u52a0\u8f7d\u7684 demo",title:"udevd \u68c0\u7d22\u5185\u6838\u6a21\u5757\u5e76\u52a0\u8f7d\u7684 demo",description:"udevd \u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757",source:"@site/docs/\u6280\u672f\u535a\u5ba2/linux-system/systemd/udevd \u68c0\u7d22\u5185\u6838\u6a21\u5757\u5e76\u52a0\u8f7d\u7684 demo.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/linux-system/systemd",slug:"/\u6280\u672f\u535a\u5ba2/linux-system/systemd/udevd \u68c0\u7d22\u5185\u6838\u6a21\u5757\u5e76\u52a0\u8f7d\u7684 demo",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/systemd/udevd \u68c0\u7d22\u5185\u6838\u6a21\u5757\u5e76\u52a0\u8f7d\u7684 demo",draft:!1,editUrl:"https://github.com/longyuwlz/longyu.github.io/docs/\u6280\u672f\u535a\u5ba2/linux-system/systemd/udevd \u68c0\u7d22\u5185\u6838\u6a21\u5757\u5e76\u52a0\u8f7d\u7684 demo.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"max file descriptors [4096] for elasticsearch process is too low \u95ee\u9898\u5b9a\u4f4d",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/systemd/max file descriptors for elasticsearch process is too low \u95ee\u9898\u5b9a\u4f4d"},next:{title:"\u4ece systemd-udevd \u8fd0\u884c log \u4e2d\u7814\u7a76\u5176\u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757\u7684\u8fc7\u7a0b",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/systemd/\u4ece systemd-udevd \u8fd0\u884c log \u4e2d\u7814\u7a76\u5176\u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757\u7684\u8fc7\u7a0b"}},s={},m=[{value:"udevd \u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757",id:"udevd-\u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757",level:2},{value:"demo \u7a0b\u5e8f",id:"demo-\u7a0b\u5e8f",level:2},{value:"\u5b89\u88c5 libkmod-dev",id:"\u5b89\u88c5-libkmod-dev",level:2},{value:"\u7f16\u8bd1\u547d\u4ee4",id:"\u7f16\u8bd1\u547d\u4ee4",level:2},{value:"\u547d\u4ee4\u6d4b\u8bd5",id:"\u547d\u4ee4\u6d4b\u8bd5",level:2}],c={toc:m};function p(e){var n=e.components,t=(0,o.Z)(e,l);return(0,d.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"udevd-\u68c0\u7d22\u5185\u6838\u6a21\u5757\u5e76\u52a0\u8f7d\u7684-demo"},"udevd \u68c0\u7d22\u5185\u6838\u6a21\u5757\u5e76\u52a0\u8f7d\u7684 demo"),(0,d.kt)("h2",{id:"udevd-\u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757"},"udevd \u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757"),(0,d.kt)("p",null,"\u5728 ",(0,d.kt)("a",{parentName:"p",href:"https://blog.csdn.net/Longyu_wlz/article/details/121109303"},"\u4ece systemd-udevd \u8fd0\u884c log \u4e2d\u7814\u7a76\u5176\u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757\u7684\u8fc7\u7a0b")," \u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u63cf\u8ff0\u4e86 systemd-udevd \u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757\u7684\u4e00\u4e9b\u539f\u7406\u3002\u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u4e24\u65b9\u9762\u5185\u5bb9\uff1a"),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},"\u52a0\u8f7d\u5185\u6838\u6a21\u5757"),(0,d.kt)("li",{parentName:"ol"},"\u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757")),(0,d.kt)("p",null,"\u81ea\u52a8\u52a0\u8f7d\u5185\u6838\u6a21\u5757\u6d89\u53ca udevd \u8ddf\u5185\u6838\u4e4b\u95f4\u7684\u901a\u4fe1\uff0c\u53ca udevd \u81ea\u8eab\u89c4\u5219\u7684\u89e3\u6790\u6267\u884c\uff0c\u5728\u540e\u7eed\u7684\u6587\u7ae0\u4e2d\u8fdb\u884c\u5206\u6790\u3002"),(0,d.kt)("p",null,"udevd \u52a0\u8f7d\u5185\u6838\u6a21\u5757\u7684\u529f\u80fd\u4f7f\u7528 ",(0,d.kt)("strong",{parentName:"p"},"libkmod")," \u5e93\u5b8c\u6210\uff0c\u672c\u6587\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684 demo \u6765\u6a21\u62df\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u4ee3\u7801\u6458\u81ea udevd \u6e90\u7801\u5e76\u9488\u5bf9\u6027\u4fee\u6539\u3002"),(0,d.kt)("h2",{id:"demo-\u7a0b\u5e8f"},"demo \u7a0b\u5e8f"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-c"},'#include <errno.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <libkmod.h>\n\nstatic struct kmod_ctx *ctx;\n\nstatic int load_module(const char *alias) {\n        struct kmod_list *list = NULL;\n        struct kmod_list *l;\n        int err;\n\n        err = kmod_module_new_from_lookup(ctx, alias, &list);\n        if (err < 0)\n                return err;\n\n        if (list == NULL)\n                printf("No module matches \'%s\'\\n", alias);\n\n        kmod_list_foreach(l, list) {\n                struct kmod_module *mod = kmod_module_get_module(l);\n\n                err = kmod_module_probe_insert_module(mod, KMOD_PROBE_APPLY_BLACKLIST, NULL, NULL, NULL, NULL);\n                if (err == KMOD_PROBE_APPLY_BLACKLIST)\n                        printf("Module \'%s\' is blacklisted\\n", kmod_module_get_name(mod));\n                else if (err == 0)\n                        printf("Inserted \'%s\'\\n", kmod_module_get_name(mod));\n                else\n                        printf("Failed to insert \'%s\'\\n", kmod_module_get_name(mod));\n\n                kmod_module_unref(mod);\n        }\n\n        kmod_module_unref_list(list);\n        return err;\n}\n\n\nstatic int kmod_init(void) {\n        if (ctx)\n                return 0;\n\n        ctx = kmod_new(NULL, NULL);\n        if (!ctx)\n                return -ENOMEM;\n\n        kmod_load_resources(ctx);\n        return 0;\n}\n\nstatic void kmod_exit(void) {\n        ctx = kmod_unref(ctx);\n}\n\nint main(int argc, char *argv[])\n{\n        kmod_init();\n\n        if (argc < 2) {\n                printf("Usage:%s alias\\n", argv[0]);\n        }\n\n        load_module(argv[1]);\n\n        kmod_exit();\n}\n')),(0,d.kt)("p",null,"kmod_init \u521d\u59cb\u5316 libkmod \u5185\u90e8\u6570\u636e\u7ed3\u6784\uff0cload_module \u547d\u4ee4\u901a\u8fc7\u4f20\u5165\u53c2\u6570\u5148\u83b7\u53d6\u5230\u9700\u8981\u52a0\u8f7d\u7684\u6a21\u5757\uff0c\u83b7\u53d6\u6210\u529f\u540e\u52a0\u8f7d\u4e4b\u3002kmod_exit \u63a5\u521d\u59cb\u5316 libkmod \u5185\u90e8\u6570\u636e\u7ed3\u6784\u3002"),(0,d.kt)("h2",{id:"\u5b89\u88c5-libkmod-dev"},"\u5b89\u88c5 libkmod-dev"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-bash"},"apt install libkmod-dev\n")),(0,d.kt)("h2",{id:"\u7f16\u8bd1\u547d\u4ee4"},"\u7f16\u8bd1\u547d\u4ee4"),(0,d.kt)("p",null,(0,d.kt)("strong",{parentName:"p"},"gcc kmod.c -lkmod -o kmod")),(0,d.kt)("h2",{id:"\u547d\u4ee4\u6d4b\u8bd5"},"\u547d\u4ee4\u6d4b\u8bd5"),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},"\u4f7f\u7528 modalias \u5339\u914d\u9a71\u52a8",(0,d.kt)("pre",{parentName:"li"},(0,d.kt)("code",{parentName:"pre",className:"language-bash"},"longyu@debian:~/module_load_demo$ sudo  ./kmod \"pci:v00008086d0000158Bsv*sd*bc*sc*i*\"\nInserted 'i40e'\nlongyu@debian:~/module_load_demo$ lsmod |grep i40e\ni40e                  405504  0\n"))),(0,d.kt)("li",{parentName:"ol"},"\u4f7f\u7528\u9a71\u52a8\u540d\u79f0\u5339\u914d\u9a71\u52a8",(0,d.kt)("pre",{parentName:"li"},(0,d.kt)("code",{parentName:"pre",className:"language-bash"},"longyu@debian:~/module_load_demo$ sudo ./kmod ixgbe\nInserted 'ixgbe'\nlongyu@debian:~/module_load_demo$ lsmod | grep ixgbe\nixgbe                 333244  0\nmdio                   14073  1 ixgbe\n")))))}p.isMDXComponent=!0}}]);