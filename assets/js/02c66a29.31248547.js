"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[5622],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=r.createContext({}),p=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(a.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),s=p(t),f=i,_=s["".concat(a,".").concat(f)]||s[f]||c[f]||o;return t?r.createElement(_,l(l({ref:n},u),{},{components:t})):r.createElement(_,l({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,l=new Array(o);l[0]=s;var d={};for(var a in n)hasOwnProperty.call(n,a)&&(d[a]=n[a]);d.originalType=e,d.mdxType="string"==typeof e?e:i,l[1]=d;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},9554:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return a},default:function(){return f},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return c}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),l=["components"],d={},a="dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790",p={unversionedId:"\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u6e90\u7801\u5206\u6790/igb_uio/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790",id:"\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u6e90\u7801\u5206\u6790/igb_uio/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790",title:"dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790",description:"\u524d\u8a00",source:"@site/docs/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u6e90\u7801\u5206\u6790/igb_uio/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u6e90\u7801\u5206\u6790/igb_uio",slug:"/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u6e90\u7801\u5206\u6790/igb_uio/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u6e90\u7801\u5206\u6790/igb_uio/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790",draft:!1,editUrl:"https://github.com/longyuwlz/longyu.github.io/docs/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u6e90\u7801\u5206\u6790/igb_uio/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u6e90\u7801\u5206\u6790/igb_uio/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790"},next:{title:"igb_uio.ko \u7684 md5sum \u4e3a\u5565\u53c8\u53d8\u5316\u4e86\uff1f",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/dpdk/dpdk \u6e90\u7801\u5206\u6790/igb_uio/igb_uio.ko \u7684 md5sum \u4e3a\u5565\u53c8\u53d8\u5316\u4e86\uff1f"}},u={},c=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"dpdk \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo",id:"dpdk-\u76d1\u542c-uio-\u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b-demo",level:2},{value:"demo \u8fd0\u884c\u4fe1\u606f",id:"demo-\u8fd0\u884c\u4fe1\u606f",level:2},{value:"dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u4e00\u4e9b\u529f\u80fd\u4e0e\u5b9e\u73b0",id:"dpdk-1604-\u76d1\u542c-uio-\u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u4e00\u4e9b\u529f\u80fd\u4e0e\u5b9e\u73b0",level:2},{value:"1. \u4e00\u4e2a\u63a5\u53e3\u652f\u6301\u6ce8\u518c\u591a\u4e2a\u4e2d\u65ad\u56de\u8c03",id:"1-\u4e00\u4e2a\u63a5\u53e3\u652f\u6301\u6ce8\u518c\u591a\u4e2a\u4e2d\u65ad\u56de\u8c03",level:3},{value:"2. \u652f\u6301\u9ad8\u6548\u7684\u4e8b\u4ef6\u76d1\u63a7\uff0c\u53ca\u65f6\u6355\u83b7\u5904\u7406\u4e2d\u65ad\u4e8b\u4ef6",id:"2-\u652f\u6301\u9ad8\u6548\u7684\u4e8b\u4ef6\u76d1\u63a7\u53ca\u65f6\u6355\u83b7\u5904\u7406\u4e2d\u65ad\u4e8b\u4ef6",level:3},{value:"3. \u652f\u6301\u4e2d\u65ad\u4e8b\u4ef6\u52a8\u6001\u6ce8\u518c\u4e0e\u9500\u6bc1",id:"3-\u652f\u6301\u4e2d\u65ad\u4e8b\u4ef6\u52a8\u6001\u6ce8\u518c\u4e0e\u9500\u6bc1",level:3}],s={toc:c};function f(e){var n=e.components,t=(0,i.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dpdk-1604-\u76d1\u542c-uio-\u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b-demo-\u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790"},"dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790"),(0,o.kt)("h2",{id:"\u524d\u8a00"},"\u524d\u8a00"),(0,o.kt)("p",null,"\u5728 ",(0,o.kt)("a",{parentName:"p",href:"https://blog.csdn.net/Longyu_wlz/article/details/121443906"},"Eal:Error reading from file descriptor 33: Input/output error")," \u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u63cf\u8ff0\u4e86 VMWARE \u73af\u5883\u4e2d dpdk \u7a0b\u5e8f\u4f7f\u7528 82545EM \u865a\u62df\u7f51\u5361\u65f6\uff0c\u4e00\u76f4\u6253\u5370 Input/output error \u7684\u95ee\u9898\u3002"),(0,o.kt)("p",null,"\u8fd9\u4e2a\u95ee\u9898\u6700\u7ec8\u901a\u8fc7\u4fee\u6539 igb_uio \u7684\u4ee3\u7801\u4fee\u590d\uff0c\u4fee\u590d\u540e\u6211\u4e0d\u7981\u5728\u60f3\u7528\u6237\u6001\u662f\u600e\u6837\u5de5\u4f5c\u7684\uff1f\u4ee5\u524d\u5927\u6982\u77e5\u9053\u662f\u901a\u8fc7 epoll \u6765\u76d1\u63a7 uio \u6587\u4ef6\u7684\uff0c\u5374\u5e76\u4e0d\u6e05\u695a\u5177\u4f53\u7684\u6d41\u7a0b\u3002"),(0,o.kt)("p",null,"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4f7f\u7528 dpdk-16.04 \u4e2d\u65ad\u7ebf\u7a0b\u6a21\u62df demo \u6765\u8fdb\u4e00\u6b65\u7814\u7a76 dpdk \u901a\u8fc7 uio \u6587\u4ef6\u76d1\u63a7\u7f51\u5361\u4e2d\u65ad\u4e8b\u4ef6\u7684\u5173\u952e\u8fc7\u7a0b\u3002"),(0,o.kt)("h2",{id:"dpdk-\u76d1\u542c-uio-\u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b-demo"},"dpdk \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo"),(0,o.kt)("p",null,"demo \u8fd0\u884c\u673a\u5668\u5185\u6838\u4fe1\u606f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"longyu@debian:~/epoll$ uname -a\nLinux debian 4.19.0-18-amd64 #1 SMP Debian 4.19.208-1 (2021-09-29) x86_64 GNU/Linux\n")),(0,o.kt)("p",null,"\u7f51\u5361\u7ed1\u5b9a\u4fe1\u606f\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"longyu@debian:~/epoll$ sudo python ../dpdk-16.04/tools/dpdk_nic_bind.py -s\n\nNetwork devices using DPDK-compatible driver\n============================================\n0000:02:05.0 '82545EM Gigabit Ethernet Controller (Copper)' drv=igb_uio unused=e1000\n")),(0,o.kt)("p",null,"\u4e3a\u4e86\u89e3\u51b3\u7f16\u8bd1\u95ee\u9898\uff0c\u5bf9 dpdk-16.04 igb_uio.c \u4ee3\u7801\u505a\u4e86\u5982\u4e0b\u4fee\u6539\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"--- lib/librte_eal/linuxapp/igb_uio/igb_uio.c  \n+++ lib/librte_eal/linuxapp/igb_uio/igb_uio.c\n@@ -442,7 +442,7 @@\n        case RTE_INTR_MODE_MSIX:\n                /* Only 1 msi-x vector needed */\n                msix_entry.entry = 0;\n-               if (pci_enable_msix(dev, &msix_entry, 1) == 0) {\n+               if (pci_enable_msix_range(dev, &msix_entry, 1, 1) == 0) {s\n")),(0,o.kt)("p",null,"demo \u7a0b\u5e8f\u6458\u81ea dpdk-16.04 \u5e76\u8fdb\u884c\u4e86\u4e00\u4e9b\u7b80\u5316\uff0c\u6e90\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <sys/epoll.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <stdlib.h>\n\nstatic void eal_intr_handle_interrupts(int pfd, unsigned totalfds);\n\n#define rte_panic(...) rte_panic_(__func__, __VA_ARGS__, "dummy")\n#define rte_panic_(func, format, ...) __rte_panic(func, format "%.0s", __VA_ARGS__)\n\n/* call abort(), it will generate a coredump if enabled */\nstatic void __rte_panic(const char *funcname, const char *format, ...)\n{\n  va_list ap;\n\n  va_start(ap, format);\n  vprintf(format, ap);\n  va_end(ap);\n  abort();\n}\n\nstatic void epoll_uio_file(int fd)\n{\n  struct epoll_event ev;\n\n  for (;;) {\n    unsigned numfds = 0;\n\n    /* create epoll fd */\n    int pfd = epoll_create(1);\n    if (pfd < 0)\n      rte_panic("Cannot create epoll instance\\n");\n\n    ev.events = EPOLLIN | EPOLLPRI;\n    ev.data.fd = fd;\n\n    if (epoll_ctl(pfd, EPOLL_CTL_ADD, fd, &ev) < 0){\n      rte_panic("Error adding fd %d epoll_ctl, %s\\n",\n                fd, strerror(errno));\n    } else {\n      numfds++;\n    }\n\n    /* serve the interrupt */\n    eal_intr_handle_interrupts(pfd, numfds);\n\n    /**\n     * when we return, we need to rebuild the\n     * list of fds to monitor.\n     */\n    close(pfd);\n  }\n}\n\n#define EAL_INTR_EPOLL_WAIT_FOREVER -1\n\nstatic void\neal_intr_handle_interrupts(int pfd, unsigned totalfds)\n{\n  struct epoll_event events[totalfds];\n  int nfds = 0;\n  int bytes_read;\n  char buf[1024];\n\n  for(;;) {\n    nfds = epoll_wait(pfd, events, totalfds,\n                      EAL_INTR_EPOLL_WAIT_FOREVER);\n    /* epoll_wait fail */\n    if (nfds < 0) {\n      if (errno == EINTR)\n        continue;\n      printf("epoll_wait returns with fail\\n");\n      return;\n    }\n    /* epoll_wait timeout, will never happens here */\n    else if (nfds == 0)\n      continue;\n\n    /* epoll_wait has at least one fd ready to read */\n    bytes_read = 1;\n    bytes_read = read(events[0].data.fd, &buf, bytes_read);\n\n    if (bytes_read < 0) {\n      if (errno == EINTR || errno == EWOULDBLOCK)\n        continue;\n\n      printf("Error reading from file "\n              "descriptor %d: %s\\n",\n              events[0].data.fd,\n              strerror(errno));\n    }\n  }\n}\n\n#define UIO_PATH "/dev/uio0"\n\nint main(void)\n{\n  int fd;\n\n  fd = open(UIO_PATH, O_RDWR);\n\n  if (fd < 0) {\n    rte_panic("open %s failed\\n", UIO_PATH);\n  }\n\n  epoll_uio_file(fd);\n\n  return 0;\n}\n')),(0,o.kt)("p",null,"\u4e0a\u8ff0 demo \u7684\u5173\u952e\u6d41\u7a0b\u5982\u4e0b\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u6253\u5f00\u7ed1\u5b9a\u5230 igb_uio \u9a71\u52a8\u7684\u7f51\u5361\u63a5\u53e3\u751f\u6210\u7684 uio \u6587\u4ef6"),(0,o.kt)("li",{parentName:"ol"},"\u4f7f\u7528 1 \u4e2d\u6253\u5f00 uio \u6587\u4ef6\u83b7\u53d6\u7684 fd \u4e3a\u53c2\u6570\u8c03\u7528 epoll_uio_file \u51fd\u6570"),(0,o.kt)("li",{parentName:"ol"},"epoll_uio_file \u51fd\u6570\u521b\u5efa\u4e00\u4e2a epoll \u4e8b\u4ef6\uff0c\u5e76\u5c06\u4f20\u5165\u7684 fd \u6dfb\u52a0\u5230\u76d1\u63a7\u5217\u8868\u4e2d"),(0,o.kt)("li",{parentName:"ol"},"epoll_uio_file \u968f\u540e\u8c03\u7528 eal_intr_handle_interrupts \u51fd\u6570\uff0ceal_intr_handle_interrupts \u51fd\u6570\u4e2d\u8c03\u7528 epoll_wait \u76d1\u63a7\u4e8b\u4ef6\uff0c\u5f53\u6709\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u8c03\u7528 read \u51fd\u6570\u8bfb\u53d6\u4e8b\u4ef6\u5185\u5bb9")),(0,o.kt)("h2",{id:"demo-\u8fd0\u884c\u4fe1\u606f"},"demo \u8fd0\u884c\u4fe1\u606f"),(0,o.kt)("p",null,"\u8fd0\u884c\u7ed3\u679c log \u4fe1\u606f\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"Error reading from file descriptor 3: Input/output error\nError reading from file descriptor 3: Input/output error\nError reading from file descriptor 3: Input/output error\nError reading from file descriptor 3: Input/output error\nError reading from file descriptor 3: Input/output error\nError reading from file descriptor 3: Input/output error\n")),(0,o.kt)("p",null,"\u8f93\u51fa\u4fe1\u606f\u8868\u660e\u590d\u73b0\u51fa\u4e86\u4e0e ",(0,o.kt)("a",{parentName:"p",href:"https://blog.csdn.net/Longyu_wlz/article/details/121443906"},"Eal:Error reading from file descriptor 33: Input/output error")," \u4e00\u6837\u7684\u95ee\u9898\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"strace \u8ddf\u8e2a\u4fe1\u606f\u5982\u4e0b\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'openat(AT_FDCWD, "/dev/uio0", O_RDWR)   = 3\nepoll_create(1)                         = 4\nepoll_ctl(4, EPOLL_CTL_ADD, 3, {EPOLLIN|EPOLLPRI, {u32=3, u64=3}}) = 0\nepoll_wait(4, [{EPOLLIN|EPOLLPRI|EPOLLERR|EPOLLHUP, {u32=3, u64=3}}], 1, -1) = 1\nread(3, 0x7ffcdaac3480, 1)              = -1 EIO (Input/output error)\nfstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...}) = 0\nbrk(NULL)                               = 0x562f29f41000\nbrk(0x562f29f62000)                     = 0x562f29f62000\nwrite(1, "Error reading from file descript"..., 57) = 57\nepoll_wait(4, [{EPOLLIN|EPOLLPRI|EPOLLERR|EPOLLHUP, {u32=3, u64=3}}], 1, -1) = 1\nread(3, 0x7ffcdaac3480, 1)              = -1 EIO (Input/output error)\nwrite(1, "Error reading from file descript"..., 57) = 57\n')),(0,o.kt)("h2",{id:"dpdk-1604-\u76d1\u542c-uio-\u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u4e00\u4e9b\u529f\u80fd\u4e0e\u5b9e\u73b0"},"dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u4e00\u4e9b\u529f\u80fd\u4e0e\u5b9e\u73b0"),(0,o.kt)("h3",{id:"1-\u4e00\u4e2a\u63a5\u53e3\u652f\u6301\u6ce8\u518c\u591a\u4e2a\u4e2d\u65ad\u56de\u8c03"},"1. \u4e00\u4e2a\u63a5\u53e3\u652f\u6301\u6ce8\u518c\u591a\u4e2a\u4e2d\u65ad\u56de\u8c03"),(0,o.kt)("p",null,"\u6bcf\u4e2a\u4e2d\u65ad\u6e90\u4e4b\u95f4\u4f7f\u7528\u94fe\u8868\u94fe\u8d77\u6765\uff0c\u6bcf\u4e2a\u4e2d\u65ad\u6e90\u8fd8\u6709\u6709\u4e00\u4e2a\u4e2d\u65ad\u56de\u8c03\u94fe\u8868\uff0c\u4e00\u4e2a\u4e2d\u65ad\u56de\u8c03\u7684\u5b9a\u4e49\u662f\u56de\u8c03\u51fd\u6570+\u53c2\u6570\uff0c\u591a\u4e2a\u4e2d\u65ad\u56de\u8c03\u4f7f\u7528\u94fe\u8868\u94fe\u8d77\u6765\u3002"),(0,o.kt)("p",null,"\u4e2d\u65ad\u56de\u8c03\u4e0e\u4e2d\u65ad\u6e90\u7ed3\u6784\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"struct rte_intr_callback {\n    TAILQ_ENTRY(rte_intr_callback) next;\n    rte_intr_callback_fn cb_fn;  /**< callback address */\n    void *cb_arg;                /**< parameter for callback */\n};\n\nstruct rte_intr_source {\n    TAILQ_ENTRY(rte_intr_source) next;\n    struct rte_intr_handle intr_handle; /**< interrupt handle */\n    struct rte_intr_cb_list callbacks;  /**< user callbacks */\n    uint32_t active;\n};\n")),(0,o.kt)("p",null,"dpdk-16.04 \u6ca1\u6709\u68c0\u67e5\u4e2d\u65ad\u56de\u8c03\u7684\u552f\u4e00\u6027\uff0c\u5b58\u5728\u6ce8\u518c\u591a\u4e2a\u76f8\u540c\u4e2d\u65ad\u56de\u8c03\u7684\u60c5\u51b5\u3002"),(0,o.kt)("h3",{id:"2-\u652f\u6301\u9ad8\u6548\u7684\u4e8b\u4ef6\u76d1\u63a7\u53ca\u65f6\u6355\u83b7\u5904\u7406\u4e2d\u65ad\u4e8b\u4ef6"},"2. \u652f\u6301\u9ad8\u6548\u7684\u4e8b\u4ef6\u76d1\u63a7\uff0c\u53ca\u65f6\u6355\u83b7\u5904\u7406\u4e2d\u65ad\u4e8b\u4ef6"),(0,o.kt)("p",null,"dpdk-16.04 \u4f7f\u7528 epoll \u6765\u76d1\u63a7\u4e2d\u65ad\u4e8b\u4ef6\uff0c\u6ce8\u518c\u4e2d\u65ad\u65f6\uff0cpci \u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u751f\u6210\u7684 uio \u6587\u4ef6\u7684\u53e5\u67c4\u4f1a\u88ab\u6dfb\u52a0\u5230 epoll \u4e8b\u4ef6\u4e2d\uff0c\u6ce8\u518c\u5b8c\u6210\u540e\u901a\u8fc7 epoll_wait \u6765\u76d1\u63a7\u662f\u5426\u6709\u4e2d\u65ad\u89e6\u53d1\u3002"),(0,o.kt)("h3",{id:"3-\u652f\u6301\u4e2d\u65ad\u4e8b\u4ef6\u52a8\u6001\u6ce8\u518c\u4e0e\u9500\u6bc1"},"3. \u652f\u6301\u4e2d\u65ad\u4e8b\u4ef6\u52a8\u6001\u6ce8\u518c\u4e0e\u9500\u6bc1"),(0,o.kt)("p",null,"dpdk-16.04 \u521b\u5efa\u4e86\u4e00\u4e2a pipe \u7528\u4e8e\u91cd\u65b0\u6784\u5efa\u4e2d\u65ad\u76d1\u542c\u4e8b\u4ef6\u3002pipe \u7684 read \u7aef\u4e5f\u88ab\u6dfb\u52a0\u5230 epoll \u4e8b\u4ef6\u4e2d\uff0c\u5728\u6ce8\u518c\u4e2d\u65ad\u5b8c\u6210\u540e\u4f1a\u5411 pipe \u7684 write \u7aef\u5199\u5165\u6570\u636e\uff0c\u4e2d\u65ad\u5904\u7406\u7ebf\u7a0b\u76d1\u63a7\u5230 pipe read \u7aef\u6709\u6570\u636e\uff0c\u5219\u91cd\u65b0\u6784\u5efa\u4e2d\u65ad\u4e8b\u4ef6\u3002\n\u540c\u6837\u5f53\u5728\u9500\u6bc1\u4e00\u4e2a\u4e2d\u65ad\u4e8b\u4ef6\u7684\u6700\u540e\u4e5f\u4f1a\u5411 pipe \u7684 write \u7aef\u5199\u5165\u6570\u636e\uff0c\u901a\u77e5\u4e2d\u65ad\u5904\u7406\u7ebf\u7a0b\uff0c\u91cd\u65b0\u6784\u5efa\u4e8b\u4ef6\u76d1\u542c\u5217\u8868\u3002"))}f.isMDXComponent=!0}}]);