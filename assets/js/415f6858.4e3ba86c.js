"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[1624],{2776:function(n){n.exports=JSON.parse('{"blogPosts":[{"id":"/dpdk/Failed to mmap 2MB hugepages \u4e0e max_map_count limit","metadata":{"permalink":"/longyu.github.io/blog/dpdk/Failed to mmap 2MB hugepages \u4e0e max_map_count limit","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/Failed to mmap 2MB hugepages \u4e0e max_map_count limit.md","source":"@site/blog/dpdk/Failed to mmap 2MB hugepages \u4e0e max_map_count limit.md","title":"dpdk/Failed to mmap 2MB hugepages \u4e0e max_map_count limit","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":5.305,"truncated":false,"authors":[],"frontMatter":{},"nextItem":{"title":"dpdk/I210 \u7f51\u5361\u8bbe\u5b9a force link mode \u5e76\u5173\u95ed EEE mode","permalink":"/longyu.github.io/blog/dpdk/I210 \u7f51\u5361\u8bbe\u5b9a force link mode \u5e76\u5173\u95ed EEE mode"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n\\n### \u8bbe\u5907\u5185\u5b58\u4fe1\u606f\\n```bash\\n# free -h\\n              total        used        free      shared  buff/cache   available\\nMem:            15G        8.1G        7.0G         22M        512M        7.4G\\nSwap:            0B          0B          0B\\n```\\n\\n### l2fwd \u8fd0\u884c\u62a5\u9519\u4fe1\u606f\\n\\n```bash\\n# ./l2fwd  -m 64 -- -p0x1\\ndpdk revision : 41333\\nEAL: Detected lcore 0 as core 0 on socket 0\\nEAL: Detected lcore 1 as core 1 on socket 0\\nEAL: Detected lcore 2 as core 0 on socket 0\\nEAL: Detected lcore 3 as core 1 on socket 0\\nEAL: Support maximum 128 logical core(s) by configuration.\\nEAL: Detected 4 lcore(s)\\nEAL: Probing VFIO support...\\nEAL: Module /sys/module/vfio_pci not found! error 2 (No such file or directory)\\nEAL: VFIO modules not loaded, skipping VFIO support...\\nEAL: Setting up child physically contiguous memory...\\nEAL: map_all_hugepages(): mmap failed: Cannot allocate memory\\nEAL: Failed to mmap 2 MB hugepages\\nPANIC in rte_eal_init():\\nCannot init memory\\nAborted\\n```\\n\\n\u5173\u952e\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```\\nEAL: map_all_hugepages(): mmap failed: Cannot allocate memory\\nEAL: Failed to mmap 2 MB hugepages\\n```\\n\\n\u4ece\u8f93\u51fa\u4fe1\u606f\u770b\u95ee\u9898\u662f mmap \u6620\u5c04\u5927\u9875\u7684\u65f6\u5019\u5931\u8d25\u4e86\uff0c\u770b\u4e0d\u51fa\u5176\u5b83\u95ee\u9898\u3002\\n\\n## strace \u8ddf\u8e2a\u6269\u5927\u95ee\u9898\u8f93\u5165\\n\\nstrace \u8ddf\u8e2a\u786e\u8ba4\u95ee\u9898\u5982\u4e0b\uff1a\\n\\n```bash\\nopen(\\"/dev/hugepages/rtemap_3061\\", O_RDWR|O_CREAT, 0755) = 5\\nmmap(0x17ea00000, 2097152, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_POPULATE, 5, 0) = -1 ENOMEM (Cannot allocate memory)\\n```\\n\\n\u5728 mmap \u7b2c 3061 \u4e2a hugepage \u7684\u65f6\u5019\u62a5\u9519\uff0c\u6839\u672c\u95ee\u9898\u662f mmap \u6620\u5c04\u5931\u8d25\uff0c\u51fa\u9519 mmap \u7cfb\u7edf\u8c03\u7528\u7684\u8fd4\u56de\u503c\u662f ENOMEM\u3002\\n\\nman mmap \u627e\u5230\u4e0b\u9762\u8fd9\u4e9b\u4e0e ENOMEM \u76f8\u5173\u7684\u4fe1\u606f\uff1a\\n\\n```bash\\n       ENOMEM No memory is available.\\n\\n       ENOMEM The  process\'s  maximum  number  of mappings would have been exceeded.  This error can also occur for munmap(),\\n              when unmapping a region in the middle of an existing mapping, since this results in two smaller mappings on ei\u2010\\n              ther side of the region being unmapped.\\n\\n       ENOMEM (since Linux 4.7) The process\'s RLIMIT_DATA limit, described in getrlimit(2), would have been exceeded.\\n```\\n\\n\u4e0a\u9762\u7684\u4fe1\u606f\u63cf\u8ff0\u4e86\u5982\u4e0b\u4e09\u79cd\u4e0d\u540c\u7684\u95ee\u9898\uff1a\\n\\n1. \u6ca1\u6709\u53ef\u7528\u5185\u5b58\\n2. \u8d85\u8fc7\u4e86\u8fdb\u7a0b\u7684\u6700\u5927\u6620\u5c04\u6570\u76ee\\n3. \u8d85\u8fc7\u4e86\u8fdb\u7a0b\u7684 RLIMIT_DATA \u9650\u5236\\n\\nulimit \u67e5\u770b\u83b7\u53d6\u5230\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\n```bash\\n# ulimit -a\\ncore file size          (blocks, -c) 0\\ndata seg size           (kbytes, -d) unlimited\\nscheduling priority             (-e) 0\\nfile size               (blocks, -f) unlimited\\npending signals                 (-i) 63812\\nmax locked memory       (kbytes, -l) 64\\nmax memory size         (kbytes, -m) unlimited\\nopen files                      (-n) 1024\\npipe size            (512 bytes, -p) 8\\nPOSIX message queues     (bytes, -q) 819200\\nreal-time priority              (-r) 0\\nstack size              (kbytes, -s) 8192\\ncpu time               (seconds, -t) unlimited\\nmax user processes              (-u) 63812\\nvirtual memory          (kbytes, -v) unlimited\\nfile locks                      (-x) unlimited\\n```\\n\\n\u786e\u8ba4 ulimit \u6ca1\u6709\u76f8\u5173\u7684\u9650\u5236\u8bbe\u5b9a\u5185\u5bb9\u3002\\n\\n## vm.max_map_count \u8bbe\u5b9a\\n\\n\u7ecf\u8fc7\u5927\u4f6c\u63d0\u9192\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u4e0e vm.max_map_count \u8bbe\u5b9a\u6709\u5173\uff0c\u67e5\u770b\u7cfb\u7edf\u4e2d\u7684\u8bbe\u5b9a\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n\\n```\\n# sysctl -a | grep vm.max_map_count\\nvm.max_map_count = 3096\\n```\\n\\n\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u589e\u52a0 max_map_count \u503c\u540e\u91cd\u8bd5\uff0c\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u3002\\n\\n```bash\\necho 65535 > /proc/sys/vm/max_map_count\\n```\\n\\n\u8fd9\u91cc\u7684\u95ee\u9898\u5b9e\u9645\u4e0a\u4e0e man mmap \u5f97\u5230\u7684\u4fe1\u606f\u4e2d\u5bf9 ENOMEM \u7684\u7b2c\u4e8c\u79cd\u89e3\u91ca\u7b26\u5408\uff0c\u53ea\u4e0d\u8fc7 manual \u4e2d\u6ca1\u6709\u76f4\u63a5\u6307\u51fa max_map_count \u7684\u9650\u5b9a\u3002\\n\\n## vm.max_map_count \u662f\u5e72\u561b\u7684\uff1f\\n\\n\u4ece\u5185\u6838 Documentation \u76ee\u5f55\u4e2d sysctl/vm.txt \u6587\u4ef6\u4e2d\u627e\u5230\u4e86\u4e0b\u9762\u8fd9\u4e9b\u63cf\u8ff0\u4fe1\u606f\uff1a\\n\\n```man\\nmax_map_count:\\n\\nThis file contains the maximum number of memory map areas a process\\nmay have. Memory map areas are used as a side-effect of calling\\nmalloc, directly by mmap and mprotect, and also when loading shared\\nlibraries.\\n\\nWhile most applications need less than a thousand maps, certain\\nprograms, particularly malloc debuggers, may consume lots of them,\\ne.g., up to one or two maps per allocation.\\n\\nThe default value is 65536.\\n```\\n\\n\u8fd9\u4e2a max_map_count \u662f\u7528\u6765\u9650\u5b9a\u8fdb\u7a0b\u5185\u5b58 map \u533a\u57df\u7684\u6700\u5927\u6570\u91cf\uff0c\u6bcf\u6b21 mmap \u6210\u529f\u5185\u90e8\u7684 map_count \u90fd\u4f1a\u52a0 1\uff0c\u5f53\u5185\u90e8 mmap_count \u5927\u4e8e sysctl \u8bbe\u5b9a\u7684 max_count \u6570\u76ee\u65f6 mmap \u4f1a\u8fd4\u56de -ENOMEM\u3002\\n\\nmmap \u6d41\u7a0b\u4e2d\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n        /* Too many mappings? */\\n        if (mm->map_count > sysctl_max_map_count)\\n                return -ENOMEM;\\n```\\n\\n\u540c\u65f6 munmap \u7684\u65f6\u5019\u4f1a\u5c06\u5185\u90e8\u7684 map_count \u51cf 1\uff0c\u800c\u8981\u6539\u53d8\u8fd9\u4e2a\u6570\u91cf\uff0c\u53ef\u4ee5\u901a\u8fc7 sysctl \u6765\u91cd\u65b0\u8bbe\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5199\u5165 /proc/sys/vm/max_map_count \u6587\u4ef6\u6765\u5b8c\u6210\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e2a\u9650\u5b9a\u662f\u5168\u5c40\u7684\uff0c\u4f1a\u5f71\u54cd\u6240\u6709\u7684\u8fdb\u7a0b\u3002\\n\\n\u5982\u679c\u9700\u8981\u6c38\u4e45\u751f\u6548\uff0c\u53ef\u4ee5\u5c06\u914d\u7f6e\u5199\u5165\u5230 /etc/sysctl.conf \u6587\u4ef6\u4e2d\u3002\\n\\n## dpdk-16.04 -m \u53c2\u6570\u7684\u539f\u7406\\n\\n\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0cl2fwd \u547d\u4ee4\u8fd0\u884c\u53c2\u6570\u5982\u4e0b\uff1a\\n\\n```bash\\n./l2fwd  -m 64 -- -p0x1\\n```\\n\\n\u6307\u5b9a\u4e86 -m \u53c2\u6570\u9650\u5b9a\u6620\u5c04\u7684\u5927\u9875\u7a7a\u95f4\u4e3a 64M\uff0c\u6309\u7167\u4e00\u822c\u7684\u601d\u8def\u4e0d\u5e94\u8be5\u51fa\u8fd9\u79cd\u95ee\u9898\uff0c\u4f46\u5176\u5b9e\u5982\u679c\u8fdb\u4e00\u6b65\u7814\u7a76 16.04 hugepage \u6620\u5c04\u7684\u8fc7\u7a0b\uff0c\u80fd\u591f\u53d1\u73b0\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\ndpdk-16.04 \u4f1a\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u7684\u65f6\u5019 map \u6240\u6709\u7684\u5927\u9875\uff0c\u8fd9\u4e2a\u884c\u4e3a\u6ca1\u6709\u53c2\u6570\u6765\u63a7\u5236\u3002-m \u53c2\u6570\u5b9e\u9645\u5728\u6620\u5c04\u6240\u6709\u5927\u9875\u7684\u884c\u4e3a\u4e4b\u540e\u5904\u7406\uff0c\u901a\u8fc7\u89e3\u9664\u8d85\u8fc7\u6570\u91cf\u7684\u6620\u5c04\u6765\u5b9e\u73b0\u3002\\n\\n\u8fd9\u4e2a\u5b9e\u73b0\u662f\u4e0d\u5408\u7406\u7684\uff0c\u542c\u8bf4\u9ad8\u7248\u672c\u5df2\u7ecf\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u9700\u8981\u7814\u7a76\u4e00\u4e0b\u3002"},{"id":"/dpdk/I210 \u7f51\u5361\u8bbe\u5b9a force link mode \u5e76\u5173\u95ed EEE mode","metadata":{"permalink":"/longyu.github.io/blog/dpdk/I210 \u7f51\u5361\u8bbe\u5b9a force link mode \u5e76\u5173\u95ed EEE mode","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/I210 \u7f51\u5361\u8bbe\u5b9a force link mode \u5e76\u5173\u95ed EEE mode.md","source":"@site/blog/dpdk/I210 \u7f51\u5361\u8bbe\u5b9a force link mode \u5e76\u5173\u95ed EEE mode.md","title":"dpdk/I210 \u7f51\u5361\u8bbe\u5b9a force link mode \u5e76\u5173\u95ed EEE mode","description":"\u524d\u8a00","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":3.94,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/Failed to mmap 2MB hugepages \u4e0e max_map_count limit","permalink":"/longyu.github.io/blog/dpdk/Failed to mmap 2MB hugepages \u4e0e max_map_count limit"},"nextItem":{"title":"dpdk/Unsupported SFP+ Module","permalink":"/longyu.github.io/blog/dpdk/Unsupported SFP+ Module"}},"content":"## \u524d\u8a00\\n\u5728\u5b9a\u4f4d I210 \u7f51\u5361\u63a5\u53e3\u9707\u8361\u95ee\u9898\u7684\u65f6\u5019\uff0c\u9605\u8bfb\u624b\u518c\u53d1\u73b0\u7f51\u5361\u652f\u6301\u8bbe\u5b9a force mode\uff0c\u7406\u89e3\u4e3a\u53ef\u4ee5\u5c06\u7f51\u5361\u8bbe\u5b9a\u4e3a\u5f3a\u5236 up \u72b6\u6001\uff0c\u540c\u65f6\u6000\u7591 eee \u8282\u80fd\u6a21\u5f0f\u5bfc\u81f4\u7f51\u5361\u4f11\u7720\u4ece\u800c\u53d1\u751f\u63a5\u53e3 down \u7684\u95ee\u9898\uff0c\u4e8e\u662f\u9700\u8981\u8bbe\u5b9a force mode \u4e3a up \u7684\u65f6\u5019\u540c\u65f6\u5173\u95ed eee \u8282\u80fd\u6a21\u5f0f\uff0c\u9700\u8981\u4fee\u6539 dpdk-16.04 \u4e2d\u7684\u90e8\u5206\u4ee3\u7801\u6765\u8fdb\u884c\u6d4b\u8bd5\u3002\\n\\n## I210 \u624b\u518c\u4e2d\u7684\u76f8\u5173\u5185\u5bb9\\nI210 \u624b\u518c P107 \u9875\u63cf\u8ff0\u4e86\u8bbe\u5b9a force mode \u9700\u8981\u8bbe\u5b9a\u7684\u5bc4\u5b58\u5668\u5185\u5bb9\u4fe1\u606f\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n```\\n Move to Force mode by setting the following bits:\\n\u2014 CTRL.FD (CSR 0x0 bit 0) = 1b\\n\u2014 CTRL.SLU (CSR 0x0 bit 6) = 1b\\n\u2014 CTRL.RFCE (CSR 0x0 bit 27) = 0b\\n\u2014 CTRL.TFCE (CSR 0x0 bit 28) = 0b\\n\u2014 PCS_LCTL.FORCE_LINK (CSR 0X4208 bit 5) = 1b\\n\u2014 PCS_LCTL.FSD (CSR 0x4208 bit 4) = 1b\\n\u2014 PCS_LCTL.FDV (CSR 0x4208 bit 3) = 1b\\n\u2014 PCS_LCTL.FLV (CSR 0x4208 bit 0) = 1b\\n\u2014 PCS_LCTL.AN_ENABLE (CSR 0x4208 bit 16) = 0b\\n```\\n\\ndpdk-16.04 \u4e2d pmd \u4e0e kni \u5185\u6838\u9a71\u52a8\u540c\u65f6\u4f7f\u7528\uff0c\u9700\u8981\u786e\u5b9a\u8bbe\u5b9a\u771f\u5b9e\u751f\u6548\uff0c\u8fd9\u4e00\u70b9\u901a\u8fc7\u67e5\u770b\u5bc4\u5b58\u5668\u5185\u5bb9\u6765\u786e\u8ba4\u3002\\n\\n## igb pmd \u9a71\u52a8 igb_ethdev.c \u7684\u4fee\u6539\\n\u901a\u8fc7\u4fee\u6539\u521d\u59cb\u5316\u903b\u8f91\u6765\u5b8c\u6210\uff0cpatch \u5982\u4e0b\uff1a\\n```c\\nIndex: drivers/net/e1000/igb_ethdev.c\\n===================================================================\\n--- drivers/net/e1000/igb_ethdev.c\\n+++ drivers/net/e1000/igb_ethdev.c\\n@@ -1390,7 +1390,28 @@\\n        }\\n\\n        e1000_setup_link(hw);\\n+\\n+    uint32_t ipcnfg, eeer;\\n\\n+    ipcnfg &= ~(E1000_IPCNFG_EEE_1G_AN | E1000_IPCNFG_EEE_100M_AN);\\n+    eeer &= ~(E1000_EEER_TX_LPI_EN | E1000_EEER_RX_LPI_EN |\\n+                  E1000_EEER_LPI_FC);\\n+\\n+    E1000_WRITE_REG(hw, E1000_IPCNFG, ipcnfg);\\n+    E1000_WRITE_REG(hw, E1000_EEER, eeer);\\n+\\n+    uint32_t pcs_lctl;\\n+    pcs_lctl = E1000_READ_REG(hw, E1000_PCS_LCTL);\\n+    printf(\\"current PCS_LCTL is %u\\\\n\\", pcs_lctl);\\n+\\n+    /* disable AN_ENABLE */\\n+    pcs_lctl &= ~(E1000_PCS_LCTL_AN_ENABLE);\\n+\\n+    /* enable FORCE_LINK and  FORCE_LINK_UP */\\n+    pcs_lctl |= E1000_PCS_LCTL_FORCE_LINK | E1000_PCS_LCTL_FLV_LINK_UP | E1000_PCS_LCTL_FSD;\\n+    E1000_WRITE_REG(hw, E1000_PCS_LCTL, pcs_lctl);\\n+     printf(\\"after changed PCS_LCTL is %u\\\\n\\", E1000_READ_REG(hw, E1000_PCS_LCTL));\\n+\\n        if (rte_intr_allow_others(intr_handle)) {\\n                /* check if lsc interrupt is enabled */\\n                if (dev->data->dev_conf.intr_conf.lsc != 0)\\n ```\\n\\n## kni \u9a71\u52a8 e1000_82575.c \u4ee3\u7801\u7684\u4fee\u6539\\n\u540c\u6837\u901a\u8fc7\u4fee\u6539\u521d\u59cb\u5316\u4ee3\u7801\u6765\u5b8c\u6210\uff0cpatch \u5982\u4e0b\uff1a\\n```c\\nIndex: lib/librte_eal/linuxapp/kni/ethtool/igb/e1000_82575.c\\n===================================================================\\n--- lib/librte_eal/linuxapp/kni/ethtool/igb/e1000_82575.c\\n+++ lib/librte_eal/linuxapp/kni/ethtool/igb/e1000_82575.c\\n@@ -2802,6 +2802,7 @@\\n        ipcnfg = E1000_READ_REG(hw, E1000_IPCNFG);\\n        eeer = E1000_READ_REG(hw, E1000_EEER);\\n\\n+#if 0\\n        /* enable or disable per user setting */\\n        if (!(hw->dev_spec._82575.eee_disable)) {\\n                u32 eee_su = E1000_READ_REG(hw, E1000_EEE_SU);\\n@@ -2818,10 +2819,17 @@\\n                eeer &= ~(E1000_EEER_TX_LPI_EN | E1000_EEER_RX_LPI_EN |\\n                          E1000_EEER_LPI_FC);\\n        }\\n+#endif\\n+\\n+    \u3000\u3000ipcnfg &=  ~(E1000_IPCNFG_EEE_1G_AN | E1000_IPCNFG_EEE_100M_AN);\\n+    \u3000\u3000eeer &= ~(E1000_EEER_TX_LPI_EN | E1000_EEER_RX_LPI_EN |\\n+                   E1000_EEER_LPI_FC);\\n+\\n        E1000_WRITE_REG(hw, E1000_IPCNFG, ipcnfg);\\n        E1000_WRITE_REG(hw, E1000_EEER, eeer);\\n-       E1000_READ_REG(hw, E1000_IPCNFG);\\n-       E1000_READ_REG(hw, E1000_EEER);\\n+\\n+    printk(\\"after set ipcnfg is %x, eeer is %x\\\\n\\", E1000_READ_REG(hw, E1000_IPCNFG), E1000_READ_REG(hw, E1000_EEER));\\n+\\n```\\n\u6d4b\u8bd5\u53d1\u73b0 kni \u4e2d\u9ed8\u8ba4\u662f\u5f00\u542f eee \u6a21\u5f0f\u7684\uff0c\u6ce8\u91ca\u6389\u4e86\u5f00\u542f eee \u6a21\u5f0f\u7684\u4ee3\u7801\uff0c\u5e76\u6e05\u9664\u76f8\u5173\u5bc4\u5b58\u5668\u7684\u8bbe\u5b9a\uff0c\u91cd\u65b0\u8bbe\u5b9a\u540e\u4f7f\u7528 printk \u6253\u5370\u5bc4\u5b58\u5668\u5185\u5bb9\uff0c\u786e\u5b9a\u4fee\u6539\u751f\u6548\u3002\\n\\n## igb_ethtool.c \u7684\u4fee\u6539\\n\u4e3a\u4e86\u5728\u7a0b\u5e8f\u6267\u884c\u540e\u8fdb\u4e00\u6b65\u786e\u8ba4 force link mode \u8bbe\u5b9a\u6210\u529f\uff0c\u4e14 EEE mode \u6b63\u5e38\u5173\u95ed\uff0c\u5728 igb \u7f51\u5361\u83b7\u53d6\u5bc4\u5b58\u5668\u7684\u51fd\u6570\u4e2d\u6dfb\u52a0\u6253\u5370\uff0c\u6253\u5370\u51fa ipcnfg \u4e0e eeer \u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u3002\\n\\n```c\\nIndex: lib/librte_eal/linuxapp/kni/ethtool/igb/igb_ethtool.c\\n===================================================================\\n--- lib/librte_eal/linuxapp/kni/ethtool/igb/igb_ethtool.c\\n+++ lib/librte_eal/linuxapp/kni/ethtool/igb/igb_ethtool.c\\n@@ -495,6 +495,8 @@\\n        memset(p, 0, IGB_REGS_LEN * sizeof(u32));\\n\\n        regs->version = (1 << 24) | (hw->revision_id << 16) | hw->device_id;\\n+\\n+    \\tprintk(\\"ipcnfg is %x, eeer is %x\\\\n\\", E1000_READ_REG(hw, E1000_IPCNFG), E1000_READ_REG(hw, E1000_EEER));\\n\\n        /* General Registers */\\n        regs_buff[0] = E1000_READ_REG(hw, E1000_CTRL);\\n```\\n\\n\u7a0b\u5e8f\u8fd0\u884c\u540e\uff0c\u901a\u8fc7\u6267\u884c ethtool -d \u67e5\u770b **PCS_LCTL \u5bc4\u5b58\u5668\u4e0e dmesg \u7684\u8f93\u51fa\u6765\u786e\u8ba4\u8bbe\u7f6e\u751f\u6548**\u3002\\n\\n## \u6d4b\u8bd5\u7ed3\u679c\\n\u6d4b\u8bd5\u53d1\u73b0 force link mode up \u5e76\u4e0d\u50cf\u6211\u4eec\u60f3\u8c61\u7684\u80fd\u591f\u8ba9\u7f51\u5361\u4e00\u76f4\u5904\u4e8e up \u72b6\u6001\uff0c\u62d4\u4e86\u7f51\u7ebf\u540e\u4ecd\u65e7\u80fd\u591f\u53d8\u4e3a down\uff0c\u63a8\u6d4b\u5f3a\u5236\u7684\u5b9a\u4e49\u5e94\u8be5\u9488\u5bf9\u7684\u662f\u901f\u7387\u4e0e\u53cc\u5de5\u6a21\u5f0f\u3002"},{"id":"/dpdk/Unsupported SFP+ Module","metadata":{"permalink":"/longyu.github.io/blog/dpdk/Unsupported SFP+ Module","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/Unsupported SFP+ Module.md","source":"@site/blog/dpdk/Unsupported SFP+ Module.md","title":"dpdk/Unsupported SFP+ Module","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":1.69,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/I210 \u7f51\u5361\u8bbe\u5b9a force link mode \u5e76\u5173\u95ed EEE mode","permalink":"/longyu.github.io/blog/dpdk/I210 \u7f51\u5361\u8bbe\u5b9a force link mode \u5e76\u5173\u95ed EEE mode"},"nextItem":{"title":"dpdk ebpf \u5e93\u8de8\u7248\u672c\u79fb\u690d","permalink":"/longyu.github.io/blog/dpdk/dpdk ebpf \u5e93\u8de8\u7248\u672c\u79fb\u690d"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\nixgbe \u7f51\u5361\u4f7f\u7528\u4e86\u4e0d\u517c\u5bb9\u7684\u5149\u6a21\u5757\u540e\uff0cdpdk \u7a0b\u5e8f\u542f\u52a8\u62a5 Unsupported SFP+ Module \u9519\u8bef\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002\\n\\n## \u7ecf\u9a8c\u4e4b\u8c08\\ndpdk \u7684\u4e0d\u540c\u7248\u672c\u5bf9\u5149\u6a21\u5757\u7684\u517c\u5bb9\u6027\u5b58\u5728\u7740\u5dee\u522b\uff0c\u4e0d\u540c\u7248\u672c\u7684 dpdk pmd \u9a71\u52a8\u652f\u6301\u7684\u5149\u6a21\u5757\u578b\u53f7\u5b58\u5728\u7740\u5dee\u522b\u3002\\n\\n## dpdk ixgbe pmd allow_unsupported_sfp \u53c2\u6570\\ndpdk \u4e2d\u7684 ixgbe \u9a71\u52a8\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u5141\u8bb8\u4f7f\u7528\u4e0d\u652f\u6301\u7684 sfp \u6a21\u5757\u3002\\n\\n\u5728 eth_ixgbe_dev_init \u51fd\u6570\u4e2d\u6709\u5982\u4e0b\u8bed\u53e5\uff1a\\n\\n```c\\nhw->allow_unsupported_sfp = 1;\\n```\\n\\n\u8fd9\u91cc\u5c06 allow_unsupported_sfp \u8bbe\u7f6e\u4e3a 1 \u5141\u8bb8 ixgbe \u9a71\u52a8\u4f7f\u7528\u4e0d\u652f\u6301\u7684 sfp \u6a21\u5757\u3002\u8fd9\u79cd\u914d\u7f6e\u4e0b\u7684 ixgbe pmd \u9a71\u52a8\u53ef\u4ee5\u4f7f\u7528\u7684\u5149\u6a21\u5757\u578b\u53f7\u4f1a\u5f97\u5230\u6269\u5145\uff0c\u4f46\u4f7f\u7528\u5b98\u65b9\u672a\u652f\u6301\u7684 sfp \u578b\u53f7\u53ef\u80fd\u4f1a\u5f15\u5165\u65b0\u7684\u95ee\u9898\u3002\\n\\n## ixgbe \u5b98\u65b9\u9a71\u52a8 allow_unsupported_sfp \u53c2\u6570\\nixgbe \u5b98\u65b9\u9a71\u52a8\u4e5f\u652f\u6301 allow_unsupported_sfp \u53c2\u6570\uff0c\u5728 insmod ixgbe \u9a71\u52a8\u7684\u65f6\u5019\u53ef\u4ee5\u8bbe\u7f6e allow_unsupported_sfp \u53c2\u6570\u3002\\n\\nmodinfo \u67e5\u770b ixgbe.ko \u7684\u53c2\u6570\u5f97\u5230\u5982\u4e0b\u76f8\u5173\u7684\u4fe1\u606fi\uff1a\\n\\n```\\nparm:           allow_unsupported_sfp:Allow unsupported and untested SFP+ modules on 82599-based adapters (uint)\\n```\\n\\n\u5728\u4f7f\u7528 ixgbe \u5b98\u65b9\u9a71\u52a8\u7684\u65f6\u5019\u53ef\u4ee5\u5728\u52a0\u8f7d\u6a21\u5757\u65f6\u8bbe\u7f6e\u8fd9\u4e2a\u53c2\u6570\uff0c\u4e0d\u540c\u7684\u9a71\u52a8\u7248\u672c\u652f\u6301\u7684\u5149\u6a21\u5757\u578b\u53f7\u53ef\u80fd\u4e5f\u5b58\u5728\u7740\u5dee\u522b\u3002\\n\\n\u6ce8\u610f\uff0c\u8bbe\u7f6e\u4e86 allow_unsupported_sfp \u5e76\u4e0d\u4ee3\u8868 sfp \u6a21\u5757\u5c31\u80fd\u591f\u6b63\u5e38\u4f7f\u7528\uff0c\u9700\u8981\u4ee5\u5b9e\u9645\u7684\u6d4b\u8bd5\u7ed3\u679c\u4e3a\u51c6\u3002"},{"id":"/dpdk/dpdk ebpf \u5e93\u8de8\u7248\u672c\u79fb\u690d","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk ebpf \u5e93\u8de8\u7248\u672c\u79fb\u690d","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk ebpf \u5e93\u8de8\u7248\u672c\u79fb\u690d.md","source":"@site/blog/dpdk/dpdk ebpf \u5e93\u8de8\u7248\u672c\u79fb\u690d.md","title":"dpdk ebpf \u5e93\u8de8\u7248\u672c\u79fb\u690d","description":"\u76ee\u6807","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":2.97,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/Unsupported SFP+ Module","permalink":"/longyu.github.io/blog/dpdk/Unsupported SFP+ Module"},"nextItem":{"title":"dpdk/dpdk mempool cache \u673a\u5236\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk mempool cache \u673a\u5236\u5206\u6790"}},"content":"## \u76ee\u6807\\n\\ndpdk-19.11 ebpf \u5e93\u79fb\u690d\u5230 dpdk-16.04 \u4e2d\u5e76\u9002\u914d testpmd \u6765\u6d4b\u8bd5\u3002\\n\\n## \u79fb\u690d\u524d\u8bc4\u4f30\u5de5\u4f5c\\n\\n\u8bc4\u4f30\u65b9\u6cd5\uff1a\\n\\n1. \u4f7f\u7528 dpdk-19.11 \u7f16\u8bd1\u751f\u6210 librte_bpf.a\\n2. nm \u67e5\u770b .a \u4e2d\u7684\u7b26\u53f7\\n3. \u8fc7\u6ee4\u51fa U \u7c7b\u578b\u7684\u7b26\u53f7\u5e76\u6392\u9664\u5185\u90e8\u7b26\u53f7\\n\\n\u8bc4\u4f30\u7684\u60c5\u51b5\uff1a\\n\\n[libelf.so](http://libelf.so/) \u63d0\u4f9b\u7684\u7b26\u53f7\uff1a\\n\\n```c\\nelf64_getehdr\\nelf64_getshdr\\nelf_begin\\nelf_end\\nelf_errmsg\\nelf_errno\\nelf_getdata\\nelf_getscn\\nelf_ndxscn\\nelf_nextscn\\nelf_strptr\\nelf_version\\n```\\n\\ndpdk \u9700\u8981\u652f\u6301\u7684\u63a5\u53e3\uff1a\\n\\n```c\\nrte_eth_add_rx_callback\\nrte_eth_add_tx_callback\\nrte_eth_dev_is_valid_port\\nrte_eth_remove_rx_callback\\nrte_eth_remove_tx_callback\\nrte_log\\nrte_log_register\\nrte_log_set_level\\nrte_mempool_ops_table\\n```\\ndpdk-16.04 \u5df2\u7ecf\u5177\u5907\u7684\u7b26\u53f7\uff1a\\n\\n```c\\nrte_eth_add_rx_callback\\nrte_eth_add_tx_callback\\nrte_eth_dev_is_valid_port\\nrte_eth_remove_rx_callback\\nrte_eth_remove_tx_callback\\nrte_log\\n```\\n\u7ecf\u8fc7\u786e\u8ba4\u9700\u8981\u9002\u914d\u7684\u7b26\u53f7\u5982\u4e0b\uff1a\\n```c\\nrte_log_register\\nrte_mempool_ops_table\\nrte_log_set_level\\n```\\n\\n\u6839\u636e\u4e0a\u8ff0\u4fe1\u606f\uff0c\u8bc4\u4f30\u9002\u914d\u7684\u5de5\u4f5c\u91cf\u5f88\u5c11\uff0c\u98ce\u9669\u53ef\u63a7\u3002\\n\\n## \u79fb\u690d\u7684\u6ce8\u610f\u4e8b\u9879\\n\\n ### 1. librte_bpf Makefile \u6587\u4ef6\u4e2d\u8bbe\u7f6e DEPDIRS \u53d8\u91cf\uff0c\u5c06\u4f9d\u8d56\u7684\u9879\u76ee\u5217\u4e3e\u51fa\u6765\\n\\n   \u4f9d\u8d56 lib/librte_net lib/librte_eal lib/librte_mbuf  lib/librte_ether \u8fd9\u51e0\u4e2a\u9879\u76ee\\n    \\n### 2. dpdk-16.04 \u4e0d\u652f\u6301 rte_log_register \u51fd\u6570\\n\\n dpdk \u9ad8\u7248\u672c\u4f7f\u7528 rte_log_register \u6765\u6ce8\u518c\u4e00\u79cd\u7c7b\u578b\u7684 log \u4e8b\u4ef6\uff0cdpdk-16.04 \u7684 log \u7cfb\u7edf\u6bd4\u8f83\u843d\u540e\uff0c\u8fd9\u90e8\u5206\u903b\u8f91\u9700\u8981\u53bb\u6389\uff0c\u540c\u65f6 RTE_BPF_LOG \u5b8f\u5b9a\u4e49\u4e5f\u9700\u8981\u4fee\u6539\u3002\\n    \\n \u53ef\u4ee5\u5728 **rte_log.h** \u4e2d\u6dfb\u52a0\u4e00\u4e2a **RTE_LOGTYPE_BPF** \u7684\u5b8f\u5b9a\u4e49\u5e76\u4fee\u6539 **RTE_BPF_LOG** \u7684\u5b9e\u73b0\u3002\\n\\n ### 3. dpdk-16.04 \u4e2d\u7528\u4e8e\u6807\u8bc6\u7f51\u5361 id \u7684 port_id \u4e3a uint8_t \u7c7b\u578b\uff0c\u9ad8\u7248\u672c\u4e3a uint16_t \u7c7b\u578b\\n \u53ef\u4ee5\u5199\u4e00\u884c sed \u547d\u4ee4\u4e00\u952e\u66ff\u6362\\n### 4. __rte_experimental \u4e0e __rte_always_inline \u8fd9\u4e24\u4e2a\u5b8f\u5728 dpdk-16.04 \u4e2d\u7f3a\u5c11\\n__rte_always_inline \u7684\u5b9a\u4e49\u53ef\u4ee5\u4ece\u9ad8\u7248\u672c **copy** \u8fc7\u6765\uff0c__rte_experimental  \u4e5f\u53ef\u4ee5\u4ece\u9ad8\u7248\u672c copy \u8fc7\u6765\uff0c\u6700\u597d\u662f\u52a0\u6761\u4ef6\u7f16\u8bd1\u63a7\u5236\u5b9a\u4e49\u4e3a\u7a7a\\n### 5. mk/rte.app.mk \u4e2d\u6dfb\u52a0 rte_bpf \u7684\u94fe\u63a5\u9879\u76ee\u4e0e -lelf \u7684\u6761\u4ef6\u63a7\u5236\u94fe\u63a5\u9879\u76ee\\n   \u793a\u4f8b\u5982\u4e0b\uff1a\\n    \\n  ```c\\n    +_LDLIBS-$(CONFIG_RTE_LIBRTE_BPF)            += -lrte_bpf\\n    \\n    +ifeq ($(CONFIG_RTE_LIBRTE_BPF_ELF),y)\\n    +_LDLIBS-$(CONFIG_RTE_LIBRTE_BPF)            += -lelf\\n    +endif\\n  ```\\n\\n### 6. \u4fee\u6539 config \u76ee\u5f55\u4e2d\u7684\u9ed8\u8ba4 dpdk \u7f16\u8bd1\u914d\u7f6e\u6587\u4ef6\uff0c\u589e\u52a0 CONFIG_RTE_LIBRTE_BPF \u4e0e CONFIG_RTE_LIBRTE_BPF_ELF \u7684\u914d\u7f6e\u9879\u76ee\uff0c\u5e76\u66f4\u65b0 RTE_TARGET \u76ee\u5f55\u4e2d\u7684 .config \u6587\u4ef6\\n## 7. \u79fb\u690d bpf_cmd.c \u4e0e bpf_cmd.h \u5230 testpmd \u4e2d\u65f6\uff0c\u9700\u8981\u6839\u636e\u8c03\u6574 bpf_cmd.c \u6587\u4ef6\u5305\u542b\u7684\u5934\u6587\u4ef6\\n### 8. bpf arm64 jit \u4ee3\u7801\u7ffb\u8bd1\u76f8\u5173\u6e90\u7801\u9700\u8981\u4f9d\u8d56\u4e24\u4e2a\u9ad8\u7248\u672c\u7684\u5b8f\uff0c\u5728 rte_common.h \u4e2d\u6dfb\u52a0 rte_fls_u64 \u4e0e RTE_ALIGN_MUL_CEIL \u5b8f\u5b9a\u4e49\u5373\u53ef\\n\\n## \u79fb\u690d\u540e\u6d4b\u8bd5\\n\u5728\u865a\u62df\u673a\u4e2d\u4f7f\u7528 testpmd \u6d4b\u8bd5\u79fb\u690d\u7684 bpf \u5e93\u3002\\n\\nbpf-load \u52a0\u8f7d\uff1a\\n\\n```c\\ntestpmd> bpf-load  rx 0 0 J ./dummy.o\\nvalidate(0x7ffd0c107740) stats:\\nnb_nodes=2;\\nnb_jcc_nodes=0;\\nnode_color={[WHITE]=0, [GREY]=0,, [BLACK]=2};\\nedge_type={[UNKNOWN]=0, [TREE]=1, [BACK]=0, [CROSS]=0};\\nrte_bpf_elf_load(fname=\\"./dummy.o\\", sname=\\".text\\") successfully creates 0x7f141b176000(jit={.func=0x7f141b14c000,.sz=8});\\n0:Success\\n```\\ndummy.o bpf \u6307\u4ee4\u7801\u6210\u529f\u52a0\u8f7d\u3002\\n\\nperf \u89c2\u6d4b\u51fd\u6570\u8c03\u7528\uff1a\\n\\n```c\\n  52.96%  testpmd   [.] bpf_rx_callback_jit\\n  30.99%  testpmd   [.] pkt_burst_io_forward\\n  15.02%  testpmd   [.] eth_em_recv_pkts\\n   0.95%  testpmd   [.] start_pkt_forward_on_core\\n```\\n\\nbpf_rx_callback_jit \u51fd\u6570\u6b63\u5e38\u8c03\u7528\uff0c\u79fb\u690d\u6210\u529f\u3002"},{"id":"/dpdk/dpdk mempool cache \u673a\u5236\u5206\u6790","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk mempool cache \u673a\u5236\u5206\u6790","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk mempool cache \u673a\u5236\u5206\u6790.md","source":"@site/blog/dpdk/dpdk mempool cache \u673a\u5236\u5206\u6790.md","title":"dpdk/dpdk mempool cache \u673a\u5236\u5206\u6790","description":"\u524d\u8a00","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":11.875,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk ebpf \u5e93\u8de8\u7248\u672c\u79fb\u690d","permalink":"/longyu.github.io/blog/dpdk/dpdk ebpf \u5e93\u8de8\u7248\u672c\u79fb\u690d"},"nextItem":{"title":"dpdk/dpdk \u4e0d\u540c\u7248\u672c\u4e0b\u8f7d\u5730\u5740","permalink":"/longyu.github.io/blog/dpdk/dpdk \u4e0d\u540c\u7248\u672c\u4e0b\u8f7d\u5730\u5740"}},"content":"## \u524d\u8a00\\n\u6c60\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u8bbe\u8ba1\u6280\u672f\uff0c\u5b83\u5c06\u7a0b\u5e8f\u4e2d\u5e38\u7528\u7684\u6838\u5fc3\u8d44\u6e90\u63d0\u524d\u7533\u8bf7\u51fa\u6765\uff0c\u653e\u5230\u4e00\u4e2a\u3010\u6c60\u5b50\u3011\u91cc\u9762\uff0c\u7531\u7a0b\u5e8f\u81ea\u884c\u7ba1\u7406\u8d44\u6e90\u7684\u91ca\u653e\u4e0e\u7533\u8bf7\u3002\\n\\ndpdk \u4f5c\u4e3a\u4e00\u79cd\u9ad8\u6027\u80fd\u6570\u636e\u8f6c\u53d1\u5957\u4ef6\uff0c\u5176\u4e2d\u7684\u5173\u952e\u8d44\u6e90\u662f\u4ee5 **mbuf** \u7ed3\u6784\u63cf\u8ff0\u7684\u62a5\u6587\u3002\u7a0b\u5e8f\u6536\u53d1\u5305\u4e0e\u4e2d\u95f4\u7684\u5904\u7406\u6d89\u53ca\u5230\u3010\u9891\u7e41\u3011\u7684 mbuf \u7533\u8bf7\u3001\u91ca\u653e\u64cd\u4f5c\uff0c\u4e3a\u4e86\u4f18\u5316\u8fd9\u4e00\u8fc7\u7a0b\uff0cdpdk \u5185\u90e8\u4e5f\u4f7f\u7528\u4e86\u6c60\u6280\u672f\u6765\u7ba1\u7406 mbuf\u3002\\n\\ndpdk \u63d0\u4f9b\u4e86\u7c7b\u4f3c\u5185\u5b58\u6c60\u7684\u7ed3\u6784\uff0c\u8fd9\u4e00\u7ed3\u6784\u5728 dpdk \u5185\u90e8\u79f0\u4e3a **mempool**\uff0c\u3010\u4e13\u7528\u3011\u4e8e mbuf \u7684 mempool \u53c8\u79f0\u4e3a **pktmbuf pool**\u3002\\n\\ndpdk \u4e2d mbuf \u4f7f\u7528\u7684\u5e38\u89c1\u6d41\u7a0b\u5982\u4e0b\uff1a\\n1. \u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u521b\u5efa\u4e00\u4e2a pktmbuf pool\uff0c\u6309\u7167\u7279\u5b9a\u7684\u6a21\u5f0f\u521d\u59cb\u5316\u521b\u5efa\u7684\u6bcf\u4e2a mbuf \u7ed3\u6784\\n2. \u7a0b\u5e8f\u8fd0\u884c\u65f6\u4ece pktmbuf pool \u4e2d\u7533\u8bf7 mbuf\uff0c\u91ca\u653e mbuf \u65f6\uff0cmbuf \u91cd\u65b0\u88ab\u6dfb\u52a0\u5230\u5185\u5b58\u6c60\u4e2d\\n\\n## dpdk \u5185\u5b58\u6c60\u7684 cache \u529f\u80fd\\ncache \u662f\u8ba1\u7b97\u673a\u4f53\u7cfb\u4e2d\u7684\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u5b83\u5145\u5f53\u4e86 cpu \u4e0e\u4e3b\u5b58\u4e4b\u95f4\u7684\u7f13\u51b2\uff0c\u5e73\u8861\u4e86 cpu \u8bbf\u95ee\u5bc4\u5b58\u5668\u4e0e\u8bbf\u95ee\u4e3b\u5b58\u4e4b\u95f4\u7684\u5de8\u5927\u5dee\u5f02\uff0c\u5e26\u4e86\u66f4\u597d\u7684\u6027\u80fd\u3002\\n\\ncache \u5728\u8ba1\u7b97\u673a\u5185\u5b58\u67b6\u6784\u4e2d\u7684\u4f4d\u7f6e\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/58157219eb4b4d5fb0fad60c60065f90.png)\u4e0a\u56fe\u6458\u81ea \u300aCSAPP\u300b\u3002\\n\\n\u4e0a\u9762\u7684\u56fe\u5f62\u4e3a\u6b63\u91d1\u5b57\u5854\u578b\uff0c\u5411\u4e0a\u7684\u65b9\u5411\u4e0a\u5b58\u50a8\u7ed3\u6784\u7a7a\u95f4\u66f4\u5c0f\u3001\u8bbf\u95ee\u901f\u5ea6\u66f4\u5feb\u3001\u4ef7\u683c\u66f4\u6602\u8d35\uff0c\u5411\u4e0b\u7684\u65b9\u5411\u5b58\u50a8\u7ed3\u6784\u7a7a\u95f4\u66f4\u5927\u3001\u8bbf\u95ee\u901f\u5ea6\u66f4\u6162\u3001\u4ef7\u683c\u66f4\u4fbf\u5b9c\u3002\\n\\ncache \u7684\u4e00\u822c\u5de5\u4f5c\u6d41\u7a0b\u5982\u4e0b\uff1a\\n\\n1. \u5f53\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8bbf\u95ee\u67d0\u4e00\u5b57\u8282\u5b58\u50a8\u7a7a\u95f4\u65f6\uff0c\u8fd9\u5757\u7a7a\u95f4\u4e0d\u5728 cache \u4e2d\\n2. cpu \u4ee5 cache line \u4e3a\u5927\u5c0f\u52a0\u8f7d\u8fd9\u4e00\u5b58\u50a8\u7a7a\u95f4\u5468\u56f4 64-byte\uff08\u4e00\u4e2a cache line \u7684\u5927\u5c0f\uff09\u957f\u5ea6\u7684\u5185\u5bb9\u5230 cache \u4e2d\\n3. \u6b64\u540e\u7ee7\u7eed\u8bbf\u95ee\u8fd9 64-byte \u5b57\u8282\u4e2d\u7684\u5185\u5bb9\u5c31\u80fd\u591f\u76f4\u63a5\u5728 cache \u4e2d\u627e\u5230\uff0c\u4e0d\u7528\u53bb\u8bbf\u95ee\u4e3b\u5b58\uff0c\u8fdb\u800c\u5e26\u6765\u66f4\u597d\u7684\u6027\u80fd\\n\\n\\ncache \u6280\u672f\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4e00\u79cd\u7f13\u51b2\u6280\u672f\uff0c\u5b83\u5c06\u5c11\u90e8\u5206\u8bbf\u95ee\u975e\u5e38\u9891\u7e41\u7684\u6570\u636e\u7f13\u5b58\u8d77\u6765\uff0c\u5bf9\u8fd9\u4e9b\u6570\u636e\u7684\u8bbf\u95ee\u901a\u8fc7\u7f13\u51b2\u533a\u5b8c\u6210\uff0c\u4e0d\u7528\u8bbf\u95ee\u66f4\u5e95\u5c42\u7684\u7ed3\u6784\u3002\\n\\ndpdk mempool \u4e2d\u5c31\u4f7f\u7528\u4e86\u7f13\u51b2\u6280\u672f\uff0c\u5728 dpdk \u5185\u90e8\u79f0\u4e3a mempool cache\uff0c\u7c7b\u6bd4 cache \u5185\u5b58\u7ed3\u6784\u56fe\uff0c\u753b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 mempool cache \u7ed3\u6784\u56fe\u5982\u4e0b\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/9d7922964ffa4b2ab886dee04a486c43.jpeg#pic_center)\\n\\n\u4e0e cache \u7c7b\u4f3c\uff0cmempool cache \u4e2d\u7684\u5143\u7d20\u66f4\u5c11\uff0c\u8bbf\u95ee\u901f\u5ea6\u66f4\u5feb\uff0c\u5728\u8f6f\u4ef6\u4e0a\u7684\u610f\u4e49\u662f\u6267\u884c\u66f4\u5c11\u7684\u4ee3\u7801\u903b\u8f91\u3002\\n\\ndpdk mempool \u4f7f\u7528\u8fc7\u7a0b\u6709\u4e9b\u7c7b\u4f3c cache \u9884\u53d6\u3002\\n\\n\u6700\u5f00\u59cb\u7684\u65f6\u5019 mempool cache \u4e2d\u5e76**\u6ca1\u6709\u5143\u7d20**\uff0c\u5f53\u4f60\u9700\u8981\u7533\u8bf7 n \u4e2a mem \u5143\u7d20\u7684\u65f6\u5019\u4e0d\u80fd\u5728 cache \u4e2d\u627e\u5230\uff08\u7c7b\u4f3c cache miss\uff09\uff0c\u6b64\u65f6\u4f1a\u8bbf\u95ee\u5916\u90e8\u7684\u5185\u5b58\u6c60\uff0c\u4ece\u5185\u5b58\u6c60\u4e2d\u76f4\u63a5\u51fa\u961f n + cache_size \u5927\u5c0f\u4e2a\u5143\u7d20\uff0c\u52a0\u8f7d\u5230 cache \u4e2d\uff0c\u7136\u540e\u4ece cache \u4e2d\u5206\u914d n \u4e2a\u5143\u7d20\u7ed9\u4e0a\u5c42\u3002\\n\\n\u8fd9\u6837\u5f53\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u65f6\u5019\uff0c\u5f53\u6570\u76ee\u4e0d\u8d85\u8fc7 cache_size \u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece cache \u4e2d\u5206\u914d\uff0c\u800c\u4e0d\u7528\u518d\u4ece\u5916\u90e8\u5185\u5b58\u6c60\u4e2d\u5206\u914d\u3002\\n\\n\u4e0b\u9762\u6211\u4f7f\u7528\u4e00\u4e2a\u5177\u4f53\u7684\u5b9e\u4f8b\uff0c\u63cf\u8ff0\u4e0b dpdk mempool cache \u7684\u5de5\u4f5c\u539f\u7406\u3002\\n\\n## 1. mempool cache \u7ed3\u6784\\nrte_mempool_cache \u7ed3\u6784\u4f53\u63cf\u8ff0\u4e00\u4e2a mempool cache\uff0c\u5176\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/2c81faa1e9c6448ba3c998d4b5d2bade.jpeg#pic_center)\\nsize \u8868\u793a cache \u7684\u5bb9\u91cf\uff0cflushthresh \u8868\u793a\u5c06\u591a\u4f59\u7684\u5143\u7d20 flush \u5230\u5185\u5b58\u6c60\u7684\u95e8\u9650\u503c\uff0clen \u8868\u793a\u5f53\u524d cache \u4e2d\u7684\u5143\u7d20\u4e2a\u6570\uff0cobjs \u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\uff08\u4ee5\u5730\u5740\u7684\u5f62\u5f0f\u50a8\u5b58\uff09\u3002\\n\\nflushthresh \u7684\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff1a\\n\\n```c\\n  #define CACHE_FLUSHTHRESH_MULTIPLIER 1.5\\n  #define CALC_CACHE_FLUSHTHRESH(c)   \\\\\\n     ((typeof(c))((c) * CACHE_FLUSHTHRESH_MULTIPLIER))\\n```\\n\u5176\u6570\u91cf\u4e3a cache \u5927\u5c0f\u7684 **1.5 \u500d**\uff01\\n\\nobjs \u7684\u5927\u5c0f\u4e3a **RTE_MEMPOOL_CACHE_MAX_SIZE * 3**\uff0c\u800c\u5728\u521b\u5efa mempool cache \u65f6\u4f1a\u9650\u5236\u6700\u5927\u4e3a **RTE_MEMPOOL_CACHE_MAX_SIZE**\uff0c**\u591a\u51fa\u6765\u7684\u5b58\u50a8\u7a7a\u95f4\u7528\u4e8e\u4e34\u65f6\u4fdd\u5b58\u8d85\u8fc7 cache size \u6570\u76ee\u7684\u5143\u7d20**\u3002\\n\\n## 2. \u521b\u5efa\u4e00\u4e2a pktmbuf mempool \u5e76\u4e3a\u6bcf\u4e2a\u903b\u8f91\u6838\u914d\u7f6e mempool cache\\ndpdk \u521b\u5efa pktmbuf pool \u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\n\\t#define MEMPOOL_CACHE_SIZE 6\\n\\t#define NB_MBUFS 1024\\n\\t\\n\\t/* create the mbuf pool */\\n\\trte_pktmbuf_pool_create(\\"mbuf_pool\\",\\n\\t\\t\\tNB_MBUFS, MEMPOOL_CACHE_SIZE, 0,\\n\\t\\t\\tRTE_MBUF_DEFAULT_BUF_SIZE, rte_socket_id());\\n```\\n\u8fd9\u91cc\u7ea6\u5b9a cache size \u4e3a 6\uff0cNB_MBUFS \u4e3a 1024\uff0c\u540c\u65f6\u7ea6\u5b9a\u4f7f\u7528\u4e86\u4e09\u4e2a\u903b\u8f91\u6838,\u5176\u5b83\u7684\u53c2\u6570\u4e0d\u5c55\u5f00\u63cf\u8ff0\u3002\\n\\n\u6b64\u51fd\u6570\u8c03\u7528\u540e\uff0cdpdk \u4f1a\u5728\u6bcf\u4e2a\u903b\u8f91\u6838\u4e0a\u521b\u5efa\u5982\u4e0b mempool cache \u7ed3\u6784\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/0ff3be5c27dc4be2bb9d621544a91080.png)\\nsize \u4e3a 6 \u8868\u660e cache \u5bb9\u91cf\u4e3a 6 \uff0clen \u4e3a 0 \u8868\u660e\u5f53\u524d cache \u4e2d\u6ca1\u6709\u5143\u7d20\u3002\u6b64\u65f6\u5185\u5b58\u6c60\u7684\u7ed3\u6784\u5982\u4e0b\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/228445d5b640419fb536242905b6d476.jpeg#pic_center)\\n\u5982\u4e0a\u56fe\u6240\u793a\uff0cpktmbuf pool \u4f1a\u4e3a\u6bcf\u4e2a lcore \u6309\u7167\u4f20\u5165\u7684 cache_size \u521b\u5efa mempool cache\uff0c\u6b64 cache \u7a7a\u95f4\u4e2d\u4fdd\u5b58\u5185\u5b58\u6c60\u4e2d\u5355\u4e2a\u5143\u7d20\u7684\u5730\u5740\uff0c\u521d\u59cb\u5316\u7684\u65f6\u5019 cache \u7684\u5143\u7d20\u4e3a\u7a7a\uff0c\u5185\u5b58\u6c60\u4e2d\u7684\u5143\u7d20\u90fd\u5728 **ring** \u4e2d\u5165\u961f\u3002\\n\\n## 3. \u7b2c\u4e00\u6b21\u4ece mempool \u4e2d\u5206\u914d\u7a7a\u95f4\u65f6 mempool cache \u7684\u53d8\u5316\\n\u7ea6\u5b9a\u7ed1\u5b9a\u5728\u903b\u8f91\u6838 1 \u4e0a\u7684\u7ebf\u7a0b\u8c03\u7528 ```rte_mempool_get_bulk```**\u7533\u8bf7 5 \u4e2a mbuf** \uff0c\u5b9e\u9645\u4ece mempool \u4e2d\u7533\u8bf7\u7684 mbuf \u6570\u91cf\u4e3a cache_size + 5\u2014\u201411 \u4e2a\u3002\\n\\n\u7531\u4e8e **mempool cache** \u4e0e\u6bcf\u4e2a\u903b\u8f91\u6838\u7ed1\u5b9a\uff0c\u9996\u5148\u8981\u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u6240\u5728\u7684\u903b\u8f91\u6838\uff0c\u7136\u540e\u83b7\u53d6\u6b64\u903b\u8f91\u6838\u4e0a\u7684 **mempool cache**\u3002\\n\\n\u7136\u540e\u5224\u65ad\u8981\u7533\u8bf7\u7684 mem \u7684\u6570\u91cf\u5c0f\u4e8e cache \u7684\u7f13\u5b58\u6570\u76ee\uff0c\u5219\u7533\u8bf7 **cache_size - cache_len + n** (6 + 5 - 0 = 11 ) \u4e2a\u6570\u91cf\u7684\u5143\u7d20\u3002\\n\\n\u6b64\u540e\u8c03\u7528\u5e95\u5c42\u7684\u51fa\u961f\u51fd\u6570\uff0c\u4ece\u5185\u5b58\u6c60\u4e2d\u62ff\u51fa 11 \u4e2a\u5143\u7d20\u5b58\u50a8\u5230 cache \u4e2d\uff0c\u5982\u679c\u5931\u8d25\u5219 bypass cache\uff0c\u76f4\u63a5\u4ece\u5185\u5b58\u6c60\u4e2d\u91cd\u65b0\u5206\u914d\u3002\\n\\n\u6210\u529f\u5206\u914d\u65f6\u540e\u5c06 cache_len \u9012\u589e req\uff0811\uff09 \u4e2a\u6570\u76ee\uff0c\u7136\u540e\u4ece cache \u4e2d\u62ff\u8d70 n\uff085\uff09 \u4e2a\u5143\u7d20\uff0c\u5e76\u8c03\u6574 cache_len \u4e3a 6\u3002\\n\\n\u6b64\u65f6\u5f53\u524d lcore \u4e0a\u7684 mempool_cache \u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/65b9606a27c6459c8b479b70c742d016.jpeg#pic_center)\\ncache \u4e2d\u4fdd\u5b58\u4e86 memaddr0 ~memaddr5 \u5171 6 \u4e2a\u5143\u7d20\u3002\\n\\n\u6b64\u65f6 mempool \u4e2d\u7684\u5143\u7d20\u5982\u4e0b\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/5218010a31024d30a8e43674a5a8e293.jpeg#pic_center)\\nmempool \u4e2d\u7684\u524d 11 \u4e2a\u5143\u7d20\u4e3a\u7a7a\u8868\u793a\u88ab\u5206\u914d\u51fa\u53bb\uff0c\u5176\u4e2d 6 \u4e2a\u5143\u7d20\u7f13\u5b58\u5728 cache \u4e2d\uff0c\u5269\u4e0b\u7684 5 \u4e2a\u5143\u7d20\u88ab\u4e0a\u5c42\u7a0b\u5e8f\u5360\u7528\uff0c\u5176\u5b83\u7684\u5143\u7d20\u4ecd\u65e7\u5728 mempool \u4e2d\u3002\\n\\n## 4. \u7b2c\u4e8c\u6b21\u4ece mempool \u4e2d\u5206\u914d mubf \u65f6 mempool cache \u7684\u53d8\u5316\\n\u7ea6\u5b9a\u7ed1\u5b9a\u5728\u903b\u8f91\u6838 1 \u4e0a\u7684\u7ebf\u7a0b\u8c03\u7528 ```rte_mempool_get_bulk```**\u7ee7\u7eed\u7533\u8bf7 5 \u4e2a mbuf** \uff0c\u6b64\u65f6 cache \u4e2d\u6709 6 \u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u4ece cache \u4e2d\u5206\u914d\u3002\\n\\n\u5206\u914d\u540e\u903b\u8f91\u6838 1 \u4e0a\u7684 mempool_cache \u72b6\u6001\u5982\u4e0b\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/0e43273936cc471089bc71fd00305ee7.jpeg#pic_center)\\n\u6b64\u65f6 mempool \u4e2d\u7684\u5143\u7d20\u5982\u4e0b\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/0ebbb5200b8642f3ab9aed97d1a70688.jpeg#pic_center) \u6b64\u65f6\uff0c\u4e0a\u5c42\u5360\u7528\u4e86 10 \u4e2a mbuf\uff0clcore1 mempool  cache \u4e2d\u5b58\u50a8\u4e86 1 \u4e2a mbuf\uff0c\u5269\u4e0b\u7684 1013 \u4e2a mbuf \u90fd\u5728 mempool \u4e2d\u3002\\n\\n## 5. \u4e0a\u5c42\u91ca\u653e mbuf \u5230 mempool \u4e2d\\n\u5f53\u4e0a\u8ff0 mbuf \u4f7f\u7528\u5b8c\u6210\u540e\uff0c\u4e0a\u5c42\u91ca\u653e mbuf\uff0c\u7ea6\u5b9a\u4e0a\u5c42\u5728\u903b**\u8f91\u6838 1 \u4e0a\u8fd0\u884c\u7684\u7ebf\u7a0b\u4e2d\u540c\u65f6\u91ca\u653e\u5360\u7528\u7684 10 \u4e2a mbuf**\u3002\\n\\n\u91ca\u653e\u8fc7\u7a0b\u7684\u903b\u8f91\u5982\u4e0b\uff1a\\n\\n1. \u83b7\u53d6\u7ebf\u7a0b\u6240\u5728\u903b\u8f91\u6838\u4e0a\u7684 mempool cache \u7ed3\u6784\\n2. \u5224\u65ad\u4f20\u5165\u7684\u91ca\u653e\u5143\u7d20\u4e2a\u6570\u662f\u5426\u5927\u4e8e RTE_MEMPOOL_CACHE_MAX_SIZE(512)\uff0c\u5927\u4e8e\u5219\u76f4\u63a5\u653e\u5230 mempool \u4e2d\uff0c\u5c0f\u4e8e\u5219\u653e\u5230 mempool cache \u4e2d\\n3. \u5224\u65ad mempool cache \u4e2d\u5b58\u653e\u7684\u5143\u7d20\u6570\u76ee\u662f\u5426\u8d85\u8fc7 flushthresh \u503c\uff0c\u8d85\u8fc7\u540e\u5219\u5c06\u3010\u8d85\u8fc7 cache_size\u3011 \u7684\u90e8\u5206\u91cd\u65b0\u653e\u5165 mempool \u4e2d\u5e76\u8c03\u6574 cache_len \u7684\u503c\u4e3a cache_size\\n\\n\u5f53\u540c\u65f6\u91ca\u653e 10 \u4e2a mbuf \u65f6\uff0c\u9996\u5148 mbuf \u88ab\u653e\u5230\u903b\u8f91\u6838 1 \u4e0a\u7684 mempool cache \u4e2d\uff0c\u6b64\u65f6\u6b64 cache \u4e2d\u5171\u6709 10+1 \u4e2a\u5143\u7d20\uff0c\u7136\u540e\u5224\u65ad\u5230 11 \u5927\u4e8e flushthresh(9)\uff0c\u5219\u5c06\u591a\u51fa\u6765\u7684 5 \u4e2a\u5143\u7d20\u653e\u56de mempool \u4e2d\u3002\\n\\n\u6267\u884c\u6b64\u64cd\u4f5c\u540e mempool cache \u7684\u72b6\u6001\u5982\u4e0b\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/65b9606a27c6459c8b479b70c742d016.jpeg#pic_center)\\nmempool \u7684\u72b6\u6001\u5982\u4e0b\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/229518eb437f429398e0e91925e19ad8.jpeg#pic_center)\\n## dpdk mempool cache \u4f7f\u7528\u7684\u4e00\u4e9b\u95ee\u9898\\n1. dpdk mempool \u9488\u5bf9\u6bcf\u4e2a lcore \u914d\u7f6e cache\uff0cdpdk lcore \u673a\u5236\u53ef\u4ee5\u53c2\u8003 [dpdk-16.04 eal lcore \u591a\u7ebf\u7a0b\u673a\u5236\u5206\u6790](https://blog.csdn.net/Longyu_wlz/article/details/116398708)\uff0c\u5bf9\u4e8e\u5355\u72ec\u4f7f\u7528 pthread_create \u521b\u5efa\u7684\u7ebf\u7a0b\uff0c\u7531\u4e8e lcore_id \u4e3a -1\uff0c\u4e0d\u80fd\u83b7\u53d6\u5230 mempool cache\uff0c\u5728\u8fd9\u4e9b\u7ebf\u7a0b\u4e2d\u7533\u8bf7\u3001\u91ca\u653e\u5143\u7d20\u5230 mempool \u4e2d\u4e0d\u4f1a\u7ecf\u8fc7 cache\\n2. \u6bcf\u4e00\u4e2a lcore \u4e0a mempool cache \u7684\u4f7f\u7528\u6ca1\u6709\u4efb\u4f55\u4e92\u65a5\u4fdd\u62a4\uff0c\u591a\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u540c\u4e00\u4e2a lcore \u7684\u60c5\u51b5\u4e0b\u5bf9 mempool cache \u7684\u8bbf\u95ee\u4f1a\u5b58\u5728\u4e0d\u4e00\u81f4\u6027\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b\u9700\u8981\u5173\u95ed mempool cache \u529f\u80fd\\n3. \u7533\u8bf7\u5143\u7d20\u7684\u7ebf\u7a0b\u6240\u5728\u7684 lcore \u8981\u4e0e\u91ca\u653e\u5143\u7d20\u7684\u7ebf\u7a0b\u6240\u5728\u7684 lcore **\u4e00\u81f4**\uff0c\u5982\u679c\u4e0d\u4e00\u81f4\u5c31\u53ef\u80fd\u5b58\u5728**\u6cc4\u9732**\u90e8\u5206\u5143\u7d20\u7684\u60c5\u51b5\\n\\t\u5047\u8bbe\u7a0b\u5e8f\u4ec5\u5728 lcore 1 \u4e0a\u7533\u8bf7 mbuf\uff0c\u800c\u91ca\u653e mbuf \u5374\u5728 lcore 2 \u4e0a\uff0c\u8fd9\u6837\u5c31\u4f1a\u6cc4\u9732\u6700\u591a mempool cache \u521d\u59cb\u5316\u914d\u7f6e\u7684\u5bb9\u91cf\u5927\u5c0f\u4e2a mbuf\\n4. \u5728 cache \u4e2d\u5206\u914d\u3001\u91ca\u653e\u7684\u6982\u7387\u8d8a\u5927\u6027\u80fd\u8d8a\u597d\\n## \u603b\u7ed3\\n\u8fd9\u7bc7\u6587\u7ae0\u7684\u80cc\u666f\u662f\u5728\u5b9e\u9645\u7684\u5de5\u4f5c\u573a\u666f\u4e2d\u9047\u5230\u4e86\u4e00\u4e2a dpdk mbuf \u6cc4\u9732\u7684\u95ee\u9898\uff0c\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u5c06 mempool cache \u7684 size \u6539\u4e3a 0 \u540e\u95ee\u9898\u5f97\u5230\u89e3\u51b3\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u4e2a\u8868\u9762\u73b0\u8c61\uff0c\u4e0d\u7531\u5f97\u8ba9\u4eba\u8ffd\u95ee**\u96be\u9053 dpdk mempool cache \u529f\u80fd\u771f\u7684\u6709\u4e25\u91cd\u7684\u7f3a\u9677\u5417\uff1f**\\n\\n\u4e8e\u662f\u5e26\u7740\u8fd9\u4e00\u7591\u95ee\u6df1\u5165\u5206\u6790\u4e86\u4e0b mempool cache \u7684\u5904\u7406\u8fc7\u7a0b\uff0c\u7ed3\u679c\u53d1\u73b0\u786e\u5b9e\u5b58\u5728\u4e00\u4e9b\u9650\u5236\u56e0\u7d20\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u627e\u5230\u6240\u8c13\u7684\u4e25\u91cd\u7f3a\u9677\uff0c\u770b\u6765\u95ee\u9898\u5e76\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\uff0c\u8868\u9762\u7684\u73b0\u8c61\u8bf4\u660e\u4e0d\u4e86\u592a\u591a\u95ee\u9898\u3002\\n\\n\u5199\u7684\u8fc7\u7a0b\u4e2d\u60f3\u5230\u8fd9\u4e2a\u8fc7\u7a0b\u8ddf cache \u7684\u4e00\u4e9b\u539f\u7406\u6709\u4e9b\u76f8\u4f3c\uff0c\u5c31\u7c7b\u6bd4\u7740\u63cf\u8ff0\u4e0b\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u5728\u9010\u6e10\u4ece\u5177\u8c61\u8d70\u5411\u62bd\u8c61\uff0c\u5f53\u80fd\u5b8c\u5168\u7406\u89e3\u62bd\u8c61\u7684\u6a21\u578b\u540e\uff0c\u5c31\u5bb9\u6613\u5728\u4e0d\u540c\u7684\u573a\u666f\u4e2d\u8fc1\u79fb\u4e86\u3002\\n\\n## \u53c2\u8003\u94fe\u63a5\\nhttps://zhuanlan.zhihu.com/p/375537583"},{"id":"/dpdk/dpdk \u4e0d\u540c\u7248\u672c\u4e0b\u8f7d\u5730\u5740","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u4e0d\u540c\u7248\u672c\u4e0b\u8f7d\u5730\u5740","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u4e0d\u540c\u7248\u672c\u4e0b\u8f7d\u5730\u5740.md","source":"@site/blog/dpdk/dpdk \u4e0d\u540c\u7248\u672c\u4e0b\u8f7d\u5730\u5740.md","title":"dpdk/dpdk \u4e0d\u540c\u7248\u672c\u4e0b\u8f7d\u5730\u5740","description":"\u7248\u672c\u56de\u9000\u9700\u8981\uff0c\u6574\u7406\u4e86\u4e0b dpdk \u591a\u4e2a\u7248\u672c\u7684\u4e0b\u8f7d\u94fe\u63a5\u3002","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":0.445,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk mempool cache \u673a\u5236\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk mempool cache \u673a\u5236\u5206\u6790"},"nextItem":{"title":"dpdk \u591a\u8fdb\u7a0b\u6a21\u578b","permalink":"/longyu.github.io/blog/dpdk/dpdk \u591a\u8fdb\u7a0b\u6a21\u578b\u5171\u4eab\u961f\u5217\u6536\u53d1\u5305 virtio \u7f51\u5361\u6bb5\u9519\u8bef\u95ee\u9898"}},"content":"\u7248\u672c\u56de\u9000\u9700\u8981\uff0c\u6574\u7406\u4e86\u4e0b dpdk \u591a\u4e2a\u7248\u672c\u7684\u4e0b\u8f7d\u94fe\u63a5\u3002\\n\\nhttps://static.dpdk.org/rel/dpdk-1.7.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-1.8.0.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.04.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.07.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.07.2.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.07.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.10.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.11.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.2.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.3.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.4.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.5.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.6.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.7.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.8.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.9.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-16.11.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.02.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.02.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.05.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.05.2.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.05.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.08.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.08.2.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.08.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.11.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.11.10.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.11.2.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.11.3.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.11.4.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.11.5.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.11.6.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.11.7.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.11.8.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.11.9.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-17.11.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.02.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.02.2.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.02.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.05.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.05.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.08.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.08.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.11.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.11.2.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.11.3.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.11.4.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.11.5.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.11.6.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.11.7.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.11.8.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.11.9.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-18.11.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-19.02.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-19.05.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-19.08.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-19.08.2.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-19.08.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-19.11.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-19.11.2.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-19.11.3.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-19.11.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-2.0.0.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-2.1.0.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-2.2.0.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-20.02.1.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-20.02.tar.xz\\nhttps://static.dpdk.org/rel/dpdk-20.05.tar.xz"},{"id":"/dpdk/dpdk \u591a\u8fdb\u7a0b\u6a21\u578b\u5171\u4eab\u961f\u5217\u6536\u53d1\u5305 virtio \u7f51\u5361\u6bb5\u9519\u8bef\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u591a\u8fdb\u7a0b\u6a21\u578b\u5171\u4eab\u961f\u5217\u6536\u53d1\u5305 virtio \u7f51\u5361\u6bb5\u9519\u8bef\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u591a\u8fdb\u7a0b\u6a21\u578b\u5171\u4eab\u961f\u5217\u6536\u53d1\u5305 virtio \u7f51\u5361\u6bb5\u9519\u8bef\u95ee\u9898.md","source":"@site/blog/dpdk/dpdk \u591a\u8fdb\u7a0b\u6a21\u578b\u5171\u4eab\u961f\u5217\u6536\u53d1\u5305 virtio \u7f51\u5361\u6bb5\u9519\u8bef\u95ee\u9898.md","title":"dpdk \u591a\u8fdb\u7a0b\u6a21\u578b","description":"dpdk \u539f\u751f\u652f\u6301\u591a\u8fdb\u7a0b\u6a21\u578b\uff0c\u4e3b\u8fdb\u7a0b\u4e3a primary \u8fdb\u7a0b\uff0c\u53ea\u6709\u4e00\u4e2a\uff0c\u4ece\u8fdb\u7a0b\u4e3a secondary \u8fdb\u7a0b\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u3002","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":3.46,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u4e0d\u540c\u7248\u672c\u4e0b\u8f7d\u5730\u5740","permalink":"/longyu.github.io/blog/dpdk/dpdk \u4e0d\u540c\u7248\u672c\u4e0b\u8f7d\u5730\u5740"},"nextItem":{"title":"dpdk/dpdk \u5b98\u65b9 bugzilla \u5bfc\u51fa\u4fe1\u606f","permalink":"/longyu.github.io/blog/dpdk/dpdk \u5b98\u65b9 bugzilla \u5bfc\u51fa\u4fe1\u606f"}},"content":"dpdk \u539f\u751f\u652f\u6301**\u591a\u8fdb\u7a0b\u6a21\u578b**\uff0c\u4e3b\u8fdb\u7a0b\u4e3a **primary** \u8fdb\u7a0b\uff0c**\u53ea\u6709\u4e00\u4e2a**\uff0c\u4ece\u8fdb\u7a0b\u4e3a **secondary** \u8fdb\u7a0b\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a\u3002\\n\\ndpdk \u4e1a\u52a1\u53e3\u7684**\u5171\u4eab\u6570\u636e\u7ed3\u6784**\uff0c\u5982\u6536\u53d1\u5305\u961f\u5217\uff0c\u9a71\u52a8\u5185\u90e8\u7684\u6570\u636e\u7ed3\u6784\u7b49\u7531 **primary** \u8fdb\u7a0b\u521b\u5efa\uff0c**secondary** \u8fdb\u7a0b\u901a\u8fc7\u4e0e **primary** \u8fdb\u7a0b**\u5171\u4eab\u5185\u5b58**\u6765 attach \u5230\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e0a\u3002\\n\\n\u5b9e\u9645\u573a\u666f\u4e2d\uff0cprimary \u8fdb\u7a0b\u5b8c\u6210**\u63a5\u53e3\u914d\u7f6e\u3001\u5e76\u63d0\u4f9b\u63a5\u53e3\u63a7\u5236\u5982\u63a5\u53e3 up\u3001down\u3001\u63a5\u53e3\u72b6\u6001\u68c0\u6d4b\u7b49\u529f\u80fd**\uff0c**secondary \u8fdb\u7a0b\u53ef\u4ee5\u7528\u4e8e dump primary \u8fdb\u7a0b\u521b\u5efa\u7684\u4e00\u4e9b\u5171\u4eab\u6570\u636e\u7ed3\u6784**\uff0c**\u4e5f\u53ef\u4ee5\u7528\u4e8e\u6536\u53d1\u5305\u4ee5\u53ca\u57fa\u4e8e\u62a5\u6587\u7684\u4e00\u4e9b\u5904\u7406\u903b\u8f91**\u3002\\n\\n\u672c\u6587\u4e2d\u63cf\u8ff0\u7684\u95ee\u9898\u4e3a secondary \u8fdb\u7a0b\u5171\u4eab primary \u8fdb\u7a0b\u7684\u6536\u53d1\u961f\u5217\u6536\u53d1\u5305\u65f6\u51fa\u73b0**\u6bb5\u9519\u8bef**\u7684\u95ee\u9898\u3002\\n\\n## \u95ee\u9898\u63cf\u8ff0\\n**\u4e1a\u52a1\u53e3\u7c7b\u578b**\uff1avirtio \u865a\u62df\u7f51\u5361\\n**\u4e1a\u52a1\u6a21\u578b**\uff1a\u591a\u8fdb\u7a0b\u6a21\u578b\uff0csecondary \u8fdb\u7a0b\u7528\u4e8e\u6536\u53d1\u5305\uff0c\u6536\u53d1\u5305\u65f6\u51fa\u73b0\u6bb5\u9519\u8bef\u3002\\n**dpdk \u7248\u672c**\uff1adpdk-16.11\\n\\n**\u6bb5\u9519\u8bef\u4fe1\u606f\uff1a**\\n```cpp\\nThread 6 \\"lcore-slave-0\\" received signal SIGSEGV, Segmentation fault.\\n[Switching to LWP 23400]\\n0x00007ffff69b5a4d in virtio_recv_mergeable_pkts () from libdpdk.so\\n(gdb) bt\\n#0  0x00007ffff69b5a4d in virtio_recv_mergeable_pkts () from libdpdk.so\\\\\\n#1  0x000000000042c291 in dpdk_recv() ()\\n#2  0x00000000004158e6 in process_launch(void*) ()\\n#3  0x00007ffff67ea297 in eal_thread_loop () from libdpdk.so\\n#4  0x00007ffff5c96da4 in start_thread () from /usr/local/lib/libpthread.so.0\\n#5  0x00007ffff59c820d in clone () from /usr/local/lib/libc.so.6\\n```\\n\\n**\u590d\u73b0\u6982\u7387**\uff1a\u5fc5\u73b0\uff01\\n\\n## \u7f16\u8bd1 debug \u7248\u672c\u786e\u5b9a\u6bb5\u9519\u8bef\u7684\u4f4d\u7f6e\\n\u786e\u5b9a\u5728\u5982\u4e0b\u51fd\u6570\u4e2d\u89e6\u53d1\u6bb5\u9519\u8bef\uff1a\\n\\n```cpp\\nstatic inline void\\nvirtqueue_notify(struct virtqueue *vq)\\n{\\n\\t/*\\n\\t * Ensure updated avail->idx is visible to host.\\n\\t * For virtio on IA, the notificaiton is through io port operation\\n\\t * which is a serialization instruction itself.\\n\\t */\\n\\tvq->hw->vtpci_ops->notify_queue(vq->hw, vq);\\n}\\n```\\nsecondary \u8fdb\u7a0b\u4e2d\u63a5\u53e3\u7684 hw \u6570\u636e\u7ed3\u6784\u4ece primary \u8fdb\u7a0b\u5171\u4eab\uff0cprimary \u8fdb\u7a0b\u4e2d\u7684 **vtpci_ops->notify_queue** **\u51fd\u6570\u6307\u9488**\u5728 **secondary** **\u8fdb\u7a0b\u4e2d\u6307\u5411\u4e00\u4e2a\u975e\u6cd5\u4f4d\u7f6e\uff0c\u5bfc\u81f4\u6bb5\u9519\u8bef**\u3002\\n\\n## \u771f\u6b63\u7684\u95ee\u9898\\n\\nprimary \u8fdb\u7a0b\u4e0e secondary \u8fdb\u7a0b\u5171\u4eab\u7684\u961f\u5217\u4fe1\u606f\u4e2d\uff0c**\u5171\u4eab\u7684\u5185\u5bb9\u4e3a\u6570\u636e\u7ed3\u6784**\uff0c**\u4e0d\u5171\u4eab\u4ee3\u7801\u6bb5\u3002**\\n\\nprimary \u8fdb\u7a0b\u4e2d\u51fd\u6570\u6307\u9488\u6307\u5411\u7684\u51fd\u6570\u5728 secondary \u8fdb\u7a0b\u4e2d\u6307\u5411\u5176\u5b83\u975e\u6cd5\u4f4d\u7f6e\uff0c\u5bfc\u81f4\u6bb5\u9519\u8bef\u3002\\n\\n## \u4fee\u590d\u65b9\u6848\\n\\n\u5728\u63a5\u53e3\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u6839\u636e hw->modern \u7684\u503c**\u914d\u7f6e\u67d0\u51fd\u6570\u6307\u9488**\uff0c\u5c06 virtio \u6536\u53d1\u5305\u51fd\u6570\u4e2d\u8c03\u7528\u5230\u7684 **vtpci_ops->notify_queue** \u51fd\u6570\u6307\u9488\u6539\u4e3a**\u8c03\u7528\u7a0b\u5e8f\u672c\u5730\u7684\u51fd\u6570\u6307\u9488**\uff0c\u6b64\u6307\u9488\u6307\u5411\u7684\u4ee3\u7801\u6bb5\u5728\u6bcf\u4e2a\u7a0b\u5e8f\u5185\u90e8\u662f\u5408\u6cd5\u7684\uff0c\u5b83\u7684\u5730\u5740\u4e0d\u901a\u8fc7\u961f\u5217\u5171\u4eab\u83b7\u53d6\u3002\\n\\n\u7b80\u5355\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```c\\n--- virtqueue.h (revision 51811)\\n+++ virtqueue.h (working copy)\\n@@ -330,7 +330,13 @@\\n         * For virtio on IA, the notificaiton is through io port operation\\n         * which is a serialization instruction itself.\\n         */\\n-       vq->hw->vtpci_ops->notify_queue(vq->hw, vq);\\n\\n+       vtpci_notify_queue(vq->hw, vq);\\n }\\n```\\n\\n## \u95ee\u9898\u5f15\u7533\\ndpdk \u591a\u8fdb\u7a0b\u6536\u53d1\u961f\u5217\u5171\u4eab\u5b58\u5728\u9650\u5236\uff0c\u4e0d\u80fd\u5171\u4eab\u4ee3\u7801\u6bb5\uff0c\u53ea\u80fd\u5171\u4eab\u6570\u636e\u533a\u57df\uff0c\u5bf9\u4e8e**\u5171\u4eab\u51fd\u6570\u6307\u9488\u7684\u60c5\u51b5\uff0c\u4f1a\u5728\u5176\u4ed6\u8fdb\u7a0b\u4e2d\u89e6\u53d1\u6bb5\u9519\u8bef**\u3002"},{"id":"/dpdk/dpdk \u5b98\u65b9 bugzilla \u5bfc\u51fa\u4fe1\u606f","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u5b98\u65b9 bugzilla \u5bfc\u51fa\u4fe1\u606f","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u5b98\u65b9 bugzilla \u5bfc\u51fa\u4fe1\u606f.md","source":"@site/blog/dpdk/dpdk \u5b98\u65b9 bugzilla \u5bfc\u51fa\u4fe1\u606f.md","title":"dpdk/dpdk \u5b98\u65b9 bugzilla \u5bfc\u51fa\u4fe1\u606f","description":"","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":41.83,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk \u591a\u8fdb\u7a0b\u6a21\u578b","permalink":"/longyu.github.io/blog/dpdk/dpdk \u591a\u8fdb\u7a0b\u6a21\u578b\u5171\u4eab\u961f\u5217\u6536\u53d1\u5305 virtio \u7f51\u5361\u6bb5\u9519\u8bef\u95ee\u9898"},"nextItem":{"title":"dpdk/dpdk \u5bf9 numa \u7684\u4f7f\u7528\u4e0e\u591a numa \u67b6\u6784\u4e0b\u6027\u80fd\u8c03\u4f18\u7684\u57fa\u7840","permalink":"/longyu.github.io/blog/dpdk/dpdk \u5bf9 numa \u7684\u4f7f\u7528\u4e0e\u591a numa \u67b6\u6784\u4e0b\u6027\u80fd\u8c03\u4f18\u7684\u57fa\u7840"}},"content":"```\\nBug ID\\tProduct\\tComponent\\tAssignee\\tStatus\\tResolution\\tSummary\\tChanged\\n42\\tDPDK\\tcryptodev\\takhil.gupta@puresoftware.com\\tIN_PROGRESS\\t ---\\tCrypto_mrvl error with multiple instances\\t2018/7/15 6:42\\n100\\tDPDK\\ttestpmd\\talejandro.lucero@netronome.com\\tRESOLVED\\tFIXED\\ttestpmd deadlock\\t2018/11/8 12:43\\n122\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tINVALID\\tPerformance results are not correct on Intel I40E environments\\t2020/4/21 15:47\\n193\\tDPDK\\tethdev\\tmk@semihalf.com\\tRESOLVED\\tFIXED\\tsymmetric_mp example application crashes for Amazon ENA in multiple process mode\\t2019/1/26 0:54\\n278\\tDPDK\\tethdev\\t3chas3@gmail.com\\tCONFIRMED\\t ---\\tbond_ethdev_rx_burst multithread access bond\'s different queue will crash\\t2019/5/15 22:59\\n301\\tDPDK\\tethdev\\trasland@nvidia.com\\tRESOLVED\\tINVALID\\tDPDK driver is crashing for Mellanox-5 NIC card\\t2019/7/12 10:20\\n431\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tMissing performance results in Patchwork checks, and possible false positives\\t2020/6/2 13:53\\n442\\tSPP\\tmain\\tyasufum.o@gmail.com\\tCONFIRMED\\t ---\\tdisable ASLR is been highly recommended\\t2020/8/3 6:45\\n443\\tSPP\\tmain\\tyasufum.o@gmail.com\\tCONFIRMED\\t ---\\tspp primary takes up the complete hugepages\\t2020/8/5 7:52\\n82\\tDPDK\\texamples\\thonnappa.nagarahalli@arm.com\\tRESOLVED\\tFIXED\\tFailure to compile l3fwd example on ARM\\t2020/4/26 2:47\\n104\\tDPDK\\tcore\\treshma.pattan@intel.com\\tRESOLVED\\tWORKSFORME\\t\\"dpdk-procinfo\\" received signal SIGSEGV, Segmentation fault.\\t2018/11/2 9:54\\n259\\tDPDK\\ttestpmd\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tDUPLICATE\\tunable to run sample t3 as bpf-load for testpmd\\t2019/7/25 10:54\\n315\\tDPDK\\tvhost/virtio\\tdev@dpdk.org\\tRESOLVED\\tWORKSFORME\\tVirtio crypto does not work . Tried with vhost crypto as backend and dpdk test application (cryptodev_virtio_autotest )\\t2019/11/21 3:09\\n352\\tDPDK\\texamples\\tMuthurajan.Jayakumar@intel.com\\tUNCONFIRMED\\t ---\\tBifurcated Driver X710 for ipv6 flow rule addition not working\\t2019/10/11 19:49\\n425\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tWONTFIX\\tEth Tests - Link Status Checks\\t2020/6/30 22:27\\n426\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tEth Tests - MTU Checks\\t2020/6/30 20:00\\n439\\tDPDK\\tethdev\\tmarko.kovacevic@intel.com\\tUNCONFIRMED\\t ---\\tmemif pmd is allocating from Node 0, even after passing Node 1 in eal args\\t2020/4/10 10:48\\n453\\tSPP\\tctl\\tyasufum.o@gmail.com\\tCONFIRMED\\t ---\\tSPP-CTL does not run with python2.7\\t2020/4/24 4:17\\n500\\tlab\\tIntel Lab\\tzhaoyan.chen@intel.com\\tRESOLVED\\tFIXED\\tCompilation failing in Intel CI since 07/04\\t2020/7/16 15:26\\n505\\tDPDK\\tcore\\tjerinjacobk@gmail.com\\tCONFIRMED\\t ---\\t[dpdk-20.08] meson build 32-bits failed on ubuntu20.04\\t2020/7/10 11:55\\n515\\tDTS\\ttests\\tdts@dpdk.org\\tUNCONFIRMED\\t ---\\tDTS must _not_ modify DPDK sources\\t2020/8/3 9:37\\n375\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tWONTFIX\\trun basic DTS functional tests\\t2020/4/21 16:20\\n427\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tWONTFIX\\tEth Tests - Promiscuous Support\\t2020/6/30 20:01\\n428\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tEth Tests - Hardware Checksum Checks\\t2020/6/30 20:02\\n451\\tlab\\tjob scripts\\tblo@iol.unh.edu\\tCONFIRMED\\t ---\\tSplit dpdk-ci and dpdklab-ci scripts\\t2020/6/30 20:10\\n459\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tPerformance Turning and Results Stability Issues on NXP test environment\\t2020/6/16 14:51\\n468\\tDPDK\\tethdev\\tkevuzaj@gmail.com\\tRESOLVED\\tFIXED\\tbnxt: build fail with gcc10 default fno-common\\t2020/5/6 15:29\\n476\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tRun mingw-w64 compilation on windows\\t2020/6/25 15:12\\n489\\tlab\\tUNH infra\\tblo@iol.unh.edu\\tIN_PROGRESS\\t ---\\tBroadcom 100Gbe NIC Upgrade\\t2020/7/14 22:51\\n149\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd GA Performance results to the database\\t2018/12/10 20:44\\n169\\tlab\\tjob scripts\\tdpdklab@iol.unh.edu\\tRESOLVED\\tWONTFIX\\tCreate GA performance Jenkins Job\\t2020/4/7 15:23\\n2\\tDPDK\\teventdev\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tTest bugs for checking the bug flow, no need any fix\\t2018/7/18 19:47\\n5\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tWONTFIX\\tThis is a Bug, Please Disabled Create new Account\\t2018/7/15 6:50\\n6\\tDPDK\\tother\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tdpdk-pdump leads to ovs-vswitchd crash\\t2020/1/9 8:19\\n14\\tDPDK\\tother\\tbatmanustc@gmail.com\\tCONFIRMED\\t ---\\tKernel Crash bug of ixgbevf kernel module in \\"Intel(R) 10GbE PCI Express Virtual Function Driver Version: 4.0.3 Release: 1\\" and the latest version\\t2018/9/16 0:13\\n15\\tDPDK\\tcore\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tKernel crash after \\"Detected Tx Unit Hang\\" report\\t2018/2/6 14:28\\n56\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tcrash when freeing memory with no mlx5 device attached\\t2018/6/28 21:01\\n88\\tDPDK\\teventdev\\tharry.van.haaren@intel.com\\tCONFIRMED\\t ---\\tDPDK service core getting crashed with eventdev scheduler\\t2018/9/21 11:53\\n89\\tDPDK\\tethdev\\tqi.z.zhang@intel.com\\tRESOLVED\\tWONTFIX\\tXL710 DPDK i40evf : Ping is not working when RSS enabled for IP\\t2018/10/23 3:04\\n97\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\trte_memcpy() moves data incorrectly on Ubuntu 18.04 on Intel Skylake\\t2019/7/11 9:52\\n106\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\trunning dpdk-procinfo or any secondary leading to system memory exhaustion\\t2018/11/13 18:03\\n179\\tDPDK\\tother\\tanatoly.burakov@intel.com\\tRESOLVED\\tFIXED\\tmp_socket is not well handled when secondary process is exited\\t2019/1/10 13:50\\n188\\tDPDK\\ttestpmd\\tyskoh@mellanox.com\\tRESOLVED\\tFIXED\\tsignificant multi-core performance degradation with SR-IOV/macswap in some cases\\t2019/1/14 20:20\\n194\\tDPDK\\tvhost/virtio\\tmaxime.coquelin@redhat.com\\tCONFIRMED\\t ---\\tvhost pmd has become unusable from secondary processes.\\t2019/7/9 13:55\\n199\\tDPDK\\texamples\\tqi.z.zhang@intel.com\\tRESOLVED\\tFIXED\\tAzure DPDK 18.11 Multiple Processes Example Support\\t2019/7/11 10:14\\n240\\tlab\\tjob scripts\\talialnu@mellanox.com\\tRESOLVED\\tFIXED\\tnic_single_core_perf test reports 0\'s for absolute values when it should fail\\t2020/7/9 15:42\\n333\\tDPDK\\tcore\\tthomas@monjalon.net\\tUNCONFIRMED\\t ---\\tPCI devices not found when DPDK is linked as dynamic libraries\\t2019/7/22 9:35\\n363\\tDPDK\\tother\\tmaxime.coquelin@redhat.com\\tRESOLVED\\tFIXED\\tCVE-2019-14818\\t2019/12/2 13:32\\n371\\tDPDK\\ttestpmd\\tasafp@nvidia.com\\tRESOLVED\\tINVALID\\tmlx5: failed to probe the port at testpmd (DPDK 19.11-rc3)\\t2020/6/23 14:18\\n379\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tBuild fail using dpdk-setup.sh in RedHat version 3.10.0-862.rt56.804.el7.x86_64\\t2020/1/3 11:31\\n389\\tDPDK\\tcore\\tscott_wasson@affirmednetworks.com\\tRESOLVED\\tFIXED\\tCrash in librte_kni driver due to noncontiguous pages\\t2020/4/26 2:40\\n405\\tDPDK\\tethdev\\tmatan@mellanox.com\\tCONFIRMED\\t ---\\tmlx5: the guest driver doesn\'t enforce the MTU set by rte_eth_dev_set_mtu()\\t2020/6/23 14:14\\n461\\tDPDK\\tethdev\\tqi.z.zhang@intel.com\\tUNCONFIRMED\\t ---\\ti40evf link status is always down with the Intel XL710 driver\\t2020/5/15 15:50\\n471\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tDUPLICATE\\tfailing to build test from app/test\\t2020/5/13 10:43\\n478\\tDPDK\\tethdev\\tjeanprincemello@gmail.com\\tRESOLVED\\tFIXED\\tUnable to build igb_uio kernel module on Ubuntu 18.04\\t2020/5/15 15:52\\n486\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\ti40e driver has very bad performance when VXLAN TSO is enabled\\t2020/7/30 5:45\\n495\\tlab\\tjob scripts\\tblo@iol.unh.edu\\tRESOLVED\\tFIXED\\tmake builds are getting stuck\\t2020/7/13 15:25\\n518\\tDPDK\\tethdev\\tjia.guo@intel.com\\tUNCONFIRMED\\t ---\\tDisabling a VF with XL710 still sees the traffic and the link is still high\\t2020/8/3 7:51\\n4\\tDPDK\\ttestpmd\\tsalehals@mellanox.com\\tCONFIRMED\\t ---\\tSegfault while running txonly mode with 4 16B SGEs packets\\t2018/8/2 8:04\\n7\\tDPDK\\tethdev\\tmotih@mellanox.com\\tRESOLVED\\tFIXED\\tmlx4 PMD does not receive broadcast packets in promiscuous mode.\\t2020/5/12 15:55\\n9\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tqays\\t2018/6/16 2:28\\n27\\tDPDK\\tcore\\tyskoh@mellanox.com\\tRESOLVED\\tINVALID\\tCan\'t build mlx5 from 18.02 on CentOS Linux release 7.4.1708 with kernel 3.10.0-693.11.1.el7.x86_64\\t2019/10/25 9:28\\n49\\tDPDK\\tmk\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tCompile error kni_net.c unknown field \u2018ndo_change_mtu\u2019\\t2018/5/31 6:53\\n53\\tDPDK\\tcore\\tbruce.richardson@intel.com\\tRESOLVED\\tWONTFIX\\trte abort issue on FreeBSD\\t2018/9/28 14:52\\n54\\tDPDK\\tethdev\\tdev@dpdk.org\\tVERIFIED\\tFIXED\\ti40e port link status no updated for interrupt mode\\t2018/5/31 16:11\\n55\\tDPDK\\tethdev\\tqi.z.zhang@intel.com\\tRESOLVED\\tFIXED\\tI40E PMD driver in vector mode implicitly requires number of RX descriptors in a ring to be power of two\\t2018/11/13 4:24\\n59\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tCannot start secondary processes anyhow on Redhat EL7\\t2018/7/10 0:14\\n60\\tDPDK\\teventdev\\tharry.van.haaren@intel.com\\tRESOLVED\\tFIXED\\trte_event_port_unlink() causes subsequent events to end up in wrong port\\t2018/9/26 16:28\\n63\\tDPDK\\tother\\tmk@semihalf.com\\tRESOLVED\\tFIXED\\tAWS ENA driver does not work with zero rx queues.\\t2018/7/20 9:57\\n65\\tDPDK\\tethdev\\tbeilei.xing@intel.com\\tRESOLVED\\tWORKSFORME\\tTx VLAN offload not working on DPDK 17.11 LTS i40e PMD\\t2018/10/23 3:03\\n77\\tDPDK\\texamples\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\t[Interrupt app]: failed to start interrupt app.\\t2018/7/26 17:21\\n85\\tDPDK\\tcore\\tgeoffrey.lv@gmail.com\\tRESOLVED\\tFIXED\\tpci_scan_one() issue\\t2019/1/24 14:16\\n86\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tFIXED\\tRequested device cannot be used\\t2018/9/14 14:30\\n90\\tDPDK\\tmeson\\tferruh.yigit@intel.com\\tIN_PROGRESS\\t ---\\tDPDK Installation fails on Centos\\t2018/9/20 16:25\\n93\\tDPDK\\tcryptodev\\tpablo.de.lara.guarch@intel.com\\tCONFIRMED\\t ---\\tcrypto vdev create will reset the dev_started flag  when one dpdk process has been up the crypto vdev\\t2019/1/5 16:25\\n101\\tDPDK\\ttestpmd\\talejandro.lucero@netronome.com\\tRESOLVED\\tFIXED\\t18.11-RC1/ Testpmd start fail\\t2018/11/8 12:44\\n110\\tDPDK\\tother\\txueqin.lin@intel.com\\tRESOLVED\\tFIXED\\tsystem hang when device deleted for hotplug function(igb uio)\\t2018/11/28 2:47\\n115\\tDPDK\\tother\\ta.latifi.al@gmail.com\\tCONFIRMED\\t ---\\tpktgen panic when using big sized pcap file\\t2018/12/2 17:25\\n116\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tFIXED\\tSingle-port, multi-core and multi-queue mode (open RSS), when configuring IP, may cause dpdk coredump\\t2019/1/16 10:40\\n191\\tDPDK\\tother\\tmaria.lingemark@ericsson.com\\tRESOLVED\\tFIXED\\tSometimes timers (rte_timer) do not expire\\t2019/1/21 12:41\\n196\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tWONTFIX\\tIXGBE Driver Tx Packet/Bytes counters Sent returns Zero even though link-partner received valid packets\\t2019/6/3 7:30\\n204\\tDPDK\\tcore\\tbeilei.xing@intel.com\\tCONFIRMED\\t ---\\tCrash on Vmware esxi host when dpdk guest reboots.\\t2019/3/16 14:51\\n210\\tlab\\tjob scripts\\tferruh.yigit@intel.com\\tCONFIRMED\\t ---\\tPatches with dependency fails to apply\\t2020/7/1 13:36\\n216\\tDPDK\\texamples\\tgain1974@gmail.com\\tRESOLVED\\tFIXED\\trte_eth_rx_burst   nb_pkts   issue\\t2019/3/16 14:47\\n236\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tRESOLVED\\tINVALID\\tprimary-secondary model is failing\\t2019/4/2 12:42\\n241\\tDPDK\\tvhost/virtio\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tQEMU (vIOMMU+virtio) crashes when DPDK exits\\t2020/3/16 7:07\\n248\\tDPDK\\tethdev\\tp.oltarzewski@gmail.com\\tCONFIRMED\\t ---\\tBonding PMD: Invalid array dimension in TX burst for 802.3ad mode with fast queue leads to SEGFAULT\\t2019/4/15 12:00\\n256\\tDPDK\\tethdev\\t3chas3@gmail.com\\tRESOLVED\\tFIXED\\tTransmit or receive packets use the bond MAC is failed when switch backup port to active\\t2020/7/23 22:30\\n265\\tDPDK\\tethdev\\tqi.z.zhang@intel.com\\tRESOLVED\\tFIXED\\ti40e flow flush & add new flow will occur segfault\\t2020/4/26 2:45\\n280\\tDPDK\\tdoc\\tbeilei.xing@intel.com\\tCONFIRMED\\t ---\\tX710 PF Reset Issue with DPDK VF Driver\\t2019/7/15 21:02\\n284\\tDPDK\\tother\\tferruh.yigit@intel.com\\tCONFIRMED\\t ---\\tSecondary not able to Rx/TX after primary dies in symmetric multiprocess\\t2019/8/14 16:36\\n285\\tDPDK\\tother\\tjananeex.m.parthasarathy@intel.com\\tRESOLVED\\tFIXED\\trte_table unit test crashes in ipv6\\t2019/7/15 20:58\\n296\\tDPDK\\tethdev\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tmax_rx_pkt_len issues with i40e dpdk SRIOV driver net_i40e_vf.\\t2019/9/12 7:07\\n297\\tDPDK\\tethdev\\tlavaraj@gmail.com\\tCONFIRMED\\t ---\\tmax_rx_pkt_len issues with i40e dpdk SRIOV driver net_i40e_vf.\\t2019/7/15 20:51\\n304\\tDPDK\\tethdev\\tullas-d.bhat@hpe.com\\tRESOLVED\\tINVALID\\t[bnx2x_init] Initialization failed, stack notified driver is NOT running!\\t2019/8/6 19:55\\n312\\tDPDK\\tethdev\\tbeilei.xing@intel.com\\tRESOLVED\\tFIXED\\ti40evf could not receive mulicast packets\\t2020/4/26 2:45\\n319\\tDPDK\\tethdev\\tbeilei.xing@intel.com\\tUNCONFIRMED\\t ---\\tdpdk-i40e could not receive vlan packet whose ip_len was bigger than 1496\\t2019/11/7 7:42\\n355\\tDPDK\\tmeson\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tMeson build failure\\t2019/12/2 18:16\\n366\\tDPDK\\tethdev\\tajit.khaparde@broadcom.com\\tCONFIRMED\\t ---\\ti40e PMD returns 0 for secondary invoking rx_burst on queue 0, when Primary dies\\t2020/1/27 5:40\\n369\\tDPDK\\texamples\\tpbhagavatula@marvell.com\\tUNCONFIRMED\\t ---\\tl2fwd-event fails for service core mask\\t2019/11/26 20:45\\n372\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tUNCONFIRMED\\t ---\\tixgbevf: cannot probe or start port if PF link is unstable\\t2019/11/27 20:34\\n378\\tDPDK\\tcore\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\ttakes more than 500ms to allocate memory from numa node1\\t2020/1/2 4:43\\n393\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tUNCONFIRMED\\t ---\\trte_zmalloc_socket does not zero memory\\t2020/2/20 12:46\\n397\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tWORKSFORME\\tsupport-multi-driver=1 does not work in i40e PMD\\t2020/3/23 12:48\\n418\\tDPDK\\tethdev\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tfailsafe/tap PMD drops first UDP packet\\t2020/3/11 2:29\\n433\\tSPP\\tmain\\tyasufum.o@gmail.com\\tCONFIRMED\\t ---\\tsuggested URL for DPDK-Suricata is limited or not working\\t2020/8/5 6:29\\n441\\tSPP\\tmain\\tyasufum.o@gmail.com\\tCONFIRMED\\t ---\\tlink is broken\\t2020/4/8 11:10\\n447\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tIN_PROGRESS\\t ---\\tixgbe: ixgbe_dev_link_update_share() leaks memory and memory mappings due to not cleaning up pthreads\\t2020/4/14 12:33\\n449\\tDPDK\\tethdev\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tFortville X710 FDIR with flow APIs broken\\t2020/5/15 10:24\\n454\\tSPP\\tctl\\tyasufum.o@gmail.com\\tUNCONFIRMED\\t ---\\tDocumentation does callout the dependency for python modules in SPP-CTL\\t2020/4/23 10:28\\n455\\tSPP\\tctl\\tyasufum.o@gmail.com\\tUNCONFIRMED\\t ---\\tspp does not run with python3\\t2020/4/23 10:32\\n457\\tSPP\\tmain\\tyasufum.o@gmail.com\\tUNCONFIRMED\\t ---\\trte_mempool_create is based on lcore socketid and not the port socketid\\t2020/4/23 7:04\\n463\\tDPDK\\ttestpmd\\tsuanmingm@mellanox.com\\tRESOLVED\\tFIXED\\tIn Mellanox MLX5 driver, NULL pointer access in mlx5_ipool_malloc()\\t2020/5/13 4:50\\n472\\tDPDK\\tother\\tdavid.marchand@redhat.com\\tUNCONFIRMED\\t ---\\tfailure in unit/self test\\t2020/5/13 19:31\\n473\\tDPDK\\tother\\tthomas@monjalon.net\\tUNCONFIRMED\\t ---\\tvariance in test case fail for static and shared build binaries\\t2020/5/19 13:32\\n474\\tDPDK\\tother\\tthomas@monjalon.net\\tUNCONFIRMED\\t ---\\tauto-test report crash while manual test skips\\t2020/5/18 17:20\\n484\\tDPDK\\tother\\thrvoje.habjanic@zg.ht.hr\\tUNCONFIRMED\\t ---\\trte_sched_subport_free function does not free subport memory\\t2020/5/26 20:12\\n485\\tDPDK\\tother\\thrvoje.habjanic@zg.ht.hr\\tUNCONFIRMED\\t ---\\tpipe_profile_check function have wrong argument size\\t2020/6/15 19:20\\n488\\tDPDK\\tother\\tmatan@mellanox.com\\tCONFIRMED\\t ---\\tmlx4: cannot reattach devices\\t2020/6/23 14:03\\n499\\tDPDK\\tmeson\\tferruh.yigit@intel.com\\tRESOLVED\\tFIXED\\tfailed to start example after use meson/ninja build 32-bit app on x86 system\\t2020/8/19 3:11\\n501\\tDPDK\\tethdev\\tjia.guo@intel.com\\tRESOLVED\\tFIXED\\tigb: segfault in rte_eth_tx_done_cleanup() when using advanced descriptors\\t2020/8/4 18:43\\n502\\tlab\\tUNH infra\\tblo@iol.unh.edu\\tRESOLVED\\tFIXED\\tFalse negative for Windows compilation\\t2020/7/6 20:17\\n503\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tcan not detected device when use meson build dpdk\\t2020/7/13 7:25\\n517\\tDPDK\\ttestpmd\\tjia.guo@intel.com\\tUNCONFIRMED\\t ---\\tTraffic Class Assignment\\t2020/8/3 10:07\\n1\\tDPDK\\tother\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tGreen goal: power efficiency with all hardwares\\t2018/2/7 15:38\\n3\\tDPDK\\tdoc\\tqian.q.xu@intel.com\\tRESOLVED\\tINVALID\\tTest bug\\t2017/9/14 11:46\\n8\\tDPDK\\tcore\\tferruh.yigit@intel.com\\tIN_PROGRESS\\t ---\\tDebug/error output should go to stderr\\t2018/12/20 20:12\\n10\\tDPDK\\ttestpmd\\tnounoussma@hotmail.com\\tCONFIRMED\\t ---\\t[Testpmd] NUMA, speed issue\\t2018/8/29 20:14\\n12\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tRequest for submit in Kernel Upstream\\t2020/5/10 18:25\\n13\\tDPDK\\tethdev\\tbeilei.xing@intel.com\\tIN_PROGRESS\\t ---\\tCannot initialize Intel XL710 40G interface\\t2018/12/4 14:47\\n16\\tDPDK\\tdoc\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tHacked by Turkish Hacker SpawN #siberordu.biz\\t2018/2/25 19:43\\n17\\tDPDK\\tethdev\\tbeilei.xing@intel.com\\tRESOLVED\\tINVALID\\tvhost example VLAN offloading not working on igb tx\\t2018/11/30 14:35\\n20\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tRESOLVED\\tFIXED\\tUndefined behavior caused by NUMA function in eal_memory\\t2018/10/25 14:57\\n21\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tWONTFIX\\tIxgbe driver changes FCTRL without first disabling RXCTRL.RXEN\\t2018/10/18 9:40\\n22\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tWONTFIX\\tIxgbe driver sets RDRXCTL with the wrong RSCACKC and FCOE_WRFIX values\\t2018/10/18 9:39\\n25\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tCONFIRMED\\t ---\\tIxgbe driver sets TDH register after TXDCTL.ENABLE is set\\t2018/11/16 8:34\\n26\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tCONFIRMED\\t ---\\tIxgbe driver does not ensure FWSM firmware mode is valid before using it\\t2019/10/3 5:52\\n28\\tDPDK\\teventdev\\tpbhagavatula@caviumnetworks.com\\tRESOLVED\\tFIXED\\tevent/octeontx: snprintf() overflow\\t2018/4/25 16:53\\n29\\tDPDK\\tethdev\\tkeith.wiles@intel.com\\tCONFIRMED\\t ---\\tpktgen hangs when it tries to send packets through libvirt driver, works for all other drivers\\t2019/6/26 15:43\\n31\\tDPDK\\tcore\\tbruce.richardson@intel.com\\tRESOLVED\\tFIXED\\tDoes not compile with musl libc: lib/librte_eal/linuxapp/eal/eal_memory.c\\t2020/4/26 2:46\\n32\\tDPDK\\tmk\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tDoes not cross-compile: buildtools/check-experimental-syms.sh assumes `objdump`\\t2020/3/11 10:47\\n33\\tDPDK\\tcore\\tbruce.richardson@intel.com\\tRESOLVED\\tFIXED\\tDoes not compile with musl libc: lib/librte_eal/linuxapp/eal/eal_hugepage_info.c\\t2020/4/26 2:47\\n34\\tDPDK\\tcore\\tbruce.richardson@intel.com\\tRESOLVED\\tFIXED\\tDoes not compile with musl libc: lib/librte_eal/common/eal_common_fbarray.c\\t2020/4/26 2:47\\n35\\tDPDK\\tethdev\\tferruh.yigit@intel.com\\tCONFIRMED\\t ---\\tDoes not compile with musl libc: drivers/bus/pci/linux/pci_uio.c\\t2019/6/26 10:20\\n37\\tDPDK\\tethdev\\tshreyansh.jain@nxp.com\\tCONFIRMED\\t ---\\tDPAA / FSLMC do not compile on the musl libc\\t2018/5/4 10:04\\n38\\tDPDK\\tethdev\\trahul.lakkireddy@chelsio.com\\tCONFIRMED\\t ---\\tDoes not compile with musl libc: drivers/net/cxgbe/base/common.h\\t2018/7/15 6:33\\n39\\tDPDK\\tethdev\\thyonkim@cisco.com\\tRESOLVED\\tFIXED\\tdpdk/drivers/net/enic/base/vnic_devcmd.h does not compile on musl libc because of type `u_int32_t`\\t2018/10/2 10:34\\n40\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tdrivers/net/nfp/nfpcore/nfp-common/nfp_platform.h: does not compile with musl because it uses an internal glibc header\\t2019/10/3 5:52\\n41\\tDPDK\\ttestpmd\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\ttestpmd failed with net_failsafe error\\t2018/5/10 19:16\\n43\\tDPDK\\tethdev\\tdev@dpdk.org\\tCONFIRMED\\t ---\\t\\"rte_eth_tx_queue_setup\\" will be failed if argument \\"tx_conf\\" not specified\\t2020/3/3 13:16\\n44\\tDPDK\\texamples\\tpablo.de.lara.guarch@intel.com\\tRESOLVED\\tFIXED\\texamples/l2fwd-crypto : Wrong data length in case of AEAD ciphers\\t2018/7/17 10:14\\n45\\tDPDK\\tother\\tthomas@monjalon.net\\tRESOLVED\\tWONTFIX\\tTest compilation fails at 2nd iteration after running resource_autotest\\t2020/6/18 22:37\\n47\\tDPDK\\tother\\treshma.pattan@intel.com\\tRESOLVED\\tWONTFIX\\tMempool performance autotest: Fail [Timeout]\\t2018/9/14 12:26\\n48\\tDPDK\\tvhost/virtio\\tmaxime.coquelin@redhat.com\\tCONFIRMED\\t ---\\tUnexpected performance regression since CVE-2018-1059 fix with vector path\\t2018/9/12 10:48\\n50\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tRESOLVED\\tFIXED\\tSecondary process launch is unreliable\\t2018/11/20 20:29\\n51\\tDPDK\\tother\\tthomas@monjalon.net\\tCONFIRMED\\t ---\\tmake coverage aborts with core dump\\t2018/7/19 21:33\\n57\\tDPDK\\tethdev\\tpablo.de.lara.guarch@intel.com\\tRESOLVED\\tFIXED\\tixgbe crash on detach when no VF is created\\t2018/7/10 0:22\\n58\\tDPDK\\tcore\\tferruh.yigit@intel.com\\tRESOLVED\\tFIXED\\tcppcheck static analyzer warnings\\t2020/4/26 2:46\\n61\\tDPDK\\tcore\\terik.g.carrillo@intel.com\\tRESOLVED\\tFIXED\\tbuild fails when shared libs enabled and optimization turned off\\t2018/8/29 20:14\\n62\\tDPDK\\tother\\tshreyansh.jain@nxp.com\\tRESOLVED\\tWONTFIX\\tRawdev autotest fails\\t2018/7/17 13:49\\n64\\tDPDK\\ttestpmd\\tpablo.de.lara.guarch@intel.com\\tIN_PROGRESS\\t ---\\tBound_promisc_opt:After the confounding mode is turned off, the port can receive data.\\t2018/10/1 11:37\\n67\\tDPDK\\texamples\\tbruce.richardson@intel.com\\tRESOLVED\\tINVALID\\tmulti_process/l2fwd_fork failed to compile\\t2018/11/29 15:39\\n68\\tDPDK\\tvhost/virtio\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tvirt\\t2018/7/19 21:31\\n69\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tFIXED\\tIntel x550 SFP+ fails to update link state\\t2020/4/26 2:47\\n70\\tDPDK\\tethdev\\tmeijuanx.zhao@intel.com\\tRESOLVED\\tFIXED\\tfreebsd build dpdk18.08-rc1 issue\\t2018/8/3 10:10\\n71\\tDPDK\\tethdev\\tpablo.de.lara.guarch@intel.com\\tRESOLVED\\tFIXED\\tsuse build dpdk 18.08-rc1 issue\\t2020/4/26 2:47\\n72\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tUnable to install dpdk on arm64\\t2018/7/18 10:00\\n73\\tDPDK\\tother\\tjohn.mcnamara@intel.com\\tCONFIRMED\\t ---\\tSecondary processes can not set up ports: document limitation and return error in appropriate functions\\t2018/10/8 15:13\\n74\\tDPDK\\tethdev\\tbeilei.xing@intel.com\\tCONFIRMED\\t ---\\tPMD: i40e_dcb_init_configure(): default dcb config fails. err = -53, aq_err = 3\\t2018/10/22 9:37\\n75\\tDPDK\\tcore\\tferruh.yigit@intel.com\\tRESOLVED\\tWONTFIX\\t16.11 compile fail on RHEL 6.9\\t2019/6/26 10:04\\n76\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tRESOLVED\\tFIXED\\t2MB hugepages with IOMMU and passthrough not working\\t2018/11/16 15:19\\n79\\tDPDK\\tother\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tFIXED\\tACL doesn\'t match a rule with a first `TYPE_MASK` field with low mask when there\'s a large number of rules\\t2018/9/26 16:57\\n81\\tDPDK\\tvhost/virtio\\tmaxime.coquelin@redhat.com\\tRESOLVED\\tFIXED\\tUse of rte_memseg_contig_walk in vhost_kernel.c causes deadlock\\t2020/4/26 2:47\\n83\\tDPDK\\tethdev\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tFor RSS flow actions, e1000_ethdev.h uses IGB_MAX_RX_QUEUE_NUM instead of IGB_MAX_RX_QUEUE_NUM_82576\\t2018/9/30 3:08\\n92\\tDPDK\\tethdev\\tqi.z.zhang@intel.com\\tCONFIRMED\\t ---\\ti40e RX capabilities include scatter/gather on VF, but not on PF\\t2018/9/30 3:04\\n94\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tlibrte_acl  library: First field in the rule definition can not be other types\\t2018/9/30 8:16\\n95\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tRESOLVED\\tFIXED\\teal/memory: testpmd failed to start with --socket-mem >  16384 with 2MB huge pages and with memory hotplug\\t2019/4/15 17:20\\n96\\tDPDK\\tethdev\\tviacheslavo@mellanox.com\\tRESOLVED\\tFIXED\\tmlx5: TX error for multi-seg packet where first segment has 14~18 bytes\\t2020/5/12 15:52\\n98\\tDPDK\\tcryptodev\\tdeclan.doherty@intel.com\\tRESOLVED\\tFIXED\\twrongly assignment of digest_len\\t2019/1/9 13:03\\n99\\tDPDK\\tethdev\\tdev@dpdk.org\\tCONFIRMED\\t ---\\taxgbe driver does not support 1G Copper 1000BASE-T SFPs (Unsupported AN_CL37)\\t2018/10/31 6:44\\n102\\tDPDK\\tcore\\talejandro.lucero@netronome.com\\tRESOLVED\\tFIXED\\tIOVA mode causes deadlock\\t2018/11/8 12:45\\n103\\tDPDK\\ttestpmd\\talejandro.lucero@netronome.com\\tRESOLVED\\tFIXED\\tTestpmd with ixgbe device assignment doesn\'t work\\t2018/11/8 12:46\\n105\\tDPDK\\tcryptodev\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tCannot create crypto_openssl after vdev_uninit\\t2019/9/12 18:42\\n107\\tDPDK\\tethdev\\trasland@nvidia.com\\tRESOLVED\\tINVALID\\tCannot set rte_flow QUEUE action for VF representor\\t2019/10/3 5:52\\n108\\tDPDK\\tethdev\\tanatoly.burakov@intel.com\\tRESOLVED\\tFIXED\\tThere should be a NULL pointer check about the internal_config.hugefile_prefix\\t2019/2/22 17:15\\n111\\tDPDK\\tethdev\\tgaetan.rivet@6wind.com\\tUNCONFIRMED\\t ---\\tThere maybe some risks to printf  the addr of the map page\\t2018/12/5 8:17\\n112\\tDPDK\\tother\\tanandashish92@gmail.com\\tCONFIRMED\\t ---\\tdpdk-18.05 not allowing to create bond interface with name \\"lan_bond\\"\\t2019/1/17 22:21\\n113\\tDPDK\\tother\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tpktgen -s option send pcap traffic once\\t2018/12/1 7:16\\n117\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tRESOLVED\\tINVALID\\tin case of malloc_elem_alloc should we increment alloc_count (heap->alloc_count++)?\\t2018/12/5 17:20\\n118\\tDPDK\\tdoc\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tconflicting information for \'Running DPDK Applications Without Root Privileges\'\\t2018/12/10 11:35\\n119\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tI210 Gigabit is returning with -22 when vfio-pci is used for bind\\t2018/12/6 17:07\\n120\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tWONTFIX\\tsecondary fails failure without option \'--legacy-mem\'\\t2018/12/6 15:43\\n121\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tCONFIRMED\\t ---\\tIn ixgbe_tx_free_bufs function the variable free on stack is used before initialization\\t2019/1/9 16:07\\n139\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tWhen measurements throws a 404, the dashboard throws a 500\\t2018/12/10 19:52\\n142\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tWONTFIX\\tCreating a user requires restarting sssd on leaf node for them to log in\\t2019/11/19 21:46\\n162\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tPrivate files can\'t be downloaded via CLI easily\\t2018/12/10 20:19\\n164\\tDPDK\\tethdev\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tconfigure rx queue for JUMBO frame returns warning as offload is 0x0, but eth_pcap_rx_jumbo is present\\t2018/12/11 17:21\\n165\\tDPDK\\tother\\tarnon@qwilt.com\\tRESOLVED\\tFIXED\\tcheckpatches.sh doesn\'t detect rte_exit() / rte_panic() instances\\t2020/4/26 2:46\\n166\\tlab\\tdashboard\\tdpdklab@iol.unh.edu\\tRESOLVED\\tFIXED\\tpatch may fail to apply when it targets different sub-tree other than main tree\\t2019/11/19 17:32\\n174\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tRESOLVED\\tFIXED\\trte_vfio_dma_map issue in secondary process\\t2019/2/22 17:19\\n175\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tDPDK on Azure using `intel-go/nff-go` fails using `hv_netvsc` driver\\t2020/5/12 15:54\\n176\\tDPDK\\tcore\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tsecondary process cannot execute  iommu\\t2018/12/28 6:40\\n177\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tbinding i40e with uio_pci_generic fails for DPDK 19.02.0-rc1\\t2019/1/10 3:41\\n178\\tDPDK\\texamples\\tdev@dpdk.org\\tRESOLVED\\tWONTFIX\\tl2fwd application does not work with option \'-q\'\\t2019/5/6 6:59\\n182\\tDPDK\\tdoc\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tmake doc-guides-pdf fails with error \'make[3]: latexmk: Command not found\'\\t2019/5/6 6:32\\n183\\tDPDK\\tother\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tProblem using cloned rte_mbuf buffers with KNI interface\\t2019/9/10 21:24\\n184\\tlab\\tjob scripts\\tblo@iol.unh.edu\\tCONFIRMED\\t ---\\tUpdate report emails for GA performance runs\\t2020/6/30 20:25\\n185\\tDPDK\\tcore\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tPVP zero-loss performance degradation without --legacy-mem\\t2019/1/10 12:27\\n186\\tDPDK\\tcore\\tmaxime.coquelin@redhat.com\\tCONFIRMED\\t ---\\tHuge testpmd startup time without --legacy-mem option\\t2019/3/11 17:33\\n187\\tDPDK\\tcore\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tMerge linux and bsd eal_thread.c which are same\\t2020/6/10 8:19\\n189\\tDPDK\\teventdev\\tjerinjacobk@gmail.com\\tCONFIRMED\\t ---\\tRTE Timer Adapter Use After Free\\t2019/7/31 6:10\\n190\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tWONTFIX\\tInvestigate some apply errors with unclear root cause\\t2019/1/16 20:20\\n192\\tDPDK\\tmk\\tthomas@monjalon.net\\tCONFIRMED\\t ---\\tconstruct function miss for  build with static library\\t2019/1/18 3:28\\n195\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\t\\"Applied on\\" commit id and \\"baseline\\" commit id issues\\t2019/2/5 19:00\\n197\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tcan we display deeper history\\t2019/2/11 9:48\\n198\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tsent patchwork reports on build failures too\\t2019/1/30 15:04\\n200\\tdpdk-burst-replay\\tdoc\\tjonathan.ribas@fraudbuster.mobi\\tRESOLVED\\tFIXED\\tmismatch in documentation and makefile\\t2019/2/1 9:35\\n201\\tdpdk-burst-replay\\tapp\\tvipin.varghese@intel.com\\tRESOLVED\\tINVALID\\tmain.c uses \'struct pcap_ctx\'\\t2019/4/1 6:59\\n202\\tdpdk-burst-replay\\tapp\\tjonathan.ribas@fraudbuster.mobi\\tRESOLVED\\tFIXED\\tin function check_needed_memory for dpdk->mbuf_sz does it get aligned?\\t2019/5/3 17:10\\n203\\tdpdk-burst-replay\\tapp\\tjonathan.ribas@fraudbuster.mobi\\tRESOLVED\\tFIXED\\tif user passes numa id, why is pcicards under the same not populated\\t2019/5/3 17:21\\n205\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tmake test fails with DPDK 19.02 (KeyError: \'Command\')\\t2019/3/9 12:32\\n206\\tlab\\tUNH infra\\tdpdklab@iol.unh.edu\\tRESOLVED\\tFIXED\\tSet up systems for OVS ovs_perf testing at UNH\\t2019/11/19 20:10\\n207\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tWORKSFORME\\tJS homepage TypeError with Chrome\\t2019/11/19 17:28\\n208\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tSome \u201cNot Applicable\u201d items looks wrong\\t2019/2/15 18:34\\n209\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tMain tree is not up to date when patch sent, which cause merge error\\t2019/2/12 18:10\\n211\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tINVALID\\tInvalid link for \\"applied on\\" sha1\\t2019/2/13 17:13\\n212\\tlab\\tjob scripts\\tferruh.yigit@intel.com\\tRESOLVED\\tFIXED\\tadd a new testcase: autotest, which runs a defined set of unit tests\\t2020/7/1 20:06\\n213\\tDPDK\\tcore\\tferruh.yigit@intel.com\\tRESOLVED\\tWONTFIX\\tFix the problem of KNI device (Net Stack kthread) keeps dropping packets (stats.tx_dropped++) and TX thread logs \\"KNI: Out of memory\\"\\t2019/4/25 19:34\\n214\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tRESOLVED\\tINVALID\\tThere should be a NULL pointer check about the  malloc_elem_alloc\\t2019/2/25 12:57\\n215\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tIPC socket of 2 primary processes may conflict\\t2019/2/26 17:19\\n217\\tDPDK\\tethdev\\tdebugnetiq1@yahoo.ca\\tRESOLVED\\tINVALID\\tDPDK-19.02 will not build when MLX4/MLX5 is enabled. In comparison DPDK 18-11 builds fine\\t2019/7/11 10:16\\n218\\tDPDK\\tethdev\\tdebugnetiq1@yahoo.ca\\tRESOLVED\\tFIXED\\tDPDK 18.02 (stable) won\'t compile when MLX4/MLX5 support is enabled\\t2019/7/11 10:21\\n219\\tDPDK\\tethdev\\tdebugnetiq1@yahoo.ca\\tRESOLVED\\tINVALID\\tDPDK 18.11 builds with MLX4/MLX5 support but testpmd won\'t recognize the device\\t2019/7/11 9:48\\n221\\tDPDK\\texamples\\tferruh.yigit@intel.com\\tRESOLVED\\tWONTFIX\\tHow to classifier ipv6 packets with  flow classification library\\t2019/4/8 15:31\\n222\\tDPDK\\tother\\treshma.pattan@intel.com\\tRESOLVED\\tFIXED\\tWhen setting CONFIG_RTE_LIBRTE_PDUMP=n, build fails with \\"undefined reference to `test_pdump\'\\"\\t2020/2/10 11:38\\n223\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tUsing wrong/old commit id of the tree to apply the patch\\t2019/11/19 18:07\\n224\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tWONTFIX\\tPossibly wrong regression report\\t2020/4/21 16:01\\n225\\tDPDK\\ttestpmd\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tethdev API for firmware version request is not tested\\t2020/4/26 2:18\\n227\\tDPDK\\tethdev\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tFlow control mode on mac Intel Corporation I350 Gigabit Network Connection (rev 01) issues\\t2019/3/17 12:24\\n229\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tDUPLICATE\\tlab scripts should be upstreamed to dpdk-ci repository\\t2020/4/21 15:57\\n230\\tlab\\tjob scripts\\tci@dpdk.org\\tCONFIRMED\\t ---\\tpublish a tutorial about how to deploy a DPDK lab\\t2019/3/26 15:40\\n231\\tlab\\tjob scripts\\tferruh.yigit@intel.com\\tRESOLVED\\tWONTFIX\\twhen a sub-tree used as base, two different commit id displayed in logs\\t2020/7/1 15:00\\n232\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tShould we make it more visible when at least one of the platforms failed?\\t2019/6/26 16:21\\n234\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tRESOLVED\\tINVALID\\tdma remapping failed with errno 22 when use \\"--no-huge\\"\\t2019/4/24 12:47\\n235\\tDPDK\\tdoc\\tvipin.varghese@intel.com\\tRESOLVED\\tFIXED\\tReferences section for Algorithms for Routing Lookups and Packet Classification is not working\\t2019/10/3 5:52\\n237\\tDPDK\\texamples\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tRunning test-build.sh Fails on ppc_64 fails due to hard-coded requirement for IXGBE_PMD in examples/vm_power_manager\\t2020/4/26 2:46\\n239\\tDPDK\\texamples\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tipsec-secgw fails to initialize when librte_ipsec is enabled\\t2019/4/10 19:00\\n242\\tDPDK\\tcore\\tolivier.matz@6wind.com\\tRESOLVED\\tINVALID\\trepeat to calling \'rte_pktmbuf_free\' function, make the mempool exist the same \'rte_mbuf\' obj;\\t2019/4/9 12:56\\n243\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tDPDK Compilation Coverage\\t2020/4/21 16:25\\n244\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tRunning Unit Testing\\t2020/1/14 18:59\\n249\\tDPDK\\tcore\\tferruh.yigit@intel.com\\tRESOLVED\\tFIXED\\tkni cause a kernel crash on avx512 supported platform with gcc 8.3.1\\t2019/6/26 10:08\\n250\\tDPDK\\tethdev\\tmartin.weiser@allegro-packets.com\\tRESOLVED\\tFIXED\\ti40e: rte_eth_link_get_nowait() on X722 returns wrong link_speed value 20000 instead of 10000\\t2019/5/7 8:41\\n251\\tdpdk-burst-replay\\tapp\\tjonathan.ribas@fraudbuster.mobi\\tRESOLVED\\tFIXED\\tInfinite mode not working\\t2019/4/11 9:17\\n252\\tDPDK\\tethdev\\tkeith.wiles@intel.com\\tRESOLVED\\tFIXED\\tPossible access to invalid FDs in rte_eth_tap\\t2020/4/26 2:46\\n253\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tUnable to run DPDK test with \\"make test\\" command\\t2020/4/26 2:45\\n255\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tMbuf leak when rte_port_ethdev_writer_tx_bulk is called with more than 32 packets\\t2019/5/22 21:49\\n257\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tCONFIRMED\\t ---\\tipc: rte_mp_request_sync return 0 on error.\\t2019/5/1 6:06\\n260\\tDPDK\\tother\\tpablo.de.lara.guarch@intel.com\\tRESOLVED\\tDUPLICATE\\tDPDK 18.11 lockfree \u54c8\u5e0c\u8868\u7684 bug\\t2019/5/5 3:32\\n261\\tDPDK\\tother\\tdharmik.thakkar@arm.com\\tRESOLVED\\tFIXED\\tbug on lock-free hash API rte_hash_free_key_with_position\\t2019/5/16 18:35\\n262\\tDPDK\\tvhost/virtio\\tmaxime.coquelin@redhat.com\\tRESOLVED\\tFIXED\\tError: Invalid memory for eth_virtio_dev_init()\\t2019/5/2 9:31\\n263\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tCONFIRMED\\t ---\\tixgbe does not support 10GBASE-T copper SFP+\\t2019/5/1 20:23\\n264\\tDPDK\\tethdev\\tyskoh@mellanox.com\\tRESOLVED\\tFIXED\\tring_pmd fails to properly release used port on 17.11 branch\\t2020/6/18 22:16\\n266\\tDPDK\\tother\\tsecurity@dpdk.org\\tRESOLVED\\tFIXED\\tCVE-2019-14818\\t2020/5/18 14:03\\n267\\tDPDK\\tother\\tsecurity@dpdk.org\\tRESOLVED\\tFIXED\\tlibrte_vhost: Interger overflow in vhost_user_set_log_base()\\t2020/5/18 16:34\\n268\\tDPDK\\tother\\tsecurity@dpdk.org\\tRESOLVED\\tFIXED\\tlibrte_vhost: Integer truncation in vhost_user_check_and_alloc_queue_pair()\\t2020/5/18 16:35\\n269\\tDPDK\\tother\\tsecurity@dpdk.org\\tRESOLVED\\tFIXED\\tlibrte_vhost: Missing inputs validation in Vhost-crypto\\t2020/5/18 16:36\\n270\\tDPDK\\tother\\tsecurity@dpdk.org\\tRESOLVED\\tFIXED\\tlibrte_vhost: Malicious guest could cause segfault by sending invalid Virtio descriptor\\t2020/5/18 16:37\\n271\\tDPDK\\tother\\tsecurity@dpdk.org\\tRESOLVED\\tFIXED\\tlibrte_vhost: VHOST_USER_GET_INFLIGHT_FD message flooding to result in a DOS\\t2020/5/18 16:38\\n276\\tDPDK\\tcore\\tmattias.ronnblom@ericsson.com\\tRESOLVED\\tFIXED\\trte_rand() bit 31 and 63 are always zero\\t2019/6/30 7:17\\n277\\tDPDK\\teventdev\\tnikhilprao@gmail.com\\tRESOLVED\\tFIXED\\teventdev sw rx adapter enqueue buffer may store packets indefinitely\\t2020/4/26 2:46\\n279\\tDPDK\\texamples\\tferruh.yigit@intel.com\\tRESOLVED\\tFIXED\\tUnaligned memory access when reading ipv6 header\\t2020/4/26 2:45\\n281\\tDPDK\\ttestpmd\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tBPF: Linking error in librte_bpf\\t2019/5/20 17:03\\n282\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tFix missing headers in FreeBSD CURRENT build\\t2019/7/12 18:07\\n283\\tDPDK\\tother\\tmichel@digirati.com.br\\tRESOLVED\\tFIXED\\tBPF: array ins_chk is missing an entry\\t2019/7/15 21:01\\n286\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tRun clang compilation on windows\\t2020/4/21 16:22\\n287\\tDPDK\\tethdev\\tstephen@networkplumber.org\\tIN_PROGRESS\\t ---\\tnetvsc PMD/dpdk/azure: Driver lockup with multi-queue configuration\\t2020/5/12 15:59\\n289\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tmlx5: 100G interface capability not recognized\\t2019/7/11 10:23\\n290\\tDPDK\\tvhost/virtio\\tmaxime.coquelin@redhat.com\\tRESOLVED\\tFIXED\\tRX packets in Virtio are corrupted in case of split to several mbufs\\t2019/6/6 11:30\\n291\\tDPDK\\tethdev\\tqi.z.zhang@intel.com\\tCONFIRMED\\t ---\\tFM10K dpdk driver - memory leak with KNI interface - interface up/down\\t2019/7/30 12:35\\n293\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tCan we add a filter for status, to be able to see only some patches with specific status\\t2019/6/26 9:55\\n294\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tDUPLICATE\\tmax_rx_pkt_len issues with i40e dpdk SRIOV driver (net_i40e_vf).\\t2019/9/12 7:07\\n295\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tDUPLICATE\\tmax_rx_pkt_len issues with i40e dpdk SRIOV driver net_i40e_vf.\\t2019/9/12 7:07\\n298\\tDPDK\\tother\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tFIXED\\tBPF: eval_call() is messing bounds of return types different of RTE_BPF_ARG_RAW\\t2019/7/15 20:50\\n299\\tDPDK\\tethdev\\txiao.zhang@intel.com\\tRESOLVED\\tFIXED\\tIntel i219 reset hang\\t2019/7/24 4:32\\n300\\tDPDK\\tethdev\\txiao.zhang@intel.com\\tRESOLVED\\tFIXED\\tIntel i219 buffer overrun errata fix\\t2019/7/19 8:16\\n302\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tGoogle\'s Webcache version of the website does not work\\t2019/7/1 22:26\\n303\\tDPDK\\tmeson\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tmeson-0.51.0 isn\'t building docs\\t2020/4/26 2:45\\n307\\tDPDK\\tother\\tido@cgstowernetworks.com\\tRESOLVED\\tFIXED\\tACL (librte_acl) field of type RANGE and size U32 is not working properly\\t2020/4/26 2:40\\n308\\tDPDK\\tethdev\\tdonald_lee@trendmicro.com\\tRESOLVED\\tFIXED\\tTap driver may leave some pending frame there but not retrieve\\t2019/11/12 11:09\\n316\\tDPDK\\tother\\tdavid.hunt@intel.com\\tRESOLVED\\tFIXED\\tlivelock causes librte_distributor unit test to hang\\t2019/7/29 23:27\\n320\\tDPDK\\tethdev\\tmatan@mellanox.com\\tRESOLVED\\tFIXED\\tmlx4: info get fails in secondary process\\t2020/4/26 2:45\\n321\\tDPDK\\texamples\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tFIXED\\tBPF: Errors compiling example BPF programs\\t2020/4/26 2:45\\n322\\tDPDK\\tcore\\tdavid.marchand@redhat.com\\tRESOLVED\\tFIXED\\teal: ctrl thread calculation assumes 1:1 mapping between cpu and lcore id\\t2019/7/31 10:22\\n323\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tDUPLICATE\\teal: ctrl thread calculation assumes 1:1 mapping between cpu and lcore id\\t2019/7/29 15:52\\n324\\tDPDK\\texamples\\tstephen@networkplumber.org\\tRESOLVED\\tFIXED\\teal/cmdline_autotest failed\\t2020/3/17 0:52\\n334\\tDPDK\\tethdev\\tviacheslavo@mellanox.com\\tRESOLVED\\tINVALID\\tConnectX-4/mlx5 crashes under high load in rxq_cq_decompress_v()\\t2020/6/23 14:21\\n335\\tDPDK\\tethdev\\themant.agrawal@nxp.com\\tRESOLVED\\tFIXED\\tCompilation fails when HEADROOM is 0\\t2020/4/26 2:45\\n336\\tDPDK\\tother\\tullas-d.bhat@hpe.com\\tCONFIRMED\\t ---\\tUnable to exit DPDK application when running as separate thread.\\t2019/8/14 16:34\\n337\\tDPDK\\tvhost/virtio\\tmaxime.coquelin@redhat.com\\tCONFIRMED\\t ---\\tLive migration with dpdk(in host)+vhost-user+dpdk(in guest) fails: Failed to load virtio-net:virtio\\t2019/9/17 9:44\\n338\\tDPDK\\tcore\\tabhijeet080808@gmail.com\\tUNCONFIRMED\\t ---\\tIP Reassembly with more 4 packets Segfault\\t2019/8/15 16:44\\n339\\tDPDK\\tethdev\\tabhishek.sachan@altran.com\\tRESOLVED\\tFIXED\\tnet/af_packet: af_packet driver is leaving stale socket after device is removed\\t2020/4/26 2:45\\n340\\tDPDK\\texamples\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tCan\'t build examples in Ubuntu 18 after commit 4131ad5db from 03/07/2019\\t2019/10/4 17:28\\n343\\tDPDK\\tethdev\\t3chas3@gmail.com\\tUNCONFIRMED\\t ---\\tCouldn\'t receive LACP PDU when enable dedicated queue\\t2019/9/4 20:47\\n344\\tDPDK\\tmeson\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tBroken CPU feature discovery for armv8\\t2019/9/5 21:32\\n345\\tDPDK\\tother\\tyipeng1.wang@intel.com\\tRESOLVED\\tFIXED\\trte_hash returns invalid key if the number of entries is not a power of 2\\t2019/11/27 15:02\\n347\\tDPDK\\tethdev\\trasland@nvidia.com\\tCONFIRMED\\t ---\\tTAPPMD frees buffers it fails to send\\t2020/6/23 14:24\\n348\\tDPDK\\tethdev\\tbeilei.xing@intel.com\\tUNCONFIRMED\\t ---\\ti40e: packets greater than 1024B are dropped due to a integer overflow\\t2019/10/14 10:46\\n349\\tDPDK\\tethdev\\tbeilei.xing@intel.com\\tUNCONFIRMED\\t ---\\ti40e/i40evf: Allow bad packets to reach application (SBP)\\t2019/9/25 10:54\\n350\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tUNCONFIRMED\\t ---\\tixgbe: incorrect speed capabilities advertised for X553 devices\\t2019/9/20 13:53\\n351\\tDPDK\\tmeson\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tWhen RTE_LIBRTE_PCAP_PMD is enabled RTE_PORT_PCAP is not enabled for rte_port_source_sink.c\\t2019/10/3 5:53\\n353\\tDPDK\\tcore\\themant.agrawal@nxp.com\\tRESOLVED\\tFIXED\\tMissing null checks\\t2020/4/25 23:00\\n354\\tDPDK\\tethdev\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tnet/tap can not get rx packet drop stats when packets be dropped in kernel (net/driver/tun.c)\\t2020/5/13 14:08\\n357\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tppc64: i40e not compiling on RHEL7/CentOS7\\t2020/6/16 12:40\\n358\\tDPDK\\tethdev\\tmichael.pfeiffer@tu-ilmenau.de\\tRESOLVED\\tINVALID\\tKNI packets dropped on Bluefield SDK\\t2020/6/23 14:20\\n359\\tDPDK\\tmeson\\tbruce.richardson@intel.com\\tRESOLVED\\tWORKSFORME\\tMakefile calls \'pkg-config --path\'\\t2019/11/6 15:56\\n360\\tDPDK\\texamples\\tmarko.kovacevic@intel.com\\tRESOLVED\\tFIXED\\tFIPS application fails for AES-GCM test vectors with non-zero AAD\\t2020/3/2 14:42\\n361\\tDPDK\\tethdev\\tferruh.yigit@intel.com\\tCONFIRMED\\t ---\\tdevice reset handling with igb_uio\\t2020/8/5 9:47\\n362\\tDPDK\\tcore\\txiao.zhang@intel.com\\tUNCONFIRMED\\t ---\\trte_pktmbuf_attach_extbuf does not update pkt_len\\t2019/12/26 13:57\\n367\\tDPDK\\tdoc\\tajit.khaparde@broadcom.com\\tRESOLVED\\tFIXED\\textra character in document l2_forward_event.rst\\t2020/4/26 2:40\\n368\\tDPDK\\tdoc\\tdev@dpdk.org\\tRESOLVED\\tDUPLICATE\\tmissing character in document l2_forward_event.rst\\t2019/11/22 5:22\\n370\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tCONFIRMED\\t ---\\tCannot hotplug VFIO devices if VFIO driver was not loaded at init\\t2019/11/27 11:19\\n373\\tDPDK\\tethdev\\txiao.zhang@intel.com\\tUNCONFIRMED\\t ---\\ti40e: TSO breaks for packets larger than 16k\\t2020/5/28 13:47\\n374\\tDPDK\\tmeson\\talialnu@mellanox.com\\tIN_PROGRESS\\t ---\\tMeson build failure due to libibverbs-dev upgrade (version=45mlnx1-1.45101)\\t2020/6/23 14:24\\n376\\tDPDK\\ttestpmd\\tjerryhao@os.amperecomputing.com\\tRESOLVED\\tFIXED\\tmlx5 / DPDK 19.11 : single core throughput dropped at testpmd (VS DPDK 19.08)\\t2020/6/23 14:17\\n377\\tDPDK\\tcryptodev\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tCRYPTODEV: set_sym_session_private_data() line 489: Set private data for driver 0 not allowed\\t2020/4/26 2:40\\n380\\tDPDK\\tcore\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tmemory subsystem leaks file descriptors\\t2020/1/7 11:29\\n381\\tDPDK\\tcore\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\thugepages not detached on cleanup\\t2020/1/7 11:27\\n382\\tDPDK\\tethdev\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\trte_eth: rx/tx callbacks invoked without lock protection\\t2020/1/10 4:05\\n383\\tDPDK\\tvhost/virtio\\teupm90@gmail.com\\tRESOLVED\\tFIXED\\tdpdk virtio_user lack of notifications make vhost_net+napi stops tx buffers\\t2020/2/6 9:02\\n384\\tDPDK\\tethdev\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tnetvsc PMD crashes in secondary process in dev_info_get\\t2020/3/17 0:58\\n386\\tDPDK\\tcore\\tsiddsr@gmail.com\\tUNCONFIRMED\\t ---\\tBig spike in DPDK process VSZ since release 18.05.1\\t2020/2/5 20:53\\n387\\tDPDK\\tethdev\\tjerin.jacob@caviumnetworks.com\\tRESOLVED\\tFIXED\\tDisabling octeontx in meson leads to meson configure failure\\t2020/4/26 2:02\\n388\\tDPDK\\tethdev\\tqi.z.zhang@intel.com\\tRESOLVED\\tFIXED\\tixgbe: link state race condition can occur when starting a fiber port\\t2020/5/12 4:25\\n390\\tDPDK\\tethdev\\tmatan@mellanox.com\\tRESOLVED\\tWONTFIX\\tnetvsc: There are always too many packets in tx-drop queue in testpmd tx-side\\t2020/3/16 22:43\\n391\\tDPDK\\tother\\tpierrick.louin@orange.com\\tUNCONFIRMED\\t ---\\tThe dpdk-devbind.py tool crashes if some NIC property contains a unicode character - Patch proposal\\t2020/2/5 22:15\\n392\\tDPDK\\texamples\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tl3fwd fails to run with eventdev\\t2020/2/7 11:20\\n394\\tDPDK\\tcryptodev\\tthomas@monjalon.net\\tRESOLVED\\tFIXED\\tBuild of librte_cryptodev with GCC 10.0.1 fails\\t2020/5/7 0:06\\n395\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tBuild of hinic with GCC 10.0.1 fails on aarch64\\t2020/3/20 13:42\\n396\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tBuild of octeontx2 with GCC 10.0.1 fails on armv7\\t2020/5/19 11:37\\n398\\tDPDK\\tethdev\\tsrn@nexatech.fr\\tRESOLVED\\tFIXED\\tMLX5 device won\'t start with no RX queue\\t2020/2/21 20:29\\n399\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tUNCONFIRMED\\t ---\\tixgbe X540 PMD RSS is zero for NFSv3 NULL reply\\t2020/4/14 21:35\\n400\\tDPDK\\ttestpmd\\tdev@dpdk.org\\tVERIFIED\\tFIXED\\tstart testpmd with vmxnet3 can\'t receive and forward packets\\t2020/5/12 9:41\\n401\\tDPDK\\tother\\tolivier.matz@6wind.com\\tUNCONFIRMED\\t ---\\tunit_tests: mempool_autotest failed with shared mode library\\t2020/2/21 20:26\\n402\\tDPDK\\tethdev\\twei.zhao1@intel.com\\tRESOLVED\\tFIXED\\ti40e: cannot add rte_flow with ether_type = ARP\\t2020/4/29 10:12\\n403\\tDPDK\\tethdev\\twei.zhao1@intel.com\\tRESOLVED\\tFIXED\\ti40e: cannot add 2 rte_flows with one matching TCP sport and the other dport\\t2020/4/29 10:13\\n404\\tDPDK\\tethdev\\twei.zhao1@intel.com\\tRESOLVED\\tFIXED\\ti40e: \\"i40e_res_pool_free(): Failed to find entry\\" error when rte_flow are flushed\\t2020/4/29 10:14\\n406\\tDPDK\\texamples\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tethtool doesn\'t compile if you installed with ninja rather than make\\t2020/2/24 9:50\\n409\\tDPDK\\ttestpmd\\tviacheslavo@mellanox.com\\tCONFIRMED\\t ---\\ttestpmd sometimes does not correctly show RX-missed on Mellanox NICs\\t2020/6/23 14:12\\n410\\tDPDK\\tother\\tferruh.yigit@intel.com\\tUNCONFIRMED\\t ---\\tKNI deadlocks when used with Mellanox device\\t2020/2/26 19:14\\n411\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tIntel performance testing currently down\\t2020/4/7 15:22\\n412\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tNXP performance testing currently down\\t2020/4/21 15:12\\n413\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\trte_ring: capacity was set incorrectly\\t2020/8/14 12:40\\n414\\tDPDK\\tethdev\\talialnu@mellanox.com\\tUNCONFIRMED\\t ---\\tmlx5: test/debug_autotest failed when enable CONFIG_RTE_LIBRTE_MLX5_PMD=y\\t2020/6/18 22:28\\n415\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\t[dpdk-ci] encoding issue when compiling ovs\\t2020/3/4 9:05\\n416\\tDPDK\\tethdev\\tneruda@netcope.com\\tRESOLVED\\tFIXED\\tnfb build failed - missing rpms?\\t2020/3/18 9:15\\n417\\tDPDK\\tcryptodev\\tpablo.de.lara.guarch@intel.com\\tRESOLVED\\tFIXED\\tCentOS7/RHEL7 nasm version too old for intel-ipsec-mb\\t2020/5/27 12:20\\n419\\tDPDK\\tother\\tthomas@monjalon.net\\tUNCONFIRMED\\t ---\\tusertools/dpdk-setup.sh crashes on non-alphanumeric input\\t2020/3/20 19:12\\n421\\tDPDK\\tcore\\tthomas@monjalon.net\\tRESOLVED\\tFIXED\\tgcc 10.0.1 stringops-overflow warnings\\t2020/5/7 0:06\\n422\\tDPDK\\tdoc\\tjohn.mcnamara@intel.com\\tRESOLVED\\tFIXED\\tTyping error in patches.rst in doc/guides/contributing at line 177\\t2020/5/27 20:32\\n424\\tDPDK\\tother\\tdrc@linux.vnet.ibm.com\\tRESOLVED\\tFIXED\\tmalloc_autotest fails with message \\"Unexpected - ptr4 != ptr3\\"\\t2020/4/26 2:40\\n430\\tDPDK\\tethdev\\tbeilei.xing@intel.com\\tRESOLVED\\tINVALID\\ti40e has wrong byte order in rte_flow_item_eth (ethdev)\\t2020/3/31 6:15\\n432\\tDPDK\\tother\\tjohn.mcnamara@intel.com\\tCONFIRMED\\t ---\\tEntering Non-numeric value for Setup hugepage mappings,  dpdk-setup.sh still goes to create_mnt_huge function and prints misleading info\\t2020/4/9 7:21\\n434\\tDPDK\\ttestpmd\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tbps calculation does not fit in 64 bit\\t2020/4/22 19:31\\n436\\tDPDK\\tethdev\\tjgrajcia@cisco.com\\tCONFIRMED\\t ---\\trte_eth_promiscuous_enable fails for memif on l2fwd\\t2020/4/28 4:18\\n437\\tDPDK\\tethdev\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tmemif pmd, does not cleanup on primary application restart\\t2020/5/13 15:43\\n438\\tDPDK\\tethdev\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tmemif sock does not honor file-prefix\\t2020/7/28 11:22\\n440\\tDPDK\\tethdev\\tmohsinshaikh@niometrics.com\\tRESOLVED\\tFIXED\\tnet/mlx5: Read of \\"out_of_buffer\\" using fopen/fscanf/fclose causing TLB shootdowns due to mmap/munmap\\t2020/4/25 4:05\\n444\\tDPDK\\tcore\\tstephen@networkplumber.org\\tIN_PROGRESS\\t ---\\tDPDK fails to receive packets in Azure when using more than 3 transmit queues\\t2020/4/16 18:56\\n445\\tSPP\\tcli\\toda@valinux.co.jp\\tRESOLVED\\tFIXED\\tpipe can not be added by CLI if the spp_primary does not have the forwarder\\t2020/6/9 7:28\\n446\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\trte_lcore_index(-1) returns invalid data for non DPDK thread.\\t2020/7/9 9:01\\n450\\tDPDK\\ttestpmd\\thonnappa.nagarahalli@arm.com\\tRESOLVED\\tFIXED\\twrong report for cycles/pkt or pps\\t2020/7/9 9:01\\n452\\tDPDK\\tcore\\tyipeng1.wang@intel.com\\tRESOLVED\\tINVALID\\tcuckoo hash gcc10 warning\\t2020/4/23 21:47\\n456\\tSPP\\tctl\\tyasufum.o@gmail.com\\tCONFIRMED\\t ---\\tspp with python2 has error\\t2020/4/24 4:18\\n458\\tDPDK\\tmeson\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tWindows server 2019 UNH CI fails\\t2020/4/22 10:26\\n460\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tBroadcom performance testing being setup\\t2020/5/28 23:15\\n462\\tDPDK\\tother\\tdev@dpdk.org\\tVERIFIED\\tFIXED\\tcommand kvargs_autotest excute failed on freebsd with gcc and clang\\t2020/5/12 8:25\\n464\\tDPDK\\tother\\tl.wojciechow@partner.samsung.com\\tRESOLVED\\tFIXED\\tIn test app running mbuf_autotest after running service_autotest causes terminal to get stuck\\t2020/7/9 9:01\\n465\\tDPDK\\ttestpmd\\tdev@dpdk.org\\tRESOLVED\\tINVALID\\tapp/test compile failed with gcc and clang\\t2020/5/13 10:41\\n466\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tMellanox build errors occur randomly\\t2020/6/11 17:27\\n467\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tIntel baseline pulling incorrect numbers\\t2020/4/30 16:07\\n469\\tDPDK\\tcryptodev\\themant.agrawal@nxp.com\\tRESOLVED\\tFIXED\\tcrypto/dpaa: gcc 10 linker fails for fno-common\\t2020/5/19 11:37\\n470\\tDPDK\\tethdev\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tvmxnet3 pmd cannot received icmp6 ns packet\\t2020/5/11 9:31\\n475\\tDPDK\\tother\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tfailure in `EAL flags autotest`\\t2020/5/14 4:34\\n477\\tDPDK\\tdoc\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tTyping error in index.rst of doc/guides/eventdevs at line 8\\t2020/5/23 7:46\\n480\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tNo data points in Grafana dashboard\\t2020/5/19 15:59\\n481\\tDPDK\\tother\\tferruh.yigit@intel.com\\tRESOLVED\\tDUPLICATE\\t[dpdk-20.05]kni/ifconfig:Failed to change vEth0_0 MTU on powerville and springville\\t2020/5/21 10:16\\n482\\tDPDK\\tother\\tferruh.yigit@intel.com\\tRESOLVED\\tFIXED\\t[dpdk-20.05]kni/ifconfig:Failed to change vEth0_0 MTU on powerville and springville\\t2020/5/25 7:15\\n483\\tDPDK\\tethdev\\tiobeyond@126.com\\tUNCONFIRMED\\t ---\\tBond 8023ad lacp handshake sometimes fail\\t2020/5/31 4:37\\n487\\tDPDK\\tcore\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tWorse performance with DPDK driver when MTU is set to 2022 or less\\t2020/6/10 22:41\\n490\\tlab\\tUNH infra\\tblo@iol.unh.edu\\tCONFIRMED\\t ---\\tMake scripts capture trex and dts version on test\\t2020/6/30 22:26\\n491\\tDPDK\\tother\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tTimers synchronously resetting or stopping other timers as part of their callback can cause hangs\\t2020/7/29 10:11\\n493\\tlab\\tIntel Lab\\tzhaoyan.chen@intel.com\\tRESOLVED\\tFIXED\\tFailures reported by Intel CI for series 10551\\t2020/7/16 15:27\\n494\\tDPDK\\tcore\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\trte_pktmbuf_pool_create returns EINVAL instead of ENOMEM in rte_errno when not enough huge pages memory\\t2020/7/2 7:50\\n497\\tlab\\tjob scripts\\tlylavoie@iol.unh.edu\\tRESOLVED\\tFIXED\\tReporting format per patchset\\t2020/8/18 22:43\\n498\\tDPDK\\tmeson\\tbeilei.xing@intel.com\\tRESOLVED\\tFIXED\\tcan not start testpmd after use meson/ninja build 32-bit app on x86 system\\t2020/7/6 17:09\\n504\\tlab\\tUNH infra\\talialnu@mellanox.com\\tCONFIRMED\\t ---\\tUpgrade DTS version on Mellanox system\\t2020/7/9 15:40\\n506\\tDPDK\\tethdev\\tfrederic.coiffier@6cure.com\\tRESOLVED\\tFIXED\\ti40e: Fix for rte_eth_dev_get_module_eeprom()\\t2020/7/16 5:41\\n507\\tDPDK\\tvhost/virtio\\tdev@dpdk.org\\tIN_PROGRESS\\t ---\\tvirtio perf decrease and interrupt abnormal\\t2020/7/22 17:14\\n508\\tlab\\tTravis CI\\taconole@bytheb.org\\tIN_PROGRESS\\t ---\\tMissing Reports from Travis CI\\t2020/7/16 15:16\\n509\\tDPDK\\tmk\\tajit.khaparde@broadcom.com\\tRESOLVED\\tFIXED\\t[dpdk-20.08] make failed with cflags -O1\\t2020/8/3 14:09\\n510\\tDPDK\\tvhost/virtio\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tVirtio driver breaks all apps which use ETH_MQ_RX_RSS\\t2020/7/17 22:45\\n512\\tDPDK\\tcryptodev\\troy.fan.zhang@intel.com\\tUNCONFIRMED\\t ---\\t[dpdk-20.08]Crypto:fips_cryptodev test failed for TDES on aesni_mb, openssl and qat PMD\\t2020/8/7 5:06\\n513\\tDPDK\\ttestpmd\\tdev@dpdk.org\\tRESOLVED\\tDUPLICATE\\t[dpdk-20.08]tx_preparation/tx_preparation:IPV6/TCP packets TSO checksum incorrect\\t2020/7/23 7:26\\n514\\tDPDK\\ttestpmd\\tarybchenko@solarflare.com\\tRESOLVED\\tFIXED\\t[dpdk-20.08]tx_preparation/tx_preparation:IPV6/TCP packets TSO checksum incorrect\\t2020/7/29 4:46\\n516\\tDPDK\\tethdev\\tjia.guo@intel.com\\tUNCONFIRMED\\t ---\\tMultiple Intel Ethernet drivers do not conform to rte_eth_rx_burst() API\\t2020/8/3 7:58\\n519\\tDPDK\\tmeson\\tshahafs@mellanox.com\\tRESOLVED\\tFIXED\\tDPDK 20.08-rc3 meson build fails with MLNX_OFED_LINUX-5.1-0.6.6.0\\t2020/8/4 14:38\\n520\\tDPDK\\tethdev\\tjia.guo@intel.com\\tUNCONFIRMED\\t ---\\ti40e: UDP PTPv2 packets sent to port 320 not timestamped\\t2020/8/3 19:32\\n521\\tDPDK\\tethdev\\tjia.guo@intel.com\\tUNCONFIRMED\\t ---\\ti40e: incorrect byte counters\\t2020/8/8 0:16\\n522\\tDPDK\\tethdev\\tmk@semihalf.com\\tUNCONFIRMED\\t ---\\tPerformance degradation on AWS ena driver\\t2020/8/17 17:47\\n523\\tDPDK\\tvhost/virtio\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tvhost iotlb cache incorrectly assumes to be single consumer\\t2020/8/10 15:56\\n524\\tDPDK\\tethdev\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tmlx5 pmd  crash, mlx5_rxte_vec_sse.h# rxq_cq_decompress_v\\t2020/8/13 13:04\\n525\\tlab\\tIntel Lab\\tci@dpdk.org\\tUNCONFIRMED\\t ---\\tChange CI scripts due to branch name changed from \\"master\\" to \\"main\\"\\t2020/8/18 7:15\\n526\\tDPDK\\tethdev\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tixgbe: X550 flow type ETH / VLAN / RAW not supported\\t2020/8/14 12:06\\n527\\tlab\\tUNH infra\\tblo@iol.unh.edu\\tRESOLVED\\tFIXED\\tUpdate SPDK branch\\t2020/8/18 22:44\\n11\\tDPDK\\tcryptodev\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tcrypto_preformance_test: core dumped\\t2018/2/7 13:10\\n19\\tDPDK\\tcore\\tsolal.pirelli@gmail.com\\tRESOLVED\\tFIXED\\tCrash on initialization if first RTE_MAX_LCORE cores are disabled\\t2019/2/1 11:56\\n23\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tWONTFIX\\tIxgbe driver writes to reserved bit in the EIMC register\\t2018/10/18 9:40\\n24\\tDPDK\\tethdev\\tkonstantin.ananyev@intel.com\\tRESOLVED\\tWONTFIX\\tIxgbe driver sets unknown bit of the 82599\'s SW_FW_SYNC register\\t2018/10/18 9:41\\n30\\tDPDK\\tcryptodev\\twisamm@mellanox.com\\tRESOLVED\\tWONTFIX\\tCompilation error while disabling crypto device library\\t2020/6/18 22:20\\n36\\tDPDK\\tethdev\\tanatoly.burakov@intel.com\\tRESOLVED\\tFIXED\\tdrivers/bus/pci/linux/pci_vfio.c does not compile when compilation strictly fails on warnings\\t2018/11/20 16:27\\n46\\tDPDK\\tother\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tReciprocal division: Fail [Crash]\\t2018/5/11 12:06\\n52\\tDPDK\\tethdev\\tferruh.yigit@intel.com\\tRESOLVED\\tFIXED\\tBonding PMD may fail to accept new slaves in certain conditions\\t2019/6/26 10:21\\n66\\tDPDK\\tethdev\\tthomas@monjalon.net\\tCONFIRMED\\t ---\\tSecondary process must have exact same whitelist \\"-w\\" list\\t2018/6/26 1:14\\n78\\tDPDK\\tdoc\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tMismatch between return value and documentation for `rte_hash_lookup_data` (cuckoo hashing implementation)\\t2018/8/7 19:34\\n84\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tRESOLVED\\tFIXED\\tPrimary process broadcasts vdevs during each secondary\'s vdev scan\\t2018/11/20 16:28\\n109\\tDPDK\\tethdev\\tferruh.yigit@intel.com\\tIN_PROGRESS\\t ---\\tUsing the environment variable to get the filepath\\t2019/6/26 10:30\\n114\\tDPDK\\tcore\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\trte_rand() is not thread-safe but not documented as such\\t2019/6/30 7:19\\n226\\tDPDK\\tcryptodev\\tpablo.de.lara.guarch@intel.com\\tRESOLVED\\tFIXED\\tCryptodevs instruction for Kasumi isn\'t correct\\t2019/3/26 22:19\\n228\\tDPDK\\tcore\\tanatoly.burakov@intel.com\\tRESOLVED\\tFIXED\\trte_mp_request_sync memleak with multiple recipients\\t2019/5/3 13:49\\n258\\tDPDK\\tethdev\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tTap driver unnecessarily triggers timeout on failure\\t2019/5/1 6:07\\n288\\tDPDK\\tmk\\tthomas@monjalon.net\\tCONFIRMED\\t ---\\tTarget name recorded wrong when try to build dpdk with x86_64-native-linux-gcc\\t2019/7/15 20:55\\n341\\tDPDK\\tother\\tdev@dpdk.org\\tCONFIRMED\\t ---\\trepeated execution of distributor_autotest fails\\t2020/5/18 13:58\\n342\\tDPDK\\tother\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tdistributor_autotest execution gets suspended\\t2020/4/26 2:22\\n356\\tDPDK\\tvhost/virtio\\tdev@dpdk.org\\tRESOLVED\\tFIXED\\tBuilding dpdk with rte_vhost sometimes fails due to missing rte_hash.h\\t2019/11/21 3:02\\n365\\tDPDK\\tother\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tDo not reimplement inet_pton\\t2019/11/13 9:10\\n385\\tDPDK\\tother\\treshma.pattan@intel.com\\tUNCONFIRMED\\t ---\\tlatency calculation has potential performance issues\\t2020/2/5 20:54\\n420\\tDPDK\\tdoc\\tthomas@monjalon.net\\tRESOLVED\\tFIXED\\tTyping error in doc/guides/contributing/patches.rst\\t2020/5/27 20:31\\n423\\tDPDK\\tother\\tthomas@monjalon.net\\tUNCONFIRMED\\t ---\\tusertools/dpdk-setup.sh can not be used to run an application without compiling dpdk first\\t2020/3/26 2:20\\n448\\tDPDK\\tvhost/virtio\\tmaxime.coquelin@redhat.com\\tUNCONFIRMED\\t ---\\tPost-copy-Live migration with 8 vhost queues succeeds with warning from QEMU\\t2020/4/25 2:49\\n492\\tDPDK\\tdoc\\tanatoly.burakov@intel.com\\tRESOLVED\\tFIXED\\tFix references to /dev/huge\\t2020/7/31 1:36\\n80\\tDPDK\\tdoc\\tlinville@tuxdriver.com\\tRESOLVED\\tFIXED\\tThere is not any mention of AF_PACKET PMD in the doc\\t2019/3/10 8:07\\n124\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd previous/next navigation links to dashboard detail page\\t2018/12/10 19:32\\n126\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tINVALID\\tRename dev cluster FQDN suffix to dpdkdev.iol.unh.edu\\t2020/2/25 22:28\\n127\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd a favicon to the dashboard\\t2018/12/10 19:38\\n128\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\t[Epic] Display historical trend plots on dashboard\\t2018/12/10 20:29\\n129\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\t[Epic] Add user management functionality to dashboard\\t2018/12/10 20:31\\n130\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAs an IOL employee, I would like to send a new user a token-based URL to set their password\\t2018/12/10 20:31\\n131\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAs an employee of a Member company, I would like to be able to request a dashboard account\\t2018/12/10 20:31\\n132\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tAs a primary contact for a Member company, I would like to manage the users in my organization\\t2019/11/19 18:00\\n133\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAs an employee of a Member company, I would like to request/access my VPN credentials\\t2018/12/10 20:31\\n134\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tInvestigate using OAuth or SAML for dashboard authentication to REST API\\t2018/12/10 20:31\\n136\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd a way for users to filter results\\t2018/12/10 19:48\\n137\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\t[Epic] Patchwork 2.1 (API 1.1)\\t2018/12/10 19:50\\n138\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tDelete old log files\\t2019/11/19 17:55\\n140\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tInvalidate dashboard cache on database changes\\t2018/12/10 20:38\\n141\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tINVALID\\tRestructure network\\t2020/2/25 22:27\\n143\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tAdd a run button to run incomplete tests\\t2019/4/3 19:25\\n144\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\t[Epic] Add hardware description page\\t2018/12/10 20:41\\n145\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tAdd API Key access to the preferences page\\t2019/11/19 17:44\\n146\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd initial hardware description API\\t2018/12/10 20:41\\n147\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tAdd jenkins information to hardware api\\t2019/4/26 22:29\\n148\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd hardware description UI to the dashboard\\t2018/12/10 20:41\\n150\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd GA Performance deltas to the detailed view\\t2018/12/10 20:44\\n151\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd graphing of GA over time to the dashboard\\t2018/12/10 20:44\\n152\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\t[Epic] Increase performance or perception of performance of the dashboard\\t2019/1/10 21:04\\n153\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd timezone to date times\\t2018/12/10 20:08\\n154\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tAdd a way to select what branch a patchset was meant for\\t2019/2/5 19:14\\n155\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tParse NIC speed into GbE\\t2018/12/10 20:10\\n156\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tThe primary contact should be able to update the configuration information pdf\\t2019/6/17 17:33\\n157\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tAllow primary contact to revoke access to accounts\\t2019/6/17 17:29\\n158\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tThe primary contact should be able to set their environments public or private\\t2018/12/10 20:31\\n160\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd graphing of LTS over time to the dashboard\\t2018/12/10 20:29\\n161\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tCreate master to master overview and detail pages\\t2019/3/22 20:20\\n163\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tAdd a way to download the tarball from the detailed view\\t2019/1/8 17:29\\n167\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tWONTFIX\\tCheck hardware/software for changes on each test run\\t2020/4/21 16:13\\n168\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tRecord pipeline CI issues\\t2019/3/13 19:41\\n170\\tlab\\tUNH infra\\tblo@iol.unh.edu\\tCONFIRMED\\t ---\\tSend separate emails to users instead of CCing everyone\\t2020/6/30 20:21\\n172\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tSend updated reports after a rerun\\t2019/3/19 18:44\\n173\\tlab\\tjob scripts\\tdpdklab@iol.unh.edu\\tRESOLVED\\tFIXED\\tFilter branch instead of going directly to the branch (results api)\\t2019/1/9 16:20\\n180\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tAdd link to dashboard website in emailed reports\\t2019/1/8 20:10\\n181\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tDon\'t run doc patches if only the doc folder has been changed\\t2019/1/9 15:17\\n220\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tAdd hardware usage status to the dashboard\\t2019/6/17 17:44\\n233\\tlab\\tdashboard\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tCreate a way to share artifacts\\t2019/8/8 15:07\\n254\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAuto create measurements and test cases as results are submitted\\t2019/4/15 19:44\\n292\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAllow members to stop future jobs from running on their host from the dashboard\\t2019/6/24 20:33\\n346\\tDPDK\\tethdev\\ttohofman@cisco.com\\tRESOLVED\\tWORKSFORME\\tSet the link speed / duplex of a DPDK port\\t2020/5/12 16:08\\n364\\tDPDK\\tdoc\\tdev@dpdk.org\\tCONFIRMED\\t ---\\tDo not generate temporary doc files in the sources\\t2020/3/25 8:23\\n407\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tDUPLICATE\\tAdd ether layer testing to the community lab\\t2020/4/21 16:20\\n408\\tlab\\tUNH infra\\tlylavoie@iol.unh.edu\\tCONFIRMED\\t ---\\tAdd Arm hardware to the lab for general testing\\t2020/7/1 14:49\\n435\\tDPDK\\ttestpmd\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tProposed improvement to non-interactive loop timing\\t2020/4/4 3:47\\n496\\tDPDK\\ttestpmd\\tdev@dpdk.org\\tUNCONFIRMED\\t ---\\tDisplay link speed capabilities in testpmd\\t2020/7/22 9:37\\n511\\tlab\\tjob scripts\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd check if performance tests are needed\\t2020/7/30 15:29\\n91\\tDPDK\\tmk\\tthomas@monjalon.net\\tRESOLVED\\tWONTFIX\\tUnable to build on Ubuntu 18.04\\t2020/6/18 22:35\\n245\\tlab\\tUNH infra\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd virtio testing to the community lab\\t2020/4/21 16:24\\n246\\tlab\\tUNH infra\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd cryptodev testing to the community lab\\t2020/4/21 16:24\\n247\\tlab\\tUNH infra\\tci@dpdk.org\\tCONFIRMED\\t ---\\tAdd compression testing to the community lab\\t2020/4/21 16:24\\n306\\tDPDK\\tethdev\\tlionel.fiat@atos.net\\tCONFIRMED\\t ---\\tIntel X722 chipset DPDK driver issue with WindRiver Titianium R18.03 platform - CentOS 7.4\\t2019/7/15 20:44\\n18\\tDPDK\\tcore\\tnhorman@tuxdriver.com\\tRESOLVED\\tFIXED\\tmmap with MAP_ANONYMOUS should have fd == -1\\t2018/4/12 14:55\\n87\\tDPDK\\tother\\tjerin.jacob@caviumnetworks.com\\tRESOLVED\\tFIXED\\tbuild dpdk and example with different gcc version issue\\t2019/7/31 6:14\\n479\\tlab\\tjob scripts\\tblo@iol.unh.edu\\tCONFIRMED\\t ---\\tFedora 32  / gcc 10 build testing\\t2020/6/30 20:30\\n123\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tAdd mechanism to periodically image nodes\\t2019/11/19 20:13\\n125\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tINVALID\\tFind a replacement for NFS for Jenkins filestore\\t2020/2/25 22:28\\n135\\tlab\\tdashboard\\tci@dpdk.org\\tCONFIRMED\\t ---\\tConsider using zxcvbn for client-side password validation\\t2018/12/10 19:47\\n159\\tlab\\tUNH infra\\tci@dpdk.org\\tRESOLVED\\tFIXED\\tChange VPN to use routed configuration instead of bridged\\t2019/11/19 20:16\\n171\\tlab\\tjob scripts\\tci@dpdk.org\\tRESOLVED\\tWONTFIX\\tCreate LTS performance Jenkins Job\\t2020/6/30 20:15\\n238\\tDPDK\\tother\\tdev@dpdk.org\\tCONFIRMED\\t ---\\t[tree-wide] enhance getopt_long usage\\t2019/4/2 9:38\\n429\\tlab\\tjob scripts\\tci@dpdk.org\\tCONFIRMED\\t ---\\tNew Perf Test Case: Test above / below maximum throughput of NIC / system\\t2020/6/30 20:29\\n```"},{"id":"/dpdk/dpdk \u5bf9 numa \u7684\u4f7f\u7528\u4e0e\u591a numa \u67b6\u6784\u4e0b\u6027\u80fd\u8c03\u4f18\u7684\u57fa\u7840","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u5bf9 numa \u7684\u4f7f\u7528\u4e0e\u591a numa \u67b6\u6784\u4e0b\u6027\u80fd\u8c03\u4f18\u7684\u57fa\u7840","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u5bf9 numa \u7684\u4f7f\u7528\u4e0e\u591a numa \u67b6\u6784\u4e0b\u6027\u80fd\u8c03\u4f18\u7684\u57fa\u7840.md","source":"@site/blog/dpdk/dpdk \u5bf9 numa \u7684\u4f7f\u7528\u4e0e\u591a numa \u67b6\u6784\u4e0b\u6027\u80fd\u8c03\u4f18\u7684\u57fa\u7840.md","title":"dpdk/dpdk \u5bf9 numa \u7684\u4f7f\u7528\u4e0e\u591a numa \u67b6\u6784\u4e0b\u6027\u80fd\u8c03\u4f18\u7684\u57fa\u7840","description":"numa \u662f\u4ec0\u4e48\uff1f","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":11.36,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u5b98\u65b9 bugzilla \u5bfc\u51fa\u4fe1\u606f","permalink":"/longyu.github.io/blog/dpdk/dpdk \u5b98\u65b9 bugzilla \u5bfc\u51fa\u4fe1\u606f"},"nextItem":{"title":"\u6536\u53d1\u5305\u5411\u91cf\u51fd\u6570\u5b9e\u73b0\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk \u6536\u53d1\u5305\u51fd\u6570\u5206\u6790\uff1adpdk-20.11 ice sse \u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u5173\u952e\u8fc7\u7a0b\u5206\u6790"}},"content":"## numa \u662f\u4ec0\u4e48\uff1f\\n\\n\u5728 SMP \u67b6\u6784\u4e2d\uff0c\u5185\u5b58\u7edf\u4e00\u5bfb\u5740\uff08Uniform Memory Architecture)\uff0c\u5904\u7406\u5668\u548c\u5185\u5b58\u4e4b\u95f4\u901a\u8fc7\u4e00\u6761\u603b\u7ebf\u8fde\u63a5\u8d77\u6765\u3002\u7531\u4e8e\u6240\u6709\u5904\u7406\u5668\u90fd\u662f\u901a\u8fc7\u4e00\u6761\u603b\u7ebf\u8fde\u63a5\u8d77\u6765\u7684\uff0c**\u968f\u7740\u5904\u7406\u5668\u7684\u589e\u52a0\uff0c\u7cfb\u7edf\u603b\u7ebf\u6210\u4e3a\u4e86\u7cfb\u7edf\u74f6\u9888**\uff0c\u53e6\u5916\uff0c\u5904\u7406\u5668\u548c\u5185\u5b58\u4e4b\u95f4\u7684\u901a\u4fe1\u5ef6\u8fdf\u4e5f\u8f83\u5927\u3002\u4e3a\u4e86\u514b\u670d\u4ee5\u4e0a\u7f3a\u70b9\uff0cNUMA \u67b6\u6784\u5e94\u8fd0\u800c\u751f\u3002\\n\\nnuma \u67b6\u6784\u5168\u79f0\u4e3a\u975e\u4e00\u81f4\u6027\u5185\u5b58\u67b6\u6784 (Non Uniform Memory Architecture)\uff0c\u4e0e SMP \u4e2d\u7684 UMA \u7edf\u4e00\u5bfb\u5740\u5185\u5b58\u67b6\u6784\u76f8\u5bf9\u3002\u5728 numa \u7cfb\u7edf\u4e2d\u6709\u672c\u5730\u5185\u5b58\u4e0e\u8fdc\u7aef\u5185\u5b58\u7684\u533a\u522b\u3002\u8bbf\u95ee\u672c\u5730\u5185\u5b58\u6709\u66f4\u5c0f\u7684\u5ef6\u8fdf\u548c\u66f4\u5927\u7684\u5e26\u5bbd\uff0c\u8de8\u5904\u7406\u5668\u5185\u5b58\u8bbf\u95ee\u901f\u5ea6\u4f1a\u76f8\u5bf9\u8f83\u6162\u4e00\u70b9\uff0c\u4f46\u662f\u6574\u4e2a\u5185\u5b58\u5bf9\u4e8e\u6240\u6709\u7684\u5904\u7406\u5668\u90fd\u662f\u53ef\u89c1\u7684\u3002\\n\\nnuma \u7cfb\u7edf\u7684\u4e00\u4e2a\u793a\u610f\u56fe\u5982\u4e0b\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/0353fb8e352648e1bbfe32cde4f3b2ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbG9uZ3l1X3dseg==,size_13,color_FFFFFF,t_70,g_se,x_16)\\n\\n\\n\u4e0a\u56fe\u4e2d\u6709\u4e24\u4e2a cpu\uff0cCPU0 \u4e0e CPU1 \u90fd\u6709\u81ea\u5df1\u7684\u672c\u5730\u5185\u5b58\uff0c\u8bbf\u95ee\u8fd9\u4e9b\u5185\u5b58\u7684\u6027\u80fd\u6700\u4f18\uff0c\u8fd9\u4e24\u4e2a cpu \u4e5f\u53ef\u4ee5\u901a\u8fc7\u603b\u7ebf\u7b49\u67b6\u6784\u8de8\u5904\u7406\u5668\u8bbf\u95ee\u8fdc\u7aef\u7684\u5185\u5b58\uff0c\u53ea\u4e0d\u8fc7\u6027\u80fd\u76f8\u5bf9\u4f1a\u5dee\u4e00\u4e9b\u3002\\n\\n**\u5982\u4e0a\u4fe1\u606f\u4e0e\u56fe\u7247\u6458\u81ea\u300a\u6df1\u5165\u6d45\u51fa DPDK\u300b\u3002**\\n\\n## dpdk-16.04 \u4e2d\u5bf9 numa \u7684\u4f7f\u7528\\n\\n### 1. \u5982\u4f55\u83b7\u53d6 pci \u7f51\u5361\u6240\u5728\u7684 numa \u8282\u70b9\uff1f\\n\\nlinux \u7cfb\u7edf\u4e2d pci \u8bbe\u5907\u4f1a\u5728 /sys/bus/pci/devices/ \u4e2d\u521b\u5efa\u72ec\u7acb\u7684\u5b50\u76ee\u5f55\uff0c\u76ee\u5f55\u540d\u79f0\u5c31\u662f pci \u8bbe\u5907\u7684 pci \u53f7\u3002dpdk eal \u521d\u59cb\u5316\u65f6\uff0c\u4f1a\u626b\u63cf\u6b64\u76ee\u5f55\u6765\u83b7\u53d6\u5f53\u524d\u8bbe\u5907\u4e0a\u6240\u6709\u53ef\u7528\u7684 pci \u8bbe\u5907\u3002\u6bcf\u4e2a pci \u8bbe\u5907\u6240\u5728\u7684 numa \u8282\u70b9\u5728 /sys/bus/pci/devices/xxx/numa_node  \u6587\u4ef6\u4e2d\u4fdd\u5b58\uff0cdpdk \u901a\u8fc7\u8bbf\u95ee\u8fd9\u4e9b\u6587\u4ef6\u83b7\u53d6\u5230\u6bcf\u4e2a pci \u7f51\u5361\u7684 numa_node \u4fe1\u606f\u3002\\n\\n\u4e00\u4e2a\u793a\u4f8b\uff1a\\n\\n```c\\n[root] # cat /sys/bus/pci/devices/0000\\\\:80\\\\:00.0/numa_node\\n1\\n```\\n\\ndpdk \u4f1a\u4e3a\u6bcf\u4e2a\u626b\u63cf\u5230\u7684 pci \u8bbe\u5907\u521b\u5efa\u4e00\u4e2a rte_pci_device \u7ed3\u6784\uff0c\u5e76\u5c06\u89e3\u6790 sys \u76ee\u5f55\u5f97\u5230\u7684\u5b57\u6bb5\u5199\u5165\u5230\u6b64\u7ed3\u6784\u4e2d\uff0c\u89e3\u6790\u5b8c\u6210\u540e\u5c06\u6bcf\u4e2a rte_pci_device \u94fe\u5165\u5230 pci_device_list \u94fe\u8868\u4e2d\u3002\\n\\ndpdk \u5185\u90e8\u4f1a\u4e3a\u6bcf\u4e2a\u7f51\u5361\u63a5\u53e3\u5206\u914d\u4e00\u4e2a rte_eth_dev \u7ed3\u6784\uff0c\u5728\u7f51\u5361 probe \u6d41\u7a0b\u4e2d\uff0cpci \u7f51\u5361\u63a5\u53e3\u7684 rte_eth_dev \u7ed3\u6784\u4e2d\u7684 pci_dev \u7ed3\u6784\u88ab\u8bbe\u7f6e\u4e3a\u626b\u63cf pci \u65f6\u521b\u5efa\u7684 rte_pci_device \u7ed3\u6784\u5730\u5740\u3002\\n\\n\u540c\u65f6\u6bcf\u4e2a pci \u63a5\u53e3\u7684 rte_eth_dev \u7684 data \u7ed3\u6784\u4e2d\u7684 numa_node \u5b57\u6bb5\u4e5f\u7528\u4e8e\u5b58\u50a8\u63a5\u53e3\u6240\u5728\u7684 numa_node\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u80fd\u591f\u5728\u591a\u8fdb\u7a0b\u95f4\u5171\u4eab\u4e14\u80fd\u591f\u901a\u8fc7\u6bcf\u4e2a\u63a5\u53e3\u7684 rte_eth_dev \u76f4\u63a5\u8bbf\u95ee\u5230\u3002\u5176\u62f7\u8d1d\u8fc7\u7a0b\u662f\u5728\u9a71\u52a8\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u8c03\u7528 rte_eth_copy_pci_info \u5b8c\u6210\u7684\u3002\\n\\n\u4e00\u4e2a\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```c\\nstatic int\\neth_i40e_dev_init(struct rte_eth_dev *dev)\\n{\\n\\tstruct rte_pci_device *pci_dev;\\n\\tstruct i40e_pf *pf = I40E_DEV_PRIVATE_TO_PF(dev->data->dev_private);\\n\\tstruct i40e_hw *hw = I40E_DEV_PRIVATE_TO_HW(dev->data->dev_private);\\n\\tstruct i40e_vsi *vsi;\\n\\tint ret;\\n\\tuint32_t len;\\n\\tuint8_t aq_fail = 0;\\n\\n\\tPMD_INIT_FUNC_TRACE();\\n\\n\\tdev->dev_ops = &i40e_eth_dev_ops;\\n\\tdev->rx_pkt_burst = i40e_recv_pkts;\\n\\tdev->tx_pkt_burst = i40e_xmit_pkts;\\n.........\\n\\tpci_dev = dev->pci_dev;\\n\\n\\trte_eth_copy_pci_info(dev, pci_dev);\\n```\\n\\ndpdk \u5185\u90e8\u63d0\u4f9b\u7684\u83b7\u53d6\u63a5\u53e3\u6240\u5728 numa \u8282\u70b9\u7684\u51fd\u6570\u4ee3\u7801\uff1a\\n\\n```c\\nint\\nrte_eth_dev_socket_id(uint8_t port_id)\\n{\\n\\tif (!rte_eth_dev_is_valid_port(port_id))\\n\\t\\treturn -1;\\n\\treturn rte_eth_devices[port_id].data->numa_node;\\n}\\n```\\n\\n\u53ef\u4ee5\u770b\u5230\u6b64\u51fd\u6570\u5c06\u8fd4\u56de\u6bcf\u4e2a\u63a5\u53e3 rte_eth_dev \u7684 data \u7ed3\u6784\u4e2d\u7684 numa_node \u7684\u503c\uff0c\u8fd9\u4e2a\u503c**\u5728\u6bcf\u4e2a\u63a5\u53e3\u521d\u59cb\u5316\u65f6\u8c03\u7528\u9a71\u52a8\u521d\u59cb\u5316\u51fd\u6570\u4ece rte_pci_device \u4e2d\u62f7\u8d1d**\uff0c\u7f3a\u5c11\u4e86\u8fd9\u6b21\u62f7\u8d1d\u5c31\u4e0d\u80fd\u6b63\u786e\u83b7\u53d6\u5230\u7f51\u5361\u6240\u5728\u7684 numa_node \u7684\u771f\u5b9e\u503c\u3002\\n\\n### 2. \u5982\u4f55\u5904\u7406\u4e0d\u540c numa \u8282\u70b9\u7684\u5927\u9875\u5185\u5b58\uff1f\\n\\ndpdk \u7a0b\u5e8f\u8fd0\u884c\u4f9d\u8d56\u5927\u9875\u5185\u5b58\uff0c\u5728\u591a numa \u7ed3\u6784\u7684\u8bbe\u5907\u4e0a\uff0c\u5927\u9875\u5185\u5b58\u5b58\u5728\u4f4d\u4e8e\u4e0d\u540c numa \u8282\u70b9\u7684\u60c5\u51b5\u3002\u5c3d\u7ba1\u5206\u914d\u5927\u9875\u6240\u5728\u7684 numa \u6709\u51e0\u79cd\u89c4\u5219\uff0cdpdk \u5185\u90e8\u5e76\u6ca1\u6709\u4f7f\u7528\u5230\u8fd9\u4e9b\u89c4\u5219\u6765\u5904\u7406\u5927\u9875\u5185\u5b58\u5f52\u5c5e\u7684 numa\u3002\\n\\ndpdk \u4ec5\u4ec5**\u6620\u5c04\u6240\u6709\u7684\u5927\u9875**\uff0c\u5728\u6620\u5c04\u7684\u8fc7\u7a0b\u4e2d\u901a\u8fc7\u8bbf\u95ee **/proc/self/numa_maps** \u6587\u4ef6\u6765\u786e\u5b9a\u6bcf\u4e2a\u6620\u5c04\u7684\u5927\u9875\u6240\u5728\u7684 numa \u8282\u70b9\uff0c\u8fd9\u610f\u5473\u7740\u5728 dpdk \u3010\u5206\u914d\u524d\u3011\u5927\u9875\u5185\u5b58\u5f52\u5c5e\u7684 numa \u8282\u70b9\u5c31\u5df2\u7ecf\u786e\u5b9a\u4e0b\u6765\u4e86\uff0c\u8fd9\u90e8\u5206\u5de5\u4f5c\u662f\u5185\u6838\u5728\u5206\u914d\u5927\u9875\u65f6\u63a7\u5236\u7684\uff0c\u9ed8\u8ba4\u6240\u6709\u7684\u5927\u9875\u5185\u5b58\u5728\u6bcf\u4e2a numa \u4e0a**\u5747\u5206**\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5199\u5165 sys \u4e0b\u7684\u76f8\u5173\u6587\u4ef6\u6765\u624b\u52a8\u63a7\u5236\u3002\\n\\n\u5982\u679c\u4f60\u9700\u8981\u63a7\u5236\u6620\u5c04\u7684\u5927\u9875\u6240\u5728\u7684 numa \u8282\u70b9\uff0c\u5728 Local allocation \u5185\u5b58\u5206\u914d\u7b56\u7565\u4e0b\uff0c\u4fee\u6539\u7ebf\u7a0b\u7ed1\u6838\u5c31\u53ef\u4ee5\u5b8c\u6210\u8fd9\u4e2a\u5de5\u4f5c\u3002\u66f4\u591a\u7684\u4fe1\u606f\u53ef\u4ee5\u9605\u8bfb\u5185\u6838\u6e90\u7801\u6811\u6839\u76ee\u5f55\u4e0b\u7684 **Documentation/vm/numa_memory_policy.txt** \u6587\u4ef6\u3002\\n\\n### 3. \u5982\u4f55\u83b7\u53d6\u7ebf\u7a0b\u6240\u5728 numa \u8282\u70b9\uff1f\\n\\ndpdk \u521d\u59cb\u5316\u65f6\u4f1a\u626b\u63cf\u8bbe\u5907 cpu \u4fe1\u606f\uff0c\u4e3a\u6bcf\u4e2a\u6838\u5206\u914d\u4e00\u4e2a **lcore_config** \u7ed3\u6784\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4ee3\u8868 dpdk \u5bf9\u4e00\u4e2a**\u903b\u8f91\u6838**\u7684\u62bd\u8c61\uff0c\u540c\u65f6\u4e5f\u7528\u4e8e\u5b9e\u73b0\u903b\u8f91\u7ebf\u7a0b\u4efb\u52a1 **pipeline** \u5206\u53d1\u3002\\n\\ndpdk \u63d0\u4f9b rte_socket_id \u63a5\u53e3\u83b7\u53d6\u5f53\u524d\u903b\u8f91\u6838\u6240\u5728\u7684 numa \u8282\u70b9\uff0c\u6b64\u63a5\u53e3\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nunsigned rte_socket_id(void)\\n{\\n\\treturn RTE_PER_LCORE(_socket_id);\\n}\\n```\\n\\ndpdk \u57fa\u4e8e\u6027\u80fd\u7684\u8003\u91cf\uff0c\u4f7f\u7528\u4e86\u3010\u6bcf\u7ebf\u7a0b\u6570\u636e\u3011\u4fdd\u5b58\u6bcf\u4e2a\u903b\u8f91\u6838\u6240\u5904\u7684 numa \u8282\u70b9\uff0cdpdk \u521b\u5efa\u7684 lcore \u7ebf\u7a0b\u6267\u884c\u51fd\u6570\u901a\u8fc7\u8c03\u7528 **eal_thread_set_affinity** \u6765\u521d\u59cb\u5316 **_socket_id** \u6bcf\u7ebf\u7a0b\u6570\u636e\u3002\\n\\ndpdk \u5728\u521d\u59cb\u5316\u65f6\u901a\u8fc7\u626b\u63cf /sys \u4e0b\u7684\u6587\u4ef6\u786e\u5b9a\u5f53\u524d\u903b\u8f91\u6838\u6240\u5728\u7684 numa \u8282\u70b9\uff0c\u76f8\u5173\u51fd\u6570\u4e3a eal_cpu_socket_id\uff0c\u6e90\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nunsigned\\neal_cpu_socket_id(unsigned lcore_id)\\n{\\n\\tunsigned socket;\\n\\n\\tfor (socket = 0; socket < RTE_MAX_NUMA_NODES; socket++) {\\n\\t\\tchar path[PATH_MAX];\\n\\n\\t\\tsnprintf(path, sizeof(path), \\"%s/node%u/cpu%u\\", NUMA_NODE_PATH,\\n\\t\\t\\t\\tsocket, lcore_id);\\n\\t\\tif (access(path, F_OK) == 0)\\n\\t\\t\\treturn socket;\\n\\t}\\n\\treturn 0;\\n}\\n```\\n\\n/sys \u76ee\u5f55\u4e2d\u4e00\u4e2a\u793a\u4f8b\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```c\\n[root] # ls /sys/devices/system/node/node0/cpu\\ncpu0/    cpu3/    cpu6/    cpu66/   cpu69/   cpu71/\\ncpu1/    cpu4/    cpu64/   cpu67/   cpu7/    cpulist\\ncpu2/    cpu5/    cpu65/   cpu68/   cpu70/   cpumap\\n```\\n\\ndpdk \u904d\u5386 /sys/devices/system/node \u4e0b\u6bcf\u4e2a node \u7684\u76ee\u5f55\uff0ccpuX \u5b58\u5728\u65f6\u8868\u660e\u4e0e\u4e4b\u5bf9\u5e94\u7684 lcore_id \u4f4d\u4e8e\u5f53\u524d node\u3002\u5728\u793a\u4f8b\u4fe1\u606f\u4e2d\uff0c0-7 \u4e0e 64-71 \u6838\u90fd\u4f4d\u4e8e numa 0 \u4e0a\u3002\\n\\n### 4. dpdk \u63a5\u53e3\u76f8\u5173\u91cd\u8981\u6570\u636e\u7ed3\u6784\u5206\u914d\u4e2d\u5bf9 numa \u7684\u4f7f\u7528\\n\\n**4.1 rte_eth_dev_data \u7ed3\u6784\u6240\u5728 numa**\\n\\n\u4f4d\u4e8e master_lcore \u6240\u5728\u7684 numa \u8282\u70b9\\n\\n**4.2 rte_eth_dev_data \u7ed3\u6784\u4e2d\u7684 **dev_private** \u7ed3\u6784\uff08\u7528\u4e8e\u9a71\u52a8\u5185\u90e8\u6570\u636e\u7ed3\u6784\uff09\u6240\u5728 numa**\\n\\n\u4f18\u5148\u5728 master_lcore \u6240\u5728 numa \u8282\u70b9\u7684\u5927\u9875\u5185\u5b58\u4e0a\u5206\u914d\uff0c\u5206\u914d\u5931\u8d25\u540e\u4ece\u5c0f\u5230\u5927\u904d\u5386\u6bcf\u4e2a numa \u4e0a\u7684\u5927\u9875\u5185\u5b58\uff08\u8df3\u8fc7 master_lcore \u6240\u5728 numa\uff09\u4e0a\u5206\u914d\u3002\\n\\n**4.3 mempool \u6240\u5728\u7684 numa**\\n\\n\u7531\u8c03\u7528 rte_pktmbuf_pool_create \u65f6\u4f20\u9012\u7684 socket_id \u53c2\u6570\u503c\u51b3\u5b9a\u3002\\n\\n**4.4. rte_eth_dev_data \u4e2d\u7684 rx queues\u3001tx queues \u6307\u9488\u6570\u7ec4\u6240\u5728\u7684 numa**\\n\\n\u4f18\u5148\u5728\u8c03\u7528 rte_eth_dev_configure \u51fd\u6570\u914d\u7f6e\u961f\u5217\u7684**\u7ebf\u7a0b\u7ed1\u5b9a\u7684\u6838\u6240\u5728\u7684 numa \u8282\u70b9**\u4e0a\u5206\u914d\uff0c\u5206\u914d\u5931\u8d25\u5219\u7ee7\u7eed\u4ece\u5c0f\u5230\u5927\u904d\u5386\u6bcf\u4e2a numa\uff08\u8df3\u8fc7\u5df2\u7ecf\u5206\u914d\u5931\u8d25\u7684 numa\uff09\u8282\u70b9\u6765\u5206\u914d\u3002\\n\\n**4.5 \u7f51\u5361 rx_queues\u3001rx_queues \u4e0a\u7ed1\u5b9a\u7684\u6536\u5305\u63cf\u8ff0\u7b26\u6240\u5728\u7684 numa \u8282\u70b9**\\n\\n\u4f7f\u7528 rte_eth_rx_queue_setup \u51fd\u6570 socket_id \u53c2\u6570\u4f20\u5165\u7684 numa \u8282\u70b9\u3002\\n\\n**4.6 \u7f51\u5361 tx_queues\u3001tx_queues \u4e0a\u7ed1\u5b9a\u7684\u53d1\u5305\u63cf\u8ff0\u7b26\u6240\u5728\u7684 numa \u8282\u70b9**\\n\\n\u4f7f\u7528 rte_eth_tx_queue_setup \u51fd\u6570 socket_id \u53c2\u6570\u4f20\u5165\u7684 numa \u8282\u70b9\u3002\\n\\n### 5. mempool \u521b\u5efa\u65f6\u5bf9 numa \u8282\u70b9\u7684\u4f7f\u7528\\n\\n\u5173\u952e\u4ee3\u7801\uff1a\\n\\n```c\\nmz = rte_memzone_reserve(mz_name, mempool_size, socket_id, mz_flags);\\n```\\n\\nsocket_id \u4ee3\u8868\u8bbe\u5b9a\u7684 numa node\uff0c\u6b64\u503c\u901a\u8fc7 rte_pktmbuf_pool_create \u63a5\u53e3\u4f20\u5165\u3002\\n\\n### 6. dpdk \u7a0b\u5e8f\u961f\u5217\u76f8\u5173\u7684\u6570\u636e\u7ed3\u6784\u521b\u5efa\u5bf9 numa \u7684\u4f7f\u7528\\n\\n\u4e0b\u9762\u4ee5 ice \u9a71\u52a8\u4e3a\u4f8b\uff0c\u5217\u4e3e\u7f51\u5361\u6536\u53d1\u5305\u961f\u5217\u91cd\u8981\u7ed3\u6784\u521b\u5efa\u65f6\u5bf9 numa \u8282\u70b9\u7684\u4f7f\u7528\u3002\\n\\n**tx_queue \u4e0e tx desc \u521b\u5efa\u65f6\u5728\u6307\u5b9a\u7684 socket_id\uff08\u8868\u793a numa \u53f7\uff09\u4e0a\u5206\u914d\u76f8\u5173\u7ed3\u6784\uff1a**\\n\\n```c\\n\\t.........\\n\\t/* Allocate the TX queue data structure. */\\n\\ttxq = rte_zmalloc_socket(NULL,\\n\\t\\t\\t\\t sizeof(struct ice_tx_queue),\\n\\t\\t\\t\\t RTE_CACHE_LINE_SIZE,\\n\\t\\t\\t\\t socket_id);\\n\\t.........\\n\\ttz = rte_eth_dma_zone_reserve(dev, \\"tx_ring\\", queue_idx,\\n\\t\\t\\t\\t      ring_size, ICE_RING_BASE_ALIGN,\\n\\t\\t\\t\\t      socket_id);\\n\\t.........\\n\\t/* Allocate software ring */\\n\\ttxq->sw_ring =\\n\\t\\trte_zmalloc_socket(NULL,\\n\\t\\t\\t\\t   sizeof(struct ice_tx_entry) * nb_desc,\\n\\t\\t\\t\\t   RTE_CACHE_LINE_SIZE,\\n\\t\\t\\t\\t   socket_id);\\n```\\n\\n**rx_queue \u4e0e rx desc \u521b\u5efa\u65f6\u5728\u6307\u5b9a\u7684 socket_id\uff08\u8868\u793a numa \u53f7\uff09\u4e0a\u5206\u914d\u76f8\u5173\u7ed3\u6784\uff1a**\\n\\n```c\\n\\t/* Allocate the rx queue data structure */\\n\\trxq = rte_zmalloc_socket(NULL,\\n\\t\\t\\t\\t sizeof(struct ice_rx_queue),\\n\\t\\t\\t\\t RTE_CACHE_LINE_SIZE,\\n\\t\\t\\t\\t socket_id);\\n\\t.........\\n\\trz = rte_eth_dma_zone_reserve(dev, \\"rx_ring\\", queue_idx,\\n\\t\\t\\t\\t      ring_size, ICE_RING_BASE_ALIGN,\\n\\t\\t\\t\\t      socket_id);\\n\\t.........\\n\\t/* Allocate the software ring. */\\n\\trxq->sw_ring = rte_zmalloc_socket(NULL,\\n\\t\\t\\t\\t\\t  sizeof(struct ice_rx_entry) * len,\\n\\t\\t\\t\\t\\t  RTE_CACHE_LINE_SIZE,\\n\\t\\t\\t\\t\\t  socket_id);\\n```\\n\\n## dpdk-19.11 \u4e2d\u7f51\u5361\u91cd\u8981\u6570\u636e\u7ed3\u6784\u5206\u914d\u6240\u5728\u7684 numa\\n\\n**4.1 rte_eth_dev_data \u7ed3\u6784\u6240\u5728 numa**\\n\\n\u4f4d\u4e8e master_lcore \u6240\u5728\u7684 numa \u8282\u70b9\u3002\\n\\n**4.2 rte_eth_dev_data \u7ed3\u6784\u4e2d\u7684 **dev_private** \u7ed3\u6784\uff08\u7528\u4e8e\u9a71\u52a8\u5185\u90e8\u6570\u636e\u7ed3\u6784\uff09\u6240\u5728 numa**\\n\\n**\u4f7f\u7528\u7f51\u5361\u6240\u5728\u7684 numa \u8282\u70b9\u3002**\\n\\n**4.3 mempool \u6240\u5728\u7684 numa**\\n\\n\u7531\u8c03\u7528 rte_pktmbuf_pool_create \u65f6\u4f20\u9012\u7684 socket_id \u53c2\u6570\u503c\u51b3\u5b9a\u3002\\n\\n**4.4. rte_eth_dev_data \u4e2d\u7684 rx queues\u3001tx queues \u6307\u9488\u6570\u7ec4\u6240\u5728\u7684 numa**\\n\\n\u4f18\u5148\u5728\u8c03\u7528 rte_eth_dev_configure \u51fd\u6570\u914d\u7f6e\u961f\u5217\u7684\u7ebf\u7a0b\u7ed1\u5b9a\u7684\u6838\u6240\u5728\u7684 numa \u8282\u70b9\u4e0a\u5206\u914d\uff0c\u5206\u914d\u5931\u8d25\u5219\u7ee7\u7eed\u4ece\u5c0f\u5230\u5927\u904d\u5386\u6bcf\u4e2a numa\uff08\u8df3\u8fc7\u5df2\u7ecf\u5206\u914d\u5931\u8d25\u7684 numa\uff09\u8282\u70b9\u6765\u5206\u914d\u3002\u3002\\n\\n**4.5 \u7f51\u5361 rx_queues\u3001rx_queues \u4e0a\u7ed1\u5b9a\u7684\u6536\u5305\u63cf\u8ff0\u7b26\u6240\u5728\u7684 numa \u8282\u70b9**\\n\\n\u4f7f\u7528 rte_eth_rx_queue_setup \u51fd\u6570 socket_id \u53c2\u6570\u4f20\u5165\u7684 numa \u8282\u70b9\u3002\\n\\n**4.6 \u7f51\u5361 tx_queues\u3001tx_queues \u4e0a\u7ed1\u5b9a\u7684\u53d1\u5305\u63cf\u8ff0\u7b26\u6240\u5728\u7684 numa \u8282\u70b9**\\n\\n\u4f7f\u7528 rte_eth_tx_queue_setup \u51fd\u6570 socket_id \u53c2\u6570\u4f20\u5165\u7684 numa \u8282\u70b9\u3002\\n\\n## \u5bf9\u6536\u53d1\u5305\u6027\u80fd\u5f71\u54cd\u663e\u8457\u7684\u6570\u636e\u7ed3\u6784\u4e0e\u591a numa \u67b6\u6784\u6027\u80fd\u8c03\u4f18\u7684\u4e00\u6761\u89c4\\ndpdk \u6536\u53d1\u5305\u8fdb\u7a0b\u6838\u5fc3\u903b\u8f91\u662f\u8c03\u7528\u5e95\u5c42\u9a71\u52a8\u5b9e\u73b0\u7684\u6536\u53d1\u5305\u51fd\u6570\uff0c\u8bbf\u95ee\u9891\u7e41\u7684\u6570\u636e\u7ed3\u6784\u5217\u4e3e\u5982\u4e0b\uff1a\\n\\n1. \u4ece mempool \u4e2d\u5206\u914d\u7684 mbuf\\n2. tx_queue\u3001rx_queue \u53ca\u7f51\u5361 rx_desc\u3001tx_desc \u7ed3\u6784\\n\\n\u5728\u591a numa \u73af\u5883\u4e0b\uff0c\u8bbf\u95ee\u672c\u5730 numa \u4f1a\u6709\u6700\u9ad8\u7684\u6027\u80fd\uff0c\u8fdc\u7a0b numa \u8bbf\u95ee\u4f1a\u9020\u6210\u6027\u80fd\u7684\u4e0b\u964d\u3002\u6536\u53d1\u5305\u6027\u80fd\u4f18\u5316\u8981\u4ee5\u5982\u4e0b\u89c4\u5219\u4e3a\u57fa\u51c6\uff1a\\n\\n**\u7f51\u5361\u6240\u5728\u7684 numa \u8282\u70b9\u3001mempool \u5206\u914d\u81ea\u7684 numa \u8282\u70b9\u3001\u7f51\u5361\u961f\u5217\u4e0e\u63cf\u8ff0\u7b26\u5206\u914d\u81ea\u7684 numa \u8282\u70b9\u3001\u6536\u53d1\u5305\u7ebf\u7a0b\u7ed1\u5b9a\u7684\u6838\u6240\u5728\u7684 numa \u8282\u70b9\u5b8c\u5168\u4e00\u81f4\u3002**"},{"id":"/dpdk/dpdk \u6536\u53d1\u5305\u51fd\u6570\u5206\u6790\uff1adpdk-20.11 ice sse \u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u5173\u952e\u8fc7\u7a0b\u5206\u6790","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u6536\u53d1\u5305\u51fd\u6570\u5206\u6790\uff1adpdk-20.11 ice sse \u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u5173\u952e\u8fc7\u7a0b\u5206\u6790","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u6536\u53d1\u5305\u51fd\u6570\u5206\u6790\uff1adpdk-20.11 ice sse \u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u5173\u952e\u8fc7\u7a0b\u5206\u6790.md","source":"@site/blog/dpdk/dpdk \u6536\u53d1\u5305\u51fd\u6570\u5206\u6790\uff1adpdk-20.11 ice sse \u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u5173\u952e\u8fc7\u7a0b\u5206\u6790.md","title":"\u6536\u53d1\u5305\u5411\u91cf\u51fd\u6570\u5b9e\u73b0\u5206\u6790","description":"\u6536\u5305\u51fd\u6570\u4e3b\u4f53\u903b\u8f91","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":16.61,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u5bf9 numa \u7684\u4f7f\u7528\u4e0e\u591a numa \u67b6\u6784\u4e0b\u6027\u80fd\u8c03\u4f18\u7684\u57fa\u7840","permalink":"/longyu.github.io/blog/dpdk/dpdk \u5bf9 numa \u7684\u4f7f\u7528\u4e0e\u591a numa \u67b6\u6784\u4e0b\u6027\u80fd\u8c03\u4f18\u7684\u57fa\u7840"},"nextItem":{"title":"dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898"}},"content":"## \u6536\u5305\u51fd\u6570\u4e3b\u4f53\u903b\u8f91\\n### mbuf_initializer \u5b57\u6bb5\u7528\u4e8e\u521d\u59cb\u5316\u6bcf\u4e2a mbuf\\nmbuf_initializer \u5b57\u6bb5\u521d\u59cb\u5316\u7684\u5185\u5bb9\uff1a\\n\\n```c\\n\\t/* next 8 bytes are initialised on RX descriptor rearm */\\n\\tRTE_MARKER64 rearm_data;\\n\\tuint16_t data_off;\\n\\n\\t/**\\n\\t * Reference counter. Its size should at least equal to the size\\n\\t * of port field (16 bits), to support zero-copy broadcast.\\n\\t * It should only be accessed using the following functions:\\n\\t * rte_mbuf_refcnt_update(), rte_mbuf_refcnt_read(), and\\n\\t * rte_mbuf_refcnt_set(). The functionality of these functions (atomic,\\n\\t * or non-atomic) is controlled by the RTE_MBUF_REFCNT_ATOMIC flag.\\n\\t */\\n\\tuint16_t refcnt;\\n\\tuint16_t nb_segs;         /**< Number of segments. */\\n\\n\\t/** Input port (16 bits to support more than 256 virtual ports).\\n\\t * The event eth Tx adapter uses this field to specify the output port.\\n\\t */\\n\\tuint16_t port;\\n```\\n\\n\u8fd9\u90e8\u5206\u503c\u6bcf\u4e2a\u62a5\u6587\u57fa\u672c\u4e00\u81f4\u3002\\n\\n**mbuf_initialized \u7ed3\u6784\u7684\u5185\u5bb9\uff1a**\\n\\n```c\\n    mbuf_initialized -----\x3e----------------------\\n                      16b | data_off             | RTE_PKTMBUF_HEADROOM\\n                      16b | refcnt               | 1\\n                      16b | nb_segs              | 1\\n                      16b | port_id              | rxq->port_id\\n\\n```\\n\\n\u5411\u91cf\u51fd\u6570\u542b\u4e49\uff1a\\n\\n```c\\n__m128i _mm_set_epi64x(__int64 q1, __int64 q0);\\n\u8bbe\u7f6e\u4e24\u4e2a 64 bit \u6574\u578b\u503c\\nresult = [ q0 , q1 ]\\n```\\n\\n\u521d\u59cb\u5316 mbuf_init \u7ed3\u6784\uff1a\\n\\n```c\\nconst __m128i mbuf_init = _mm_set_epi64x(0, rxq->mbuf_initializer);\\n```\\n\\n\u6267\u884c\u540e mbuf_init \u7684\u503c :\\n\\n```c\\n    mbuf_init  -----------\x3e------------------------\\n                      16b | data_off             | RTE_PKTMBUF_HEADROOM\\n                      16b | refcnt               | 1\\n                      16b | nb_segs              | 1\\n                      16b | port_id              | rxq->port_id\\n                      32b | 0                    |\\n                      32b | 0                    |\\n\\n```\\n\\n### 1. \u8bbe\u7f6e crc \u63a9\u7801\u7684\u503c\uff0c\u5bf9\u4e00\u4e2a mbuf \u8fdb\u884c\u5904\u7406\uff0c\u540c\u65f6\u5c06 pkt_len \u4e0e data_len \u51cf\u53bb crc_len \u957f\u5ea6\\n\\n\u5411\u91cf\u51fd\u6570\u542b\u4e49\uff1a\\n\\n```c\\n__m128i _mm_set_epi16(short w7, short w6, short w5, short w4, short w3, short w2, short\\nw1, short w0);\\n\\n\u8bbe\u7f6e 8 \u4e2a\u6709\u7b26\u53f7 16bit \u6574\u578b\\nresult = [ w0 , w1 , \u2026 , w7 ]\\n```\\n\\n\u9a71\u52a8\u63a9\u7801\u8bbe\u7f6e\u76f8\u5173\u4ee3\u7801\uff1a\\n\\n```c\\n\\t__m128i crc_adjust = _mm_set_epi16\\n\\t\\t\\t\\t(0, 0, 0,       /* ignore non-length fields */\\n\\t\\t\\t\\t -rxq->crc_len, /* sub crc on data_len */\\n\\t\\t\\t\\t 0,          /* ignore high-16bits of pkt_len */\\n\\t\\t\\t\\t -rxq->crc_len, /* sub crc on pkt_len */\\n\\t\\t\\t\\t 0, 0           /* ignore pkt_type field */\\n\\t\\t\\t\\t);\\n\\n```\\n\u6b64\u5904\u7684\u63a9\u7801\u8bbe\u7f6e\u7528\u4e8e\u540e\u7eed\u57fa\u4e8e\u5411\u91cf\u5355\u4f4d\u5bf9\u591a\u4e2a\u62a5\u6587\u540c\u65f6\u8ba1\u7b97\u3002\\n\\n### 2. \u8bbe\u7f6e\u540e\u7eed\u8fd0\u884c\u7684\u63a9\u7801\\nmbuf \u4e2d\u76f8\u5173\u7684\u5b57\u6bb5\u7ed3\u6784\uff1a\\n\\n| \u53d8\u91cf\u540d\u79f0   | \u53d8\u91cf\u5bbd\u5ea6 |\\n| ---------- | -------- |\\n| pkt_type   | 32       |\\n| pkt_len    | 64       |\\n| data_len   | 80       |\\n| vlan_macip | 96       |\\n| rss_hash   | 128      |\\n\\n\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a\\n```c\\n\\tconst __m128i zero = _mm_setzero_si128();\\n\\t/* mask to shuffle from desc. to mbuf */\\n\\tconst __m128i shuf_msk = _mm_set_epi8\\n\\t\\t\\t(0xFF, 0xFF,\\n\\t\\t\\t 0xFF, 0xFF,  /* rss hash parsed separately */\\n\\t\\t\\t 11, 10,      /* octet 10~11, 16 bits vlan_macip */\\n\\t\\t\\t 5, 4,        /* octet 4~5, 16 bits data_len */\\n\\t\\t\\t 0xFF, 0xFF,  /* skip high 16 bits pkt_len, zero out */\\n\\t\\t\\t 5, 4,        /* octet 4~5, low 16 bits pkt_len */\\n\\t\\t\\t 0xFF, 0xFF,  /* pkt_type set as unknown */\\n\\t\\t\\t 0xFF, 0xFF   /* pkt_type set as unknown */\\n\\t\\t\\t);\\n```\\n\\n**0xFF \u8868\u793a\u5c06\u5bf9\u5e94\u5b57\u8282\u7684\u503c\u6e05 0\uff0c\u6700\u9ad8\u4f4d\u4e0d\u4e3a 1 \u8868\u793a\u9009\u62e9 a[n & 0xf] \u5b57\u8282\u503c\u3002**\\n\u6b64\u63a9\u7801**\u8df3\u8fc7 pkt_len \u7684\u9ad8 16-bit**\u3002\\n\\n### 3. \u8bbe\u7f6e EOP \u63a9\u7801\u503c\u3001dd mask\u3001eop mask\\n```c\\n\\tconst __m128i eop_shuf_mask = _mm_set_epi8(0xFF, 0xFF,\\n\\t\\t\\t\\t\\t\\t   0xFF, 0xFF,\\n\\t\\t\\t\\t\\t\\t   0xFF, 0xFF,\\n\\t\\t\\t\\t\\t\\t   0xFF, 0xFF,\\n\\t\\t\\t\\t\\t\\t   0xFF, 0xFF,\\n\\t\\t\\t\\t\\t\\t   0xFF, 0xFF,\\n\\t\\t\\t\\t\\t\\t   0x04, 0x0C,\\n\\t\\t\\t\\t\\t\\t   0x00, 0x08);\\n\\n\\t/**\\n\\t * compile-time check the above crc_adjust layout is correct.\\n\\t * NOTE: the first field (lowest address) is given last in set_epi16\\n\\t * call above.\\n\\t */\\n\\tRTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, pkt_len) !=\\n\\t\\t\\t offsetof(struct rte_mbuf, rx_descriptor_fields1) + 4);\\n\\tRTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=\\n\\t\\t\\t offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);\\n\\n\\t/* 4 packets DD mask */\\n\\tconst __m128i dd_check = _mm_set_epi64x(0x0000000100000001LL,\\n\\t\\t\\t\\t\\t\\t0x0000000100000001LL);\\n\\t/* 4 packets EOP mask */\\n\\tconst __m128i eop_check = _mm_set_epi64x(0x0000000200000002LL,\\n\\t\\t\\t\\t\\t\\t 0x0000000200000002LL);\\n\\n```\\n\\n**dd_check \u4e0e eop_check \u9488\u5bf9 rx \u63cf\u8ff0\u7b26\uff0c\u540c\u65f6\u5bf9\u4e24\u4e2a\u63cf\u8ff0\u7b26\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u63cf\u8ff0\u7b26\u5360\u636e 64-bit**\u3002\\n\\n### 4. \u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u6574\u961f\u5217\uff0c\u9700\u8981\u5219\u6267\u884c\u961f\u5217\u91cd\u6574\u64cd\u4f5c\\n\\n\u7533\u8bf7 **ICE_RXQ_REARM_THRESH** \u4e2a mbuf\uff0c\u7136\u540e\u5c06 **mbuf dataroom \u7684\u7269\u7406\u5730\u5740\u586b\u5145\u5230\u7a7a\u95f2\u7684\u63cf\u8ff0\u7b26\u4e2d\u3002**\\n\\n### 5. \u83b7\u53d6\u5f53\u524d\u8f6f\u4ef6\u53ef\u7528\u63cf\u8ff0\u7b26\u5e76\u9884\u53d6\u63cf\u8ff0\u7b26\\n\\n**\u666e\u901a\u51fd\u6570\u903b\u8f91\uff0c\u8bfb\u53d6\u63cf\u8ff0\u7b26\u4e2d\u7684\u6807\u5fd7\uff0c\u5f53\u6ca1\u6709\u53ef\u7528\u63cf\u8ff0\u7b26\u65f6\uff0c\u51fd\u6570\u76f4\u63a5\u8fd4\u56de\u3002**\\n\\n### 6. \u586b\u5145 mbuf dataroom \u7269\u7406\u5730\u5740\u5230\u63cf\u8ff0\u7b26**\u51fd\u6570\u4e3b\u4f53\u5411\u91cf\u6307\u4ee4**\\n\\n\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a\\n\\n```c\\n\\t/* Initialize the mbufs in vector, process 2 mbufs in one loop */\\n\\tfor (i = 0; i < ICE_RXQ_REARM_THRESH; i += 2, rxep += 2) {\\n\\t\\t__m128i vaddr0, vaddr1;\\n\\n\\t\\tmb0 = rxep[0].mbuf;\\n\\t\\tmb1 = rxep[1].mbuf;\\n\\n\\t\\t/* load buf_addr(lo 64bit) and buf_iova(hi 64bit) */\\n\\t\\tRTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, buf_iova) !=\\n\\t\\t\\t\\t offsetof(struct rte_mbuf, buf_addr) + 8);\\n\\t\\tvaddr0 = _mm_loadu_si128((__m128i *)&mb0->buf_addr);\\n\\t\\tvaddr1 = _mm_loadu_si128((__m128i *)&mb1->buf_addr);\\n\\n\\t\\t/* convert pa to dma_addr hdr/data */\\n\\t\\tdma_addr0 = _mm_unpackhi_epi64(vaddr0, vaddr0);\\n\\t\\tdma_addr1 = _mm_unpackhi_epi64(vaddr1, vaddr1);\\n\\n\\t\\t/* add headroom to pa values */\\n\\t\\tdma_addr0 = _mm_add_epi64(dma_addr0, hdr_room);\\n\\t\\tdma_addr1 = _mm_add_epi64(dma_addr1, hdr_room);\\n\\n\\t\\t/* flush desc with pa dma_addr */\\n\\t\\t_mm_store_si128((__m128i *)&rxdp++->read, dma_addr0);\\n\\t\\t_mm_store_si128((__m128i *)&rxdp++->read, dma_addr1);\\n\\t}\\n\\n```\\n\\nmbuf \u4e2d\u865a\u62df\u5730\u5740\u4e0e\u7269\u7406\u5730\u5740\u7ed3\u6784\u5982\u4e0b\uff1a\\n\\n```c\\ntypedef uint64_t rte_iova_t;\\n.........\\n\\n\\tvoid *buf_addr;           /**< Virtual address of segment buffer. */\\n\\t/**\\n\\t * Physical address of segment buffer.\\n\\t * Force alignment to 8-bytes, so as to ensure we have the exact\\n\\t * same mbuf cacheline0 layout for 32-bit and 64-bit. This makes\\n\\t * working on vector drivers easier.\\n\\t */\\n\\trte_iova_t buf_iova __rte_aligned(sizeof(rte_iova_t));\\n\\n```\\n\\n\u4f7f\u7528 **128-bit** \u5bc4\u5b58\u5668\uff0c\u4e00\u6b21\u5c06 **buf_addr \u4e0e buf_iova \u5730\u5740\u52a0\u8f7d\u5230\u4e00\u4e2a 128-bit \u7684\u53d8\u91cf\u4e2d**\uff0c**\u4f4e 64-bit \u5b58\u50a8 buf_addr\uff0c\u9ad8 64-bit \u5b58\u50a8 buf_iova \u5730\u5740**\u3002\\n\\n6.1 **\u6bcf\u6b21\u5904\u7406\u4e24\u4e2a rxd\uff0c\u9996\u5148\u5c06\u7b2c\u4e00\u7ec4 rxep mbuf \u5730\u5740\u5206\u522b\u52a0\u8f7d\u5230 mb0 \u4e0e mb1 \u4e24\u4e2a mbuf \u7ed3\u6784\u4e2d**\\n\\n6.2 **\u5c06 mb0 \u7684\u865a\u62df\u5730\u5740\u52a0\u8f7d\u5230 vaddr0 128-bit \u4e2d\uff0c\u5c06 mb1 \u7684\u865a\u62df\u5730\u5740\u52a0\u8f7d\u5230 vaddr1 128-bit \u4e2d**\\n\\n**\u5904\u7406\u540e vaddr0 \u4e0e vaddr1 \u5185\u5bb9\u793a\u4f8b\uff1a**\\n\\n```c\\n        vaddr0 --\x3e------------------      vaddr1 ----\x3e---------------\\n        hi-64b --\x3e|  mb0->buf_iova |     hi-64b  ---\x3e| mb1->buf_iova|\\n        lo-64b --\x3e|  mb0->buf_addr |     lo-64b  ---\x3e| mb1->buf_addr|\\n                  ------------------                 ----------------\\n\\n```\\n\\n6.3 **\u8c03\u6574 vaddr0\u3001vaddr1 \u4e2d buf_iova \u7684\u4f4d\u7f6e**\\n\\n\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a\\n\\n```c\\n\\t\\t/* convert pa to dma_addr hdr/data */\\n\\t\\tdma_addr0 = _mm_unpackhi_epi64(vaddr0, vaddr0);\\n\\t\\tdma_addr1 = _mm_unpackhi_epi64(vaddr1, vaddr1);\\n```\\n\\n\u6267\u884c\u540e vaddr0 \u4e0e vaddr1 \u7ed3\u6784\uff1a\\n\\n```c\\n        dma_addr0 --\x3e-----------------     dma_addr1 -----\x3e----------------\\n        hi-64b   --\x3e|  mb0->buf_iova |     hi-64b     ---\x3e| mb1->buf_iova |\\n        lo-64b   --\x3e|  mb0->buf_iova |     lo-64b     ---\x3e| mb1->buf_iova |\\n                  ------------------                      ----------------\\n```\\n\\n**6.4 \u4f7f\u7528 dma_addr0 \u52a0\u4e0a hdr_room \u5c06\u5730\u5740\u6307\u5411 dataroom \u7684\u7269\u7406\u5730\u5740**\\n\\n\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a\\n\\n```c\\n\\t/* add headroom to pa values */\\n\\tdma_addr0 = _mm_add_epi64(dma_addr0, hdr_room);\\n\\tdma_addr1 = _mm_add_epi64(dma_addr1, hdr_room);\\n```\\n\\n\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u540e\u7684\u503c\uff1a\\n```c\\n    dma_addr0 --\x3e----------------------------        dma_addr--\x3e---------------------------\\n    hi-64b   --\x3e|  mb0->buf_iova + hdr_room |      hi-64b   ---\x3e| mb1->buf_iova + hdr_room |\\n    lo-64b   --\x3e|  mb0->buf_iova + hdr_room |      lo-64b   ---\x3e| mb1->buf_iova + hdr_room |\\n              -------------------------------                   ----------------------------\\n```\\n\\n**6.5 \u5c06 dma_addr \u5b58\u50a8\u5230\u63cf\u8ff0\u7b26\u4e2d**\\n\\n```c\\n\\t\\t/* flush desc with pa dma_addr */\\n\\t\\t_mm_store_si128((__m128i *)&rxdp++->read, dma_addr0);\\n\\t\\t_mm_store_si128((__m128i *)&rxdp++->read, dma_addr1);\\n```\\nrx_desc \u4e2d\u62a5\u6587\u5730\u5740\u76f8\u5173\u5b9a\u4e49\uff1a\\n```c\\n\\t\\t__le64 pkt_addr; /* Packet buffer address */\\n\\t\\t__le64 hdr_addr; /* Header buffer address */\\n```\\n\u666e\u901a\u6536\u5305\u51fd\u6570\u4e2d\u8bbe\u7f6e\u5185\u5bb9\uff1a\\n```c\\n\\t\\t/**\\n\\t\\t * fill the read format of descriptor with physic address in\\n\\t\\t * new allocated mbuf: nmb\\n\\t\\t */\\n\\t\\trxdp->read.hdr_addr = 0;\\n\\t\\trxdp->read.pkt_addr = dma_addr;\\n```\\n\\n\u666e\u901a\u6536\u5305\u51fd\u6570\u4e2d **hdr_addr \u8bbe\u7f6e\u4e3a 0\uff0csse \u4e2d\u5374\u8bbe\u5b9a\u4e3a\u4e86 dma_addr\uff0c\u8fd9\u91cc\u6709\u673a\u5173\uff01**\\n\\n**6.6 \u66f4\u65b0\u8f6f\u4ef6\u53d8\u91cf\u503c**\\n\\n### 7. \u5224\u65ad\u5f53\u524d\u63cf\u8ff0\u7b26\u7684 dd \u4f4d\u662f\u5426\u4e3a 1\uff0c\u4e3a 1 \u8868\u793a\u81f3\u5c11\u6709\u4e00\u4e2a\u62a5\u6587\\n\\n### 8. \u5f00\u59cb\u6279\u91cf\u4ece rx desc \u5411 mbuf \u8f6c\u6362\\n\\n**\u8f6c\u6362\u524d\u6dfb\u52a0\u5982\u4e0b\u65ad\u8a00\uff0c\u786e\u4fdd mbuf \u4e2d\u5b57\u6bb5\u7684\u504f\u79fb\u6b63\u786e\u3002**\\n\\n```c\\n\\t/**\\n\\t * Compile-time verify the shuffle mask\\n\\t * NOTE: some field positions already verified above, but duplicated\\n\\t * here for completeness in case of future modifications.\\n\\t */\\n\\tRTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, pkt_len) !=\\n\\t\\t\\t offsetof(struct rte_mbuf, rx_descriptor_fields1) + 4);\\n\\tRTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, data_len) !=\\n\\t\\t\\t offsetof(struct rte_mbuf, rx_descriptor_fields1) + 8);\\n\\tRTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, vlan_tci) !=\\n\\t\\t\\t offsetof(struct rte_mbuf, rx_descriptor_fields1) + 10);\\n\\tRTE_BUILD_BUG_ON(offsetof(struct rte_mbuf, hash) !=\\n\\t\\t\\t offsetof(struct rte_mbuf, rx_descriptor_fields1) + 12);\\n```\\n\\n## **\u4f7f\u7528\u5411\u91cf\u6307\u4ee4\u4ece\u63cf\u8ff0\u7b26\u8f6c\u5316\u4e3a mbuf \u7684\u5173\u952e\u8fc7\u7a0b**\\n**1. \u8fdb\u5165 for \u5faa\u73af\uff0c\u6bcf\u6b21\u5904\u7406 4 \u4e2a\u63cf\u8ff0\u7b26\uff0c\u586b\u5145 4 \u4e2a mbuf\uff08\u6b64\u5904\u5047\u5b9a\u4e3a\u8fd9\u79cd\u60c5\u51b5\uff09**\\n**2. \u52a0\u8f7d\u63cf\u8ff0\u7b26\u4e2d\u7684 mbuf \u4e0e\u63cf\u8ff0\u7b26\u5185\u5bb9\u5230 128-bit \u53d8\u91cf\u4e2d**\\n\\n**\u4e00\u4e2a 128-bit \u52a0\u8f7d\u4e24\u4e2a mbuf \u5730\u5740**\uff1a\\n\\n```c\\n     mbp1 ----\x3e-------------------------\\n     hi-64    | sw_ring[pos + 1]->mbuf |\\n     lo-64    | sw_ring[pos]->mbuf     |\\n               -------------------------\\n\\n     mbp2 ----\x3e-------------------------\\n     hi-64    | sw_ring[pos + 2]->mbuf |\\n     lo-64    | sw_ring[pos + 3]->mbuf |\\n              --------------------------\\n\\n```\\n\\n\u52a0\u8f7d\u56db\u4e2a\u63cf\u8ff0\u7b26\u5230\u56db\u4e2a 128-bit \u7684 desc \u53d8\u91cf\u4e2d\uff1a\\n\\n```c\\n\\t\\tdescs[3] = _mm_loadu_si128((__m128i *)(rxdp + 3));\\n\\t\\trte_compiler_barrier();\\n\\n\\t\\t/* B.2 copy 2 64 bit or 4 32 bit mbuf point into rx_pkts */\\n\\t\\t_mm_storeu_si128((__m128i *)&rx_pkts[pos], mbp1);\\n\\n\\t\\tdescs[2] = _mm_loadu_si128((__m128i *)(rxdp + 2));\\n\\t\\trte_compiler_barrier();\\n\\t\\t/* B.1 load 2 mbuf point */\\n\\t\\tdescs[1] = _mm_loadu_si128((__m128i *)(rxdp + 1));\\n\\t\\trte_compiler_barrier();\\n\\t\\tdescs[0] = _mm_loadu_si128((__m128i *)(rxdp));\\n\\n```\\n\\n\u5728\u6bcf\u4e2a desc \u52a0\u8f7d\u65f6\u90fd\u6dfb\u52a0\u4e86**\u7f16\u8bd1\u5c4f\u969c\uff0c\u907f\u514d\u4f18\u5316\u4ea7\u751f\u95ee\u9898**\uff0c\u52a0\u8f7d\u540e desc \u7ed3\u6784\uff1a\\n\\n```c\\ndesc[0]  --\x3e rxdp[0]\\ndesc[1]  --\x3e rxdp[1]\\ndesc[2]  --\x3e rxdp[2]\\ndesc[3]  --\x3e rxdp[3]\\n\\n```\\n\u63a5\u6536\u63cf\u8ff0\u7b26\u5b9a\u4e49\uff1a\\n\\n```c\\nunion ice_32b_rx_flex_desc {\\n\\tstruct {\\n\\t\\t__le64 pkt_addr; /* Packet buffer address */\\n\\t\\t__le64 hdr_addr; /* Header buffer address */\\n\\t\\t\\t\\t /* bit 0 of hdr_addr is DD bit */\\n\\t\\t__le64 rsvd1;\\n\\t\\t__le64 rsvd2;\\n\\t} read;\\n\\tstruct {\\n\\t\\t/* Qword 0 */\\n\\t\\tu8 rxdid; /* descriptor builder profile ID */\\n\\t\\tu8 mir_id_umb_cast; /* mirror=[5:0], umb=[7:6] */\\n\\t\\t__le16 ptype_flex_flags0; /* ptype=[9:0], ff0=[15:10] */\\n\\t\\t__le16 pkt_len; /* [15:14] are reserved */\\n\\t\\t__le16 hdr_len_sph_flex_flags1; /* header=[10:0] */\\n\\t\\t\\t\\t\\t\\t/* sph=[11:11] */\\n\\t\\t\\t\\t\\t\\t/* ff1/ext=[15:12] */\\n\\n\\t\\t/* Qword 1 */\\n\\t\\t__le16 status_error0;\\n\\t\\t__le16 l2tag1;\\n\\t\\t__le16 flex_meta0;\\n\\t\\t__le16 flex_meta1;\\n\\n\\t\\t/* Qword 2 */\\n\\t\\t__le16 status_error1;\\n\\t\\tu8 flex_flags2;\\n\\t\\tu8 time_stamp_low;\\n\\t\\t__le16 l2tag2_1st;\\n\\t\\t__le16 l2tag2_2nd;\\n\\n\\t\\t/* Qword 3 */\\n\\t\\t__le16 flex_meta2;\\n\\t\\t__le16 flex_meta3;\\n\\t\\tunion {\\n\\t\\t\\tstruct {\\n\\t\\t\\t\\t__le16 flex_meta4;\\n\\t\\t\\t\\t__le16 flex_meta5;\\n\\t\\t\\t} flex;\\n\\t\\t\\t__le32 ts_high;\\n\\t\\t} flex_ts;\\n\\t} wb; /* writeback */\\n};\\n\\n```\\n\\n\u5355\u4e2a desc \u52a0\u8f7d\u540e\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```c\\n Qword 1   hi-64\\n Qword 0   lo-64\\n```\\n\\n**\u6ce8\u610f\u987a\u5e8f\u4e3a\u4ece\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u52a0\u8f7d**\u3002\\n\\n**3. \u5c06 mbuf \u5730\u5740\u586b\u5145\u5230 rx_pkts \u6570\u7ec4\u4e2d**\\n\\n```c\\n\\n\\t/* B.2 copy 2 64 bit or 4 32 bit mbuf point into rx_pkts */\\n\\t_mm_storeu_si128((__m128i *)&rx_pkts[pos], mbp1);\\n\\n\\t/* B.2 copy 2 mbuf point into rx_pkts  */\\n\\t_mm_storeu_si128((__m128i *)&rx_pkts[pos + 2], mbp2);\\n\\n```\\n\\n**4. \u5f53\u8bbe\u7f6e\u4e86 split_packet \u540e\uff0c\u9884\u53d6 mbuf \u4e2d\u7684\u7b2c\u4e8c\u4e2a cache line**\\n\\n   \u5728 mbuf \u7ed3\u6784\u4e2d\u4f7f\u7528\u4e0d\u5360\u7a7a\u95f4\u7684\u53d8\u91cf\u6807\u8bc6\u6bcf\u4e00\u4e2a cache line \u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\\n\\n**5. \u5c06 desc \u4e2d\u7684\u5b57\u6bb5\u586b\u5145\u5230 pktmbuf \u4e2d**\\n\\n\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a\\n```c\\n\\t\\t/* D.1 pkt 3,4 convert format from desc to pktmbuf */\\n\\t\\tpkt_mb3 = _mm_shuffle_epi8(descs[3], shuf_msk);\\n\\t\\tpkt_mb2 = _mm_shuffle_epi8(descs[2], shuf_msk);\\n\\n\\t\\t/* D.1 pkt 1,2 convert format from desc to pktmbuf */\\n\\t\\tpkt_mb1 = _mm_shuffle_epi8(descs[1], shuf_msk);\\n\\t\\tpkt_mb0 = _mm_shuffle_epi8(descs[0], shuf_msk);\\n\\n\\t\\t/* C.1 4=>2 filter staterr info only */\\n\\t\\tsterr_tmp2 = _mm_unpackhi_epi32(descs[3], descs[2]);\\n\\t\\t/* C.1 4=>2 filter staterr info only */\\n\\t\\tsterr_tmp1 = _mm_unpackhi_epi32(descs[1], descs[0]);\\n\\n```\\n\u63a9\u7801\u503c\uff1a\\n```c\\n\\tconst __m128i shuf_msk = _mm_set_epi8\\n\\t\\t\\t(0xFF, 0xFF,\\n\\t\\t\\t 0xFF, 0xFF,  /* rss hash parsed separately */\\n\\t\\t\\t 11, 10,      /* octet 10~11, 16 bits vlan_macip */\\n\\t\\t\\t 5, 4,        /* octet 4~5, 16 bits data_len */\\n\\t\\t\\t 0xFF, 0xFF,  /* skip high 16 bits pkt_len, zero out */\\n\\t\\t\\t 5, 4,        /* octet 4~5, low 16 bits pkt_len */\\n\\t\\t\\t 0xFF, 0xFF,  /* pkt_type set as unknown */\\n\\t\\t\\t 0xFF, 0xFF   /* pkt_type set as unknown */\\n\\t\\t\\t);\\n\\n```\\nrx \u63cf\u8ff0\u7b26\u4e0e mbuf \u4e2d\u7684\u76f8\u5173\u5b57\u6bb5\u5b9a\u4e49\u6458\u5f55\uff1a\\n```c\\n\\t\\t/* Qword 0 */\\n\\t\\tu8 rxdid; /* descriptor builder profile ID */\\n\\t\\tu8 mir_id_umb_cast; /* mirror=[5:0], umb=[7:6] */\\n\\t\\t__le16 ptype_flex_flags0; /* ptype=[9:0], ff0=[15:10] */\\n\\t\\t__le16 pkt_len; /* [15:14] are reserved */\\n\\t\\t__le16 hdr_len_sph_flex_flags1; /* header=[10:0] */\\n\\t\\t\\t\\t\\t\\t/* sph=[11:11] */\\n\\t\\t\\t\\t\\t\\t/* ff1/ext=[15:12] */\\n\\n\\t\\t/* Qword 1 */\\n\\t\\t__le16 status_error0;\\n\\t\\t__le16 l2tag1;\\n\\t\\t__le16 flex_meta0;\\n\\t\\t__le16 flex_meta1;\\n\\n```\\n```c\\nunion {\\n\\tuint32_t packet_type; /**< L2/L3/L4 and tunnel information.\\n\\t...................\\n};\\n\\nuint32_t pkt_len;         /**< Total pkt len: sum of all segments. */\\nuint16_t data_len;        /**< Amount of data in segment buffer. */\\n/** VLAN TCI (CPU order), valid if PKT_RX_VLAN is set. */\\nuint16_t vlan_tci;\\n\\nunion {\\n\\tunion {\\n\\t\\tuint32_t rss;     /**< RSS hash result if RSS enabled */\\n\\n```\\n\\n\u6267\u884c **__mm_shuffle_epi8** \u51fd\u6570\uff0c\u8bbe\u7f6e **pkt_len\u3001data_len\u3001vlan_tci\uff0c\u6e05\u7a7a packet_type\u3001rss**\u3002\\n\\n\u5411\u91cf\u51fd\u6570\u8c03\u7528\u4ee3\u7801\uff1a\\n```c\\npkt_mb3 = _mm_shuffle_epi8(descs[3], shuf_msk);\\n```\\n\\n\u8c03\u7528\u4e4b\u540e pkt_mb3 \u7684\u7ed3\u6784\u5185\u5bb9\u5982\u4e0b\uff1a\\n```c\\npkt_mb3 ----\x3e-------------------------------------------\\n            | 0                       |\\n            ---------------------------\\n            | 0                       |   mbuf->packet_type\\n            ---------------------------\\n            | 0                       |\\n            ---------------------------\\n            | 0                       |\\n            ---------------------------------------------\\n            |  desc[3].pkt_len low 8b |\\n            ---------------------------\\n            |  desc[3].pkt_len high 8b|\\n            ---------------------------   mbuf->pkt_len\\n            | 0                       |\\n            ---------------------------\\n            | 0                       |\\n            ----------------------------------------------\\n            | desc[3].pkt_len low 8b  |\\n            ---------------------------   mbuf->data_len\\n            | desc[3].pkt_len hith 8b |\\n            ----------------------------------------------\\n            | desc[3].l2tag1 low 8b   |\\n            ---------------------------   mbuf->vlan_tci\\n            | desc[3].l2tag1 low 8b   |\\n            -----------------------------------------------\\n            | 0                       |\\n            ---------------------------\\n            | 0                       |   mbuf->rss\\n            ---------------------------\\n            | 0                       |\\n            ---------------------------\\n            | 0                       |\\n            -----------------------------------------------\\n\\n```\\n\\n**pkt_mb2\u3001pkt_mb1\u3001pkt_mb0 \u7ed3\u6784\u7c7b\u4f3c**\u3002\\n\\n**6. \u8fc7\u6ee4 staterr \u4fe1\u606f**\\n\\n**\u5411\u91cf\u51fd\u6570\u4ee3\u7801\uff1a**\\n```c\\n\\t\\t/* C.1 4=>2 filter staterr info only */\\n\\t\\tsterr_tmp2 = _mm_unpackhi_epi32(descs[3], descs[2]);\\n\\t\\t/* C.1 4=>2 filter staterr info only */\\n\\t\\tsterr_tmp1 = _mm_unpackhi_epi32(descs[1], descs[0]);\\n\\n```\\n\u5411\u91cf\u51fd\u6570\u542b\u4e49\uff1a\\n```c\\n__m128i _mm_unpackhi_epi32(__m128i a, __m128i b);\\n\u4ea4\u66ff\u9ad82\u4f4d\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f732bit\u6574\u6570\\nresult = [ a2 , b2 , a3, b3 ]\\n\\n```\\nrx desc \u4e2d\u76f8\u5173\u7ed3\u6784\uff1a\\n```c\\n\\t\\t/* Qword 0 */\\n\\t\\tu8 rxdid; /* descriptor builder profile ID */\\n\\t\\tu8 mir_id_umb_cast; /* mirror=[5:0], umb=[7:6] */\\n\\t\\t__le16 ptype_flex_flags0; /* ptype=[9:0], ff0=[15:10] */\\n\\t\\t__le16 pkt_len; /* [15:14] are reserved */\\n\\t\\t__le16 hdr_len_sph_flex_flags1; /* header=[10:0] */\\n\\t\\t\\t\\t\\t\\t/* sph=[11:11] */\\n\\t\\t\\t\\t\\t\\t/* ff1/ext=[15:12] */\\n\\n\\t\\t/* Qword 1 */\\n\\t\\t__le16 status_error0;\\n\\t\\t__le16 l2tag1;\\n\\t\\t__le16 flex_meta0;\\n\\t\\t__le16 flex_meta1;\\n\\n```\\n\u6267\u884c\u540e sterr_tmp2 \u7ed3\u6784\u5982\u4e0b\uff1a\\n\\n```c\\n     sterr_tmp2 ----\x3e-----------------------------------\\n                     | desc[3].l2tag1 + status_error0  |\\n                     | desc[2].l2tag1 + status_error0  |\\n                     | desc[3].flex_meta0 + flex_meta1 |\\n                     | desc[2].flex_meta0 + flex_meta1 |\\n                     -----------------------------------\\n\\n```\\n\\n**7. \u5c06 rx olflags \u6620\u5c04\u5230 mbuf \u4e2d**\\n\\n## \u5c06\u56db\u4e2a\u63cf\u8ff0\u7b26\u5408\u5e76\u4e3a\u4e00\u4e2a\u7684\u5411\u91cf\u51fd\u6570\u903b\u8f91\u5206\u6790\\nice_rx_desc \u90e8\u5206\u5b9a\u4e49\uff1a\\n```c\\n\\tstruct {\\n\\t\\t/* Qword 0 */\\n\\t\\tu8 rxdid; /* descriptor builder profile ID */\\n\\t\\tu8 mir_id_umb_cast; /* mirror=[5:0], umb=[7:6] */\\n\\t\\t__le16 ptype_flex_flags0; /* ptype=[9:0], ff0=[15:10] */\\n\\t\\t__le16 pkt_len; /* [15:14] are reserved */\\n\\t\\t__le16 hdr_len_sph_flex_flags1; /* header=[10:0] */\\n\\t\\t\\t\\t\\t\\t/* sph=[11:11] */\\n\\t\\t\\t\\t\\t\\t/* ff1/ext=[15:12] */\\n\\n\\t\\t/* Qword 1 */\\n\\t\\t__le16 status_error0;\\n\\t\\t__le16 l2tag1;\\n\\t\\t__le16 flex_meta0;\\n\\t\\t__le16 flex_meta1;\\n\\n\\t\\t/* Qword 2 */\\n\\t\\t__le16 status_error1;\\n\\t\\tu8 flex_flags2;\\n\\t\\tu8 time_stamp_low;\\n\\t\\t__le16 l2tag2_1st;\\n\\t\\t__le16 l2tag2_2nd;\\n\\n\\t\\t/* Qword 3 */\\n\\t\\t__le16 flex_meta2;\\n\\t\\t__le16 flex_meta3;\\n```\\n\u5408\u5e76 4 \u4e2a\u63cf\u8ff0\u7b26\u6807\u5fd7\u4fe1\u606f\u7684\u5411\u91cf\u51fd\u6570\u8c03\u7528\u4ee3\u7801\uff1a\\n```c\\n\\t/* merge 4 descriptors */\\n\\tflags = _mm_unpackhi_epi32(descs[0], descs[1]);\\n\\ttmp_desc = _mm_unpackhi_epi32(descs[2], descs[3]);\\n\\ttmp_desc = _mm_unpacklo_epi64(flags, tmp_desc);\\n\\ttmp_desc = _mm_and_si128(tmp_desc, desc_mask);\\n\\n```\\n\\n\u7b2c\u4e00\u6b65\u6267\u884c\u540e flags \u7684\u5e03\u5c40:\\n```c\\n   flags -----------\x3e---------------------------------\\n                    |  desc[0].status_error0 l2tag1  |\\n                    |  desc[1].status_error0 l2tag1  |\\n                    |  desc[0].flex_meta0 flex_meta1 |\\n                    |  desc[1].flex_meta0 flex_meta1 |\\n\\n```\\n\\n\u7b2c\u4e8c\u6b65\u6267\u884c\u540e tmp_desc \u7684\u5e03\u5c40:\\n\\n```c\\n   tmp_desc --------\x3e---------------------------------\\n                    |  desc[2].status_error0 l2tag1  |\\n                    |  desc[3].status_error0 l2tag1  |\\n                    |  desc[2].flex_meta0 flex_meta1 |\\n                    |  desc[3].flex_meta0 flex_meta1 |\\n\\n```\\n\\n\u7b2c\u4e09\u6b65\u6267\u884c\u540e tmp_desc \u7684\u5e03\u5c40:\\n\\n```c\\n   tmp_desc --------\x3e---------------------------------\\n                    | desc[0].status_error0 l2tag1  |\\n                    | desc[1].status_error0 l2tag1  |\\n                    | desc[2].status_error0 l2tag1  |\\n                    | desc[3].status_error0 l2tag1  |\\n```\\n\\ndesc_mask \u5185\u5bb9\uff1a\\n\\n```c\\n\\t/* mask everything except checksum, RSS and VLAN flags.\\n\\t * bit6:4 for checksum.\\n\\t * bit12 for RSS indication.\\n\\t * bit13 for VLAN indication.\\n\\t */\\n\\tconst __m128i desc_mask = _mm_set_epi32(0x3070, 0x3070,\\n\\t\\t\\t\\t\\t\\t0x3070, 0x3070);\\n```\\n\\n**\u5408\u5e76\u64cd\u4f5c\u540e\uff0c\u8bbe\u7f6e\u56db\u4e2a\u63cf\u8ff0\u7b26\u4e2d checksum\u3001rss\u3001vlan \u7684\u503c\u3002**\\n\\n## \u53d1\u5305\u51fd\u6570\u5b9e\u73b0\u5206\u6790\\n\\ntx \u7684\u903b\u8f91\u975e\u5e38\u7b80\u5355\uff0c\u8981\u7528 mbuf \u4e2d\u7684\u5b57\u6bb5\u586b\u5145\u4e00\u4e2a ice_tx_desc \u7ed3\u6784\uff0c\u4f7f\u7528\u5230\u7684 sse \u5411\u91cf\u51fd\u6570\u903b\u8f91\uff1a\\n\\n```c\\nstatic inline void\\nice_vtx1(volatile struct ice_tx_desc *txdp,\\n\\t struct rte_mbuf *pkt, uint64_t flags)\\n{\\n\\tuint64_t high_qw =\\n\\t\\t(ICE_TX_DESC_DTYPE_DATA |\\n\\t\\t ((uint64_t)flags  << ICE_TXD_QW1_CMD_S) |\\n\\t\\t ((uint64_t)pkt->data_len << ICE_TXD_QW1_TX_BUF_SZ_S));\\n\\n\\t__m128i descriptor = _mm_set_epi64x(high_qw,\\n\\t\\t\\t\\tpkt->buf_iova + pkt->data_off);\\n\\t_mm_store_si128((__m128i *)txdp, descriptor);\\n}\\n```\\n\\nice_tx_desc \u7ed3\u6784\uff1a\\n\\n```c\\n/* Tx Descriptor */\\nstruct ice_tx_desc {\\n        __le64 buf_addr; /* Address of descriptor\'s data buf */\\n        __le64 cmd_type_offset_bsz;\\n};\\n```\\n\\n\u53d1\u5305\u51fd\u6570\u9700\u8981\u586b\u5145 **mbuf dataroom \u8d77\u59cb\u5730\u5740\u7684\u7269\u7406\u5730\u5740\u4ee5\u53ca\u4e00\u4e9b\u53d1\u9001\u6807\u5fd7\u5230\u53d1\u9001\u63cf\u8ff0\u7b26\u4e2d**\uff0cice_tx_desc \u4e3a 128bit\uff0c\u586b\u5145\u4e00\u6b21\u5c31\u80fd\u591f\u5b58\u50a8\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u3002\\n\\n# \u603b\u7ed3\\ndpdk \u5185\u90e8\u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u4f7f\u7528**\u786c\u4ef6\u5411\u91cf\u6307\u4ee4**\u4f18\u5316\u4f20\u7edf\u7684\u6536\u53d1\u5305\u8fc7\u7a0b\uff0c\u4e3b\u8981\u7684\u4f18\u5316\u5185\u5bb9\u96c6\u4e2d\u5728**\u6536\u5305\u903b\u8f91\u4e0a**\uff0c\u53d1\u5305\u7684\u4e3b\u8981\u8fc7\u7a0b\u4e3a dma \u64cd\u4f5c\uff0c\u4f18\u5316\u7a7a\u95f4\u975e\u5e38\u6709\u9650\u3002\\n\\ndpdk \u6536\u53d1\u5305 burst \u8fc7\u7a0b\u662f\u4e00\u4e2a\u975e\u5e38\u4ee3\u8868\u6027\u7684\u6279\u91cf\u5316\u5904\u7406\u573a\u666f\uff0c\u5c06**\u786c\u4ef6\u5411\u91cf\u6307\u4ee4\u96c6\u6210\u5230\u6279\u91cf\u5316\u4e0a**\uff0c\u5e26\u6765\u4e86**\u5c0f\u5305\u6027\u80fd\u7684\u663e\u8457\u63d0\u5347**\u4ee5\u53ca\u7a0b\u5e8f cpu \u5360\u7528\u7387\u7684\u4e0b\u964d\uff0c\u662f**\u6316\u6398\u786c\u4ef6\u7279\u6027**\u8fbe\u6210\u6027\u80fd\u4f18\u5316\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u6848\u4f8b\u3002\\n\\n\u540c\u65f6\u9700\u8981\u8bf4\u660e\u7684\u662f dpdk \u4f7f\u7528\u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570**\u9700\u8981\u6ee1\u8db3\u4e00\u5b9a\u7684\u6761\u4ef6**\uff0c\u8fd9\u4e2a\u6761\u4ef6\u56e0**\u7f51\u5361\u4e0d\u540c**\u800c\u6709\u6240\u533a\u522b\uff0c\u8fd9\u4e9b\u6761\u4ef6\u5305\u62ec\u4e86 dpdk \u63a5\u53e3\u521d\u59cb\u5316\u65f6\u914d\u7f6e\u7684\u4e00\u4e9b\u786c\u4ef6\u5378\u8f7d\u529f\u80fd\uff0c\u9700\u8981\u975e\u5e38\u6ce8\u610f\uff01\\n\\n**\u5907\u6ce8\uff1adpdk \u5185\u90e8\u4e0d\u76f4\u63a5\u4f7f\u7528\u5411\u91cf\u6307\u4ee4\u800c\u662f\u901a\u8fc7\u4f7f\u7528\u4e00\u5c42\u5c01\u88c5\u51fd\u6570\u6765\u95f4\u63a5\u8c03\u7528\uff01**"},{"id":"/dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898.md","source":"@site/blog/dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898.md","title":"dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898","description":"\u524d\u8a00","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":15.47,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u6536\u53d1\u5305\u5411\u91cf\u51fd\u6570\u5b9e\u73b0\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk \u6536\u53d1\u5305\u51fd\u6570\u5206\u6790\uff1adpdk-20.11 ice sse \u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u5173\u952e\u8fc7\u7a0b\u5206\u6790"},"nextItem":{"title":"dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u53ca\u5176\u90e8\u5206\u6f14\u8fdb\u8fc7\u7a0b","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u53ca\u5176\u6f14\u8fdb\u8fc7\u7a0b\u5206\u6790"}},"content":"## \u524d\u8a00\\n\u5728 [\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848\u4e4b dpdk \u8fdb\u7a0b\u6b7b\u9501](https://blog.csdn.net/Longyu_wlz/article/details/124261738) \u8fd9\u7bc7\u535a\u5ba2\u4e2d\uff0c\u6211\u63cf\u8ff0\u4e86 dpdk \u591a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u7684\u7528\u6237\u6001\u9501\u5728\u4e34\u754c\u533a\u88ab\u5f02\u5e38\u6740\u6b7b\u540e\u65e0\u6cd5\u518d\u83b7\u53d6\u5230\u9501\u7684\u95ee\u9898\u3002\u4fee\u6539\u7684\u65b9\u6848\u662f\u5c06\u8fd9\u4e9b\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u7684\u9501\u4fee\u6539\u4e3a pthread mutex \u4e92\u65a5\u9501\u3002\\n\\n\u524d\u671f\u7684\u6d4b\u8bd5\u9a8c\u8bc1\u4e0e\u4ee3\u7801 review \u53ca\u96c6\u6210\u6d4b\u8bd5\u90fd\u6ca1\u6709\u53d1\u73b0\u5f02\u5e38\uff0c\u6700\u8fd1\u5374\u53d1\u73b0\u53c8\u51fa\u73b0\u4e86\u6b7b\u9501\u7684\u95ee\u9898\u3002\u6700\u5f00\u59cb\u6211\u7684\u60f3\u6cd5\u662f\u73b0\u5728\u4f7f\u7528\u4e86 mutex \u9501\uff0c\u51fa\u73b0\u4e86\u6b7b\u9501\u4e5f\u80fd\u591f\u627e\u5230\u662f\u8c01\u5360\u6709\u4e86\u9501\uff0c\u95ee\u9898\u5e94\u8be5\u4e0d\u592a\u56f0\u96be\uff0c\u5b9e\u9645\u64cd\u4f5c\u8d77\u6765\u5374\u53d1\u73b0\u6709\u4e9b\u60f3\u5f53\u7136\u3002\\n\\n\u5728\u672c\u6587\u4e2d\u6211\u5c06\u5b8c\u6574\u5730\u63cf\u8ff0\u8fd9\u4e00\u65b0\u6b7b\u9501\u95ee\u9898\u5b9a\u4f4d\u7684\u8fc7\u7a0b\u3002\\n## \u95ee\u9898\u63cf\u8ff0\\n\u95ee\u9898\u7684\u8868\u9762\u73b0\u8c61\u662f\u67d0\u4e2a\u8fd0\u884c\u5728 docker \u5bb9\u5668\u5185\u7684 dpdk \u4e1a\u52a1\u7a0b\u5e8f\u4e00\u76f4\u65e0\u6cd5\u542f\u52a8\uff0c\u4f7f\u7528 gdb \u67e5\u770b\u8c03\u7528\u6808\uff0c\u53d1\u73b0\u5361\u5728\u5982\u4e0b\u4f4d\u7f6e\u5904\uff1a\\n```c\\n#0  0x00007ffff14034ed in __lll_lock_wait () from target:/lib64/libpthread.so.0\\n#1  0x00007ffff13fedcb in _L_lock_883 () from target:/lib64/libpthread.so.0\\n#2  0x00007ffff13fec98 in pthread_mutex_lock () from target:/lib64/libpthread.so.0\\n#3  0x00007ffff22267d9 in rte_mutex_lock () from target:/lib64/libdpdk.so\\n#4  0x00007ffff223835f in malloc_heap_alloc () from target:/lib64/libdpdk.so\\n#5  0x00007ffff2233337 in rte_malloc_socket () from target:/lib64/libdpdk.so\\n#6  0x00007ffff223bd1d in rte_service_init () from target:/lib64/libdpdk.so\\n#7  0x00007ffff22160c1 in rte_eal_init () from target:/lib64/libdpdk.so\\n#10 0x000000000043e51d in main ()\\n```\\n**rte_mutex_lock \u51fd\u6570\u662f\u5bf9 pthread_mutex_lock** \u51fd\u6570\u7684\u3010\u5c01\u88c5\u3011\uff0c\u4ece\u51fd\u6570\u8c03\u7528\u6808\u4e0a\u770b\uff0c\u8fdb\u7a0b\u65e0\u6cd5\u6b63\u5e38\u542f\u52a8\u7684\u539f\u56e0\u662f\u65e0\u6cd5\u6210\u529f\u83b7\u53d6\u5230 mutex \u9501\u3002\\n## \u95ee\u9898\u5b9a\u4f4d\u8fc7\u7a0b\\n\\n### 1. \u54ea\u4e00\u628a\u9501\u83b7\u53d6\u4e0d\u5230\uff1f\\n\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\n/* this will try lower page sizes first */\\nstatic void *\\nmalloc_heap_alloc_on_heap_id(const char *type, size_t size,\\n\\t\\tunsigned int heap_id, unsigned int flags, size_t align,\\n\\t\\tsize_t bound, bool contig)\\n{\\n\\tstruct rte_mem_config *mcfg = rte_eal_get_configuration()->mem_config;\\n\\tstruct malloc_heap *heap = &mcfg->malloc_heaps[heap_id];\\n\\tunsigned int size_flags = flags & ~RTE_MEMZONE_SIZE_HINT_ONLY;\\n\\tint socket_id;\\n\\tvoid *ret;\\n\\n\\trte_spinlock_lock(&(heap->lock));\\n```\\n\u786e\u8ba4\u662f\u83b7\u53d6\u4e0d\u5230 rte_mem_config \u4e2d\u67d0\u4e2a malloc_heaps \u7684\u591a\u8fdb\u7a0b\u5171\u4eab\u9501\u3002\\n### 2. \u83b7\u53d6\u4e0d\u5230\u7684\u9501\u5230\u5e95\u662f\u88ab\u8c01\u5360\u7528\u7684\uff1f\\n\u7f16\u8bd1\u76f8\u540c\u7248\u672c\u7684 dpdk-procinfo \u8c03\u8bd5\u83b7\u53d6\u5230\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\n```c\\n(gdb) bt\\n#0  0x00007ffff6eacbfc in __lll_lock_wait () from /usr/local/lib/libpthread.so.0\\n#1  0x00007ffff6ea84df in _L_lock_520 () from /usr/local/lib/libpthread.so.0\\n#2  0x00007ffff6ea82df in pthread_mutex_lock () from /usr/local/lib/libpthread.so.0\\n#3  0x000000000066e3b9 in rte_mutex_lock (mutex=0x3fffdcffd180) at dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c:93\\n#4  0x000000000067ff3f in malloc_heap_alloc_on_heap_id (contig=false, bound=0, align=64, flags=0, heap_id=0, size=8192, type=0x3fffdcffa000 \\"\\\\356o.\\\\001c\\\\001\\\\v\\\\023\\\\004\\")\\n    at dpdk-19.11/lib/librte_eal/common/malloc_heap.c:646\\n#5  malloc_heap_alloc (type=type@entry=0xc02a2e \\"rte_services\\", size=8192, socket_arg=<optimized out>, socket_arg@entry=-1, flags=flags@entry=0, align=64, bound=bound@entry=0,\\n    contig=false) at dpdk-19.11/lib/librte_eal/common/malloc_heap.c:724\\n#6  0x000000000067af17 in rte_malloc_socket (type=type@entry=0xc02a2e \\"rte_services\\", size=size@entry=8192, align=align@entry=64, socket_arg=<optimized out>, socket_arg@entry=-1)\\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:60\\n#7  0x000000000067afa5 in rte_zmalloc_socket (type=type@entry=0xc02a2e \\"rte_services\\", size=size@entry=8192, align=align@entry=64, socket=socket@entry=-1)\\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:79\\n#8  0x000000000067afba in rte_zmalloc (type=type@entry=0xc02a2e \\"rte_services\\", size=size@entry=8192, align=align@entry=64)\\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:99\\n#9  0x000000000067afee in rte_calloc (type=type@entry=0xc02a2e \\"rte_services\\", num=num@entry=64, size=size@entry=128, align=align@entry=64)\\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:117\\n#10 0x00000000006838fd in rte_service_init () at dpdk-19.11/lib/librte_eal/common/rte_service.c:84\\n#11 0x000000000065dca1 in rte_eal_init (argc=<optimized out>, argv=<optimized out>) at dpdk-19.11/lib/librte_eal/linux/eal/eal.c:1266\\n#12 0x0000000000558a1c in main (argc=6, argv=0x7fffffffe8c8) at dpdk-19.11/app/proc-info/main.c:1771\\n(gdb) frame 3\\n#3  0x000000000066e3b9 in rte_mutex_lock (mutex=0x3fffdcffd180) at dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c:93\\n93      dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c: No such file or directory.\\n(gdb) print mutex\\n$1 = (pthread_mutex_t *) 0x3fffdcffd180\\n(gdb) print *mutex\\n$2 = {__data = {__lock = 2, __count = 0, __owner = 14901, __nusers = 1, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}},\\n  __size = \\"\\\\002\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\065:\\\\000\\\\000\\\\001\\", \'\\\\000\' <repeats 26 times>, __align = 2}\\n```\\n\u7531\u4e8e\u6211\u5bf9 mutex \u4e2d\u4e0d\u540c\u7ed3\u6784\u7684\u542b\u4e49\u5e76\u4e0d\u6e05\u695a\uff0c\u6211\u5148\u5728\u672c\u5730\u5199\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 demo\uff0c\u7136\u540e\u89c2\u5bdf\u5360\u6709\u4e86\u9501\u4e4b\u540e mutex \u4e00\u4e9b\u5b57\u6bb5\u7684\u542b\u4e49\uff0c\u786e\u8ba4 **__owner** \u5b57\u6bb5\u8868\u793a\u3010\u5360\u6709\u9501\u7684\u7ebf\u7a0b\u3001\u8fdb\u7a0b id\u3011\u3002\\n\\n\u4e8e\u662f\u80fd\u591f\u786e\u8ba4\u8fd9\u628a\u9501\u88ab **14901** \u7ebf\u7a0b\u6301\u6709\uff0c\u7136\u800c\u8fd9\u4e2a\u7ebf\u7a0b\u5728\u7cfb\u7edf\u4e2d**\u5e76\u4e0d\u5b58\u5728**\uff0c\u4e5f\u6ca1\u6709\u770b\u5230\u5176\u5b83\u7684\u5f02\u5e38\u4fe1\u606f\uff0c\u8868\u660e\u8fd9\u4e2a\u8fdb\u7a0b\u65e9\u5df2\u7ecf\u88ab kill \u6389\u4e86\u3002\\n\\n### 3. gdb \u67e5\u770b rte_mem_config \u6587\u4ef6\u7684\u5185\u5bb9\\n\u66fe\u7ecf\u5b9a\u4f4d\u8fc7\u4e00\u4e2a rte_mem_config\u6587\u4ef6\u5185\u5bb9\u88ab\u7834\u574f\u5bfc\u81f4\u6b7b\u9501\u7684\u95ee\u9898\uff0c\u6b64\u540e\u6bcf\u6b21\u90fd\u4f1a\u5148\u786e\u8ba4\u4e0b rte_mem_config \u6587\u4ef6\u7684\u5185\u5bb9\u662f\u5426\u6b63\u5e38\u3002\u4e8e\u662f\u7528 gdb \u6253\u5370\u76f8\u5173\u4fe1\u606f\uff0c\u90e8\u5206\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n```c\\n(gdb) print /x  *rte_config->mem_config\\n$9 = {\\n  magic = 0x12e6fee,\\n  version = 0x130b0163,\\n  nchannel = 0x4,\\n  nrank = 0x0,\\n  mlock = {\\n    __data = {\\n      __lock = 0x0,\\n      __count = 0x1,\\n      __owner = 0x0,\\n      __nusers = 0x0,\\n      __kind = 0x90,\\n      __spins = 0x0,\\n      __list = {\\n        __prev = 0x0,\\n        __next = 0x0\\n      }\\n    },\\n    __size = {0x0, 0x0, 0x0, 0x0, 0x1, 0x0 <repeats 11 times>, 0x90, 0x0 <repeats 23 times>},\\n    __align = 0x100000000\\n  },\\n.................................................................\\n  memzones = {\\n    name = {0x6d, 0x65, 0x6d, 0x7a, 0x6f, 0x6e, 0x65, 0x0 <repeats 57 times>},\\n    count = 0x27,\\n    len = 0xa00,\\n    elt_sz = 0x48,\\n    data = 0x3fffdd000000,\\n    rwlock = {\\n      __data = {\\n        __lock = 0x0,\\n        __count = 0x1,\\n        __owner = 0x0,\\n        __nusers = 0x0,\\n        __kind = 0x90,\\n        __spins = 0x0,\\n        __list = {\\n          __prev = 0x0,\\n          __next = 0x0\\n        }\\n      },\\n      __size = {0x0, 0x0, 0x0, 0x0, 0x1, 0x0 <repeats 11 times>, 0x90, 0x0 <repeats 23 times>},\\n      __align = 0x100000000\\n    }\\n  },\\n  memsegs = {{\\n      {\\n        base_va = 0x3fffdd200000,\\n        addr_64 = 0x3fffdd200000\\n      },\\n      page_sz = 0x200000,\\n      socket_id = 0x0,\\n      version = 0xa1,\\n      len = 0x400000000,\\n      external = 0x0,\\n      heap = 0x1,\\n      memseg_arr = {\\n        name = {0x6d, 0x65, 0x6d, 0x73, 0x65, 0x67, 0x2d, 0x32, 0x30, 0x34, 0x38, 0x6b, 0x2d, 0x30, 0x2d, 0x30, 0x0 <repeats 48 times>},\\n        count = 0x1b,\\n        len = 0x2000,\\n        elt_sz = 0x30,\\n        data = 0x3fffdd02e000,\\n        rwlock = {\\n          __data = {\\n            __lock = 0x0,\\n            __count = 0x1,\\n            __owner = 0x0,\\n            __nusers = 0x0,\\n            __kind = 0x90,\\n            __spins = 0x0,\\n            __list = {\\n              __prev = 0x0,\\n              __next = 0x0\\n            }\\n          },\\n          __size = {0x0, 0x0, 0x0, 0x0, 0x1, 0x0 <repeats 11 times>, 0x90, 0x0 <repeats 23 times>},\\n          __align = 0x100000000\\n        }\\n      }\\n    }\\n ..................................................\\n  malloc_heaps = {{\\n      lock = {\\n        __data = {\\n          __lock = 0x2,\\n          __count = 0x0,\\n          __owner = 0x3a35,\\n          __nusers = 0x1,\\n          __kind = 0x0,\\n          __spins = 0x0,\\n          __list = {\\n            __prev = 0x0,\\n            __next = 0x0\\n          }\\n        },\\n        __size = {0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x35, 0x3a, 0x0, 0x0, 0x1, 0x0 <repeats 27 times>},\\n        __align = 0x2\\n      },\\n.....................................................................\\n```\\n\u521d\u6b21\u6d4f\u89c8\u5e76\u6ca1\u6709\u53d1\u73b0\u5565\u5f02\u5e38\uff0c\u4f46\u5176\u5b9e\u95ee\u9898\u5df2\u7ecf\u9690\u542b\u5728\u4e0a\u9762\u6536\u96c6\u7684\u4fe1\u606f\u91cc\u4e86\uff0c\u8fd9\u91cc\u5bb9\u6211\u5148\u5356\u4e2a\u5173\u5b50\uff0c\u8fd9\u6837\u624d\u66f4\u8d34\u5207\u5b9a\u4f4d\u6b64\u95ee\u9898\u7684\u771f\u5b9e\u8fc7\u7a0b\u3002\\n### 4. \u8fd8\u80fd\u505a\u4e9b\u4ec0\u4e48\uff1f\\n\u5b9a\u4f4d\u5230\u8fd9\u4e00\u6b65\uff0c\u5c3d\u7ba1\u80fd\u591f\u786e\u5b9a\u9501\u786e\u5b9e\u662f\u88ab\u5176\u5b83\u8fdb\u7a0b\u5360\u7528\u800c\u65e0\u6cd5\u88ab\u83b7\u53d6\u5230\uff0c\u4f46\u5360\u7528\u8fdb\u7a0b\u65e9\u5df2\u7ecf**\u6d88\u5931\u5f97\u65e0\u5f71\u65e0\u8e2a**\uff0c\u53ea\u7559\u4e0b\u4e2a\u65e0\u7528\u7684\u73b0\u573a\u6839\u672c\u5b9a\u4f4d\u4e0d\u4e86\u95ee\u9898\u3002\u4e8e\u662f\u6211\u5224\u65ad\u5df2\u7ecf\u5565\u90fd\u505a\u4e0d\u4e86\u4e86\uff0c\u53ea\u80fd\u5148\u6062\u590d\u73af\u5883\u7ee7\u7eed\u6d4b\u8bd5\u4e86\u3002\\n\\n\u540c\u65f6\u6211\u60f3\u5230\u4e86\u5982\u4e0b\u51e0\u4e2a\u95ee\u9898\uff1a\\n1. \u9700\u8981\u786e\u5b9a\u5360\u7740\u9501\u7684\u8fdb\u7a0b\u5230\u5e95\u662f\u54ea\u4e2a\uff0c\u91cd\u65b0\u590d\u73b0\u95ee\u9898\uff0c\u590d\u73b0\u524d\u4e0d\u65ad ps aux \u4fdd\u5b58\u7ed3\u679c\uff0c\u95ee\u9898\u590d\u73b0\u540e\u5373\u53ef\u4ee5\u5224\u65ad\u662f\u54ea\u4e2a\u7a0b\u5e8f\u6ca1\u6709\u91ca\u653e\\n\\t\\n\\t\u505a\u8fd9\u4e2a\u6d4b\u8bd5\u7684\u76ee\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u7f29\u5c0f\u8303\u56f4\uff0c\u5374\u5e76\u4e0d\u80fd\u4e00\u6b21\u5c31\u5b9a\u4f4d\u5230\u95ee\u9898\u3002\\n2. \u524d\u671f\u5bf9\u9501\u5f02\u5e38\u56de\u6536\u7684\u9a8c\u8bc1\u8fc7\u7a0b\u662f\u5426\u5b58\u5728\u95ee\u9898\uff1f\\n\\t\u524d\u671f\u5404\u79cd\u4e34\u754c\u533a\u5f02\u5e38\u9000\u51fa\u90fd\u6d4b\u8bd5\u8fc7\uff0c\u5747\u6d4b\u8bd5\u901a\u8fc7\uff0c\u5b58\u5728\u95ee\u9898\u7684\u6982\u7387\u5f88\u5c0f\u3002\\n## \u95ee\u9898\u51fa\u73b0\u51e0\u6b21\u540e\u53d1\u73b0\u7684\u5173\u952e\u4fe1\u606f\\n\u6b64\u540e\uff0c\u95ee\u9898\u53c8\u590d\u73b0\u4e86\u51e0\u6b21\uff0c\u6bcf\u6b21\u590d\u73b0\u65f6\uff0c\u6211\u57fa\u672c\u4e0a\u90fd\u67e5\u770b\u7c7b\u4f3c\u7684\u4fe1\u606f\uff0c\u67e5\u770b\u4e86\u51e0\u6b21\u540e\uff0c\u6211\u7a81\u7136\u53d1\u73b0\u4e86\u4e00\u4e2a\u660e\u663e\u7684\u95ee\u9898\u2014\u2014malloc_heaps \u4e2d\u7684 mutex lock \u7684 **__kind** \u5b57\u6bb5\u4e3a 0x0\uff0c\u800c\u5176\u5b83\u7c7b\u4f3c\u7684 **mutex lock** \u7684 **__kind** \u5b57\u6bb5\u4e3a **0x90**\u3002\u91cd\u65b0\u7ffb\u4e86\u4e0b\u51e0\u6b21\u590d\u73b0\u65f6\u6536\u96c6\u5230\u7684\u4fe1\u606f\uff0c\u53d1\u73b0\u90fd\u6709\u8fd9\u4e2a\u7279\u5f81\u3002\u4e0a\u6587\u4e2d\u5356\u7684\u5173\u5b50\u5230\u6b64\u63ed\u6653\u3002\\n\\n\u5177\u4f53\u7684\u5bf9\u6bd4\u5982\u4e0b\uff1a\\n```c\\n   rwlock = {\\n          __data = {\\n            __lock = 0x0,\\n            __count = 0x1,\\n            __owner = 0x0,\\n            __nusers = 0x0,\\n            __kind = 0x90,\\n            __spins = 0x0,\\n            __list = {\\n              __prev = 0x0,\\n              __next = 0x0\\n            }\\n\\nmalloc_heaps = {{\\n      lock = {\\n        __data = {\\n          __lock = 0x2,\\n          __count = 0x0,\\n          __owner = 0x3a35,\\n          __nusers = 0x1,\\n          __kind = 0x0,\\n          __spins = 0x0,\\n          __list = {\\n            __prev = 0x0,\\n            __next = 0x0\\n          }\\n        },\\n```\\n\u5f53\u65f6\u6211\u5728\u5c1d\u8bd5\u7528 mutex \u66ff\u6362 dpdk \u591a\u8fdb\u7a0b\u4e4b\u95f4\u7528\u6237\u6001\u9501\u65f6\u66fe\u7ecf\u5206\u6790\u8fc7 **__kind** \u8fd9\u4e2a\u5b57\u6bb5\uff0c\u786e\u5b9a\u5b83\u662f**\u5728\u8bbe\u7f6e mutex \u5c5e\u6027\u7684\u65f6\u5019\u88ab\u8d4b\u503c**\u3002\\n\\n\u5bf9\u4e8e dpdk \u591a\u8fdb\u7a0b\u5171\u4eab\u9501\u7684\u573a\u666f\uff0c**\u521d\u59cb\u5316 mutex \u9501\u7684\u65f6\u5019\u9700\u8981\u8bbe\u5b9a PTHREAD_PROCESS_SHARED \u4e0e PTHREAD_MUTEX_ROBUST \u5c5e\u6027**\uff0c\u6b63\u5e38\u7684 **__kind** \u5e94\u8be5\u662f **0x90**\u3002\\n\\n\u5728\u8fd9\u4e2a\u95ee\u9898\u91cc\u8fd9\u628a mutex \u9501\u3010\u672a\u521d\u59cb\u5316\u3011\u5c31\u88ab\u4f7f\u7528\uff0c\u5b83\u4e0d\u652f\u6301\u5f02\u5e38\u56de\u6536\uff0c\u8fd9\u6837\u5728\u83b7\u53d6\u5230\u8fd9\u628a\u9501\u540e\u6ca1\u6709\u91ca\u653e\u9501\u8fdb\u7a0b\u5c31\u88ab\u5f02\u5e38\u6740\u6b7b\u65f6\u5c31\u4f1a\u5bfc\u81f4\u5176\u5b83\u9700\u8981\u518d\u6b21\u83b7\u53d6\u8fd9\u628a\u9501\u7684\u8fdb\u7a0b\u6b7b\u9501\u3002\\n\\n## \u5b58\u5728\u95ee\u9898\u7684\u4ee3\u7801\u5728\u54ea\u91cc\uff1f\\n\u9605\u8bfb\u4ee3\u7801\uff0c\u786e\u8ba4\u5982\u4e0b dpdk \u4ee3\u7801\u5b58\u5728\u95ee\u9898\uff1a\\n\\n```c\\nint\\nrte_eal_malloc_heap_init(void)\\n{\\n\\tstruct rte_mem_config *mcfg = rte_eal_get_configuration()->mem_config;\\n\\tunsigned int i;\\n\\n\\tif (internal_config.match_allocations) {\\n\\t\\tRTE_LOG(DEBUG, EAL, \\"Hugepages will be freed exactly as allocated.\\\\n\\");\\n\\t}\\n\\n\\tif (rte_eal_process_type() == RTE_PROC_PRIMARY) {\\n\\t\\t/* assign min socket ID to external heaps */\\n\\t\\tmcfg->next_socket_id = EXTERNAL_HEAP_MIN_SOCKET_ID;\\n\\n\\t\\t/* assign names to default DPDK heaps */\\n\\t\\tfor (i = 0; i < rte_socket_count(); i++) {\\n\\t\\t\\tstruct malloc_heap *heap = &mcfg->malloc_heaps[i];\\n\\t\\t\\tchar heap_name[RTE_HEAP_NAME_MAX_LEN];\\n\\t\\t\\tint socket_id = rte_socket_id_by_idx(i);\\n\\n\\t\\t\\tsnprintf(heap_name, sizeof(heap_name),\\n\\t\\t\\t\\t\\t\\"socket_%i\\", socket_id);\\n\\t\\t\\tstrlcpy(heap->name, heap_name, RTE_HEAP_NAME_MAX_LEN);\\n\\t\\t\\theap->socket_id = socket_id;\\n\\t\\t}\\n\\t}\\n.............................................................\\n```\\ndpdk \u539f\u751f\u4f7f\u7528 **spinlock** \u4fdd\u62a4 **malloc_heaps** \u7ed3\u6784\uff0c**spinlock** \u7684\u521d\u59cb\u5316\u503c\u4e3a 0\u3002\u7531\u4e8e rte_mem_config \u4e2d malloc_heaps \u6240\u6709\u5b57\u6bb5\u7684\u521d\u503c\u5c31\u662f 0\uff0c\u6240\u4ee5\u5b83\u5e76\u6ca1\u6709\u663e\u793a\u8c03\u7528 rte_spinlock_init \u51fd\u6570\u6765\u521d\u59cb\u5316 spinlock\uff0c**\u800crte_spinlock_init \u672c\u8eab\u5c31\u4f1a\u5c06 spinlock cnt \u503c\u521d\u59cb\u5316\u4e3a 0\uff0c\u6ca1\u6709\u521d\u59cb\u5316\u4e5f\u4e0d\u5f71\u54cd\u6b63\u5e38\u6267\u884c\u3002**\\n\\n\u4f46\u662f\u5f53\u628a **spinlock** \u6362\u4e3a **mutex** \u65f6\u5c31\u3010\u5fc5\u987b\u521d\u59cb\u5316\u3011\uff0c\u4e0d\u7136\u9501\u3010\u4e0d\u80fd\u56de\u6536\u3011\uff0c\u8fd9\u6837\u8fdb\u7a0b\u5728\u4e34\u754c\u533a\u4e2d\u88ab\u6740\u6389\u5c31\u4f1a\u5bfc\u81f4\u6b7b\u9501\uff0c\u8fd9\u5c31\u662f\u672c\u6587\u6240\u63cf\u8ff0\u95ee\u9898\u7684\u6839\u672c\u539f\u56e0\u3002\\n\\n## \u672c\u5730\u6a21\u62df\u95ee\u9898\\n\u5c06 dpdk \u4ee3\u7801\u4fee\u6539\u5982\u4e0b\uff1a\\n\\n```c\\nIndex: lib/librte_eal/common/malloc_heap.c\\n===================================================================\\n--- lib/librte_eal/common/malloc_heap.c\\n+++ lib/librte_eal/common/malloc_heap.c\\n@@ -645,6 +645,12 @@\\n+#ifndef F_OK\\n+#define F_OK 0\\n+#endif\\n+       if((access(\\"/tmp/abnormal_exit\\", F_OK)) != -1) {\\n+               exit(-1);\\n+       }\\n\\n        align = align == 0 ? 1 : align;\\n```\\n\\n\u6d4b\u8bd5\u6b65\u9aa4\uff1a\\n\\n1. \u91cd\u65b0\u7f16\u8bd1 dpdk \u540e\u8fd0\u884c l2wd\\n2. \u521b\u5efa /tmp/abnormal_exit\\n3. \u8fd0\u884c dpdk-procinfo\\n4. \u91cd\u65b0\u8fd0\u884c dpdk-procinfo\\n\\ndpdk-procinfo \u6d4b\u8bd5\u8fc7\u7a0b\u8bb0\u5f55\u5982\u4e0b\uff1a\\n\\n```c\\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# touch /tmp/abnormal_exit\\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# ./dpdk-procinfo -- --stats\\nEAL: Detected 8 lcore(s)\\nEAL: Detected 1 NUMA nodes\\nEAL: Multi-process socket /var/run/dpdk/rte/mp_socket_3885_1494910686fd8\\nEAL: Selected IOVA mode \'PA\'\\nEAL: Probing VFIO support...\\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# gdb --args ./dpdk-procinfo -- --stats\\nGNU gdb (Debian 10.1-1.7) 10.1.90.20210103-git\\n...........................................................................\\nReading symbols from ./dpdk-procinfo...\\n(gdb) start\\n...........................................................................\\n(gdb) c\\nContinuing.\\nEAL: Detected 8 lcore(s)\\nEAL: Detected 1 NUMA nodes\\n[New Thread 0x7ffff77e3700 (LWP 3905)]\\nEAL: Multi-process socket /var/run/dpdk/rte/mp_socket_3901_1494f794ad440\\n[New Thread 0x7ffff6fe2700 (LWP 3906)]\\nEAL: Selected IOVA mode \'PA\'\\nEAL: Probing VFIO support...\\n^C\\nThread 1 \\"dpdk-procinfo\\" received signal SIGINT, Interrupt.\\n__lll_lock_wait (futex=futex@entry=0x3ffe92ffd180, private=0) at lowlevellock.c:52\\n52      lowlevellock.c: No such file or directory.\\n(gdb) bt\\n#0  __lll_lock_wait (futex=futex@entry=0x3ffe92ffd180, private=0) at lowlevellock.c:52\\n#1  0x00007ffff79d5843 in __GI___pthread_mutex_lock (mutex=mutex@entry=0x3ffe92ffd180) at ../nptl/pthread_mutex_lock.c:80\\n#2  0x000000000066e3b9 in rte_mutex_lock (mutex=mutex@entry=0x3ffe92ffd180)\\n    at dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c:93\\n#3  0x000000000067ff51 in malloc_heap_alloc_on_heap_id (contig=false, bound=0, align=64, flags=0, heap_id=0, size=8192,\\n    type=0x3ffe92ffd180 \\"\\\\002\\") at dpdk-19.11/lib/librte_eal/common/malloc_heap.c:646\\n#4  malloc_heap_alloc (type=type@entry=0xc02a7e \\"rte_services\\", size=8192, socket_arg=<optimized out>, socket_arg@entry=-1,\\n    flags=flags@entry=0, align=64, bound=bound@entry=0, contig=false)\\n    at dpdk-19.11/lib/librte_eal/common/malloc_heap.c:730\\n#5  0x000000000067af17 in rte_malloc_socket (type=type@entry=0xc02a7e \\"rte_services\\", size=size@entry=8192, align=align@entry=64,\\n    socket_arg=<optimized out>, socket_arg@entry=-1)\\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:60\\n#6  0x000000000067afa5 in rte_zmalloc_socket (type=type@entry=0xc02a7e \\"rte_services\\", size=size@entry=8192, align=align@entry=64,\\n    socket=socket@entry=-1) at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:79\\n#7  0x000000000067afba in rte_zmalloc (type=type@entry=0xc02a7e \\"rte_services\\", size=size@entry=8192, align=align@entry=64)\\n    at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:99\\n#8  0x000000000067afee in rte_calloc (type=type@entry=0xc02a7e \\"rte_services\\", num=num@entry=64, size=size@entry=128,\\n    align=align@entry=64) at dpdk-19.11/lib/librte_eal/common/rte_malloc.c:117\\n#9  0x000000000068392d in rte_service_init ()\\n    at dpdk-19.11/lib/librte_eal/common/rte_service.c:84\\n#10 0x000000000065dca1 in rte_eal_init (argc=<optimized out>, argv=<optimized out>)\\n    at dpdk-19.11/lib/librte_eal/linux/eal/eal.c:1266\\n#11 0x0000000000558a1c in main (argc=6, argv=0x7fffffffe5b8)\\n    at dpdk-19.11/app/proc-info/main.c:1771\\n\\n(gdb) frame 2\\n#2  0x000000000066e3b9 in rte_mutex_lock (mutex=mutex@entry=0x3ffe92ffd180)\\n    at dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c:93\\n93      dpdk-19.11/lib/librte_eal/common/eal_common_mcfg.c: No such file or directory.\\n(gdb) print *mutex\\n$1 = {__data = {__lock = 2, __count = 0, __owner = 3885, __nusers = 1, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}},\\n  __size = \\"\\\\002\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000\\\\000-\\\\017\\\\000\\\\000\\\\001\\", \'\\\\000\' <repeats 26 times>, __align = 2}\\n```\\n\u901a\u8fc7\u63a7\u5236 **/tmp/abnormal_exit** \u6587\u4ef6\u7684\u521b\u5efa\u89e6\u53d1\u4e34\u754c\u533a\u5f02\u5e38\u9000\u51fa\uff0c\u9000\u51fa\u540e\u91cd\u65b0\u8fd0\u884c **dpdk-procinfo** \u7a0b\u5e8f\u786e\u8ba4\u80fd\u591f\u590d\u73b0\u51fa\u4e0e\u672c\u6587\u63cf\u8ff0\u7684\u95ee\u9898\u5b8c\u5168\u4e00\u6837\u7684\u73b0\u8c61\uff0c\u800c\u6b64\u65f6 **3885** \u8fdb\u7a0b\u5df2\u7ecf\u4e0d\u5b58\u5728\uff0c\u9501\u4e0d\u80fd\u91ca\u653e\u3002\\n\\n## \u4fee\u6539\u4ee3\u7801\u6d4b\u8bd5\\n\u6d4b\u8bd5\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a\\n```c\\nIndex: lib/librte_eal/common/malloc_heap.c\\n===================================================================\\n--- lib/librte_eal/common/malloc_heap.c\\n+++ lib/librte_eal/common/malloc_heap.c\\n@@ -645,6 +645,12 @@\\n+#ifndef F_OK\\n+#define F_OK 0\\n+#endif\\n+       if((access(\\"/tmp/abnormal_exit\\", F_OK)) != -1) {\\n+               exit(-1);\\n+       }\\n\\n        align = align == 0 ? 1 : align;\\n\\n@@ -1391,6 +1397,11 @@\\n                                        \\"socket_%i\\", socket_id);\\n                        strlcpy(heap->name, heap_name, RTE_HEAP_NAME_MAX_LEN);\\n                        heap->socket_id = socket_id;\\n+                       rte_mutex_init(&heap->lock);\\n                }\\n        }\\n```\\n\u6838\u5fc3\u4fee\u6539\u662f\u5728**\u521d\u59cb\u5316 malloc_heaps \u7684\u65f6\u5019\u8c03\u7528 rte_mutex_init \u51fd\u6570\u521d\u59cb\u5316 mutex \u4e92\u65a5\u9501**\u3002\\n\\n\u91cd\u65b0\u7f16\u8bd1 l2fwd \u4e0e dpdk-procinfo \u8fdb\u884c\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u6b65\u9aa4\u5982\u4e0b\uff1a\\n\\n1. \u8fd0\u884c l2wd\\n2. \u521b\u5efa /tmp/abnormal_exit\\n3. \u8fd0\u884c dpdk-procinfo\\n4. \u5220\u9664 /tmp/abnormal_exit \u6587\u4ef6\u5e76\u91cd\u65b0\u8fd0\u884c dpdk-procinfo\\n\\n\u7b2c\u56db\u6b65 dpdk-procinfo \u80fd\u591f\u6b63\u5e38\u8fd0\u884c\u8868\u660e\u9501\u88ab\u91ca\u653e\uff0c\u95ee\u9898\u5f97\u5230\u4fee\u590d\uff01\u6d4b\u8bd5\u8fc7\u7a0b\u8bb0\u5f55\u5982\u4e0b\uff1a\\n```c\\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# rm -rf /tmp/abnormal_exit\\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# touch /tmp/abnormal_exit\\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# ./dpdk-procinfo -- --stats\\nEAL: Detected 8 lcore(s)\\nEAL: Detected 1 NUMA nodes\\nEAL: Multi-process socket /var/run/dpdk/rte/mp_socket_3936_14a881225806c\\nEAL: Selected IOVA mode \'PA\'\\nEAL: Probing VFIO support...\\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# rm -rf /tmp/abnormal_exit\\nroot@debian:/home/longyu/dpdk-19.11-mutex-lock-test# ./dpdk-procinfo -- --stats\\nEAL: Detected 8 lcore(s)\\nEAL: Detected 1 NUMA nodes\\nEAL: Multi-process socket /var/run/dpdk/rte/mp_socket_3946_14a91b7d40de5\\nEAL: Selected IOVA mode \'PA\'\\nEAL: Probing VFIO support...\\nEAL: PCI device 0000:00:11.0 on NUMA socket -1\\nEAL:   Invalid NUMA socket, default to 0\\nEAL:   probe driver: 8086:100f net_e1000_em\\nEAL: PCI device 0000:00:12.0 on NUMA socket -1\\nEAL:   Invalid NUMA socket, default to 0\\nEAL:   probe driver: 8086:100f net_e1000_em\\nEAL: PCI device 0000:00:13.0 on NUMA socket -1\\nEAL:   Invalid NUMA socket, default to 0\\nEAL:   probe driver: 8086:100f net_e1000_em\\n\\n  ######################## NIC statistics for port 0  ########################\\n............................................................\\n```\\n\u5f53\u7a0b\u5e8f\u672a\u91ca\u653e\u9501\u9000\u51fa\u540e\uff0c\u91cd\u65b0\u8fd0\u884c dpdk-procinfo \u7a0b\u5e8f\u80fd\u591f\u83b7\u5f97\u9501\uff0c\u6d4b\u8bd5\u901a\u8fc7\uff01\\n\\n## \u662f\u5426\u6709\u5176\u5b83\u7c7b\u4f3c\u95ee\u9898\uff1f\\nreview \u4ee3\u7801\uff0c\u76f8\u5173\u7684\u95ee\u9898\u53ea\u6709\u4e00\u5904\uff0c\u5176\u5b83\u4f4d\u7f6e\u6b63\u5e38\u521d\u59cb\u5316\u3002\\n## \u603b\u7ed3\\n\u5c3d\u7ba1\u672c\u6587\u63cf\u8ff0\u7684\u95ee\u9898\u542c\u4e0a\u53bb\u6709\u4e9b\u9ad8\u5927\u4e0a\uff0c\u53ef\u771f\u6b63\u89e6\u53d1\u95ee\u9898\u7684\u70b9\u5374\u975e\u5e38\u5c0f\uff0c\u5c3d\u7ba1\u5b83\u5c0f\u5374\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e9b\u5173\u952e\u7684\u95ee\u9898\u3002\\n\\n\u5728\u7f16\u7801\u7684\u65f6\u5019\u5c3d\u91cf\u3010\u4e0d\u505a\u9690\u5f0f\u5730\u5047\u8bbe\u3011\uff0c\u8fd9\u79cd\u5047\u8bbe\u5e26\u6765\u4e86\u975e\u5e38\u5dee\u7684\u6269\u5c55\u6027\uff0c\u5f53\u5176\u4ed6\u4eba\u6539\u9020\u5b58\u5728\u5047\u8bbe\u7684\u4ee3\u7801\u65f6\u4e0d\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e9b\u4f9d\u8d56\u5c31\u53ef\u80fd\u5e26\u6765\u4e25\u91cd\u7684\u540e\u679c\u3002\\n\\n\u9664\u4e86\u6b63\u5411\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e4b\u5916\uff0c\u4ece\u53cd\u9762\u6765\u770b\u5176\u5b9e\u9700\u8981\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u5ba1\u89c6\u76f8\u5173\u3010\u4fee\u6539\u7684\u4e00\u81f4\u6027\u3011\uff0c\u5373\u8fd0\u884c\u65f6**\u7279\u5f81\u5b57\u6bb5\u503c\u7684\u4e00\u81f4\u6027**\uff0c\u800c\u4e0d\u662f\u53ea\u9a8c\u8bc1\u529f\u80fd\u3002\u62ff\u672c\u6587\u63cf\u8ff0\u7684\u95ee\u9898\u6765\u8bf4\uff0c\u5c31\u662f\u4e0d\u540c\u7684 mutex \u7684 __kind \u5b57\u6bb5\u7684\u503c\u662f\u5426\u4e00\u81f4\u3002"},{"id":"/dpdk/dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u53ca\u5176\u6f14\u8fdb\u8fc7\u7a0b\u5206\u6790","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u53ca\u5176\u6f14\u8fdb\u8fc7\u7a0b\u5206\u6790","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u53ca\u5176\u6f14\u8fdb\u8fc7\u7a0b\u5206\u6790.md","source":"@site/blog/dpdk/dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u53ca\u5176\u6f14\u8fdb\u8fc7\u7a0b\u5206\u6790.md","title":"dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u53ca\u5176\u90e8\u5206\u6f14\u8fdb\u8fc7\u7a0b","description":"dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u662f dpdk \u76f8\u5bf9\u6838\u5fc3\u7684\u529f\u80fd\uff0c\u672c\u6587\u5c06\u4ece\u8001\u7248\u672c\u9a71\u52a8\u6846\u67b6\u5f00\u59cb\u63cf\u8ff0\uff0c\u4ece\u6f14\u8fdb\u8fc7\u7a0b\u4e2d\u4e00\u6b65\u6b65\u903c\u8fd1\u9ad8\u7248\u672c\u4e2d\u76f8\u5bf9\u5b8c\u5584\u7684\u9a71\u52a8\u6846\u67b6\u7684\u8bbe\u8ba1\u539f\u7406\u3002","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":26.05,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk \u6b7b\u9501\u95ee\u9898\u540e\u7eed\u4e4b\u521d\u59cb\u5316\u5047\u8bbe\u4e0d\u53ef\u8fc1\u79fb\u95ee\u9898"},"nextItem":{"title":"dpdk/dpdk \u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b"}},"content":"dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u662f dpdk \u76f8\u5bf9\u6838\u5fc3\u7684\u529f\u80fd\uff0c\u672c\u6587\u5c06\u4ece\u8001\u7248\u672c\u9a71\u52a8\u6846\u67b6\u5f00\u59cb\u63cf\u8ff0\uff0c\u4ece\u6f14\u8fdb\u8fc7\u7a0b\u4e2d\u4e00\u6b65\u6b65\u903c\u8fd1\u9ad8\u7248\u672c\u4e2d\u76f8\u5bf9\u5b8c\u5584\u7684\u9a71\u52a8\u6846\u67b6\u7684\u8bbe\u8ba1\u539f\u7406\u3002\\n## dpdk v1.2.3 r0 \u7248\u672c\\ndpdk git \u4e2d\u6700\u8001\u7684\u7248\u672c\u4e3a v1.2.3 r0 \u7248\u672c\uff0c\u6b64\u7248\u672c\u4e2d\u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u5b9e\u73b0\u7684\u5173\u952e\u73af\u8282\u5982\u4e0b\uff1a\\n\\n1. igb_uio \u4e2d\u5b8c\u6210\u5c06\u4e2d\u65ad\u6620\u5c04\u5230\u7528\u6237\u6001\u7684\u4efb\u52a1\uff0c\u5e76\u586b\u5145 uio \u7ed3\u6784\u4f53\u4e2d pci \u8d44\u6e90\u7a7a\u95f4\u7684\u5730\u5740\u4e0e\u957f\u5ea6\uff0c\u5b83\u6ce8\u518c\u7684 pci_driver \u4e2d\uff0c id_table \u5b57\u6bb5\u4e0d\u4e3a\u7a7a\uff0c\u5176\u503c\u5982\u4e0b\uff1a\\n\\n\\t```c\\n\\tstatic struct pci_device_id igbuio_pci_ids[] = {\\n\\t#define RTE_PCI_DEV_ID_DECL(vend, dev) {PCI_DEVICE(vend, dev)},\\n\\t#include <rte_pci_dev_ids.h>\\n\\t{ 0, },\\n\\t};\\n\\t```\\n2. rte_eal_init \u51fd\u6570\u4e2d\u5b8c\u6210\u626b\u63cf pci \u8bbe\u5907\u7684\u8fc7\u7a0b\uff0c\u626b\u63cf\u5230\u7684 pci \u8bbe\u5907\u4f1a\u586b\u5145\u5230 device_list \u94fe\u8868\u4e2d\uff0crte_eal_init \u51fd\u6570\u4e2d\u5e76\u4e0d\u8fdb\u884c\u9a71\u52a8 probe \u8fc7\u7a0b\uff0c\u56e0\u4e3a\u6b64\u65f6\u8fd8\u672a\u6ce8\u518c\u4efb\u4f55\u4e00\u4e2a\u9a71\u52a8\u3002\\n3. \u8fd9\u4e2a\u7248\u672c\u7684 dpdk \u53ea\u652f\u6301 igb \u4e0e ixgbe \u4e24\u4e2a\u7cfb\u5217\u7684\u7528\u6237\u6001\u9a71\u52a8\uff0c\u6bcf\u4e2a\u9a71\u52a8\u4f1a\u5b9e\u73b0\u4e00\u4e2a\u6ce8\u518c\u51fd\u6570\u5e76\u5c06\u6ce8\u518c\u51fd\u6570\u66b4\u9732\u7ed9 dpdk \u7a0b\u5e8f\u4f7f\u7528\uff0c\u663e\u5f0f\u5b8c\u6210\u9a71\u52a8\u6ce8\u518c\u8fc7\u7a0b\u3002\\n4. \u7531\u4e8e\u9a71\u52a8\u6ce8\u518c\u662f\u5728 dpdk \u7a0b\u5e8f\u4e2d\u5b8c\u6210\u7684\uff0c\u9a71\u52a8 probe pci \u8bbe\u5907\u7684\u8fc7\u7a0b\u4e5f\u662f\u5728 dpdk \u7a0b\u5e8f\u4e2d\u663e\u5f0f\u8c03\u7528 probe \u51fd\u6570\u5b8c\u6210\u7684\u3002\\n5. rte_eal_pci_probe \u51fd\u6570\u904d\u5386\u5728 rte_eal_init \u4e2d\u521b\u5efa\u7684 device_list pci \u8bbe\u5907\u94fe\u8868\uff0c\u4f7f\u7528\u8fd9\u4e2a\u94fe\u8868\u4e2d\u7684\u6bcf\u4e2a pci \u8bbe\u5907\u53bb match \u6ce8\u518c\u7684 pci \u9a71\u52a8\u94fe\u8868\u3002\\n6. \u5f53\u4e00\u4e2a pci \u8bbe\u5907 match \u5230\u4e00\u4e2a\u9a71\u52a8\u540e\uff0c\u9996\u5148\u8c03\u7528 pci_uio_map_resource \u51fd\u6570\u6765\u901a\u8fc7 map /dev/uioX \u6587\u4ef6\u6765\u6620\u5c04 pci \u7684 resource \u8d44\u6e90\u5e76\u586b\u5145\u5230 pci \u8bbe\u5907\u7ed3\u6784\u4f53\u4e2d\uff0c\u7136\u540e\u8c03\u7528 pci \u9a71\u52a8\u4e2d\u7684 devinit \u51fd\u6570\u5b8c\u6210\u63a5\u53e3\u521d\u59cb\u5316\u8fc7\u7a0b\u3002\\n7. pci \u9a71\u52a8\u4e2d\u5e76\u4e0d\u5b9a\u4e49 devinit \u51fd\u6570\uff0c\u5b83\u5728\u663e\u793a\u6ce8\u518c\u9a71\u52a8\u65f6\uff0c\u901a\u8fc7\u8c03\u7528 rte_eth_driver_register \u51fd\u6570\u6765\u8bbe\u5b9a\uff0c\u5176\u503c\u88ab\u8bbe\u5b9a\u4e3a rte_eth_dev_init \u51fd\u6570\u3002\\n8. \u7b2c \uff16\u70b9\u4e2d\u63cf\u8ff0\u7684 pci \u9a71\u52a8\u4e2d\u7684 devinit \u51fd\u6570\u5c31\u662f\u7b2c 7 \u70b9\u4e2d\u7684 rte_eth_dev_init \u51fd\u6570\uff0crte_eth_dev_init \u51fd\u6570\u5b9e\u73b0 pci \u8bbe\u5907\u7ed3\u6784\u4f53\u4e0e dpdk \u5185\u90e8 rte_eth_dev \u8bbe\u5907\u7ed3\u6784\u4f53\u7684\u5bf9\u63a5\u8fc7\u7a0b\u3002\\n9. \u5728 pci \u8fd9\u4e00\u4fa7\u6bcf\u4e00\u4e2a\u8bbe\u5907\u7531\u4e00\u4e2a rte_pci_device \u7ed3\u6784\u63cf\u8ff0\u3002\u7531\u4e8e dpdk \u9700\u8981\u5bf9\u5916\u63d0\u4f9b\u7f51\u5361\u63a7\u5236\u63a5\u53e3\uff0c\u8fd9\u4e9b\u63a7\u5236\u8fc7\u7a0b\u4e2d\u7684\u53c2\u6570\u662f\u4e0e\u9a71\u52a8\u65e0\u5173\u7684\uff0c\u4e0d\u80fd\u901a\u8fc7\u76f4\u63a5\u64cd\u4f5c pci \u8fd9\u4e00\u5c42\u7684\u6570\u636e\u7ed3\u6784\u6765\u5b8c\u6210\uff0c\u4e3a\u6b64 dpdk \u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u62bd\u8c61\uff0c\u62bd\u8c61\u51fa\u4e86 rte_eth_dev \u8bbe\u5907\u7ed3\u6784\u4f53\u3002\\n10. \u6bcf\u4e00\u4e2a dpdk \u521d\u59cb\u5316\u7684 pci \u63a5\u53e3\u90fd\u4f1a\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684 rte_eth_dev \u7ed3\u6784\u4f53\uff0cdpdk \u5185\u90e8\u7ef4\u62a4\u4e86\u4e00\u4e2a rte_eth_devices \u5168\u5c40\u53d8\u91cf\uff0c\u5b83\u662f\u4e00\u4e2a rte_eth_dev \u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u6bcf\u4e2a\u63a5\u53e3\u90fd\u4ece\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u5206\u914d\u4e00\u4e2a rte_eth_dev \u7ed3\u6784\u4f53\uff0c\u5916\u90e8\u63a5\u53e3\u901a\u8fc7\u6307\u5b9a\u4e00\u4e2a port_id \u6765\u8ba9 rte_ethdev \u8fd9\u4e00\u5c42\u83b7\u53d6\u5230 rte_eth_dev \u7ed3\u6784\uff0c\u8c03\u7528\u5e95\u5c42\u7684\u51fd\u6570\u6765\u5b8c\u6210\u529f\u80fd\u3002\\n\\n### \u4ece l2fwd \u793a\u4f8b\u7a0b\u5e8f\u4ee3\u7801\u5904\u63a2\u7a76\\n\u5982\u4e0b\u6e90\u7801\u6458\u81ea\u6b64\u7248\u672c\u7684 l2fwd \u793a\u4f8b\u7a0b\u5e8f\uff1a\\n\\n```c\\n\\t        /* init EAL */\\n\\t        ret = rte_eal_init(argc, argv);\\n\\t..........................................\\n\\t#ifdef RTE_LIBRTE_IGB_PMD\\n\\t        if (rte_igb_pmd_init() < 0)\\n\\t                rte_exit(EXIT_FAILURE, \\"Cannot init igb pmd\\\\n\\");\\n\\t#endif\\n\\t#ifdef RTE_LIBRTE_IXGBE_PMD\\n\\t        if (rte_ixgbe_pmd_init() < 0)\\n\\t                rte_exit(EXIT_FAILURE, \\"Cannot init ixgbe pmd\\\\n\\");\\n\\t#endif\\n\\t\\n\\t        if (rte_eal_pci_probe() < 0)\\n\\t                rte_exit(EXIT_FAILURE, \\"Cannot probe PCI\\\\n\\");\\n```\\n\u53ef\u4ee5\u770b\u5230\uff0cigb \u7f51\u5361\u4e0e ixgbe \u7f51\u5361\u9a71\u52a8\u8c03\u7528\u9a71\u52a8\u63d0\u4f9b\u7684\u521d\u59cb\u5316\u51fd\u6570\u6765\u663e\u793a\u6ce8\u518c\uff0c\u6ce8\u518c\u5b8c\u6210\u540e\uff0c\u8c03\u7528 rte_eal_pci_probe \u6765\u5b8c\u6210 probe \u8fc7\u7a0b\u3002\\n\\n### eth_driver \u7ed3\u6784\\n**\u6b64\u7248\u672c\u4ec5\u652f\u6301 pci \u9a71\u52a8**\uff0c\u6bcf\u4e2a\u9a71\u52a8\u9700\u8981\u5b9e\u4f8b\u5316\u4e00\u4e2a eth_driver \u7ed3\u6784\uff0c\u6b64\u7ed3\u6784\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\n\\tstruct eth_driver {\\n\\t\\tstruct rte_pci_driver pci_drv;    /**< The PMD is also a PCI driver. */\\n\\t\\teth_dev_init_t eth_dev_init;      /**< Device init function. */\\n\\t\\tunsigned int dev_private_size;    /**< Size of device private data. */\\n\\t};\\n```\\npci_drv \u662f\u5bf9\u7528\u6237\u6001 pci \u8bbe\u5907\u9a71\u52a8\u7684\u62bd\u8c61\uff0ceth_dev_init \u7528\u6237\u6001\u9a71\u52a8\u7684\u521d\u59cb\u5316\u51fd\u6570\uff0cdev_private_size \u662f\u6bcf\u4e2a\u8bbe\u5907\u7684\u79c1\u6709\u6570\u636e\u5927\u5c0f\u3002\\n\\n\u6bcf\u4e2a\u9a71\u52a8\u90fd\u8981\u5b9e\u4f8b\u5316\u4e00\u4e2a eth_driver \u7ed3\u6784\u4f53\uff0c\u5e76\u663e\u793a\u7684\u8c03\u7528\u6ce8\u518c\u51fd\u6570\u8fdb\u884c\u6ce8\u518c\u3002igb \u7f51\u5361\u7684 eth_driver \u7ed3\u6784\u4f53\u5b9e\u4f8b\u5982\u4e0b\uff1a\\n\\n```c\\nstatic struct eth_driver rte_igb_pmd = {\\n\\t{\\n\\t\\t.name = \\"rte_igb_pmd\\",\\n\\t\\t.id_table = pci_id_igb_map,\\n\\t\\t.drv_flags = RTE_PCI_DRV_NEED_IGB_UIO,\\n\\t},\\n\\t.eth_dev_init = eth_igb_dev_init,\\n\\t.dev_private_size = sizeof(struct e1000_adapter),\\n};\\n```\\n\\n**\u7531\u4e8e eth_driver \u7ed3\u6784\u4f53\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e3a rte_pci_driver \u7ed3\u6784\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5c06\u4e00\u4e2a eth_driver \u7ed3\u6784\u5730\u5740\u8f6c\u5316\u4e3a\u4e00\u4e2a rte_pci_driver \u7ed3\u6784\u5730\u5740\uff08\u901a\u8fc7\u5f3a\u8f6c\uff09**\u3002\\n\\n### rte_pci_driver \u7ed3\u6784\\nrte_pci_driver \u7ed3\u6784\u662f\u5bf9 pci \u9a71\u52a8\u7684\u62bd\u8c61\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\n/**\\n * A structure describing a PCI driver.\\n */\\nstruct rte_pci_driver {\\n\\tTAILQ_ENTRY(rte_pci_driver) next;       /**< Next in list. */\\n\\tconst char *name;                       /**< Driver name. */\\n\\tpci_devinit_t *devinit;                 /**< Device init. function. */\\n\\tstruct rte_pci_id *id_table;            /**< ID table, NULL terminated. */\\n\\tuint32_t drv_flags;                     /**< Flags contolling handling of device. */\\n};\\n```\\nrte_pci_driver \u7684 next \u5b57\u6bb5\u7528\u4e8e\u5c06\u6ce8\u518c\u7684 pci \u9a71\u52a8\u4e32\u8054\u8d77\u6765\uff0cdevinit \u51fd\u6570\u7528\u4e8e\u8bbe\u5907\u521d\u59cb\u5316\u3002\\n\\n### rte_pci_driver \u7ed3\u6784\u4f53\u4e2d\u7684 devinit \u51fd\u6570\\nigb \u9a71\u52a8\u5b9e\u73b0\u7684 rte_pci_driver \u7ed3\u6784\u4e2d\u5e76\u6ca1\u6709\u8bbe\u5b9a devinit \u5b57\u6bb5\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u5728 dpdk \u7a0b\u5e8f\u663e\u5f0f\u8c03\u7528 rte_igb_pmd_init \u6ce8\u518c igb \u9a71\u52a8\u7684\u65f6\u5019\u88ab\u8d4b\u503c\u3002\\n\\nrte_igb_pmd_init \u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\nint\\nrte_igb_pmd_init(void)\\n{\\n\\trte_eth_driver_register(&rte_igb_pmd);\\n\\treturn 0;\\n}\\n```\\nrte_eth_driver_register \u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nvoid\\nrte_eth_driver_register(struct eth_driver *eth_drv)\\n{\\n\\teth_drv->pci_drv.devinit = rte_eth_dev_init;\\n\\trte_eal_pci_register(&eth_drv->pci_drv);\\n}\\n```\\n\u5982\u4e0a\u4ee3\u7801\u80fd\u591f\u8bf4\u660e rte_pci_driver \u4e2d\u7684 devinit \u51fd\u6570\u5728\u9a71\u52a8\u663e\u793a\u6ce8\u518c\u65f6\u88ab\u8d4b\u503c\u4e3a rte_eth_dev_init \u51fd\u6570\uff0c\u90a3\u4e48 **eth_driver \u4e2d\u6ce8\u518c\u7684 eth_dev_init \u51fd\u6570\u5728\u54ea\u91cc\u88ab\u8c03\u7528\u5462\uff1f**\\n\\n### rte_eth_dev_init \u51fd\u6570\\neth_driver \u7ed3\u6784\u4f53\u4e2d\u6ce8\u518c\u7684 eth_dev_init \u51fd\u6570\u5728 rte_eth_dev_init \u51fd\u6570\u4e2d\u88ab\u8c03\u7528\uff0crte_eth_dev_init \u51fd\u6570\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nstatic int\\nrte_eth_dev_init(struct rte_pci_driver *pci_drv,\\n\\t\\t struct rte_pci_device *pci_dev)\\n{\\n\\tstruct eth_driver    *eth_drv;\\n\\tstruct rte_eth_dev *eth_dev;\\n\\tint diag;\\n\\n\\teth_drv = (struct eth_driver *)pci_drv;\\n\\n\\teth_dev = rte_eth_dev_allocate();\\n\\tif (eth_dev == NULL)\\n\\t\\treturn -ENOMEM;\\n\\n\\n\\tif (rte_eal_process_type() == RTE_PROC_PRIMARY){\\n\\t\\teth_dev->data->dev_private = rte_zmalloc(\\"ethdev private structure\\",\\n\\t\\t\\t\\t  eth_drv->dev_private_size,\\n\\t\\t\\t\\t  CACHE_LINE_SIZE);\\n\\t\\tif (eth_dev->data->dev_private == NULL)\\n\\t\\t\\treturn -ENOMEM;\\n\\t}\\n\\teth_dev->pci_dev = pci_dev;\\n\\teth_dev->driver = eth_drv;\\n\\teth_dev->data->rx_mbuf_alloc_failed = 0;\\n\\n\\t/* init user callbacks */\\n\\tTAILQ_INIT(&(eth_dev->callbacks));\\n\\n\\t/*\\n\\t * Set the default maximum frame size.\\n\\t */\\n\\teth_dev->data->max_frame_size = ETHER_MAX_LEN;\\n\\n\\t/* Invoke PMD device initialization function */\\n\\tdiag = (*eth_drv->eth_dev_init)(eth_drv, eth_dev);\\n\\tif (diag == 0)\\n\\t\\treturn (0);\\n\\n\\tPMD_DEBUG_TRACE(\\"driver %s: eth_dev_init(vendor_id=0x%u device_id=0x%x)\\"\\n\\t\\t\\t\\" failed\\\\n\\", pci_drv->name,\\n\\t\\t\\t(unsigned) pci_dev->id.vendor_id,\\n\\t\\t\\t(unsigned) pci_dev->id.device_id);\\n\\tif (rte_eal_process_type() == RTE_PROC_PRIMARY)\\n\\t\\trte_free(eth_dev->data->dev_private);\\n\\tnb_ports--;\\n\\treturn diag;\\n}\\n```\\n\u6b64\u51fd\u6570\u4e2d\u9996\u5148\u4e3a\u5f53\u524d\u7684 pci \u8bbe\u5907\u5206\u914d\u4e00\u4e2a rte_eth_dev \u7ed3\u6784\uff0c\u7136\u540e\u4f7f\u7528 eth_drv \u7ed3\u6784\u4f53\u4e2d\u5b9a\u4e49\u7684 dev_private_size \u5b57\u6bb5\u6765\u521b\u5efa\u9a71\u52a8\u5185\u90e8\u6570\u636e\u7ed3\u6784\u3002\\n\\n\u6b64\u540e\uff0c\u7ee7\u7eed\u521d\u59cb\u5316 rte_eth_dev \u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\uff0c\u6700\u540e\u8c03\u7528 eth_driver \u7ed3\u6784\u4f53\u4e2d\u7684 eth_dev_init \u51fd\u6570\u6307\u9488\u6307\u5411\u7684\u51fd\u6570\uff0c\u5b8c\u6210\u63a5\u53e3\u5e95\u5c42\u521d\u59cb\u5316\u8fc7\u7a0b\u3002\\n\\n### \u4ee5\u4e00\u4e2a igb \u7f51\u5361\u63a5\u53e3\u6765\u4e32\u8d77 dpdk v1.2.3 r0 \u7248\u672c\u63a5\u53e3\u521d\u59cb\u5316\u7684\u6574\u4e2a\u8fc7\u7a0b\\n\u5047\u5b9a\u67d0 linux \u7cfb\u7edf\u4e2d\u6709\u4e00\u4e2a igb \u7f51\u5361\uff0c\u5b83\u53ea\u6709\u4e24\u4e2a\u53e3\uff0c\u8fd9\u4e24\u4e2a\u53e3\u7684 pci \u53f7\u5206\u522b\u4e3a 0000:01:00.0\u30010000:01:00.1\uff0c0000:01:00.0 \u8fd9\u4e2a\u53e3\u7531\u5185\u6838\u9a71\u52a8\u63a5\u7ba1\uff0c0000:01:00.1 \u8fd9\u4e2a\u53e3\u7528\u4e8e dpdk \u8f6c\u5305\uff08\u786e\u8ba4 igb_uio \u7f51\u5361\u652f\u6301\u6b64\u7f51\u5361\uff09\u3002\\n\\n\u5047\u5b9a igb_uio \u9a71\u52a8\u6b63\u5e38\u52a0\u8f7d\uff0c\u5927\u9875\u5185\u5b58\u6b63\u5e38\u914d\u7f6e\uff0c\u5206\u6790\u6a21\u578b\u57fa\u4e8e primary \u8fdb\u7a0b\u3002\\n\\n\u4e0b\u9762\u662f\u5177\u4f53\u8fc7\u7a0b\uff1a\\n\\n1. \u5c06 0000:01:00.1 \u4ece igb \u9a71\u52a8\u89e3\u7ed1\\n2. \u5c06 0000:01:00.1 \u5199\u5165\u5230 /sys \u76ee\u5f55\u4e2d igb_uio \u7684 bind \u6587\u4ef6\u4e2d\uff0c\u7ed1\u5b9a\u63a5\u53e3\u5230 igb_uio\uff0c\u7ed1\u5b9a\u540e /dev/uio0 \u6587\u4ef6\u88ab\u521b\u5efa\uff0c/sys \u76ee\u5f55\u4e2d\u76f8\u5e94\u7684\u6587\u4ef6\u88ab\u521b\u5efa\uff0cuio map \u5730\u5740\u76f8\u5173\u6587\u4ef6\u88ab\u521b\u5efa\uff0c\u793a\u4f8b\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n\\t```bash\\n\\t [root] # pwd\\n\\t/sys/bus/pci/drivers/igb_uio/0000:01:00.0\\n\\t [root] # cat ./uio/uio0/maps/map0/addr ./uio/uio0/maps/map0/name  ./uio/uio0/maps/map0/size ./uio/uio0/maps/map0/offset\\n\\t0xfebf3000\\n\\tBAR1\\n\\t0x1000\\n\\t0x0\\n\\t```\\n3. dpdk \u7a0b\u5e8f\u8c03\u7528 rte_eal_init \u521d\u59cb\u5316\uff0c\u626b\u63cf /sys/bus/pci/devices \u76ee\u5f55\uff0c\u89e3\u6790\u5b50\u76ee\u5f55 0000:01:00.1 \u4e2d\u7684\u6587\u4ef6\uff0c\u586b\u5145\u5230\u4e00\u4e2a\u65b0\u521b\u5efa\u7684 rte_pci_device \u7ed3\u6784\u4f53\u4e2d\uff0c\u586b\u5145\u5b8c\u6210\u540e\u5c06\u6b64\u7ed3\u6784\u4f53\u94fe\u5165\u5230 device_list \u8bbe\u5907\u94fe\u8868\u4e2d\u30020000:01:00.1 \u76ee\u5f55\u4e2d\u7684\u91cd\u8981\u6587\u4ef6\u542b\u4e49\u89c1\u4e0b\u8868\uff1a\\n\\n\\t| file               | function                                              |\\n\\t| ------------------ | ----------------------------------------------------- |\\n\\t| class              | PCI class (ascii, ro)                                 |\\n\\t| config             | PCI config space (binary, rw)                         |\\n\\t| device             | PCI device (ascii, ro)                                |\\n\\t| enable             | Whether the device is enabled (ascii, rw)             |\\n\\t| irq                | IRQ number (ascii, ro)                                |\\n\\t| local_cpus         | nearby CPU mask (cpumask, ro)                         |\\n\\t| remove             | remove device from kernel\'s list (ascii, wo)          |\\n\\t| resource           | PCI resource host addresses (ascii, ro)               |\\n\\t| resource0..N       | PCI resource N, if present (binary, mmap, rw[1])      |\\n\\t| resource0_wc..N_wc | PCI WC map resource N, if prefetchable (binary, mmap) |\\n\\t| rom                | PCI ROM resource, if present (binary, ro)             |\\n\\t| subsystem_device   | PCI subsystem device (ascii, ro)                      |\\n\\t| subsystem_vendor   | PCI subsystem vendor (ascii, ro)                      |\\n\\t| vendor             | PCI vendor (ascii, ro)                                |\\n\\n4. dpdk \u7a0b\u5e8f\u6267\u884c rte_igb_pmd_init \u6ce8\u518c igb \u9a71\u52a8\uff0crte_igb_pmd \u7ed3\u6784\u4f53\u4e2d pci_drv \u7ed3\u6784\u7684 devinit \u51fd\u6570\u6307\u9488\u88ab\u8bbe\u7f6e\u4e3a rte_eth_dev_init \u51fd\u6570\u3002\\n5. dpdk \u7a0b\u5e8f\u8c03\u7528 rte_eal_pci_probe \u51fd\u6570\u5b8c\u6210\u9a71\u52a8 probe \u8fc7\u7a0b\uff0crte_eal_pci_probe \u51fd\u6570\u4f9d\u6b21\u904d\u5386 device_list \u94fe\u8868\uff0c\u83b7\u53d6\u5230 0000:01:00.1 \u63a5\u53e3\u586b\u5145\u7684 rte_pci_device \u7ed3\u6784\u4f53\uff0c\u7136\u540e\u8c03\u7528 pci_probe_all_drivers \u51fd\u6570\u5b8c\u6210\u9a71\u52a8 probe \u8fc7\u7a0b\u3002\\n6. pci_probe_all_drivers \u51fd\u6570\u904d\u5386 driver_list \u94fe\u8868\uff0c\u9996\u5148\u5224\u65ad\u5f53\u524d\u8bbe\u5907\u662f\u5426\u88ab\u52a0\u5165\u5230\u9ed1\u540d\u5355\uff0c\u662f\u5219\u8df3\u8fc7\u6b64\u8bbe\u5907\uff0c\u8fd9\u91cc\u7531\u4e8e\u7a0b\u5e8f\u6267\u884c\u65f6\u6ca1\u6709\u914d\u7f6e\u9ed1\u540d\u5355\uff0c\u4e0d\u4f1a\u8d70\u5165\u8fd9\u4e2a\u903b\u8f91\u3002\\n7. pci_probe_all_drivers \u51fd\u6570\u83b7\u53d6\u5230\u6ce8\u518c\u7684 igb \u9a71\u52a8\u7684 rte_pci_driver \u7ed3\u6784\uff0c\u4f7f\u7528\u6b64\u7ed3\u6784\u4e0e rte_pci_device \u7ed3\u6784\u4e3a\u53c2\u6570\u8c03\u7528 rte_eal_pci_probe_one_driver \u51fd\u6570\\n8. rte_eal_pci_probe_one_driver \u51fd\u6570\u4f7f\u7528 rte_pci_device \u7ed3\u6784\u4f53\u4e2d\u4fdd\u5b58\u7684\u8bbe\u5907\u7684 vendor id \u4e0e device id \u5728 pci_id_igb_map \u5217\u8868\u4e2d\u8fdb\u884c\u5339\u914d\uff0c\u6210\u529f\u5339\u914d\u540e\u8c03\u7528 pci_uio_map_resource \u6765 mmap pci resource \u5730\u5740\u5230\u7528\u6237\u6001\u4e2d\u3002\\n9. pci_uio_map_resource \u9996\u5148\u627e\u5230\u5e76\u89e3\u6790 /sys/bus/pci/drivers/igb_uio/0000:01:00.0/uio/uio0/maps/map0/ \u4e0b\u7684 offset \u4e0e size \u6587\u4ef6\uff0c\u83b7\u53d6 pci resource \u7684\u504f\u79fb\u4e0e\u5927\u5c0f\uff0c\u89e3\u6790\u5230 offset \u4e3a 0x0\uff0csize \u4e3a 0x1000\uff0c\u6253\u5f00 /dev/uio0 \u6587\u4ef6\uff0c\u901a\u8fc7 mmap \u6620\u5c04 pci resource \u5230\u7528\u6237\u6001\u4e2d\u3002\\n10. mmap \u6210\u529f\u540e\u5f97\u5230\u7684\u865a\u62df\u5730\u5740\u586b\u5145\u5230 rte_pci_device \u4e2d\u7684 mem_resource.addr \u4e2d\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a uio_res \u7ed3\u6784\uff0c\u4fdd\u5b58\u6620\u5c04\u540e\u7684\u865a\u62df\u5730\u5740\u4e0e offset\u3001size\uff0c\u5e76\u586b\u5145 path \u4e0e pci_addr \u552f\u4e00\u6807\u8bc6\u5230 uio_res \u7ed3\u6784\uff0c\u6700\u540e\u5c06\u6b64\u7ed3\u6784\u94fe\u5165\u5230 uio_res_list \u94fe\u8868\u4e2d\u3002\\n11. \u518d\u6b21\u56de\u5230 rte_eal_pci_probe_one_driver \u4e2d\uff0c\u8c03\u7528 pci_drv \u4e2d\u7684 devinit \u51fd\u6570\uff0c\u5373 rte_eth_dev_init \u51fd\u6570\u3002\\n12. rte_eth_dev_init \u51fd\u6570\u586b\u5145\u5f53\u524d\u63a5\u53e3\u7684 rte_eth_dev \u7ed3\u6784\u4f53\u540e\u8c03\u7528 eth_igb_dev_init \u51fd\u6570\u3002\\n13. eth_igb_dev_init \u51fd\u6570\u7ee7\u7eed\u521d\u59cb\u5316 rte_eth_dev \u7ed3\u6784\u4e2d\u4e0e\u9a71\u52a8\u76f8\u5173\u7684\u91cd\u8981\u6570\u636e\u7ed3\u6784\uff0c\u5c06 rte_eth_dev_init \u51fd\u6570\u4e2d\u521b\u5efa\u7684\u9a71\u52a8\u5185\u90e8\u6570\u636e\u7ed3\u6784\u5730\u5740 eth_dev->data->dev_private \u8f6c\u5316\u4e3a e1000_adapter \u7ed3\u6784\uff0c\u5e76\u83b7\u53d6 e1000_adpater \u7ed3\u6784\u4f53\u4e2d e1000_hw \u7684\u5730\u5740\uff0c\u5b8c\u6210\u540e\u5c06\u7b2c 10 \u6b65\u4e2d mmap \u5230\u7684 pci resource \u5730\u5740\u8d4b\u503c\u7ed9 hw->hw_addr \u7ed3\u6784\uff0c\u6b64\u540e\u8bfb\u5199\u7f51\u5361\u5bc4\u5b58\u5668\u90fd\u662f\u4ee5\u8fd9\u4e2a hw_addr \u4e3a\u57fa\u5730\u5740\u5b8c\u6210\u7684\u3002\\n14. eth_igb_dev_init \u5b8c\u6210\u786c\u4ef6\u521d\u59cb\u5316\u8fc7\u7a0b\u5e76\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u3002\\n15. dpdk \u7a0b\u5e8f\u7ee7\u7eed\u8c03\u7528 rte_ethdev.c \u4e2d\u5b9e\u73b0\u7684\u7f51\u5361\u63a7\u5236\u63a5\u53e3\uff0c\u914d\u7f6e\u7f51\u5361\u7684\u6536\u53d1\u961f\u5217\u5e76\u5c06\u63a5\u53e3 up \u8d77\u6765\\n16. dpdk \u7a0b\u5e8f\u5b8c\u6210\u63a5\u53e3\u7684\u914d\u7f6e\u540e\uff0c\u6d3e\u53d1\u81ea\u5df1\u5b9e\u73b0\u7684 loop \u51fd\u6570\u5230\u6bcf\u4e2a\u4f7f\u80fd\u7684 lcore \u7ebf\u7a0b\u4e0a\uff0c\u6267\u884c\u6536\u53d1\u5305\u8fc7\u7a0b\u3002\\n\\n### \u603b\u7ed3 v1.2.3 r0 \u7248\u672c\u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u5173\u952e\u77e5\u8bc6\u4e0e\u9690\u542b\u95ee\u9898\\n1. v1.2.3 r0 \u7248\u672c\u901a\u8fc7 mmap /dev/uio \u6587\u4ef6\u6765\u6620\u5c04 pci resource \u8d44\u6e90\\n2. v1.2.3 r0 \u7248\u672c\u9700\u8981\u663e\u5f0f\u8c03\u7528\u6bcf\u4e2a\u9a71\u52a8\u7684\u6ce8\u518c\u51fd\u6570\uff0c\u6269\u5c55\u6027\u8f83\u5dee\uff0c\u8fd9\u79cd\u67b6\u6784\u4e0b\u6bcf\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7c7b\u522b\u7684\u9a71\u52a8\uff0cdpdk \u7a0b\u5e8f\u9700\u8981\u4fee\u6539\u6e90\u7801\u540e\u91cd\u65b0\u7f16\u8bd1\\n3. rte_eth_driver\u3001rte_pci_driver \u4e2d\u53ea\u6709\u521d\u59cb\u5316\u51fd\u6570\uff0c\u6ca1\u6709\u89e3\u521d\u59cb\u5316\u51fd\u6570\uff0c\u7f3a\u5c11\u4e3b\u52a8\u91ca\u653e\u8d44\u6e90\u7684\u8fc7\u7a0b\\n4. \u6b64\u7248\u672c\u4ec5\u652f\u6301 pci \u9a71\u52a8\uff0c\u6ca1\u6709\u62bd\u8c61\u51fa bus \u5c42\uff0cbus \u5c42\u529f\u80fd\u96f6\u6563\u5206\u5e03\u5728\u626b\u63cf pci \u8bbe\u5907\u4e0e probe \u8bbe\u5907\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u592a\u5408\u7406\\n5. \u7f3a\u5c11 ethtool\u3001ifconfig \u7b49 linux \u4e2d\u4f20\u7edf\u7f51\u7edc\u63a5\u53e3\u63a7\u5236\u547d\u4ee4\u7684\u66ff\u4ee3\u5de5\u5177\\n\\n\u4ee5\u4e0a\u51e0\u4e2a\u95ee\u9898\u5728\u540e\u7eed\u7248\u672c\u4e2d\u6e10\u6e10\u5b8c\u5584\uff0c\u4e0b\u9762\u6211\u5c06\u5bf9\u540e\u7eed\u7248\u672c\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u4fee\u6539\u8fdb\u884c\u63cf\u8ff0\u3002\\n\\n## dpdk v1.4.0r0 \u7248\u672c\\n\u6b64\u7248\u672c\u89e3\u51b3\u4e86\u663e\u5f0f\u8c03\u7528\u6bcf\u4e2a\u9a71\u52a8\u6ce8\u518c\u51fd\u6570\u7684\u95ee\u9898\uff0c\u5411\u5916\u754c\u63d0\u4f9b\u4e86 rte_pmd_init_all \u63a5\u53e3\uff0c\u9002\u914d\u65b0\u7684\u9a71\u52a8\u65f6\uff0c\u4e0d\u9700\u8981\u4fee\u6539\u4e0a\u5c42\u7a0b\u5e8f\u7684\u4ee3\u7801\uff0c\u53ea\u9700\u8981\u91cd\u65b0\u94fe\u63a5\u65b0\u7684 dpdk \u5373\u53ef\u3002\\n\\nrte_pmd_init_all \u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nstatic inline\\nint rte_pmd_init_all(void)\\n{\\n\\tint ret = -ENODEV;\\n\\n#ifdef RTE_LIBRTE_IGB_PMD\\n\\tif ((ret = rte_igb_pmd_init()) != 0) {\\n\\t\\tRTE_LOG(ERR, PMD, \\"Cannot init igb PMD\\\\n\\");\\n\\t\\treturn (ret);\\n\\t}\\n\\tif ((ret = rte_igbvf_pmd_init()) != 0) {\\n\\t\\tRTE_LOG(ERR, PMD, \\"Cannot init igbvf PMD\\\\n\\");\\n\\t\\treturn (ret);\\n\\t}\\n#endif /* RTE_LIBRTE_IGB_PMD */\\n\\n#ifdef RTE_LIBRTE_EM_PMD\\n\\tif ((ret = rte_em_pmd_init()) != 0) {\\n\\t\\tRTE_LOG(ERR, PMD, \\"Cannot init em PMD\\\\n\\");\\n\\t\\treturn (ret);\\n\\t}\\n#endif /* RTE_LIBRTE_EM_PMD */\\n\\n#ifdef RTE_LIBRTE_IXGBE_PMD\\n\\tif ((ret = rte_ixgbe_pmd_init()) != 0) {\\n\\t\\tRTE_LOG(ERR, PMD, \\"Cannot init ixgbe PMD\\\\n\\");\\n\\t\\treturn (ret);\\n\\t}\\n\\tif ((ret = rte_ixgbevf_pmd_init()) != 0) {\\n\\t\\tRTE_LOG(ERR, PMD, \\"Cannot init ixgbevf PMD\\\\n\\");\\n\\t\\treturn (ret);\\n\\t}\\n#endif /* RTE_LIBRTE_IXGBE_PMD */\\n\\n\\tif (ret == -ENODEV)\\n\\t\\tRTE_LOG(ERR, PMD, \\"No PMD(s) are configured\\\\n\\");\\n\\treturn (ret);\\n}\\n```\\n\u8fd9\u4e2a\u7248\u672c\u589e\u52a0\u4e86\u5bf9 e1000 \u4e0e igb vf\u3001ixgbe vf \u9a71\u52a8\u7684\u652f\u6301\uff0cpci resource \u5730\u5740\u4ecd\u65e7\u901a\u8fc7 mmap /dev/uioX \u6587\u4ef6\u6765\u5b8c\u6210\u3002\\n\\n## dpdk v1.5.0r0 \u7248\u672c\\n\u6b64\u7248\u672c\u589e\u52a0\u4e86\u66f4\u591a\u7684 pmd \u9a71\u52a8\uff0c\u589e\u52a0\u4e86\u5bf9\u8bf8\u5982 pcap \u7b49\u975e pci \u7f51\u5361\u9a71\u52a8\u7684\u652f\u6301\u3002\u975e pci \u7f51\u5361\u9a71\u52a8\u6709\u5355\u72ec\u7684\u521d\u59cb\u5316\u51fd\u6570 rte_eal_non_pci_ethdev_init\uff0c\u6b64\u51fd\u6570\u5728 rte_eal_init \u51fd\u6570\u4e2d\u88ab\u8c03\u7528\u3002\\n\\n\u5176\u6e90\u7801\u5982\u4e0b\uff1a\\n```c\\nint\\nrte_eal_non_pci_ethdev_init(void)\\n{\\n\\tuint8_t i, j;\\n\\tfor (i = 0; i < NUM_DEV_TYPES; i++) {\\n\\t\\tfor (j = 0; j < RTE_MAX_ETHPORTS; j++) {\\n\\t\\t\\tconst char *params;\\n\\t\\t\\tchar buf[16];\\n\\t\\t\\trte_snprintf(buf, sizeof(buf), \\"%s%\\"PRIu8,\\n\\t\\t\\t\\t\\tdev_types[i].dev_prefix, j);\\n\\t\\t\\tif (eal_dev_is_whitelisted(buf, &params))\\n\\t\\t\\t\\tdev_types[i].init_fn(buf, params);\\n\\t\\t}\\n\\t}\\n\\treturn 0;\\n}\\n```\\n\u53ef\u4ee5\u770b\u5230\u5b83\u5b9e\u9645\u662f\u901a\u8fc7\u904d\u5386 dev_types \u8fd9\u4e2a\u6570\u7ec4\u6765\u521d\u59cb\u5316\u7684\uff0c\u5176\u5b83\u7684\u53c2\u6570\u901a\u8fc7\u547d\u4ee4\u884c\u83b7\u53d6\u3002\\n\\ndev_types \u6570\u7ec4\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nstruct device_init dev_types[] = {\\n#ifdef RTE_LIBRTE_PMD_RING\\n\\t\\t{\\n\\t\\t\\t.dev_prefix = RTE_ETH_RING_PARAM_NAME,\\n\\t\\t\\t.init_fn = rte_pmd_ring_init\\n\\t\\t},\\n#endif\\n#ifdef RTE_LIBRTE_PMD_PCAP\\n\\t\\t{\\n\\t\\t\\t.dev_prefix = RTE_ETH_PCAP_PARAM_NAME,\\n\\t\\t\\t.init_fn = rte_pmd_pcap_init\\n\\t\\t},\\n#endif\\n\\t\\t{\\n\\t\\t\\t.dev_prefix = \\"-nodev-\\",\\n\\t\\t\\t.init_fn = NULL\\n\\t\\t}\\n};\\n```\\ndev_prefix \u7528\u4e8e\u6807\u8bc6 vdev \u9a71\u52a8\uff0cinit_fn \u662f\u9a71\u52a8\u7684\u521d\u59cb\u5316\u51fd\u6570\u3002\u8fd9\u6837\u7684\u5b9e\u73b0\u5b58\u5728\u7684\u95ee\u9898\u662f vdev \u4e0e pci \u7b49\u7269\u7406\u7f51\u5361\u9a71\u52a8\u7684\u6ce8\u518c\u4e0e\u521d\u59cb\u5316\u8fc7\u7a0b\u6ca1\u6709\u7edf\u4e00\uff0c\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u62bd\u8c61\u5c42\u6b21\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\\n\\n\u540c\u65f6\uff0c\u8fd9\u4e2a\u7248\u672c\u5f15\u5165\u4e86 kni \u6a21\u5757\uff0c\u5f53\u4f7f\u7528\u4e86 kni \u6a21\u5757\u540e\uff0c\u652f\u6301\u901a\u8fc7 ethtool\u3001ifconfig \u8fd9\u4e9b\u6807\u51c6\u547d\u4ee4\u63a7\u5236\u7f51\u5361\u63a5\u53e3\uff0c\u5f25\u8865\u4e86\u73b0\u6709\u5de5\u5177\u7684\u4e0d\u8db3\uff0c\u540c\u65f6\u4e5f\u6253\u901a\u4e86 dpdk \u7a0b\u5e8f\u4e0e\u5185\u6838\u534f\u8bae\u6808\u7684\u4ea4\u4e92\u8fc7\u7a0b\u3002\\n\\nkni \u652f\u6301 ethtool \u83b7\u53d6\u6570\u636e\u5b9e\u8d28\u4e0a\u662f\u7ef4\u62a4\u4e86\u4e00\u5957\u5185\u6838\u6001\u7684\u9a71\u52a8\uff0c\u540c\u65f6\u4e3a\u4e86\u907f\u514d\u4e0e\u7528\u6237\u6001\u540c\u65f6\u4f7f\u7528\u9020\u6210\u95ee\u9898\uff0c\u5bf9\u5185\u6838\u9a71\u52a8\u8fdb\u884c\u4e86\u4e00\u7cfb\u5217\u5b9a\u5236\u5316\u4fee\u6539\uff0c\u5e26\u6765\u65b0\u529f\u80fd\u7684\u540c\u65f6\u4e5f\u5f15\u5165\u4e86\u65b0\u7684\u95ee\u9898\u3002\\n\\n## dpdk v1.7.0\\nv1.7.0 \u5bf9\u7528\u6237\u6001\u9a71\u52a8\u67b6\u6784\u8fdb\u884c\u4e86\u8f83\u5927\u5e45\u5ea6\u7684\u8c03\u6574\uff0c\u62bd\u8c61\u51fa\u4e86\u4e00\u4e2a rte_driver \u7ed3\u6784\u6765\u5c4f\u853d vdev \u4e0e pdev \u7684\u5dee\u522b\uff0c\u7edf\u4e00\u4e86\u6ce8\u518c\u8fc7\u7a0b\u3002\\n\\n\u540c\u65f6\u4e5f\u5254\u9664\u4e86\u663e\u5f0f\u8c03\u7528\u9a71\u52a8\u6ce8\u518c\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u6539\u4e3a\u901a\u8fc7 gcc \u7684 constructor \u5c5e\u6027\u5728 main \u51fd\u6570\u6267\u884c\u524d\u81ea\u52a8\u6ce8\u518c\uff0c\u540c\u65f6 probe \u7684\u903b\u8f91\u4e5f\u5408\u5e76\u5230\u4e86 rte_eal_init \u51fd\u6570\u4e2d\u8c03\u7528\uff0c\u4e0a\u5c42\u7a0b\u5e8f\u5bf9\u5e95\u5c42\u9a71\u52a8\u7684\u6ce8\u518c\u4e0e probe \u8fc7\u7a0b\u5b8c\u5168\u4e0d\u611f\u77e5\u3002\\n\\n### rte_driver \u7ed3\u6784\\nrte_driver \u7ed3\u6784\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\\n```c\\nstruct rte_driver {\\n\\tTAILQ_ENTRY(rte_driver) next;  /**< Next in list. */\\n\\tenum pmd_type type;\\t\\t   /**< PMD Driver type */\\n\\tconst char *name;                   /**< Driver name. */\\n\\trte_dev_init_t *init;              /**< Device init. function. */\\n};\\n```\\nnext \u5b57\u6bb5\u5c06\u4e0d\u540c\u7684 rte_driver \u94fe\u8d77\u6765\uff0ctype \u5b57\u6bb5\u7528\u4e8e\u533a\u5206 PMD \u9a71\u52a8\u7684\u7c7b\u578b\uff0c\u5982 PDEV\u3001VDEV\u3001BDEV\uff0cinit \u51fd\u6570\u662f\u5bf9\u8001\u7248\u672c\u6bcf\u4e2a\u9a71\u52a8\u7684\u6ce8\u518c\u51fd\u6570\u7684\u62bd\u8c61\u3002\\n\\nigb pmd \u9a71\u52a8\u5b9e\u4f8b\u5316\u7684\u7ed3\u6784\u5982\u4e0b\uff1a\\n```c\\n3061 static struct rte_driver pmd_igb_drv = {\\n3062     .type = PMD_PDEV,\\n3063     .init = rte_igb_pmd_init,\\n3064 };\\n```\\n\u8bbe\u5b9a type \u4e3a PMD_PDEV \u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7269\u7406\u7f51\u5361\u9a71\u52a8\uff0cinit \u51fd\u6570\u6307\u5411 rte_igb_pmd_init\uff0crte_igb_pmd_init \u672c\u8eab\u5b8c\u6210\u81ea\u8001\u7248\u672c\u7ee7\u627f\u7684 eth_driver \u9a71\u52a8\u7684\u6ce8\u518c\uff0c\u8fd9\u91cc\u4e3a\u4e86\u5b9e\u73b0\u4e0e VDEV \u9a71\u52a8\u6ce8\u518c\u8fc7\u7a0b\u7684\u7edf\u4e00\uff0c\u5728\u6bcf\u4e2a PDEV \u9a71\u52a8\u4e2d\u4f7f\u7528 eth_driver \u9a71\u52a8\u7684\u6ce8\u518c\u63a5\u53e3\u5b9e\u4f8b\u5316\u4e00\u4e2a rte_driver \u7ed3\u6784\uff0c\u5c06\u6b64\u7ed3\u6784\u5728 main \u51fd\u6570\u4e4b\u524d\u6ce8\u518c\u5230 dev_driver_list \u94fe\u8868\u4e2d\u3002\\n\\n\u5f53 main \u51fd\u6570\u6267\u884c\u65f6\uff0cdev_driver_list \u94fe\u8868\u4e2d\u4fdd\u5b58\u4e86\u6240\u6709\u6ce8\u518c\u7684 rte_driver \u9a71\u52a8\uff0c\u8fd9\u4e9b rte_driver \u9a71\u52a8\u80fd\u591f\u5206\u4e3a\u4e09\u4e2a\u7c7b\u522b\uff1a\\n1. PDEV \u6807\u5fd7\u7684 pci \u7269\u7406\u8bbe\u5907\u9a71\u52a8\u5b9e\u4f8b\u5316\u7684 rte_driver\\n2. VDEV \u6807\u5fd7\u7684\u865a\u62df\u8bbe\u5907\u9a71\u52a8\u5b9e\u4f8b\u5316\u7684 rte_driver\\n3. BDEV \u6807\u5fd7 bond \u865a\u62df\u8bbe\u5907\u9a71\u52a8\u5b9e\u4f8b\u5316\u7684 rte_driver\\n### VDEV \u7c7b\u9a71\u52a8\\nVDEV \u7c7b\u9a71\u52a8\u7684\u4ee3\u8868\u662f pcap \u9a71\u52a8\uff0c\u5176 rte_driver \u7ed3\u6784\u5982\u4e0b\uff1a\\n\\n```c\\nstatic struct rte_driver pmd_pcap_drv = {\\n\\t.name = \\"eth_pcap\\",\\n\\t.type = PMD_VDEV,\\n\\t.init = rte_pmd_pcap_devinit,\\n};\\n```\\ntype \u4e3a PMD_VDEV \u8868\u793a\u8fd9\u662f\u4e2a\u865a\u62df\u7f51\u5361\u9a71\u52a8\uff0crte_pmd_pcap_devinit \u51fd\u6570\u5b9e\u9645\u4e0a\u5c31\u662f\u6b64\u9a71\u52a8\u7684\u521d\u59cb\u5316\u51fd\u6570\uff0c\u5e76\u4e0d\u9700\u8981\u518d\u8fdb\u884c\u4efb\u4f55\u7684\u6ce8\u518c\u8fc7\u7a0b\u3002\\n\\n### PDEV \u7c7b\u9a71\u52a8\\nPDEV \u7c7b\u9a71\u52a8\u7684\u4ee3\u8868\u662f igb \u9a71\u52a8\uff0c\u8fd9\u7c7b\u9a71\u52a8\u5b9e\u4f8b\u5316\u7684 rte_driver \u7ed3\u6784\u4e2d\u7684 init \u51fd\u6570\u672c\u8eab\u53c8\u662f\u4e00\u4e2a\u6ce8\u518c eth_driver \u9a71\u52a8\u7684\u51fd\u6570\uff0c\u8fd9\u5c31\u5c06\u539f\u6765 PDEV \u7c7b\u9a71\u52a8\u7684\u6ce8\u518c\u8fc7\u7a0b\u590d\u6742\u5316\u4e86\uff0c\u662f\u7edf\u4e00\u63a5\u53e3\u5e26\u6765\u7684\u4e00\u4e9b\u574f\u5904\u3002\\n\\n\u8fd9\u65f6\u5019 PDEV \u7c7b\u9a71\u52a8\u7684\u6ce8\u518c\u8fc7\u7a0b\u53ef\u4ee5\u603b\u7ed3\u4e3a\u5982\u4e0b\u6b65\u9aa4\uff1a\\n\\n1. \u5b9e\u4f8b\u5316 rte_driver \u7ed3\u6784\uff0c\u5e76\u5c06 init \u51fd\u6570\u8bbe\u5b9a\u4e3a eth_driver \u51fd\u6570\u7684\u6ce8\u518c\u51fd\u6570\\n2. \u901a\u8fc7 PMD_REGISTER_DRIVER \u5b8f\u6ce8\u518c rte_driver \u7ed3\u6784\uff0c\u6b64\u7ed3\u6784\u5728 main \u51fd\u6570\u6267\u884c\u524d\u88ab\u6ce8\u518c\u5230 dev_driver_list \u94fe\u8868\u4e2d\\n3. rte_eal_init \u4e2d\u904d\u5386 dev_driver_list \u94fe\u8868\u8c03\u7528 PDEV \u9a71\u52a8\u4e2d\u6ce8\u518c eth_driver \u7ed3\u6784\u7684\u51fd\u6570\uff0c\u5b8c\u6210\u4e0e\u8001\u7248\u672c\u76f8\u540c\u7684\u6ce8\u518c\u6d41\u7a0b\\n\\nPMD_REGISTER_DRIVER \u5b8f\u7684\u539f\u7406\u8be6\u89c1\uff1a[gcc constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u672a\u88ab\u94fe\u63a5\u95ee\u9898](https://blog.csdn.net/Longyu_wlz/article/details/113725959?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161961368916780357248787%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=161961368916780357248787&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-113725959.pc_v2_rank_blog_default&utm_term=%E6%9E%84%E9%80%A0)\\n\\n### BDEV \u7c7b\u9a71\u52a8\\n1.7.0 \u4e2d\u5b9e\u73b0\u4e86 bond \u865a\u62df\u63a5\u53e3\u9a71\u52a8\uff0cbond \u9a71\u52a8\u5b8c\u5168\u662f\u8f6f\u4ef6\u5b9e\u73b0\uff0c\u4f46\u662f\u6700\u521d\u7684\u7248\u672c\u9700\u8981\u5c06 bond \u9a71\u52a8\u521d\u59cb\u5316\u8fc7\u7a0b\u653e\u5728 pci \u8bbe\u5907 probe \u4e4b\u540e\u6765\u5b8c\u6210\u5176\u529f\u80fd\uff0c\u8fd9\u79cd\u7279\u6b8a\u7684\u4f9d\u8d56\u5173\u7cfb\u50ac\u751f\u4e86 BDEV \u7c7b\u9a71\u52a8\uff0c\u4e0d\u8fc7\u8fd9\u53ea\u662f\u4e00\u4e2a\u4e2d\u95f4\u7684\u8fc7\u6e21\u7248\u672c\uff0c\u540e\u9762\u7684\u7248\u672c\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0cBDEV \u4e0e VDEV \u521d\u59cb\u5316\u8fc7\u7a0b\u5f97\u5230\u4e86\u7edf\u4e00\u3002\\n\\n### rte_eal_dev_init \u51fd\u6570\\n1.7.0 \u7248\u672c\u5b9e\u73b0\u4e86\u9a71\u52a8\u7684\u81ea\u52a8\u6ce8\u518c\u8fc7\u7a0b\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff0c\u7b2c\u4e00\u4e2a\u9636\u6bb5\u662f\u6784\u9020\u51fd\u6570\u6267\u884c\u9636\u6bb5\uff0c\u7b2c\u4e8c\u9636\u6bb5\u662f pci \u9a71\u52a8\u7684\u6ce8\u518c\u8fc7\u7a0b\u3002\\n\\n\u7b2c\u4e8c\u9636\u6bb5\u7684\u6ce8\u518c\u8fc7\u7a0b\u4e0e\u9a71\u52a8\u7684 probe \u8fc7\u7a0b\u90fd\u5408\u5e76\u5230\u4e86 rte_eal_init \u51fd\u6570\u4e2d\uff0c\u4e0a\u5c42\u7a0b\u5e8f\u5b8c\u5168\u4e0d\u611f\u77e5\u3002\\n\\nrte_eal_init \u51fd\u6570\u8c03\u7528 rte_eal_dev_init \u51fd\u6570\u5b8c\u6210 VDEV \u8bbe\u5907\u7684\u521d\u59cb\u5316\u4ee5\u53ca pci \u9a71\u52a8\u7684\u6ce8\u518c\u8fc7\u7a0b\uff0c\u7531\u4e8e BOND \u9a71\u52a8\u7684\u7279\u6b8a\u6027\uff0crte_eal_dev_init \u4e5f\u88ab\u5212\u5206\u4e3a\u4e86\u4e24\u4e2a\u9636\u6bb5\u3002\\n\\nPMD_INIT_PRE_PCI_PROBE \u9636\u6bb5\u521d\u59cb\u5316\u90a3\u4e9b\u4e0d\u4f9d\u8d56 pci \u7f51\u5361\u7684 VDEV \u8bbe\u5907\uff0c\u8fd9\u4e00\u9636\u6bb5\u5728 pci \u8bbe\u5907 probe \u4e4b\u524d\u6267\u884c\uff0cPMD_INIT_POST_PCI_PROBE \u9636\u6bb5\u4ec5\u7528\u4e8e bond \u8bbe\u5907\u521d\u59cb\u5316\u3002\\n\\n### igb_uio \u4e2d\u79fb\u9664 pci id table\\n1.7.0 \u7248\u672c\u4e2d igb_uio \u6a21\u5757\u6ce8\u518c\u7684 pci \u9a71\u52a8\u79fb\u9664\u4e86 pci id table\uff0c\u6b64\u65f6\u7ed1\u5b9a\u7f51\u5361\u5230 igb_uio \u9700\u8981\u5148\u5c06\u7f51\u5361\u7684 vendor id \u4e0e device id \u62fc\u63a5\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u5199\u5165\u5230 igb_uio \u5728 /sys \u5b50\u76ee\u5f55\u4e2d\u7684 new_id \u6587\u4ef6\u4e2d\u624d\u80fd\u8fdb\u884c\u7ed1\u5b9a\u3002\\n\\n### VFIO \u6a21\u5757\u7684\u652f\u6301\\nv1.7.0 \u9664\u4e86\u652f\u6301 igb_uio \u8fd9\u79cd\u6807\u51c6\u7684 uio \u6620\u5c04 pci \u8d44\u6e90\u7a7a\u95f4\u4e0e\u4e2d\u65ad\u5230\u7528\u6237\u6001\u5916\uff0c\u4e5f\u652f\u6301 vfio \u6a21\u5757\u3002\\n\\n\u6211\u5bf9 vfio \u8fd9\u5757\u6ca1\u6709\u6df1\u5165\u7814\u7a76\uff0c\u4e0d\u8fdb\u4e00\u6b65\u63cf\u8ff0\u4e86\u3002\\n\\n## v1.8.0\\n\u6b64\u7248\u672c\u89e3\u51b3\u4e86 bond \u529f\u80fd\u7684\u9650\u5236\uff0c\u7edf\u4e00\u4e86\u6240\u6709 VDEV \u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002\\n\\n## dpdk-16.04\\ndpdk-16.04 \u7528\u6237\u6001\u9a71\u52a8\u67b6\u6784\u4e3b\u4f53\u7ee7\u7eed\u6cbf\u7528 v1.8.0 \u7248\u672c\u4ee3\u7801\uff0c\u5728\u7edf\u4e00 linux \u5e73\u53f0\u4e0e bsd \u5e73\u53f0 uio \u51fd\u6570\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4fee\u6539\u4e86 pci resource \u7684\u6620\u5c04\u903b\u8f91\uff0c\u4e0d\u518d\u901a\u8fc7 mmap /dev/uiox \u6587\u4ef6\u6765\u5b8c\u6210\u3002\\n\\n\u5177\u4f53\u7684\u539f\u7406\u53ef\u4ee5\u9605\u8bfb [dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790](https://blog.csdn.net/Longyu_wlz/article/details/115956761?spm=1001.2014.3001.5501) \u3002\\n\\ndpdk-16.04 \u4e2d\u9488\u5bf9\u6807\u51c6 viritio \u9a71\u52a8\u8bbf\u95ee io \u7aef\u53e3\u7684\u9700\u6c42\u5b9e\u73b0\u4e86 rte_eal_pci_ioport_map \u7b49 ioport \u76f8\u5173\u7684\u51fd\u6570\u63a5\u53e3\uff0c\u5f53 virtio \u7f51\u5361\u88ab\u7ed1\u5b9a\u5230 igb_uio \u65f6\uff0cioport \u7684\u57fa\u5730\u5740\u901a\u8fc7\u8bbf\u95ee /sys \u76ee\u5f55\u4e2d virtio \u8bbe\u5907\u5b50\u76ee\u5f55\u4e2d uio \u5b50\u76ee\u5f55\u4e2d\u7684 port \u63a5\u53e3\u6765\u83b7\u53d6\u3002\\n\\nvtpci_init \u51fd\u6570\u4e2d\u8c03\u7528 legacy_virtio_resource_init \u51fd\u6570\u6765 map virtio ioport\uff0c\u6b64\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u662f\u901a\u8fc7\u8c03\u7528 rte_eal_pci_ioport_map \u51fd\u6570\u5b8c\u6210\u7684\u3002\\n\\n\u6b64\u51fd\u6570\u6e90\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nint\\nrte_eal_pci_ioport_map(struct rte_pci_device *dev, int bar,\\n\\t\\t       struct rte_pci_ioport *p)\\n{\\n\\tint ret = -1;\\n\\n\\tswitch (dev->kdrv) {\\n#ifdef VFIO_PRESENT\\n\\tcase RTE_KDRV_VFIO:\\n\\t\\tif (pci_vfio_is_enabled())\\n\\t\\t\\tret = pci_vfio_ioport_map(dev, bar, p);\\n\\t\\tbreak;\\n#endif\\n\\tcase RTE_KDRV_IGB_UIO:\\n\\t\\tret = pci_uio_ioport_map(dev, bar, p);\\n\\t\\tbreak;\\n\\tcase RTE_KDRV_UIO_GENERIC:\\n#if defined(RTE_ARCH_X86)\\n\\t\\tret = pci_ioport_map(dev, bar, p);\\n#else\\n\\t\\tret = pci_uio_ioport_map(dev, bar, p);\\n#endif\\n\\t\\tbreak;\\n\\tcase RTE_KDRV_NONE:\\n#if defined(RTE_ARCH_X86)\\n\\t\\tret = pci_ioport_map(dev, bar, p);\\n#endif\\n\\t\\tbreak;\\n\\tdefault:\\n\\t\\tbreak;\\n\\t}\\n\\n\\tif (!ret)\\n\\t\\tp->dev = dev;\\n\\n\\treturn ret;\\n}\\n```\\n\u5f53 virtio \u7ed1\u5b9a\u5230 igb_uio \u7684\u65f6\u5019\u8c03\u7528 pci_uio_ioport_map \u6765\u83b7\u53d6 ioport \u7684\u57fa\u5730\u5740\uff0cpci_uio_ioport_map \u901a\u8fc7\u8bbf\u95ee\u5e76\u89e3\u6790 /sys/bus/pci/devices/0000:xx:xx.x/uio/uioX/portio/portX/start \u6587\u4ef6\u6765\u5b8c\u6210\uff0cstart \u6587\u4ef6\u7684\u503c\u5373\u4e3a portio \u7684\u57fa\u5730\u5740\u3002\\n\\n## dpdk 17.x bus \u62bd\u8c61\u5c42\u7684\u5f15\u5165\\ndpdk 17.x \u7248\u672c\u6700\u521d\u5408\u5165\u4e86 nxp \u516c\u53f8\u7684 fsl-mc bus driver\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\uff0cbus \u62bd\u8c61\u5c42\u4e0d\u65ad\u5b8c\u5584\uff0c\u6700\u7ec8 pci\u3001vdev bus \u4e5f\u5f97\u5230\u4e86\u652f\u6301\uff0c\u7528\u6237\u6001\u9a71\u52a8\u67b6\u6784\u7684\u4f7f\u7528\u573a\u666f\u8fdb\u4e00\u6b65\u62d3\u5bbd\uff0c\u65e7\u7684\u67b6\u6784\u88ab\u91cd\u6784\uff0c\u65b0\u6846\u67b6\u590d\u6742\u6027\u8fdb\u4e00\u6b65\u589e\u52a0\u3002\\n\\n\u76ee\u524d\u8fd8\u6ca1\u6709\u6df1\u5165\u7814\u7a76\uff0c\u672a\u6765\u5355\u72ec\u5199\u4e00\u7bc7\u535a\u5ba2\u63cf\u8ff0\u65b0\u7248\u672c bus \u6846\u67b6\u4e0b\u7528\u6237\u6001\u9a71\u52a8\u7684\u67b6\u6784\u3002\\n\\n## \u603b\u7ed3\\n\u672c\u6587\u4ece\u8001\u7248\u672c dpdk \u7740\u624b\uff0c\u63cf\u8ff0\u4e86\u5728\u7248\u672c\u6f14\u8fdb\u8fc7\u7a0b\u4e2d dpdk \u7528\u6237\u6001\u9a71\u52a8\u67b6\u6784\u7684\u6f14\u53d8\u8fc7\u7a0b\u3002\\n\\n\u7528\u6237\u6001\u9a71\u52a8\u67b6\u6784\u662f dpdk \u975e\u5e38\u6838\u5fc3\u7684\u8bbe\u8ba1\uff0c\u5bf9\u5b83\u7684\u7814\u7a76\u662f\u6211\u4eec\u4e0e\u8bbe\u8ba1\u8005\u5bf9\u8bdd\u7684\u8fc7\u7a0b\u3002\u4ece\u672c\u6587\u7684\u5206\u6790\u4e2d\u80fd\u591f\u770b\u51fa\u8fd9\u4e00\u5957\u6846\u67b6\u5e76\u4e0d\u662f\u4ece\u4e00\u5f00\u59cb\u5c31\u8fd9\u6837\u590d\u6742\uff0c\u5c31\u80fd\u591f\u517c\u5bb9\u591a\u79cd\u573a\u666f\u5e76\u5177\u5907\u9ad8\u5ea6\u7684\u53ef\u6269\u5c55\u6027\uff0c\u8fd9\u4e9b\u5143\u7d20\u662f\u5728\u7a0b\u5e8f\u7684\u8fed\u4ee3\u4e2d\u4e0d\u65ad\u4f18\u5316\u7684\u3002\u4e0d\u540c\u7684\u67b6\u6784\u6709\u81ea\u5df1\u652f\u6301\u7684\u7279\u5b9a\u573a\u666f\uff0c\u6211\u4eec\u4e5f\u5e94\u8be5\u4ee5\u53d8\u5316\u7684\u89d2\u5ea6\u6765\u770b\u5f85\u4e0d\u540c\u7248\u672c\u7684\u4f18\u52a3\u4e4b\u5904\u3002\\n\\ndpdk \u7684\u5e94\u7528\u573a\u666f\u5c31\u662f\u4e00\u79cd\u73af\u5883\uff0c\u73af\u5883\u7684\u53d8\u5316\u50ac\u5316\u4e86\u7a0b\u5e8f\u5185\u90e8\u67b6\u6784\u7684\u4e0d\u65ad\u91cd\u6784\uff0c\u6211\u4eec\u4e0d\u4e5f\u5728\u7ecf\u5386\u7c7b\u4f3c\u7684\u8fc7\u7a0b\u5417\uff1f\u6838\u5fc3\u53ea\u662f\u73af\u5883\u4e0d\u540c\u7f62\u4e86\uff01"},{"id":"/dpdk/dpdk \u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b.md","source":"@site/blog/dpdk/dpdk \u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b.md","title":"dpdk/dpdk \u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b","description":"dpdk \u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u6392\u67e5","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":1.955,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u53ca\u5176\u90e8\u5206\u6f14\u8fdb\u8fc7\u7a0b","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7528\u6237\u6001\u9a71\u52a8\u6846\u67b6\u53ca\u5176\u6f14\u8fdb\u8fc7\u7a0b\u5206\u6790"},"nextItem":{"title":"\u63a5\u53e3 up\u3001down \u5931\u8d25\u95ee\u9898\u6392\u67e5","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u63a5\u53e3 down\u3001up \u95ee\u9898\u5b9a\u4f4d\u7684\u4e00\u822c\u6d41\u7a0b"}},"content":"## dpdk \u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u6392\u67e5\\n\\n1. \u786e\u5b9a\u7f51\u5361\u7c7b\u578b\u4e0e\u6027\u80fd\u8981\u6c42\uff0c\u4e0e\u786c\u4ef6\u7ec4\u6c9f\u901a\u786e\u8ba4\u7f51\u5361\u6027\u80fd\u57fa\u7ebf\u6570\u636e\uff0c\u57fa\u7ebf\u6570\u636e\u7b26\u5408\u8981\u6c42\u5219\u6267\u884c\u4e0b\u9762\u7684\u6b65\u9aa4\\n2. \u4f7f\u7528 perf \u786e\u5b9a\u5f53\u524d\u4f7f\u7528\u7684\u6536\u53d1\u5305\u51fd\u6570\uff0c\u672a\u4f7f\u7528\u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\uff0c\u5f00\u542f\u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u540e\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u5219\u7ec8\u6b62\\n3. \u786e\u5b9a\u5f53\u524d\u6536\u53d1\u5305\u7ebf\u7a0b\u7ed1\u6838\u60c5\u51b5\uff0c\u4fee\u6539 grub \u914d\u7f6e\uff0c\u6dfb\u52a0 isolcpus\u3001nohz_full\u3001rcu_nocbs \u914d\u7f6e\uff0c\u9694\u79bb\u6536\u53d1\u5305\u7ebf\u7a0b\u7ed1\u5b9a\u6838\u540e\u91cd\u65b0\u6d4b\u8bd5\uff0c\u8fbe\u5230\u8981\u6c42\u5219\u7ec8\u6b62\\n4. \u4fee\u6539 irq \u4eb2\u548c\u6027\u540e\u91cd\u65b0\u6d4b\u8bd5\uff0c\u8fbe\u5230\u8981\u6c42\u5219\u7ec8\u6b62\\n5. \u91cd\u590d 3 \u4e0e 4 \u8fc7\u7a0b\uff0c\u7ed1\u5b9a\u4e0d\u540c\u7684\u6838\uff0c\u91c7\u96c6\u7ed1\u5b9a\u5230\u5947\u6570\u6838\uff0c\u5076\u6570\u6838\uff0c\u76f8\u90bb\u6838\u4e0a\u6027\u80fd\u6570\u636e\uff0c\u83b7\u53d6\u6536\u53d1\u5305\u7edf\u8ba1\uff0c\u67e5\u770b imissed \u5b57\u6bb5\u4e0e nombuf \u5b57\u6bb5\\n6. \u89c2\u6d4b\u7b2c 5 \u6b65\u6536\u96c6\u5230\u7684\u4fe1\u606f\uff0c\u5224\u65ad\u662f\u5426\u5728\u7ed1\u5b9a\u67d0\u4e2a\u6838\u65f6\u6027\u80fd\u8f83\u4f18\uff0c\u8bbe\u5b9a\u6700\u4f18\u7684\u7ed1\u6838\u60c5\u51b5\\n7. \u5c06\u7f51\u5361\u66f4\u6362\u5230\u4e0d\u540c\u7684\u69fd\u4f4d\uff0c\u91c7\u96c6\u6027\u80fd\u6570\u636e\uff0c\u9a8c\u8bc1\u662f\u5426\u5b58\u5728\u6027\u80fd\u5dee\u5f02\\n8. \u6740\u6389\u65e0\u5173\u8fdb\u7a0b\uff0c\u6392\u67e5\u662f\u5426\u5176\u5b83\u8fdb\u7a0b\u5f71\u54cd\uff0c\u65e0\u5f71\u54cd\u5219\u7ee7\u7eed\u5411\u4e0b\u6392\u67e5\\n9. \u6267\u884c\u4e0a\u8ff0\u6b65\u9aa4\u4ecd\u65e7\u8fbe\u4e0d\u5230\u8981\u6c42\u65f6\uff0c\u5f00\u542f\u591a\u961f\u5217\uff0c\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u5219\u7ec8\u6b62\\n10. \u6267\u884c\u4e0a\u8ff0\u6b65\u9aa4\u65e0\u6548\u540e\uff0c\u89c2\u6d4b\u6d4b\u8bd5\u6570\u636e\u4e2d imissed \u8f83\u9ad8\u5219\u8c03\u5927 rx\u3001tx \u63cf\u8ff0\u7b26\u6570\u91cf\uff0c\u8fbe\u5230\u8981\u6c42\u5219\u7ec8\u6b62\\n11. \u7b2c 8 \u6b65\u65e0\u6548\u540e\uff0c\u6267\u884c perf\u3001vtune \u91c7\u96c6\u6027\u80fd\u70ed\u70b9\uff0c\u4ece\u8f6f\u4ef6\u4fa7\u4f18\u5316"},{"id":"/dpdk/dpdk \u7a0b\u5e8f\u63a5\u53e3 down\u3001up \u95ee\u9898\u5b9a\u4f4d\u7684\u4e00\u822c\u6d41\u7a0b","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u63a5\u53e3 down\u3001up \u95ee\u9898\u5b9a\u4f4d\u7684\u4e00\u822c\u6d41\u7a0b","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u63a5\u53e3 down\u3001up \u95ee\u9898\u5b9a\u4f4d\u7684\u4e00\u822c\u6d41\u7a0b.md","source":"@site/blog/dpdk/dpdk \u7a0b\u5e8f\u63a5\u53e3 down\u3001up \u95ee\u9898\u5b9a\u4f4d\u7684\u4e00\u822c\u6d41\u7a0b.md","title":"\u63a5\u53e3 up\u3001down \u5931\u8d25\u95ee\u9898\u6392\u67e5","description":"\u63a5\u53e3 up \u5931\u8d25\u95ee\u9898","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":2.64,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b"},"nextItem":{"title":"dpdk \u7a0b\u5e8f\u6536\u53d1\u5305\u95ee\u9898\u6392\u67e5","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u6536\u53d1\u5305\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b"}},"content":"## \u63a5\u53e3 up \u5931\u8d25\u95ee\u9898\\n\\n1. \u6392\u67e5\u786c\u4ef6\u63a5\u7ebf\u60c5\u51b5\\n2. \u786e\u8ba4\u7f51\u5361\u662f\u5426 bypass \u5361\uff0c\u68c0\u67e5 bypass \u72b6\u6001\\n3. \u6536\u96c6 ifconfig x/x\u3001ethtool x/x\u3001ethtool -i x/x\u3001ethtool -S x/x\u3001ethtool -d x/x \u4fe1\u606f\\n4. \u67e5\u770b dmesg \u4fe1\u606f\u662f\u5426\u6709\u5f02\u5e38\\n5. \u5224\u65ad\u63a5\u53e3\u5bf9\u5e94\u5173\u7cfb\u662f\u5426\u4e00\u81f4\\n6. \u89c2\u5bdf\u63a5\u53e3\u706f\u72b6\u6001\\n7. \u5224\u65ad\u662f\u5426\u8f6f\u4ef6\u95ee\u9898\uff1ambuf \u6cc4\u9732\u5bfc\u81f4\u95ee\u9898\\n8. \u8f6f\u4ef6\u6392\u67e5\u65e0\u6548\u540e\u67e5\u770b\u5149\u6a21\u5757\u578b\u53f7\uff0c\u5224\u65ad\u5149\u6a21\u5757\u578b\u53f7\u662f\u5426\u517c\u5bb9\\n9. \u5224\u65ad\u5149\u6a21\u5757\u578b\u53f7\u6ca1\u6709\u95ee\u9898\u540e\uff0c\u5c06\u63a5\u53e3\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u8fdb\u884c\u6d4b\u8bd5\\n10. \u5b98\u65b9\u9a71\u52a8\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u5219\u5224\u5b9a\u4e3a\u786c\u4ef6\u95ee\u9898\uff0c\u5b98\u65b9\u9a71\u52a8\u80fd\u591f\u6b63\u5e38\u5219\u5224\u65ad\u4e3a\u9a71\u52a8\u95ee\u9898\\n\\n\u5907\u6ce8\u4fe1\u606f\uff1a\u5f53\u63a5\u53e3\u5df2\u7ecf\u5904\u4e8e up \u72b6\u6001\u65f6\uff0c\u8981\u6210\u529f up\uff0c\u5fc5\u987b\u5148\u6267\u884c down \u64cd\u4f5c\u3002\\n\\n# \u63a5\u53e3 down \u5931\u8d25\u95ee\u9898\\n\\n\u63a5\u53e3 down \u95ee\u9898\u4e00\u822c\u8868\u73b0\u4e3a\u6267\u884c\u4e86 down \u63a5\u53e3\u540e\u7f51\u5361 link \u706f\u8fd8\u662f\u4eae\u7684\u3001down \u4e86\u63a5\u53e3\u540e\uff0c\u83b7\u53d6\u5230\u7684\u63a5\u53e3\u94fe\u8def\u72b6\u6001\u8fd8\u662f up \u7684\u3002\\n\\n1. \u786e\u5b9a\u7f51\u5361\u578b\u53f7\u4e0e\u5bf9\u7aef\u8bbe\u5907\u53ca\u63a5\u53e3\u4e0e\u5bf9\u7aef\u706f\u7684\u5f53\u524d\u72b6\u6001\\n2. \u6536\u96c6 ifconfig x/x\u3001ethtool x/x\u3001ethtool -i x/x\u3001ethtool -S x/x\u3001ethtool -d x/x \u4fe1\u606f\\n3. \u67e5\u770b dmesg \u4fe1\u606f\u662f\u5426\u6709\u5f02\u5e38\\n4. \u67e5\u770b dpdk \u7a0b\u5e8f\u63a5\u53e3\u65e5\u5fd7\u4fe1\u606f\u662f\u5426\u6709\u5f02\u5e38\\n5. \u67e5\u770b\u63a5\u53e3\u5bf9\u5e94\u5173\u7cfb\u662f\u5426\u4e00\u81f4\\n6. \u4e0a\u8ff0\u64cd\u4f5c\u6ca1\u6709\u5f02\u5e38\u540e\uff0c\u91cd\u65b0\u6267\u884c up\u3001down \u590d\u73b0\u95ee\u9898\uff0c\u786c\u4ef6\u95ee\u9898\u4e00\u822c\u80fd\u591f\u5fc5\u73b0\\n8. \u95ee\u9898\u5fc5\u73b0\u540e\uff0c\u67e5\u770b dpdk \u7a0b\u5e8f\u662f\u5426\u4f7f\u80fd lsc \u4e2d\u65ad\uff0c\u4f7f\u80fd\u5219\u5173\u95ed\u91cd\u8bd5\uff0c\u672a\u4f7f\u80fd\u7ee7\u7eed\u4e0b\u4e00\u6b65\\n9. \u6709\u6761\u4ef6\u5219\u4f7f\u7528 dpdk_proc_info \u7a0b\u5e8f\u6536\u96c6\u5149\u6a21\u5757\u578b\u53f7\u4fe1\u606f\uff0c\u5224\u65ad\u662f\u5426\u662f\u517c\u5bb9\u7684\u5149\u6a21\u5757\uff0c\u65e0\u6761\u4ef6\u5219\u6267\u884c\u7b2c 8 \u6b65\\n10. \u5c06 down \u4e0d\u6389\u7684\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\uff0c\u5224\u65ad\u662f\u5426\u6709\u76f8\u540c\u95ee\u9898\\n11. \u5b98\u65b9\u9a71\u52a8\u4e5f\u6709\u76f8\u540c\u95ee\u9898\u65f6\uff0c\u6392\u9664\u5355\u4e2a\u7f51\u5361\u7684\u5f71\u54cd\uff0c\u5b98\u65b9\u9a71\u52a8\u6ca1\u6709\u95ee\u9898\u65f6\uff0c\u5bf9\u6bd4\u9a71\u52a8\u4ee3\u7801\\n12. \u5728\u591a\u5f20\u5361\u4e0a\u7ed1\u5b9a\u5b98\u65b9\u9a71\u52a8\u80fd\u591f\u590d\u73b0\u95ee\u9898\u540e\uff0c\u534f\u540c\u5382\u5546\u5904\u7406"},{"id":"/dpdk/dpdk \u7a0b\u5e8f\u6536\u53d1\u5305\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u6536\u53d1\u5305\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u6536\u53d1\u5305\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b.md","source":"@site/blog/dpdk/dpdk \u7a0b\u5e8f\u6536\u53d1\u5305\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b.md","title":"dpdk \u7a0b\u5e8f\u6536\u53d1\u5305\u95ee\u9898\u6392\u67e5","description":"\u63a5\u53e3\u4e0d\u6536\u5305\u95ee\u9898\u6392\u67e5","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":4.24,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u63a5\u53e3 up\u3001down \u5931\u8d25\u95ee\u9898\u6392\u67e5","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u63a5\u53e3 down\u3001up \u95ee\u9898\u5b9a\u4f4d\u7684\u4e00\u822c\u6d41\u7a0b"},"nextItem":{"title":"dpdk/dpdk \u7a0b\u5e8f\u7ed1\u4e0d\u540c\u7684\u6838\u6027\u80fd\u6709\u660e\u663e\u5dee\u5f02\u95ee\u9898\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u4e0d\u540c\u7684\u6838\u6027\u80fd\u6709\u660e\u663e\u5dee\u5f02\u95ee\u9898\u5206\u6790"}},"content":"## \u63a5\u53e3\u4e0d\u6536\u5305\u95ee\u9898\u6392\u67e5\\n\\n1.\u786e\u8ba4\u7f51\u5361\u7c7b\u578b\u4e0e\u5f02\u5e38\u63a5\u53e3\\n\\n2.\u6536\u96c6 ethtool -i x/x\u3001ifconfig x/x\u3001ethtool x/x\u3001ethtool -d x/x\u3001ethtool -S x/x \u4fe1\u606f\\n\\n3.\u786e\u8ba4\u63a5\u53e3\u8fde\u7ebf\u662f\u5426\u6b63\u5e38\uff0c\u63a5\u53e3\u662f\u5426 up\uff0c\u63a5\u53e3\u5904\u4e8e down \u72b6\u6001\u4e0d\u80fd\u8bf4\u660e\u6536\u5305\u5b58\u5728\u5f02\u5e38\\n\\n4.\u786e\u8ba4\u5bf9\u7aef\u662f\u5426\u5728\u53d1\u6d41\uff0c\u5bf9\u7aef\u6ca1\u6709\u53d1\u6d41\u5219\u4e0d\u80fd\u8bf4\u660e\u5b58\u5728\u5f02\u5e38\\n\\n5.dmesg \u4fe1\u606f\u4e2d\u662f\u5426\u6709\u4e0b\u9762\u7c7b\u4f3c\u7684\u4fe1\u606f\uff1a\\n\\n```dmesg\\n    dmar: DMAR:[DMA Read] Request device [01:00.0] fault addr 37ae5000 DMAR:[fault reason 02] Present bit in context entry is clear \\n```\\n   device pci \u53f7\u662f dpdk \u7a0b\u5e8f\u4f7f\u7528\u7684\u7f51\u5361\u63a5\u53e3\u7684 pci \u53f7\uff0c\u7b26\u5408\u8fd9\u4e2a\u95ee\u9898\u7684\u7279\u5f81\u662f**\u4ece\u4e00\u5f00\u59cb\u5c31\u4e0d\u80fd\u6536\u5305\uff0c\u800c\u4e14\u662f\u5fc5\u73b0\u7684**\uff0c\u6709\u8fd9\u4e2a\u524d\u63d0\u5219\u4fee\u6539 grug.cfg \u6587\u4ef6\uff0c\u5185\u6838 cmdline \u4e2d\u6dfb\u52a0 intel_iommu=off \u914d\u7f6e\u540e\u91cd\u8bd5\u3002\\n\\n6.\u5224\u65ad ethtool -d dump \u7684\u5bc4\u5b58\u5668\u4fe1\u606f\u4e2d\u662f\u5426\u6709\u5f02\u5e38\u5982\u63a7\u5236\u5bc4\u5b58\u5668\u5168 F\uff0c\u6709\u5f02\u5e38\u5219\u5224\u5b9a\u4e3a\u786c\u4ef6\u95ee\u9898\uff0c\u53ef\u7ed1\u5b9a\u5b98\u65b9\u9a71\u52a8\u8fdb\u4e00\u6b65\u6392\u67e5\\n\\n7.\u5224\u65ad\u63a5\u53e3\u7684\u6df7\u6dc6\u6a21\u5f0f\u662f\u5426\u5f00\u542f\uff0c\u5f53\u63a5\u53e3 up \u90e8\u5206\u5931\u8d25\u65f6\uff0c\u6df7\u6dc6\u6a21\u5f0f\u4e0d\u4f1a\u88ab\u5f00\u542f\uff0c\u8fd9\u65f6\u7f51\u5361\u4f1a\u4e22\u6389\u6ca1\u6709\u53d1\u7ed9\u81ea\u5df1\u7684\u62a5\u6587\\n\\n8.\u4f7f\u7528 dpdk_proc_info \u5224\u65ad\u63a5\u53e3\u7684 RX-nombuf \u5b57\u6bb5\u662f\u5426\u4e00\u76f4\u589e\u52a0\uff0c\u5f53\u5b58\u5728 mbuf \u6cc4\u9732\u65f6\uff0c\u7533\u8bf7 mbuf \u5931\u8d25\u5219\u65e0\u6cd5\u6536\u5305\\n\\n9.\u591a\u6b21\u6267\u884c ethtool -d dump \u5bc4\u5b58\u5668\uff0c\u67e5\u770b\u7f51\u5361 TAIL \u4e0e HEAD \u6307\u9488\u7684\u53d8\u5316\u60c5\u51b5\uff0c\u5f53 HEAD \u503c > TAIL \u503c\u65f6\uff0c\u961f\u5217 hung \u4f4f\uff0c\u65e0\u6cd5\u6536\u5305\\n\\n10.\u4f7f\u7528 gdb dump \u6536\u5305\u961f\u5217\u4fe1\u606f\u3001\u63a5\u6536\u63cf\u8ff0\u7b26\u4fe1\u606f\u67e5\u627e\u5f02\u5e38\u70b9\\n\\n11.hung \u4f4f\u7684\u95ee\u9898\u9700\u8981\u6ce8\u610f\u95ee\u9898\u51fa\u73b0\u7684\u73af\u5883\uff0c\u662f\u6253\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u6d41\u540e\u51fa\u73b0\u7684\uff0c\u8fd8\u662f\u6740 dpdk \u7a0b\u5e8f\u51fa\u73b0\u7684\\n\\n12.\u786e\u8ba4\u662f\u6740 dpdk \u7a0b\u5e8f\u51fa\u73b0\u7684\u5219\u68c0\u67e5\u7a0b\u5e8f\u53c2\u6570\uff0c\u6253\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u6d41\u540e\u5219\u91cd\u70b9\u6392\u67e5\u662f\u5426\u5f02\u5e38\u6d41\u91cf\u5bfc\u81f4\u961f\u5217 hung \u4f4f\\n\\n## \u63a5\u53e3\u4e0d\u53d1\u5305\u95ee\u9898\u6392\u67e5\\n\\n1.\u786e\u8ba4\u7f51\u5361\u7c7b\u578b\u4e0e\u5f02\u5e38\u63a5\u53e3\\n\\n2.\u6536\u96c6 ethtool -i x/x\u3001ifconfig x/x\u3001ethtool x/x\u3001ethtool -d x/x\u3001ethtool -S x/x \u4fe1\u606f\\n\\n3.\u786e\u8ba4\u63a5\u53e3\u8fde\u7ebf\u662f\u5426\u6b63\u5e38\uff0c\u63a5\u53e3\u662f\u5426 up\uff0c\u63a5\u53e3\u5904\u4e8e down \u72b6\u6001\u4e0d\u80fd\u53d1\u5305\u662f\u6b63\u5e38\u60c5\u51b5\\n\\n4.\u786e\u8ba4\u63a5\u53e3\u6709\u6d41\u91cf\u8f6c\u51fa\uff0ctx_drop \u7b49\u5b57\u6bb5\u5728\u589e\u52a0\\n\\n5.dmesg \u4fe1\u606f\u4e2d\u662f\u5426\u6709\u4e0b\u9762\u7c7b\u4f3c\u7684\u4fe1\u606f\uff1a\\n\\n```dmesg\\n    dmar: DMAR:[DMA Read] Request device [01:00.0] fault addr 37ae5000 DMAR:[fault reason 02] Present bit in context entry is clear \\n```\\n device pci \u53f7\u662f dpdk \u7a0b\u5e8f\u4f7f\u7528\u7684\u7f51\u5361\u63a5\u53e3\u7684 pci \u53f7\uff0c\u7b26\u5408\u8fd9\u4e2a\u95ee\u9898\u7684\u7279\u5f81\u662f\u4ece\u4e00\u5f00\u59cb\u5c31\u4e0d\u80fd\u6536\u5305\uff0c\u800c\u4e14\u662f\u5fc5\u73b0\u7684\uff0c\u6709\u8fd9\u4e2a\u524d\u63d0\u5219\u4fee\u6539 grug.conf \u6587\u4ef6\uff0c\u5185\u6838 cmdline \u4e2d\u6dfb\u52a0 intel_iommu=off \u914d\u7f6e\u540e\u91cd\u8bd5\u3002\\n\\n6.\u5224\u65ad ethtool -d dump \u7684\u5bc4\u5b58\u5668\u4fe1\u606f\u4e2d\u662f\u5426\u6709\u5f02\u5e38\u5982\u63a7\u5236\u5bc4\u5b58\u5668\u5168 F\uff0c\u6709\u5f02\u5e38\u5219\u5224\u5b9a\u4e3a\u786c\u4ef6\u95ee\u9898\uff0c\u53ef\u7ed1\u5b9a\u5b98\u65b9\u9a71\u52a8\u8fdb\u4e00\u6b65\u6392\u67e5\\n\\n9.\u591a\u6b21\u6267\u884c ethtool -d dump \u5bc4\u5b58\u5668\uff0c\u67e5\u770b\u7f51\u5361 tx TAIL \u4e0e HEAD \u6307\u9488\u7684\u53d8\u5316\u60c5\u51b5\uff0c\u5f53 HEAD \u503c > TAIL \u503c\u65f6\uff0c\u961f\u5217 hung \u4f4f\uff0c\u65e0\u6cd5\u53d1\u5305\\n\\n10.\u4f7f\u7528 gdb dump \u53d1\u5305\u961f\u5217\u4fe1\u606f\u3001\u53d1\u9001\u63cf\u8ff0\u7b26\u4fe1\u606f\u67e5\u627e\u5f02\u5e38\u70b9\\n\\n11.hung \u4f4f\u7684\u95ee\u9898\u9700\u8981\u6ce8\u610f\u95ee\u9898\u51fa\u73b0\u7684\u73af\u5883\uff0c\u662f\u6253\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u6d41\u540e\u51fa\u73b0\u7684\uff0c\u8fd8\u662f\u6740 dpdk \u7a0b\u5e8f\u51fa\u73b0\u7684\\n\\n12.\u786e\u8ba4\u662f\u6740 dpdk \u7a0b\u5e8f\u51fa\u73b0\u7684\u5219\u68c0\u67e5\u7a0b\u5e8f\u53c2\u6570\uff0c\u6253\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u6d41\u540e\u5219\u91cd\u70b9\u6392\u67e5\u662f\u5426\u5f02\u5e38\u6d41\u91cf\u5bfc\u81f4\u961f\u5217 hung \u4f4f"},{"id":"/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u4e0d\u540c\u7684\u6838\u6027\u80fd\u6709\u660e\u663e\u5dee\u5f02\u95ee\u9898\u5206\u6790","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u4e0d\u540c\u7684\u6838\u6027\u80fd\u6709\u660e\u663e\u5dee\u5f02\u95ee\u9898\u5206\u6790","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u4e0d\u540c\u7684\u6838\u6027\u80fd\u6709\u660e\u663e\u5dee\u5f02\u95ee\u9898\u5206\u6790.md","source":"@site/blog/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u4e0d\u540c\u7684\u6838\u6027\u80fd\u6709\u660e\u663e\u5dee\u5f02\u95ee\u9898\u5206\u6790.md","title":"dpdk/dpdk \u7a0b\u5e8f\u7ed1\u4e0d\u540c\u7684\u6838\u6027\u80fd\u6709\u660e\u663e\u5dee\u5f02\u95ee\u9898\u5206\u6790","description":"\u524d\u8a00","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":8.44,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk \u7a0b\u5e8f\u6536\u53d1\u5305\u95ee\u9898\u6392\u67e5","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u6536\u53d1\u5305\u95ee\u9898\u6392\u67e5\u7684\u4e00\u822c\u6d41\u7a0b"},"nextItem":{"title":"\u95ee\u9898\u63cf\u8ff0","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u6838\u5931\u8d25\u95ee\u9898\uff1aEAL: pthread_setaffinity_np failed"}},"content":"## \u524d\u8a00\\ndpdk \u7a0b\u5e8f\u4f1a\u5c06**\u6536\u53d1\u5305\u7ebf\u7a0b\u7ed1\u5b9a\u5230\u6307\u5b9a\u7684 cpu \u6838\u4e0a**\uff0c\u5728\u591a\u6838\u73af\u5883\u4e2d\u6267\u884c\u5c31\u8981\u914d\u7f6e\u9700\u8981\u4f7f\u7528\u7684\u6838\u3002\u5728\u6027\u80fd\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u5f53\u6536\u53d1\u5305\u7ebf\u7a0b\u7ed1\u5b9a\u5230 0 \u6838\u30011 \u6838\u5bf9\u5e94\u7684 cpu \u4e0a\u540e\uff0c**\u6027\u80fd\u4f1a\u6709\u660e\u663e\u7684\u4e0b\u964d**\uff0c\u800c\u7ed1\u5b9a\u5230 0 \u6838\u30011 \u6838\u4e4b\u540e\u7684\u6838\u4e0a\u5374\u6ca1\u6709\u8fd9\u4e2a\u95ee\u9898\u3002\\n\\n\u5728\u6392\u67e5\u8fd9\u4e2a\u95ee\u9898\u7684\u65f6\u5019\u53d1\u73b0\uff0c**\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e9b\u4e2d\u65ad\u53ea\u5728 0 \u6838\u4e0a\u6709\u7edf\u8ba1\u8ba1\u6570**\uff0c\u8868\u660e\u5176\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u53ea\u5728 0 \u6838\u4e0a\u6267\u884c\uff0c\u5f53 dpdk \u7a0b\u5e8f\u4e5f\u4f7f\u7528 0 \u6838\u8fdb\u884c\u6536\u53d1\u5305\u7684\u65f6\u5019\uff0c\u8fd9\u4e9b\u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5c31\u4f1a\u4e0e dpdk \u7a0b\u5e8f\u5171\u4eab cpu \u6838\uff0c\u4ece\u800c\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u6027\u80fd\u4e0b\u964d\u3002\\n\\n\u5728\u5b9a\u4f4d\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6709\u5bf9 irq smp_affinity \u7684\u8bbe\u5b9a\u8fc7\u7a0b\uff0c\u901a\u8fc7\u8bbe\u5b9a\u591a\u4e2a\u4e2d\u65ad\u7684 irq smp_affinity \u8ba9\u5176\u5728 0 \u6838\u4e0e 1 \u6838\u4e4b\u540e\u7684\u6838\u4e0a\u8fd0\u884c\uff0c\u91cd\u65b0\u6d4b\u8bd5\u540e\u6709\u660e\u663e\u7684\u6539\u5584\u4f46\u662f\u8fd8\u662f\u5dee\u4e00\u70b9\uff0c\u7ee7\u7eed\u5b9a\u4f4d\u53d1\u73b0 0 \u6838\u4e0a\u6709\u5f88\u591a\u7684 soft irq \u7a0b\u5e8f\u5728\u8fd0\u884c\u3002\\n\\n\u5728\u672c\u6587\u4e2d\u6211\u5c06\u63a2\u8ba8\u4e00\u4e0b irq smp_affinity \u7684\u77e5\u8bc6\uff0c\u540c\u65f6\u5f15\u51fa soft irq \u7684\u5185\u5bb9\u3002\\n\\n## \u5185\u6838\u6587\u6863\u4e2d\u4e0e irq smp_affinity \u76f8\u5173\u7684\u4fe1\u606f\\n\u4e00\u624b\u8d44\u6599\u6e90\u81ea\u5185\u6838 Documentation \u76ee\u5f55\u4e2d\uff0c\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n```manual\\n================\\nSMP IRQ affinity\\n================\\n/proc/irq/IRQ#/smp_affinity and /proc/irq/IRQ#/smp_affinity_list specify\\nwhich target CPUs are permitted for a given IRQ source.  It\'s a bitmask\\n(smp_affinity) or cpu list (smp_affinity_list) of allowed CPUs.  It\'s not\\nallowed to turn off all CPUs, and if an IRQ controller does not support\\nIRQ affinity then the value will not change from the default of all cpus.\\n\\n/proc/irq/default_smp_affinity specifies default affinity mask that applies\\nto all non-active IRQs. Once IRQ is allocated/activated its affinity bitmask\\nwill be set to the default mask. It can then be changed as described above.\\nDefault mask is 0xffffffff.\\n\\nHere is an example of limiting that same irq (44) to cpus 1024 to 1031::\\n\\n        [root@moon 44]# echo 1024-1031 > smp_affinity_list\\n        [root@moon 44]# cat smp_affinity_list\\n        1024-1031\\n\\nNote that to do this with a bitmask would require 32 bitmasks of zero\\nto follow the pertinent one.\\n```\\nsmp_affinity \u8bbe\u5b9a\u4e86\u5355\u4e2a\u4e2d\u65ad\u88ab\u5141\u8bb8\u6267\u884c\u7684 cpu \u63a9\u7801\uff0c\u5185\u6838\u4f1a\u4ee5\u4e2d\u65ad\u53f7\u4e3a\u6807\u8bc6\u7b26\u5728 /proc/irq/ \u4e3a\u6bcf\u4e00\u4e2a\u4e2d\u65ad\u521b\u5efa\u4e00\u4e2a\u5b50\u76ee\u5f55\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bfb\u5199 /proc/irq/IRQ \u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u6765\u63a7\u5236\u6bcf\u4e00\u4e2a\u4e2d\u65ad\u5141\u8bb8\u88ab\u6267\u884c\u7684 cpu \u5217\u8868\u3002\\n\\n## \u4e00\u4e2a\u793a\u4f8b\\n\u8fd9\u91cc\u6211\u4ee5 iwlwifi \u65e0\u7ebf\u7f51\u5361\u8bbe\u5907\u7684\u4e2d\u65ad\u6765\u6f14\u793a\u5982\u4f55\u67e5\u770b\u5e76\u4fee\u6539 irq smp_affinity\uff0c\u8fbe\u5230\u8ba9\u8bbe\u5b9a\u7684\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u5728\u6307\u5b9a\u7684 cpu \u6838\u4e0a\u6267\u884c\u7684\u76ee\u7684\u3002\\n\\n\u9996\u5148\u901a\u8fc7\u8bbf\u95ee /proc/interrupts \u786e\u8ba4 iwlwifi \u7684\u4e2d\u65ad\u8ba1\u6570\u5728\u589e\u52a0\uff0c\u64cd\u4f5c\u8bb0\u5f55\u5982\u4e0b\uff1a\\n\\n\\n```bash\\n[longyu@debian-10:20:20:25] 14 $ grep \'141:\' /proc/interrupts \\n 141:     486315          0          0     596832          0          0          0          0  IR-PCI-MSI 333824-edge      iwlwifi: default queue\\n[longyu@debian-10:20:21:07] 14 $ grep \'141:\' /proc/interrupts \\n 141:     486405          0          0     596832          0          0          0          0  IR-PCI-MSI 333824-edge      iwlwifi: default queue\\n[longyu@debian-10:20:21:08] 14 $ grep \'141:\' /proc/interrupts \\n 141:     486703          0          0     596832          0          0          0          0  IR-PCI-MSI 333824-edge      iwlwifi: default queue\\n```\\n\u4e0a\u9762\u7684\u64cd\u4f5c\u67e5\u4e86\u4e09\u6b21 141 \u53f7\u4e2d\u65ad\u7684\u7edf\u8ba1\u8ba1\u6570\uff0c\u8f93\u51fa\u4fe1\u606f\u8868\u660e\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u5728 0 \u6838\u4e0a\u4e0e 3 \u6838\u4e0a\u6267\u884c\uff0c141 \u53f7\u4e2d\u65ad\u7684 smp_affinity \u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```bash\\n[longyu@debian-10:20:27:01] 14 $ cat /proc/irq/141/smp_affinity\\nff\\n```\\n\u4ece\u4e0a\u9762\u7684\u5185\u5bb9\u53ef\u4ee5\u786e\u5b9a\uff0c**141 \u53f7\u4e2d\u65ad\u7684\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u88ab\u5141\u8bb8\u5728\u524d 8 \u4e2a\u6838\u4e0a\u8fd0\u884c\uff0c\u4f46\u662f\u4e2d\u65ad\u7edf\u8ba1\u8ba1\u6570\u7684\u53d8\u5316\u60c5\u51b5\u8868\u660e\uff0c\u5b83\u53ea\u5728 0 \u6838\u4e0e 3 \u6838\u4e0a\u6267\u884c\u3002**\\n\\n\u4e0b\u9762\u6211\u901a\u8fc7\u5411 /proc/irq/141/smp_affinity \u4e2d\u5199\u5165\u503c\u6765\u4fee\u6539\u4e2d\u65ad\u7684 cpu \u4eb2\u548c\u6027\uff0c**\u6307\u5b9a\u53ea\u5141\u8bb8 141 \u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u5728 4 \u6838\u4e0a\u8fd0\u884c\u3002**\\n\\n\u64cd\u4f5c\u8bb0\u5f55\u5982\u4e0b\uff1a\\n```bash\\n[longyu@debian-10:20:29:44] 14 $ su -c \' echo \'10\' > /proc/irq/141/smp_affinity\'\\n\u5bc6\u7801\uff1a\\n[longyu@debian-10:20:29:56] 14 $ cat /proc/irq/141/smp_affinity\\n10\\n```\\n\u5199\u5165 proc \u4e0b\u7684\u6587\u4ef6\u9700\u8981\u6709 root \u6743\u9650\uff0c**smp_affinity \u662f\u4ee5\u5341\u516d\u8fdb\u5236\u7684\u5f62\u5f0f\u4f20\u9012\u6570\u636e\u7684\uff0c\u6bcf\u4e00\u4f4d\u8868\u793a\u4e00\u4e2a cpu \u6838\uff0c10 \u8868\u793a\u53ea\u5141\u8bb8\u5728 4 \u6838\u4e0a\u6267\u884c**\u3002\\n\\n\u7b2c\u4e8c\u884c\u547d\u4ee4\u67e5\u8be2\u5230\u7684\u7ed3\u679c\u8868\u660e\u5199\u5165 10 \u5230 141 \u4e2d\u65ad\u7684 smp_affinity \u6587\u4ef6\u6210\u529f\uff0c\u7ee7\u7eed\u67e5\u770b /proc/interrupts \u6765\u786e\u5b9a\u662f\u5426\u771f\u6b63\u751f\u6548\u3002\\n\\n\u64cd\u4f5c\u8bb0\u5f55\u5982\u4e0b\uff1a\\n```bash\\n[longyu@debian-10:20:30:02] 14 $ grep \'141:\' /proc/interrupts \\n 141:     520162          0          0     596832       1465          0          0          0  IR-PCI-MSI 333824-edge      iwlwifi: default queue\\n[longyu@debian-10:20:30:28] 14 $ grep \'141:\' /proc/interrupts \\n 141:     520162          0          0     596832       1639          0          0          0  IR-PCI-MSI 333824-edge      iwlwifi: default queue\\n[longyu@debian-10:20:30:31] 14 $ grep \'141:\' /proc/interrupts \\n 141:     520162          0          0     596832       1805          0          0          0  IR-PCI-MSI 333824-edge      iwlwifi: default queue\\n```\\n\u53ef\u4ee5\u770b\u5230 0 \u6838\u4e0e 3 \u6838\u4e0a\u7684\u4e2d\u65ad\u8ba1\u6570\u4e0d\u518d\u589e\u52a0\uff0c4 \u6838\u4e0a\u7684\u4e2d\u65ad\u8ba1\u6570\u5728\u589e\u52a0\u8868\u660e**\u8bbe\u5b9a\u751f\u6548**\u3002\\n\\n## \u9ed8\u8ba4 irq_mask \u4e0b\u7684\u4e2d\u65ad\u6267\u884c\u60c5\u51b5\\n\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u9009\u62e9 iwlwifi \u7684\u4e2d\u65ad\u662f\u6709\u610f\u4e3a\u4e4b\u7684\uff0c\u5728\u4fee\u6539\u5176\u4e2d\u65ad\u4eb2\u548c\u6027\u524d\uff0c\u67e5\u770b smp_affinity \u786e\u8ba4\u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u7684 irq_mask\uff0c\u503c\u4e3a\u5168 F\uff0c\u8868\u793a\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u53ef\u4ee5\u5728\u6bcf\u4e00\u4e2a\u6838\u4e0a\u8fd0\u884c\uff0c\u7406\u60f3\u60c5\u51b5\u662f**\u6bcf\u4e2a\u6838\u4e0a\u90fd\u6709\u7edf\u8ba1\u6570\u636e\u4e14\u8d1f\u8f7d\u5747\u8861**\uff0c\u4f46\u662f\u5b9e\u9645\u6267\u884c\u60c5\u51b5\u5374\u662f\u53ea\u5728 0 \u6838\u4e0e 3 \u6838\u4e0a\u8fd0\u884c\u3002\\n\\n\u4e2d\u65ad\u7a0b\u5e8f\u672c\u8eab\u6267\u884c\u7684\u4ee3\u7801\u5c11\u7684\u53ef\u601c\uff0c\u53ea\u6709\u5f53\u4e2d\u65ad\u9891\u7e41\u5230\u6765\u7684\u65f6\u5019\u5176\u5f71\u54cd\u624d\u80fd\u8868\u73b0\u51fa\u6765\uff0c\u4f46\u662f\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u4f1a\u89e6\u53d1 soft irq\uff0csoft irq \u505a\u4e86\u5f88\u591a\u5de5\u4f5c\u4e14\u6ca1\u6709 irq_smp \u6765\u8bbe\u5b9a\uff0c\u7f51\u4e0a\u641c\u7d22\u6709\u8bf4\u5b83\u4f1a\u5728\u88ab\u89e6\u53d1\u7684\u6838\u4e0a\u6267\u884c\uff0c\u7167\u8fd9\u6837\u6765\u8bf4\u90a3 **soft irq \u4e5f\u4f1a\u968f\u7740 irq_smp \u7684\u6539\u53d8\u800c\u8054\u52a8\u6539\u53d8\uff0c\u4f46\u5b9e\u9645\u6d4b\u8bd5\u53d1\u73b0\u5e76\u6ca1\u6709\u8fd9\u79cd\u6548\u679c**\u3002\\n\\n## soft irq \u670d\u52a1\u7a0b\u5e8f\u6267\u884c\u7684 cpu\\n\u524d\u8a00\u4e2d\u6211\u6709\u63cf\u8ff0\u8fc7\uff0c\u5728\u5b9a\u4f4d dpdk \u7a0b\u5e8f\u7ed1\u5b9a\u5230 0 \u6838\u4e0e 1 \u6838\u4e0a\u6027\u80fd\u660e\u663e\u4e0b\u964d\u95ee\u9898\u65f6\uff0c\u901a\u8fc7\u8bbe\u5b9a smp_irq\uff0c\u6027\u80fd\u6709\u6240\u63d0\u9ad8\uff0c\u4f46\u662f\u8fd8\u662f\u6bd4\u4f7f\u7528\u540e\u9762\u7684\u6838\u4f4e\u4e00\u4e9b\uff0c**perf \u67e5\u770b\u53d1\u73b0 0 \u6838\u4e0a\u6709\u8f83\u591a\u7684 softirq \u8d1f\u8f7d**\uff0c\u8fd9\u4e9b softirq \u5c06\u4f1a\u4e0e\u6d4b\u8bd5\u7a0b\u5e8f\u4e00\u8d77\u5171\u4eab 0 \u6838\uff0c\u4e5f\u4f1a\u9020\u6210 dpdk \u7a0b\u5e8f\u6027\u80fd\u4e0b\u964d\u3002\\n\\n**\u90a3\u4e48 softirq \u5728\u54ea\u4e2a cpu \u4e0a\u6267\u884c\u5462\uff0c\u5b83\u6709\u4e0e irq smp_affinity \u7c7b\u4f3c\u7684\u8bbe\u5b9a\u63a5\u53e3\u5417\uff1f**\\n\\n\u7f51\u4e0a\u641c\u7d22\u4e86\u4e00\u4e0b\u83b7\u53d6\u5230\u4e86\u4e0b\u9762\u7684\u4fe1\u606f\uff1a\\n\\n\\tsoftirq \u9009\u62e9\u6267\u884c cpu \u7684\u539f\u5219\u662f\u5728\u54ea\u4e2a cpu \u89e6\u53d1\u5c31\u5728\u54ea\u4e2a cpu \u4e0a\u6267\u884c\\n\\nsoftirq \u4f1a\u5728\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u4e2d\u89e6\u53d1\uff0c\u800c **smp_affinity** \u63a9\u7801\u51b3\u5b9a\u4e86\u4e2d\u65ad\u670d\u52a1\u7a0b\u5e8f\u7684\u6267\u884c\u7684 cpu \u6838\uff0c\u5982\u679c\u4e0a\u9762\u7684\u63cf\u8ff0\u6210\u7acb\uff0c\u90a3\u4e48**\u53ea\u8981\u4fee\u6539\u4e86\u67d0\u4e2a\u4e2d\u65ad\u7684 smp_affinity\uff0c\u6b64\u4e2d\u65ad\u89e6\u53d1\u7684 softirq \u7684\u6267\u884c cpu \u4e5f\u5e94\u8be5\u968f\u4e4b\u53d8\u5316**\uff0c\u800c**\u5b9e\u9645\u60c5\u51b5\u662f\u5b83\u6ca1\u6709\u53d8\u5316**\uff0c\u8fd9\u91cc\u5c31\u5b58\u5728\u95ee\u9898\u3002\\n\\n\u4e00\u6bb5\u65f6\u5019\u540e\u6211\u91cd\u65b0\u60f3\u4e86\u60f3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6709\u4e0b\u9762\u4e24\u4e2a\u65b9\u9762\u7684\u6000\u7591\uff1a\\n\\n1. \u7f51\u4e0a\u7684\u8bf4\u6cd5\u4e0d\u53ef\u4fe1\\n\\n\\t\u6211\u53ea\u7b80\u5355\u770b\u8fc7 softirq \u7684\u4ee3\u7801\uff0c\u5bf9\u5177\u4f53\u7684\u539f\u7406\u5e76\u4e0d\u6e05\u695a\uff0c\u7f51\u4e0a\u7684\u8bf4\u6cd5\u5b58\u7591\uff01\\n\\n2. \u6211\u4eec\u7684\u89c2\u6d4b\u65b9\u6cd5\u5b58\u5728\u95ee\u9898\\n\\n\\t\u89c2\u6d4b\u5230 softirq \u5728\u67d0\u4e2a\u6838\u4e0a\u6267\u884c\uff0c\u4f46\u662f\u5177\u4f53\u6267\u884c\u7684 softirq \u662f\u54ea\u4e2a\u4e2d\u65ad\u7684 softirq \u5e76\u6ca1\u6709\u6df1\u7a76\\n\\t\\nsoftirq \u7684\u5de5\u4f5c\u8fc7\u7a0b\u6709\u65f6\u95f4\u4e86\u8981\u7814\u7a76\u7814\u7a76\uff01\u6269\u5c55\u4e86\u8fd9\u4e2a\u77e5\u8bc6\uff0c\u6216\u8bb8\u8fd9\u91cc\u7684\u95ee\u9898\u4fbf\u6709\u4e86\u7b54\u6848\uff01"},{"id":"/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u6838\u5931\u8d25\u95ee\u9898\uff1aEAL: pthread_setaffinity_np failed","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u6838\u5931\u8d25\u95ee\u9898\uff1aEAL: pthread_setaffinity_np failed","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u6838\u5931\u8d25\u95ee\u9898\uff1aEAL: pthread_setaffinity_np failed.md","source":"@site/blog/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u6838\u5931\u8d25\u95ee\u9898\uff1aEAL: pthread_setaffinity_np failed.md","title":"\u95ee\u9898\u63cf\u8ff0","description":"\u5728\u67d0\u7cfb\u7edf\u4e2d\uff0c\u8fd0\u884c\u539f\u751f dpdk \u793a\u4f8b\u7a0b\u5e8f\u4f1a\u62a5\u5982\u4e0b\u9519\u8bef\uff1a","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":7.62,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u7a0b\u5e8f\u7ed1\u4e0d\u540c\u7684\u6838\u6027\u80fd\u6709\u660e\u663e\u5dee\u5f02\u95ee\u9898\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u4e0d\u540c\u7684\u6838\u6027\u80fd\u6709\u660e\u663e\u5dee\u5f02\u95ee\u9898\u5206\u6790"},"nextItem":{"title":"dpdk/dpdk \u95ee\u9898\u5206\u6790\uff1a\u4e0d\u517c\u5bb9\u5149\u6a21\u5757\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\u95ee\u9898\u5b9a\u4f4d","permalink":"/longyu.github.io/blog/dpdk/dpdk \u95ee\u9898\u5206\u6790\uff1a\u4e0d\u517c\u5bb9\u5149\u6a21\u5757\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\u95ee\u9898\u5b9a\u4f4d"}},"content":"\u5728\u67d0\u7cfb\u7edf\u4e2d\uff0c\u8fd0\u884c\u539f\u751f dpdk \u793a\u4f8b\u7a0b\u5e8f\u4f1a\u62a5\u5982\u4e0b\u9519\u8bef\uff1a\\n\\n```bash\\nEAL: pthread_setaffinity_np failed\\nPANIC in eal_thread_loop():\\ncannot set affinity\\n```\\n\u5c06\u5f53\u524d\u8fdb\u7a0b\u7684 cgroup \u5207\u6362\u4e3a\u7cfb\u7edf\u9ed8\u8ba4\u7684 cgroup \u7ec4\u5c31\u80fd\u591f\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u4f46\u662f**\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\u5462\uff1f\u672c\u7bc7\u6587\u7ae0\u4e2d\u6211\u5c06\u5bf9\u8fd9\u4e2a\u95ee\u9898\u8fdb\u884c\u63cf\u8ff0\u3002**\\n\\n# strace \u8ddf\u8e2a\u7a0b\u5e8f\u6267\u884c\\nstrace \u8ddf\u8e2a\uff0c\u5f97\u5230\u5982\u4e0b\u76f8\u5173\u4fe1\u606f\uff1a\\n\\n```bash\\n[pid 20758] sched_setaffinity(20758, 128, [1] <unfinished ...>\\n[pid 20750] close(12 <unfinished ...>\\n[pid 20758] <... sched_setaffinity resumed> ) = 0\\n[pid 20750] <... close resumed> )       = 0\\n[pid 20758] access(\\"/sys/devices/system/node/node0/cpu1\\", F_OK <unfinished ...>\\n[pid 20750] pipe( <unfinished ...>\\n[pid 20758] <... access resumed> )      = 0\\n[pid 20750] <... pipe resumed> [12, 13]) = 0\\n[pid 20758] access(\\"/sys/devices/system/node/node0/cpu1\\", F_OK <unfinished ...>\\n[pid 20750] pipe( <unfinished ...>\\n[pid 20758] <... access resumed> )      = 0\\n[pid 20750] <... pipe resumed> [14, 15]) = 0\\n[pid 20758] write(1, \\"EAL: lcore 1 is ready (tid=f6902\\"..., 48 <unfinished ...>\\n[pid 20750] mmap(NULL, 8392704, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0EAL: lcore 1 is ready (tid=f6902700;cpuset=[1])\\n\\n.........\\n\\n[pid 20759] gettid( <unfinished ...>\\n[pid 20760] set_robust_list(0x7ffff59009e0, 24 <unfinished ...>\\n[pid 20759] <... gettid resumed> )      = 20759\\n[pid 20760] <... set_robust_list resumed> ) = 0\\n[pid 20759] sched_setaffinity(20759, 128, [2] <unfinished ...>\\n[pid 20760] gettid( <unfinished ...>\\n[pid 20759] <... sched_setaffinity resumed> ) = -1 EINVAL (Invalid argument)\\n```\\n\\n\u4e0a\u9762\u7684\u5185\u5bb9\u6709\u4e24\u4e2a\u5173\u952e\u70b9\uff1a\\n\\n1. 20758 \u7ebf\u7a0b\u8bbe\u7f6e cpu \u4eb2\u548c\u6027\u4e3a 1 \u6838\u6210\u529f\\n2. 20759 \u7ebf\u7a0b\u8bbe\u7f6e cpu \u4eb2\u548c\u6027\u4e3a 2 \u5931\u8d25\uff0csched_setaffinity \u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\u503c\u4e3a EINVAL\\n3. \u4e24\u4e2a\u7ebf\u7a0b\u90fd\u662f\u901a\u8fc7 sched_setaffinity \u7ebf\u7a0b\u6765\u8bbe\u7f6e cpu \u4eb2\u548c\u6027\\n\\nsched_setaffinity \u7cfb\u7edf\u8c03\u7528\u7684\u3010\u8fd4\u56de\u503c\u3011\u662f\u4e00\u4e2a\u5173\u952e\u4fe1\u606f\uff0cman sched_setaffinity \u67e5\u770b\u8fd4\u56de\u503c\u7684\u5177\u4f53\u542b\u4e49\u3002\\n\\n# man sched_setaffinity\\n\\n```bash\\nEINVAL The affinity bit mask mask contains no processors that are currently physically on the system and  permitted  to  the\\n              thread  according  to  any  restrictions that may be imposed by cpuset cgroups or the \\"cpuset\\" mechanism described in\\n              cpuset(7).\\n\\nEINVAL (sched_getaffinity() and, in kernels before 2.6.9, sched_setaffinity()) cpusetsize is smaller than the  size  of  the\\n              affinity mask used by the kernel.\\n```\\n\\n\u6211\u8fd9\u91cc\u7684\u60c5\u51b5\u7b26\u5408\u7b2c\u4e00\u79cd\u63cf\u8ff0\uff0c\u540c\u65f6\u786e\u5b9a\u8bbe\u7f6e\u7684 cpu \u6838\u662f\u5b58\u5728\u7684\uff0c\u8fd9\u6837\u95ee\u9898\u5c31\u6307\u5411\u4e86 **cpuset(7)**\u3002\\n\\n# man 7 cpuset\\n\\n```bash\\nEvery  process  in the system belongs to exactly one cpuset.  A process is confined to run only on the CPUs in the cpuset it\\nbelongs to, and to allocate memory only on the memory nodes in that cpuset.  When a process fork(2)s, the child  process  is\\nplaced  in  the same cpuset as its parent.  With sufficient privilege, a process may be moved from one cpuset to another and\\nthe allowed CPUs and memory nodes of an existing cpuset may be changed.\\n\\nWhen the system begins booting, a single cpuset is defined that includes all CPUs and memory nodes on the  system,  and  all\\nprocesses  are  in that cpuset.  During the boot process, or later during normal system operation, other cpusets may be cre\u2010\\nated, as subdirectories of this top cpuset, under the control of the system administrator, and processes may  be  placed  in\\nthese other cpusets.\\n       \\nCpusets  are  integrated  with  the sched_setaffinity(2) scheduling affinity mechanism and the mbind(2) and set_mempolicy(2)\\nmemory-placement mechanisms in the kernel.  Neither of these mechanisms let a process make use of a CPU or memory node  that\\nis  not  allowed by that process\'s cpuset.  If changes to a process\'s cpuset placement conflict with these other mechanisms,\\nthen cpuset placement is enforced even if it means overriding these other mechanisms.  The kernel accomplishes this overrid\u2010\\ning  by  silently restricting the CPUs and memory nodes requested by these other mechanisms to those allowed by the invoking\\nprocess\'s cpuset.  This can result in these other calls returning an error, if for example, such a call ends  up  requesting\\nan empty set of CPUs or memory nodes, after that request is restricted to the invoking process\'s cpuset.\\n```\\n\\n\u603b\u7ed3\u5f97\u51fa\u5982\u4e0b\u51e0\u70b9\u5173\u952e\u4fe1\u606f\uff1a\\n\\n1. linux \u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u5f52\u5c5e\u4e8e\u3010\u552f\u4e00\u7684\u3011\u4e00\u4e2a cpuset\uff0c\u7a0b\u5e8f\u88ab\u9650\u5b9a\u4e3a**\u53ea\u80fd**\u5728\u5f52\u5c5e cpuset \u7ec4\u5141\u8bb8\u7684 cpu \u4e0a\u6267\u884c\uff0c\u4e5f\u53ea\u80fd\u4ece\u5f52\u5c5e cpuset \u7ec4\u5141\u8bb8\u7684\u5185\u5b58\u8282\u70b9\u7533\u8bf7\u5185\u5b58\\n2. \u5b50\u8fdb\u7a0b\u9ed8\u8ba4\u3010\u7ee7\u627f\u3011\u7236\u8fdb\u7a0b\u7684 cpuset \u914d\u7f6e\\n3. \u7cfb\u7edf\u542f\u52a8\u65f6\uff0c\u5305\u542b\u6240\u6709 cpu \u6838\u4e0e\u5185\u5b58\u8282\u70b9\u7684 cpuset \u88ab\u521b\u5efa\uff0c\u6b64\u65f6\u6240\u6709\u7684\u8fdb\u7a0b\u90fd\u5f52\u5c5e\u4e8e\u8fd9\u4e2a cpuset\uff0c\u5176\u5b83\u540e\u7eed\u521b\u5efa\u7684 cpuset \u90fd\u4f4d\u4e8e\u6b64 cpuset \u7684\u5b50\u76ee\u5f55\u4e2d\uff0c\u8fd9\u4e2a cpuset \u88ab\u79f0\u4e3a \u3010top cpuset\u3011\\n4. \u5f53 cpuset \u4e0e\u5176\u5b83\u7684 cpu\u3001\u5185\u5b58\u5206\u914d\u673a\u5236\u51b2\u7a81\u65f6\uff0ccpuset \u914d\u7f6e\u4f1a\u9ed8\u8ba4\u3010\u8986\u76d6\u3011\u5176\u5b83\u673a\u5236\u7684\u914d\u7f6e\uff0c\u5185\u6838\u4f1a\u9650\u5b9a\u8fdb\u7a0b\u53ea\u80fd\u4f7f\u7528\u6240\u52a0\u5165\u7684 cpuset \u5141\u8bb8\u7684 cpu \u6838\u4e0e\u5185\u5b58\u8282\u70b9\\n\\n# \u91cd\u65b0\u63cf\u8ff0\u95ee\u9898\\n\\n\u6839\u636e\u4e0a\u9762\u7684\u4fe1\u606f\u80fd\u591f\u786e\u5b9a\u95ee\u9898\u4e3a**\u6267\u884c\u7684 dpdk \u7a0b\u5e8f\u6240\u5728\u7684 cpuset \u4e0d\u5141\u8bb8\u7a0b\u5e8f\u5728 2 \u53f7\u6838\u4e0a\u6267\u884c**\u3002\u67e5\u770b\u7236\u8fdb\u7a0b\u5f52\u5c5e\u7684 cgroup \u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```bash\\n[root-10:10:27:33] # cat /proc/$$/cgroup\\n11:freezer:/\\n10:cpu,cpuacct:/\\n9:pids:/user.slice/user-1000.slice/session-2.scope\\n8:cpuset:/Isolate_Cpus_Service\\n7:net_cls,net_prio:/\\n6:rdma:/\\n5:memory:/user.slice/user-1000.slice/session-2.scope\\n4:devices:/user.slice\\n3:blkio:/\\n2:perf_event:/\\n1:name=systemd:/user.slice/user-1000.slice/session-2.scope\\n0::/user.slice/user-1000.slice/session-2.scope\\n```\\n\\n\u53ef\u4ee5\u770b\u5230\uff0c\u7236\u8fdb\u7a0b\u5f52\u5c5e\u7684 cpuset \u4e3a Isolate_Cpus_Service\uff0c\u6b64 cpuset \u5141\u8bb8\u6267\u884c\u7684 cpu \u6838\u5982\u4e0b\uff1a\\n\\n```bash\\n[root-10:10:27:44] # cat /sys/fs/cgroup/cpuset/Isolate_Cpus_Service/cpuset.cpus\\n0-1\\n```\\n\\n\u80fd\u591f\u786e\u5b9a\uff0c**\u5b83\u53ea\u5141\u8bb8\u7a0b\u5e8f\u5728 0 \u6838\u8ddf 1 \u6838\u6267\u884c**\uff0c\u4e14**\u5185\u6838\u4e2d cpuset \u7684\u4f18\u5148\u7ea7\u3010\u9ad8\u4e8e\u3011 sched_setaffinity**\uff0c\u8fd9\u6837\u4f7f\u7528 sched_setaffinity \u8bbe\u7f6e\u7ebf\u7a0b cpu \u4eb2\u548c\u6027\u4e3a 2 \u6838\u7684\u65f6\u5019\u5c31\u4f1a\u5931\u8d25\uff01\\n\\n# \u4e0d\u4fee\u6539 dpdk \u7a0b\u5e8f\u8ba9\u7a0b\u5e8f\u80fd\u591f\u6267\u884c\u7684\u65b9\u6cd5\\n\\n\u6709\u65f6\u5019\u4e0d\u65b9\u4fbf\u4fee\u6539 dpdk \u7a0b\u5e8f\uff0c\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u7236\u8fdb\u7a0b\uff08\u7ec8\u7aef bash \u7a0b\u5e8f\uff09\u6240\u5c5e\u7684 cpuset \u5141\u8bb8\u7684 cpu \u6838\u3001\u5c06\u7236\u8fdb\u7a0b\u7684 cpuset \u3010\u5207\u6362\u3011\u4e3a top cpuset \u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002\\n\\n\u5c06\u7236\u8fdb\u7a0b\u7684 cpuset \u5207\u6362\u4e3a top cpuset\uff0c\u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a\\n\\n```bash\\necho $$ > /sys/fs/cgroup/cpuset/tasks\\n```\\n\\n\u4fee\u6539\u7236\u8fdb\u7a0b\u6240\u5728\u7684 cpuset \u5141\u8bb8\u7684 cpu \u6838\u4e0e top cpuset \u4e00\u81f4\uff0c\u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a\\n\\n```bash\\ncat /sys/fs/cgroup/cpuset/cpuset.cpus > /sys/fs/cgroup/cpuset/Isolate_Cpus_Service/cpuset.cpus\\n```\\n# \u4e3a\u4ec0\u4e48\u8981\u8fdb\u884c cpu \u9694\u79bb\\n\\ndpdk \u7a0b\u5e8f\u5728\u8fdb\u884c 2544 \u6d4b\u6027\u80fd\u7684\u65f6\u5019\uff0c**\u5f53\u6536\u53d1\u5305\u7ebf\u7a0b\u6240\u5728\u7684 cpu \u6838\u4e0a\u6709\u5176\u5b83\u7528\u6237\u6001\u8fdb\u7a0b\u4e5f\u88ab\u8c03\u5ea6\u8fd0\u884c\u65f6\u5c31\u4f1a\u4ea7\u751f\u6296\u52a8**\uff0c\u4ece\u800c\u9020\u6210**\u4e22\u5305**\uff0c\u5bfc\u81f4 **2544 \u7684\u6027\u80fd\u53d8\u5dee**\uff0c\u4e3a\u4e86\u6d88\u9664\u8fd9\u79cd\u5f71\u54cd\uff0c\u9700\u8981\u5bf9\u7528\u6237\u6001\u7a0b\u5e8f\u8fdb\u884c cpu \u9694\u79bb\u3002\\n\\n# cpu \u6838\u9694\u79bb\u7684\u5bf9\u8c61\\ncpu \u6838\u9694\u79bb\u9488\u5bf9\u6240\u6709\u7684\u7528\u6237\u6001\u7a0b\u5e8f\uff0c\u8fd9\u79cd\u9694\u79bb\u7684\u76ee\u7684\u662f\u4e3a\u4e86**\u8ba9 dpdk \u7a0b\u5e8f\u72ec\u5360\u67d0\u4e2a cpu \u6838**\u3002\\n\\ndpdk \u7a0b\u5e8f\u3010\u7f3a\u7701\u3011\u4e5f\u662f\u88ab\u6267\u884c\u4e86 cpu \u9694\u79bb\u7684\uff0c\u4e3a\u6b64\u9700\u8981\u5c06 dpdk \u7a0b\u5e8f\u5f52\u5c5e\u7684 cpuset \u8bbe\u7f6e\u4e3a top cpuset\uff0c\u4ee5**\u5141\u8bb8** dpdk \u7a0b\u5e8f\u4f7f\u7528**\u6240\u6709\u7684** cpu \u6838\u4e0e\u5185\u5b58\u8282\u70b9\u3002\\n\\n# \u6709\u6ca1\u6709\u5176\u5b83 cpu \u9694\u79bb\u7684\u65b9\u6cd5\uff1f\\n\\n\u9664\u4e86\u4e0a\u9762\u7684\u65b9\u6cd5\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5185\u6838\u542f\u52a8\u53c2\u6570\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982\u5728 grub.conf \u4e2d\uff0c\u5728\u5185\u6838\u5f15\u5bfc\u53c2\u6570\u4e2d\u6dfb\u52a0 isolcpus=xxx \u7684\u914d\u7f6e\uff0c\u7136\u540e\u91cd\u542f\u7cfb\u7edf\u5c31\u80fd\u591f\u751f\u6548\u3002\\n\\n\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u7684\u64cd\u4f5c\u6210\u672c\u8f83\u9ad8\uff0c\u4e00\u65e6\u5185\u6838\u542f\u52a8\u53c2\u6570\u4fee\u6539\u5b58\u5728\u95ee\u9898\u53ef\u80fd\u65e0\u6cd5\u8fdb\u5165\u7cfb\u7edf\uff0c\u63a8\u8350\u4e13\u4e1a\u4eba\u58eb\u64cd\u4f5c\u3002"},{"id":"/dpdk/dpdk \u95ee\u9898\u5206\u6790\uff1a\u4e0d\u517c\u5bb9\u5149\u6a21\u5757\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\u95ee\u9898\u5b9a\u4f4d","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u95ee\u9898\u5206\u6790\uff1a\u4e0d\u517c\u5bb9\u5149\u6a21\u5757\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\u95ee\u9898\u5b9a\u4f4d","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u95ee\u9898\u5206\u6790\uff1a\u4e0d\u517c\u5bb9\u5149\u6a21\u5757\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\u95ee\u9898\u5b9a\u4f4d.md","source":"@site/blog/dpdk/dpdk \u95ee\u9898\u5206\u6790\uff1a\u4e0d\u517c\u5bb9\u5149\u6a21\u5757\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\u95ee\u9898\u5b9a\u4f4d.md","title":"dpdk/dpdk \u95ee\u9898\u5206\u6790\uff1a\u4e0d\u517c\u5bb9\u5149\u6a21\u5757\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\u95ee\u9898\u5b9a\u4f4d","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":4.67,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u95ee\u9898\u63cf\u8ff0","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u7ed1\u6838\u5931\u8d25\u95ee\u9898\uff1aEAL: pthread_setaffinity_np failed"},"nextItem":{"title":"dpdk/dpdk \u9a71\u52a8\u79fb\u690d\u53e9\u5f00 kni \u6a21\u5757\u90a3\u4e9b\u9ed1\u6697\u7684\u89d2\u843d","permalink":"/longyu.github.io/blog/dpdk/dpdk \u9a71\u52a8\u79fb\u690d\u53e9\u5f00 kni \u6a21\u5757\u90a3\u4e9b\u9ed1\u6697\u7684\u89d2\u843d"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n82599 \u4e07\u5146\u7f51\u5361\uff0c\u4e00\u4e2a\u6b63\u5e38\u5de5\u4f5c\uff0c\u53e6\u5916\u4e00\u4e2a\u53e3\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u521d\u59cb\u5316\u5931\u8d25\uff0c\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u4e0d\u80fd\u6b63\u5e38\u542f\u52a8\u3002\\n\\n## \u95ee\u9898\u6392\u67e5\u8fc7\u7a0b\\n1. \u68c0\u67e5\u7a0b\u5e8f\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\\n2. \u68c0\u67e5 /dev/uioX \u8bbe\u5907\u6587\u4ef6\\n3. \u68c0\u67e5 dmesg \u4fe1\u606f\\n\\n\u6392\u67e5\u4e86\u4e0a\u9762\u7684\u4e09\u70b9\u5185\u5bb9\uff0c\u6ca1\u6709\u53d1\u73b0\u5f02\u5e38\u3002\u9996\u5148\u4f7f\u7528 ethool \u6536\u96c6\u5f02\u5e38\u63a5\u53e3\u7684\u4fe1\u606f\uff0c\u7136\u540e\u51c6\u5907\u7528\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\u3002\\n\\n\u5728\u4f7f\u7528\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\u4e4b\u524d\uff0c\u6211\u60f3\u5230\u4e86\u53ef\u80fd\u662f\u5149\u6a21\u5757\u7684\u95ee\u9898\uff0c\u4f46\u662f\u5ba2\u6237\u73b0\u573a\u6ca1\u6709\u652f\u6301\u7684\u540c\u4e8b\uff0c\u4e14\u6211\u4eec\u6ca1\u6709\u5de5\u5177\u76f4\u63a5\u83b7\u53d6\u5149\u6a21\u5757\u4fe1\u606f\uff0c\u8fd9\u4e00\u70b9\u6682\u65f6\u4e0d\u80fd\u6392\u67e5\u3002\\n\\n## \u4f7f\u7528 l2fwd \u6d4b\u8bd5\\n\u5728\u521d\u6b65\u7684\u6392\u67e5\u6ca1\u6709\u5b9a\u4f4d\u5230\u95ee\u9898\u540e\uff0c\u6211\u60f3\u4f7f\u7528 l2fwd \u7a0b\u5e8f\u6d4b\u8bd5\u4e86\u4e00\u4e0b\uff0c\u6392\u67e5\u4e0b\u8f6f\u4ef6\u95ee\u9898\u3002\\n\\n\u8fd0\u884c l2fwd \u540e\uff0c\u6ce8\u610f\u5230 l2fwd \u542f\u52a8\u4e2d\u6709\u6253\u5370\u63a2\u6d4b\u5230\u7684\u5149\u6a21\u5757\u7c7b\u578b\u4fe1\u606f\uff0c\u8bb0\u5f55\u5982\u4e0b\uff1a\\n\\n```bash\\nPMD: eth_ixgbe_dev_init(): MAC: 2, PHY: 15, SFP+: 5\\nPMD: eth_ixgbe_dev_init(): port 4 vendorID=0x8086 deviceID=0x10fb\\nEAL: PCI device 0000:04:00.1 on NUMA socket -1\\nEAL:   probe driver: 8086:10fb rte_ixgbe_pmd\\nEAL:   PCI memory mapped at 0x4001af234000\\nEAL:   PCI memory mapped at 0x4001af254000\\nPMD: eth_ixgbe_dev_init(): MAC: 2, PHY: 17, SFP+: 14\\nPMD: eth_ixgbe_dev_init(): port 5 vendorID=0x8086 deviceID=0x10fb\\n```\\nport 5 \u5c31\u662f\u51fa\u95ee\u9898\u7684\u63a5\u53e3\uff0cixgbe \u521d\u59cb\u5316\u6253\u5370\u51fa\u4e86 SFP+ \u7684\u503c\u4e3a 14\uff0c\u8fd9\u4e2a 14 \u662f\u5728 sfp_type \u679a\u4e3e\u7ed3\u6784\u4e2d\u5b9a\u4e49\u7684\uff0c\u6b64\u7ed3\u6784\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```c\\nenum ixgbe_sfp_type {\\n    ixgbe_sfp_type_da_cu = 0,\\n    ixgbe_sfp_type_sr = 1,\\n    ixgbe_sfp_type_lr = 2,\\n    ixgbe_sfp_type_da_cu_core0 = 3,\\n    ixgbe_sfp_type_da_cu_core1 = 4,\\n    ixgbe_sfp_type_srlr_core0 = 5,\\n    ixgbe_sfp_type_srlr_core1 = 6,\\n    ixgbe_sfp_type_da_act_lmt_core0 = 7,\\n    ixgbe_sfp_type_da_act_lmt_core1 = 8,\\n    ixgbe_sfp_type_1g_cu_core0 = 9,\\n    ixgbe_sfp_type_1g_cu_core1 = 10,\\n    ixgbe_sfp_type_1g_sx_core0 = 11,\\n    ixgbe_sfp_type_1g_sx_core1 = 12,\\n    ixgbe_sfp_type_1g_lx_core0 = 13,\\n    ixgbe_sfp_type_1g_lx_core1 = 14,\\n    ixgbe_sfp_type_1g_lha_core0 = 15,\\n    ixgbe_sfp_type_1g_lha_core1 = 16,\\n    ixgbe_sfp_type_not_present = 0xFFFE,\\n    ixgbe_sfp_type_unknown = 0xFFFF\\n};\\n```\\n14 \u5bf9\u5e94\u7684\u662f ```ixgbe_sfp_type_1g_lx_core1```\u770b\u8fd9\u4e2a\u540d\u79f0\u5e94\u8be5\u662f\u4e2a\u5343\u5146\u7684\u5149\u6a21\u5757\u3002\\n\\n\u7ee7\u7eed\u5728\u4ee3\u7801\u4e2d\u641c\u7d22\uff0c\u53d1\u73b0\u5728 ixgbe_identify_sfp_module_generic \u4e2d\u8bc6\u522b sfp \u6a21\u5757\u7c7b\u578b\u7684\u65f6\u5019\u6709\u4e0b\u9762\u76f8\u5173\u4ee3\u7801\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20201212105203219.png)\\n\u8fd9\u4e2a\u4ee3\u7801\u57fa\u672c\u4e0a\u80fd\u591f\u786e\u5b9a dpdk \u7a0b\u5e8f\u4e0d\u80fd\u6b63\u5e38\u8fd0\u884c\u7684\u539f\u56e0\uff0c\u8fd9\u4e9b\u4fe1\u606f\u660e\u786e\u6307\u5411\u5149\u6a21\u5757\uff0c\u4e8e\u662f\u5bf9\u8fd9\u4e2a\u95ee\u9898\u6709\u4e86\u5982\u4e0b\u7ed3\u8bba\uff1a\\n\\n\u8fd9\u4e2a\u95ee\u9898\u4e3a\u5728**\u4e07\u5146\u5149\u53e3\u4e0a\u63a5\u4e86\u4e00\u4e2a\u5343\u5146\u7684\u5149\u6a21\u5757\u5bfc\u81f4\u4e07\u5146\u63a5\u53e3\u521d\u59cb\u5316\u5931\u8d25**\u3002\\n\\n\u6700\u7ec8\u786e\u5b9a\u7684\u95ee\u9898\u4e0e\u4e0a\u9762\u7684\u7ed3\u8bba\u4e00\u81f4\uff01\\n\\n## \u603b\u7ed3\\n\u5176\u5b9e\u5149\u6a21\u5757\u7684\u95ee\u9898\u6211\u5df2\u7ecf\u9047\u5230\u597d\u591a\u6b21\u4e86\uff0c\u5ba2\u6237\u73b0\u573a\u5076\u5c14\u4f1a\u6709\u8fd9\u79cd\u95ee\u9898\uff0c\u524d\u671f\u9047\u5230\u8fd9\u7c7b\u95ee\u9898\uff0c\u9700\u8981\u82b1\u4e0d\u5c11\u7684\u65f6\u95f4\u6765\u5b9a\u4f4d\u3002\\n\\n\u9488\u5bf9\u8fd9\u79cd\u95ee\u9898\uff0c\u6211\u4eec\u68b3\u7406\u4e86\u516c\u53f8\u5bfc\u5165\u7684\u5149\u6a21\u5757\uff0c\u8f93\u51fa\u4e86 excel \u8868\u683c\uff0c\u5f53\u95ee\u9898\u51fa\u73b0\u65f6\uff0c**\u9996\u5148\u83b7\u53d6\u5ba2\u6237\u73b0\u573a\u4f7f\u7528\u7684\u5149\u6a21\u5757\u578b\u53f7\uff0c\u7136\u540e\u67e5 excel \u8868\u683c\u5c31\u80fd\u7acb\u523b\u5f97\u51fa\u7ed3\u8bba**\u3002\\n\\n\u8f93\u51fa\u4e00\u4e2a\u5149\u6a21\u5757\u578b\u53f7\u5217\u8868\u82b1\u4e86**\u4e00\u4e2a\u5c0f\u65f6\u5de6\u53f3**\uff0c\u4f46\u68b3\u7406\u51fa\u8fd9\u4e2a\u6d41\u7a0b\u540e\uff0c\u4e0b\u4e00\u6b21\u9047\u5230\u76f8\u540c\u95ee\u9898\u65f6\u5206\u5206\u949f\u5c31\u80fd\u591f\u89e3\u51b3\u4e86\uff0c\u65e0\u7591\u63d0**\u9ad8\u4e86\u6211\u4eec\u89e3\u51b3\u95ee\u9898\u7684\u6548\u7387**\u3002\\n\\n\u5176\u5b9e\u8fd9\u91cc\u8fd8\u53ef\u4ee5\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u53ef\u4ee5\u5199\u4e00\u4e2a**\u80fd\u591f\u76f4\u63a5\u83b7\u53d6\u5149\u6a21\u5757\u578b\u53f7\u7b49\u4fe1\u606f\u7684\u5de5\u5177**\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u6253\u7834\u524d\u573a\u7684\u67d0\u4e9b\u9650\u5236\u6761\u4ef6\u3002\\n\\n\u8fdb\u4e00\u6b65\u518d\u60f3\uff0c\u5176\u5b9e\u53ef\u4ee5\u641e\u4e00\u4e2a\u6574\u5408\u8fd9\u4e2a\u83b7\u53d6\u5149\u6a21\u5757\u578b\u53f7\u4fe1\u606f\u7684\u5de5\u5177\u4e0e\u517c\u5bb9\u5149\u6a21\u5757 excel \u5217\u8868\u7684\u5de5\u5177\u3002\u8fd9\u4e2a\u5de5\u5177\u9996\u5148**\u4f7f\u7528\u83b7\u53d6\u5149\u6a21\u5757\u578b\u53f7\u4fe1\u606f\u7684\u5de5\u5177\u83b7\u53d6\u63a5\u53e3\u7684\u6a21\u5757\u4fe1\u606f**\uff0c\u7136\u540e**\u4f7f\u7528\u67d0\u79cd\u65b9\u5f0f\u83b7\u53d6\u517c\u5bb9\u7684\u5149\u6a21\u5757\u578b\u53f7\u5217\u8868**\uff0c**\u76f4\u63a5\u5224\u65ad\u6a21\u5757\u662f\u5426\u652f\u6301\u5e76\u8f93\u51fa\u7ed3\u679c**\u3002\\n\\n\u6709\u4e86\u8fd9\u79cd\u5de5\u5177\u5149\u6a21\u5757\u95ee\u9898\u89e3\u51b3\u65f6\u95f4\u53ef\u80fd\u80fd\u591f\u63a7\u5236\u5728 10 \u5206\u949f\u4ee5\u5185\uff0c\u6bd4\u8d77\u4e4b\u524d\u7684\u51e0\u5468\u3001\u51e0\u5929\uff0c\u8fd9\u79cd\u6548\u7387\u4e0d\u53ef\u540c\u65e5\u800c\u8bed\uff01"},{"id":"/dpdk/dpdk \u9a71\u52a8\u79fb\u690d\u53e9\u5f00 kni \u6a21\u5757\u90a3\u4e9b\u9ed1\u6697\u7684\u89d2\u843d","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u9a71\u52a8\u79fb\u690d\u53e9\u5f00 kni \u6a21\u5757\u90a3\u4e9b\u9ed1\u6697\u7684\u89d2\u843d","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u9a71\u52a8\u79fb\u690d\u53e9\u5f00 kni \u6a21\u5757\u90a3\u4e9b\u9ed1\u6697\u7684\u89d2\u843d.md","source":"@site/blog/dpdk/dpdk \u9a71\u52a8\u79fb\u690d\u53e9\u5f00 kni \u6a21\u5757\u90a3\u4e9b\u9ed1\u6697\u7684\u89d2\u843d.md","title":"dpdk/dpdk \u9a71\u52a8\u79fb\u690d\u53e9\u5f00 kni \u6a21\u5757\u90a3\u4e9b\u9ed1\u6697\u7684\u89d2\u843d","description":"\u524d\u8a00","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":8.67,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u95ee\u9898\u5206\u6790\uff1a\u4e0d\u517c\u5bb9\u5149\u6a21\u5757\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\u95ee\u9898\u5b9a\u4f4d","permalink":"/longyu.github.io/blog/dpdk/dpdk \u95ee\u9898\u5206\u6790\uff1a\u4e0d\u517c\u5bb9\u5149\u6a21\u5757\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\u95ee\u9898\u5b9a\u4f4d"},"nextItem":{"title":"dpdk \u591a\u7ebf\u7a0b\u6d41\u6c34\u7ebf","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 eal lcore \u591a\u7ebf\u7a0b\u673a\u5236\u5206\u6790"}},"content":"## \u524d\u8a00\\nkni \u6a21\u5757\u662f\u65e9\u671f dpdk \u7248\u672c\u4e2d\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u529f\u80fd\uff0c\u5b83\u5145\u5f53\u4e86\u7528\u6237\u6001\u9a71\u52a8\u4e0e\u5185\u6838\u534f\u8bae\u6808\u4e4b\u95f4\u7684\u6865\u6881\uff0c\u8ba9 dpdk \u7a0b\u5e8f\u80fd\u591f\u4e0a\u9001\u6d41\u91cf\u5230\u5185\u6838\u534f\u8bae\u6808\uff0c\u540c\u65f6\u4e5f\u652f\u6301\u4f7f\u7528ethtool\u3001ifconfig \u7b49\u91cd\u8981\u7684\u7f51\u7edc\u7ba1\u7406\u547d\u4ee4\u3002\\n\\n## kni \u652f\u6301 ethtool \u5e26\u6765\u7684\u95ee\u9898\\nkni \u4e3a\u4e86\u5b9e\u73b0 ethtool \u83b7\u53d6\u7f51\u5361\u4fe1\u606f\u7684\u529f\u80fd\uff0c\u5bf9 igb\u3001ixgbe \u7b49\u7cfb\u5217\u7f51\u5361\u7684\u5b98\u65b9\u9a71\u52a8\u8fdb\u884c\u4fee\u6539\uff0c\u610f\u5473\u7740 dpdk \u5185\u90e8\u7ef4\u62a4\u7740**\u4e24\u5957\u9a71\u52a8\u4ee3\u7801**\uff0c\u4e00\u5957\u662f**\u7528\u6237\u6001\u9a71\u52a8\u4ee3\u7801**\uff0c\u53e6\u4e00\u5957\u662f kni \u6a21\u5757\u4e2d\u7684**\u5185\u6838\u9a71\u52a8\u4ee3\u7801**\u3002\u8fd9\u6837\u7684\u60c5\u51b5\u63d0\u9ad8\u4e86\u7ef4\u62a4\u7684\u6210\u672c\uff0c\u540c\u65f6\u4e5f\u66f4\u5bb9\u6613\u5e26\u6765\u95ee\u9898\u3002\\n\\n\u9ad8\u7248\u672c dpdk \u4e2d kni \u6a21\u5757\u5df2\u7ecf**\u79fb\u9664\u4e86\u5185\u6838\u9a71\u52a8\u7684\u4ee3\u7801**\uff0c\u4e0d\u518d\u652f\u6301 ethtool \u83b7\u53d6\u8bf8\u591a\u7f51\u5361\u4fe1\u606f\uff0c\u53ef\u662f\u4e5f\u6ca1\u6709\u5176\u5b83\u66ff\u4ee3 ethtool \u7684\u5de5\u5177\u63d0\u4f9b\uff0c\u4e0d\u7531\u5730\u8ba9\u4eba\u611f\u6168\u5957\u8def\u4e4b\u6df1\uff01\\n\\n## \u4e3a\u4ec0\u4e48\u8981\u4fee\u6539 kni?\\n\u65e2\u7136\u9ad8\u7248\u672c\u5df2\u7ecf\u5e72\u6389\u4e86 kni \u7684\u5927\u90e8\u5206\u529f\u80fd\uff0c\u90a3\u6211\u4eec\u5e94\u8be5\u8ffd\u968f\u9ad8\u7248\u672c\u7684\u53d1\u5c55\u65b9\u5411\u3002\u5948\u4f55\u516c\u53f8\u5185\u90e8\u4f7f\u7528\u7684 dpdk \u7248\u672c\u4e3a 16.04\uff0c\u8bb8\u591a\u4ea7\u54c1\u4ecd\u65e7\u4f7f\u7528 kni \u6a21\u5757\u6765\u901a\u8fc7ethtool \u83b7\u53d6\u4fe1\u606f\uff0c\u6700\u8fd1\u9047\u5230\u4e86\u9700\u8981\u9002\u914d x553 \u65b0\u7f51\u5361\u7684\u95ee\u9898\uff0c\u4e3a\u4e86**\u907f\u514d\u4ea7\u54c1\u4ee3\u7801\u6539\u52a8**\uff0c\u9700\u8981\u9002\u914d kni\uff0c\u53ea\u80fd\u4e0e kni \u77ed\u5175\u76f8\u63a5\u4e86\uff01\\n\\n## \u65b0\u7f51\u5361\u7684\u578b\u53f7\\n\u65b0\u7f51\u5361\u4e3a x553 \u7f51\u5361\uff0c\u5c5e\u4e8e ixgbe \u7f51\u5361\u7cfb\u5217\uff0cdpdk 16.04 \u5e76\u4e0d\u652f\u6301\u6b64\u6b3e\u7f51\u5361\u3002**pmd \u9a71\u52a8\u4ee3\u7801\u4ece\u9ad8\u7248\u672c\u5408\u5165\uff0ckni \u4e2d\u7684\u4ee3\u7801\u4ece ixgbe-5.8.1 \u5185\u6838\u9a71\u52a8\u5408\u5165**\u3002\\n\\n\u4e0b\u6587\u5bf9\u9002\u914d\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u4e00\u4e9b\u5177\u4f53\u7684\u95ee\u9898\u8fdb\u884c\u8bb0\u5f55\\n### 1. \u6dfb\u52a0\u65b0\u7684 device id \\n\\ndpdk-16.04 \u652f\u6301\u7684\u7f51\u5361\u578b\u53f7\u5728 **rte_pci_dev_ids.h** \u5934\u6587\u4ef6\u4e2d\u88ab\u5b9a\u4e49\uff0c\u9002\u914d\u65b0\u7f51\u5361\u9700\u8981**\u5728 rte_pci_dev_ids.h \u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684\u9879\u76ee**\u3002\\n\\nkni \u4e2d\u4f7f\u7528\u5b98\u65b9\u9a71\u52a8\u9002\u914d\uff0c\u6b63\u5e38\u65b9\u5f0f\u5e94\u8be5\u662f\u4f7f\u7528 **pci_device_table** \u6765\u5b9a\u4e49\u652f\u6301\u7684\u7f51\u5361\u578b\u53f7\uff0c\u53ef\u662f\u8fd9\u4e2a pci_device_table \u5e76\u6ca1\u6709\u88ab\u4f7f\u7528\u3002\\n\\n**kni_ioctl_create** \u51fd\u6570\u4e2d**\u4e5f\u901a\u8fc7\u5305\u542b rte_pci_dev_ids.h \u6765\u5339\u914d\u7f51\u5361**\uff0c\u8fd9\u4e0epmd \u4fdd\u6301\u4e00\u81f4\u3002\\n\\nx553 \u5c5e\u4e8e ixgbe \u7f51\u5361\uff0c**dpdk-16.04 kni** \u9a71\u52a8\u4e2d\u5728 **ixgbe_pci_tbl** \u4e2d\u5b9a\u4e49\u652f\u6301\u7684\u7f51\u5361\u578b\u53f7\uff0c\u8fd9\u91cc\u7684\u5b9a\u4e49\u8868\u660e**\u9002\u914d\u7684 ixgbe \u9a71\u52a8\u652f\u6301\u7684\u7f51\u5361\u578b\u53f7**\uff0c\u9605\u8bfb\u4ee3\u7801\u53d1\u73b0 **ixgbe_pci_tbl** \u8868\u4e2d\u652f\u6301\u7684\u7f51\u5361\u578b\u53f7\u4e0e **rte_pci_dev_ids.h** \u4e2d\u5b9a\u4e49\u7684 ixgbe \u7f51\u5361\u578b\u53f7\u5e76**\u4e0d\u4e00\u81f4**\uff0c\u662f\u5176\u4e2d\u7684\u4e00\u4e2a**\u5b50\u96c6**\u3002\\n\\n\u5f53 **rte_pci_dev_ids.h** \u4e2d\u6dfb\u52a0\u4e86\u65b0\u7684 **ixgbe** \u7f51\u5361\uff0c\u5374\u6ca1\u6709\u9002\u914d kni \u65f6\uff0c\u5728 dpdk \u7a0b\u5e8f\u521d\u59cb\u5316\u7684\u65f6\u5019\u4ecd\u65e7\u4f1a\u6267\u884c ixgbe \u9a71\u52a8\u7684 probe \u51fd\u6570\uff0c\u5c31\u53ef\u80fd\u9020\u6210\u95ee\u9898\uff0c\\n\\n\u4e3a\u6b64\u9996\u5148\u5728 **ixgbe_pci_tbl \u4e2d\u6dfb\u52a0\u65b0\u7f51\u5361\u9879**\u76ee\uff0c\u7136\u540e\u5728 **probe \u51fd\u6570\u4e2d\u4e5f\u4f7f\u7528\u5f53\u524d\u8bbe\u5907\u7684 vendor id \u4e0e device id \u5728 ixgbe_pci_tbl \u4e2d\u5339\u914d**\uff0c\u5339\u914d\u6210\u529f\u5219\u6267\u884c\u540e\u7eed\u6d41\u7a0b\uff0c\u5931\u8d25\u5219\u76f4\u63a5\u8fd4\u56de\u3002\\n\\n### ixgbe_init_shared_code \u51fd\u6570\\n\\nkni \u9002\u914d\u4e2d\u91cd\u70b9\u4fee\u6539 **ixgbe_init_shared_code** \u51fd\u6570\uff0c\u6b64\u51fd\u6570\u4e2d\u5173\u952e\u8fc7\u7a0b\u5982\u4e0b\uff1a\\n\\n1. \u6839\u636e vendor id \u4e0e device id \u8bbe\u7f6e mac_type\\n2. \u6839\u636e mac_type \u8c03\u7528\u4e0d\u540c\u7684\u521d\u59cb\u5316\u51fd\u6570\\n\\n\u9488\u5bf9 x553 \u7f51\u5361\uff0c\u521d\u59cb\u5316\u8fc7\u7a0b\u5982\u4e0b\uff1a\\n\\n1. ixgbe_set_mac_type \u4e2d\u8bbe\u5b9a mac_type \u4e3a ixgbe_mac_X550EM_a\\n2. \u8c03\u7528 ixgbe_init_ops_X550EM_a \u51fd\u6570\u5b8c\u6210\u521d\u59cb\u5316\u8fc7\u7a0b\\n\\nixgbe_init_ops_X550EM_a \u51fd\u6570\u8c03\u7528\u5c42\u6b21\u5982\u4e0b\uff1a\\n\\n```\\nixgbe_init_ops_X550EM_a\\n    ixgbe_init_ops_X550EM\\n        ixgbe_init_ops_X550\\n            ixgbe_init_ops_X540\\n                ixgbe_init_phy_ops_generic\\n                ixgbe_init_ops_generic\\n```\\n\\n\u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u5b8c\u6210\u5bf9 **phy\u3001mac\u3001eeprom** \u7b49\u7ed3\u6784\u865a\u51fd\u6570\u8868\u7684\u8d4b\u503c\uff0c\u4e00\u4e9b\u51fd\u6570\u7684**\u8d4b\u503c\u8fc7\u7a0b\u53ef\u80fd\u6709\u591a\u6b21**\uff01\\n\\n\u5b8c\u6210\u5176\u5b83\u51fd\u6570\u7684\u9002\u914d\u540e\uff0c\u4f7f\u7528 kni \u7a0b\u5e8f\u8fdb\u884c\u6d4b\u8bd5\uff0c\u7ed3\u679c\u53d1\u73b0\u7cfb\u7edf\u5d29\u6e83\u4e86\uff0c\u4e00\u901a\u5206\u6790\u53d1\u73b0\u95ee\u9898\u4e0e\u7f51\u5361\u7684 **reset** \u51fd\u6570\u6709\u5173\u3002\\n\\n### ixgbe_reset_hw_82599 \u51fd\u6570\u4e2d\u7684\u6ce8\u91ca\\n\u9996\u5148\u627e\u5230\u4e00\u4e2a**\u6b63\u5e38\u7684\u7248\u672c**\u8fdb\u884c**\u5bf9\u6bd4**\uff0c82599 \u6d4b\u8bd5\u8fc7\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e8e\u662f\u9605\u8bfb **ixgbe_reset_hw_82599** \u51fd\u6570\uff0c\u53d1\u73b0\u5b83\u7684\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u88ab\u6ce8\u91ca\u6389\u4e86\uff0c\u6ce8\u91ca\u7684\u622a\u6b62\u4f4d\u7f6e\u5982\u4e0b\uff1a\\n\\n```c\\n     /* Store the permanent mac address */\\n     hw->mac.ops.get_mac_addr(hw, hw->mac.perm_addr);\\n```\\n\\n\u76f4\u63a5\u5b8c\u5168\u6ce8\u91ca **ixgbe_reset_hw_X550em** \u540e\u6d4b\u8bd5\u53d1\u73b0\uff0cifconfig \u770b\u5230\u7684\u63a5\u53e3\u4fe1\u606f\u4e2d **mac** \u5730\u5740\u4e0d\u6b63\u5e38\uff0c\u4e8e\u662f\u53c2\u7167 **ixgbe_reset_hw_82599** \u7684\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\uff0c\u6ce8\u91ca\u6389 **get_mac_addr** \u4e4b\u524d\u7684\u4ee3\u7801\uff0c\u6d4b\u8bd5\u6b63\u5e38\u3002\\n\\n\u95ee\u9898\u5728\u4e8e\u7f51\u5361\u5728 dpdk \u7a0b\u5e8f\u8c03\u7528 **rte_eal_init** \u7684\u65f6\u5019**\u5df2\u7ecf\u88ab\u521d\u59cb\u5316**\u4e86\uff0c\u5e76\u4e14\u5df2\u7ecf\u88ab\u7528\u6237\u6001\u7a0b\u5e8f\u4f7f\u7528\uff0ckni \u4e2d**\u91cd\u65b0\u521d\u59cb\u5316\u6b63\u5728\u88ab\u4f7f\u7528\u7684\u7f51\u5361**\u5c31\u4f1a\u5bfc\u81f4\u5f02\u5e38\u3002\\n\\n\u9605\u8bfb\u5176\u5b83\u4ee3\u7801\uff0c\u4e5f\u80fd\u591f\u770b\u5230\u6ce8\u91ca\u7684\u9879\u76ee\uff0c\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u8ddf\u786c\u4ef6\u64cd\u4f5c\u6709\u5173\uff0c\u4e14\u6ce8\u91ca\u683c\u5f0f\u51cc\u4e71\uff0c\u50cf\u67d0\u79cd\u975e\u6cd5\u5730\u5e26\uff5e\\n\\n### ixgbe_get_settings \u51fd\u6570\u7684\u4fee\u6539\\n\\n\u521d\u59cb\u5316\u8fc7\u7a0b\u641e\u5b9a\u540e\uff0c\u8fd0\u884c kni \u7a0b\u5e8f\uff0c\u7136\u540e\u6267\u884c ethtool \u8fdb\u884c\u6d4b\u8bd5\uff0c\u53d1\u73b0\u8f93\u51fa\u7684\u94fe\u8def\u6a21\u5f0f\u4e0d\u6b63\u786e\uff0c\u60f3\u5230\u5e94\u8be5\u8981\u9002\u914d **ixgbe_get_settings** \u51fd\u6570\u3002\\n\\n**ixgbe_get_settings** \u4e2d\u7684\u7ec6\u8282\u975e\u5e38\u591a\uff0c\u4e3a\u4e86\u907f\u514d\u9020\u6210\u95ee\u9898\uff0c\u5bf9 x553 \u578b\u53f7\u7684\u7f51\\n\u5361\u5355\u72ec\u5224\u65ad\uff0c\u4f7f\u7528\u65b0\u7684 **ixgbe_get_settings** \u51fd\u6570\u3002\\n\\n\u6267\u884c ethtool \u7684\u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a\\n\\n```bash\\nSettings for vEth0_0:\\n        Supported ports: [ TP ]\\n        Supported link modes:   10baseT/Full\\n                                100baseT/Full\\n                                1000baseT/Full\\n        Supported pause frame use: Symmetric\\n        Supports auto-negotiation: Yes\\n        Advertised link modes:  10baseT/Full\\n                                100baseT/Full\\n                                1000baseT/Full\\n        Advertised pause frame use: Symmetric\\n        Advertised auto-negotiation: Yes\\n        Speed: Unknown!\\n        Duplex: Full\\n        Port: Twisted Pair\\n        PHYAD: 0\\n        Transceiver: external\\n        Auto-negotiation: on\\n        MDI-X: Unknown\\n        Supports Wake-on: d\\n        Wake-on: d\\n        Current message level: 0x00000007 (7)\\n                               drv probe link\\n        Link detected: yes\\n```\\n\\nLink detected \u7684\u8f93\u51fa\u7ed3\u679c\u4e3a yes\uff0c\u800c Speed \u7684\u503c\u5374\u4e3a Unknown\uff0c\u8fd9\u770b\u4e0a\u53bb\u5c31\u4e0d\u592a\u5bf9\uff0c\u4e0d\u8fc7\u652f\u6301\u7684\u94fe\u8def\u6a21\u5f0f\u4e0e\u63a5\u53e3\u7c7b\u578b\u90fd\u6b63\u786e\u4e86\u3002\\n\\n\u9605\u8bfb ixgbe_get_settings \u51fd\u6570\u4ee3\u7801\uff0c\u53d1\u73b0\u4e86\u5982\u4e0b\u8bed\u53e5\uff1a\\n\\n```c\\n 332     if (!in_interrupt()) {\\n 333         hw->mac.ops.check_link(hw, &link_speed, &link_up, false);\\n 334     } else { \\n 335         /*\\n 336          * this case is a special workaround for RHEL5 bonding\\n 337          * that calls this routine from interrupt context\\n 338          */\\n 339         link_speed = adapter->link_speed;\\n 340         link_up = adapter->link_up;\\n 341     }\\n```\\n\\n\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u4f1a\u8d70\u5230 if \u5224\u65ad\u4e2d\uff0c\u8c03\u7528 **check_link** \u6765\u83b7\u53d6\u5f53\u524d\u7f51\u5361\u7684\u72b6\u6001\uff0c\\n\u57fa\u4e8e\u8fd9\u4e2a\u70b9\u8fdb\u884c\u4fee\u6539\uff0c\u80fd\u591f\u83b7\u53d6\u5230\u901f\u7387\u4e86\uff01\\n\\n### check_link \u540c\u65f6\u8c03\u7528\u7684\u95ee\u9898\uff1f\\n\u5728\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u60f3\u5230\u4e86\u4e00\u4e2a\u95ee\u9898:\u5f53\u5173\u95ed\u7f51\u5361 lsc \u4e2d\u65ad\u65f6\uff0cdpdk \u7a0b\u5e8f\u4e2d\u8c03\u7528 **rte_eth_link_get_nowait** \u83b7\u53d6\u72b6\u6001\u4e5f\u4f1a\u8c03\u7528\u5230 ixgbe \u7684 check_link \u51fd\u6570\uff0c\u540c\u65f6\u4e1a\u52a1\u811a\u672c\u4e2d\u8c03\u7528 **ethtool** \u83b7\u53d6\u7f51\u5361\u72b6\u6001\u4e5f\u4f1a\u8c03\u7528 **check_link** \u51fd\u6570\uff0c\u53ef\u80fd\u5b58\u5728\u540c\u65f6\u8c03\u7528\u7684\u95ee\u9898\u3002\\n\\n\u9605\u8bfb\u4ee3\u7801\u786e\u8ba4\uff0cixgbe \u9a71\u52a8\u7684 **check_link** \u51fd\u6570\u5b9e\u8d28\u4e0a\u662f\u901a\u8fc7\u83b7\u53d6 **IXGBE_LINKS** \u5bc4\u5b58\u5668\u6765\u786e\u5b9a\u63a5\u53e3\u72b6\u6001\u7684\uff0c\u8fd9\u4e2a\u5bc4\u5b58\u5668\u624b\u518c\u4e2d\u6ca1\u6709\u8bf4\u660e\u4e0d\u80fd\u540c\u65f6\u8bfb\u53d6\uff0c\u7406\u8bba\u4e0a\u6ca1\u6709\u592a\u5927\u95ee\u9898\uff01\\n\\n## \u603b\u7ed3\\n\u65b0\u7f51\u5361\u7684\u9002\u914d\u5e26\u6765\u4e86 dpdk \u5347\u7ea7\u7684\u95ee\u9898\uff0c\u8fd9\u662f\u4ea7\u54c1\u7684\u75db\u70b9\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u75db\u70b9\u5e38\u5e38\u8981\u505a\u4e00\u4e9b\u79fb\u690d\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u79fb\u690d\u5de5\u4f5c\u603b\u7ed3\u8d77\u6765\u6709\u5982\u4e0b\u51e0\u4e2a\u7c7b\u522b\uff1a\\n\\n1. dpdk \u9ad8\u7248\u672c\u9a71\u52a8\u3001\u529f\u80fd\u79fb\u690d\u5230\u4f4e\u7248\u672c\\n2. \u5185\u6838\u9a71\u52a8\u79fb\u690d\u5230 kni\\n3. \u5185\u6838\u9a71\u52a8\u79fb\u690d\u5230 pmd \u4e2d\\n\\n\u8fd9\u4e9b\u5de5\u4f5c\u662f\u4e00\u4e2a\u6df1\u5165\u7814\u7a76 dpdk \u7684\u673a\u4f1a\uff0c\u5176\u96be\u70b9\u5728\u4e8e\u7406\u6e05\u695a\u67d0\u529f\u80fd\u3001\u7f51\u5361\u4ece\u521d\u59cb\u5316\u5230\u88ab\u4f7f\u7528\u7684\u5168\u8fc7\u7a0b\uff0c\u5bf9\u8fd9\u4e9b\u8fc7\u7a0b\u8d8a\u4e86\u89e3\uff0c\u505a\u8d77\u8fd9\u4e9b\u5de5\u4f5c\u6765\u8d8a\u6709\u5e95\u6c14\uff01"},{"id":"/dpdk/dpdk-16.04 eal lcore \u591a\u7ebf\u7a0b\u673a\u5236\u5206\u6790","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 eal lcore \u591a\u7ebf\u7a0b\u673a\u5236\u5206\u6790","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 eal lcore \u591a\u7ebf\u7a0b\u673a\u5236\u5206\u6790.md","source":"@site/blog/dpdk/dpdk-16.04 eal lcore \u591a\u7ebf\u7a0b\u673a\u5236\u5206\u6790.md","title":"dpdk \u591a\u7ebf\u7a0b\u6d41\u6c34\u7ebf","description":"dpdk \u62bd\u8c61\u7684 eal \u73af\u5883\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u63a2\u6d4b\u7cfb\u7edf\u4e0a\u53ef\u7528\u7684 cpu \u6838\uff0c\u4e3a\u6bcf\u4e2a\u6838\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u521d\u59cb\u5316\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u3002","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":16.32,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u9a71\u52a8\u79fb\u690d\u53e9\u5f00 kni \u6a21\u5757\u90a3\u4e9b\u9ed1\u6697\u7684\u89d2\u843d","permalink":"/longyu.github.io/blog/dpdk/dpdk \u9a71\u52a8\u79fb\u690d\u53e9\u5f00 kni \u6a21\u5757\u90a3\u4e9b\u9ed1\u6697\u7684\u89d2\u843d"},"nextItem":{"title":"dpdk/dpdk-16.04 eal \u521d\u59cb\u5316 log \u4fe1\u606f\u89e3\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 eal \u521d\u59cb\u5316 log \u4fe1\u606f\u89e3\u6790"}},"content":"dpdk \u62bd\u8c61\u7684 eal \u73af\u5883\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u63a2\u6d4b\u7cfb\u7edf\u4e0a\u53ef\u7528\u7684 cpu \u6838\uff0c\u4e3a\u6bcf\u4e2a\u6838\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u521d\u59cb\u5316\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u3002\\n\\n\u4e00\u822c\u6765\u8bf4\uff0c\u591a\u7ebf\u7a0b\u521b\u5efa\u7684\u65f6\u5019\u4f20\u5165\u7684 start_routine \u51fd\u6570\u6307\u9488\u5c31\u9650\u5b9a\u4e86\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u6267\u884c\u7684\u5165\u53e3\uff0c\u5e76\u4e14\u5f53\u7a0b\u5e8f\u8c03\u7528 pthread_create \u6210\u529f\u540e\u7ebf\u7a0b\u5c31\u5f00\u59cb\u6267\u884c\u3002\\n\\n\u5bf9\u4e8e dpdk \u6765\u8bf4\u5728\u521d\u59cb\u5316 eal \u73af\u5883\u65f6\uff0c**\u5e76\u4e0d\u786e\u5b9a\u9488\u5bf9\u6bcf\u4e2a\u6838\u521b\u5efa\u7684\u7ebf\u7a0b\u5c06\u8981\u6267\u884c\u54ea\u4e9b\u4efb\u52a1**\uff0c\u8fd9\u4e9b\u4efb\u52a1\u7684\u786e\u5b9a**\u63a8\u8fdf\u5230 dpdk \u7a0b\u5e8f\u7f16\u7801\u4e2d**\uff0c\u8fd9\u662f dpdk \u4e0d\u540c\u4e8e\u5e38\u89c1\u591a\u7ebf\u7a0b\u5904\u7406\u6a21\u578b\u7684\u7279\u70b9\u3002\\n\\n\u4e3a\u6b64\uff0cdpdk \u63d0\u4f9b\u63a5\u53e3\u8ba9 dpdk \u7a0b\u5e8f\u5c06\u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u5206\u53d1\u5230 dpdk \u5185\u90e8\u4e3a\u6bcf\u4e2a\u903b\u8f91\u6838\u521b\u5efa\u7684\u7ebf\u7a0b\u4e0a\uff0c\u53ef\u4ee5\u79f0\u4e3a dpdk \u591a\u7ebf\u7a0b\u6d41\u6c34\u7ebf\u673a\u5236\u3002\\n\\n\u5206\u53d1\u4efb\u52a1\u540e\u53c8\u5f15\u5165\u4e86\u65b0\u7684\u95ee\u9898\uff0c\u5373\u8fd9\u4e9b\u5206\u53d1\u7684\u4efb\u52a1\u4ec0\u4e48\u65f6\u5019\u6267\u884c\uff1f\u5176\u6267\u884c\u7ec8\u6b62\u7684\u72b6\u6001\u8be5\u5982\u4f55\u63a7\u5236\u7b49\u7b49\uff0c\u8fd9\u4e9b\u90fd\u662f dpdk \u591a\u7ebf\u7a0b\u6d41\u6c34\u7ebf\u673a\u5236\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\\n\\n\u672c\u6587\u5c06\u4ece\u4ee5\u4e0a\u95ee\u9898\u5f00\u59cb\u63a2\u8ba8\uff0c\u57fa\u4e8e dpdk-16.04 \u7684 linuxapp \u5b9e\u73b0\uff0c\u9010\u6b65\u5206\u6790 dpdk \u591a\u7ebf\u7a0b\u6d41\u6c34\u7ebf\u673a\u5236\u7684\u5de5\u4f5c\u539f\u7406\u3002\\n\\n# \u5982\u4f55\u52a8\u6001\u7684\u5206\u53d1\u4efb\u52a1\u5230\u591a\u7ebf\u7a0b\u4e2d\uff1f\\n\u4e0a\u6587\u5df2\u7ecf\u63d0\u53ca\uff0c\u4f7f\u7528 pthread_create \u521b\u5efa\u7684\u7ebf\u7a0b\uff0c\u4e00\u7ecf\u521b\u5efa\u6210\u529f\u4fbf\u4ece pthread_create \u51fd\u6570\u7684 start_routine \u53c2\u6570\u6307\u5b9a\u7684\u51fd\u6570\u5904\u5f00\u59cb\u6267\u884c\u3002dpdk \u4e3a\u6bcf\u4e2a\u903b\u8f91\u6838\u521b\u5efa\u7684\u7ebf\u7a0b\u90fd\u6307\u5b9a\u4e86\u4e00\u4e2a**\u7edf\u4e00\u7684\u5165\u53e3**\uff0c\u5373 **eal_thread_loop** \u51fd\u6570\uff0c\u6b64\u51fd\u6570\u8d1f\u8d23\u6267\u884c\u4e0b\u53d1\u5230\u6bcf\u4e2a\u903b\u8f91\u6838\u7ebf\u7a0b\u7684\u51fd\u6570\u3002\\n\\ndpdk \u7a0b\u5e8f\u4e0b\u53d1\u7684\u51fd\u6570\u53ef\u4ee5\u770b\u505a\u662f\u9488\u5bf9\u903b\u8f91\u6838\u7ebf\u7a0b\u7684\u914d\u7f6e\uff0c\u90a3\u8fd9\u4e2a\u914d\u7f6e\u5728 dpdk \u4e2d\u6709\u600e\u6837\u7684\u5f62\u5f0f\u5462\uff1f\\n\\n## lcore_config \u7ed3\u6784\\ndpdk \u5185\u90e8\u62bd\u8c61\u51fa\u7684 lcore_config \u7ed3\u6784\u5b9a\u4e49\u4e86\u6bcf\u4e2a\u903b\u8f91\u6838\u7ebf\u7a0b\u7684\u914d\u7f6e\u53ca\u4e00\u4e9b\u79c1\u6709\u7684\u53d8\u91cf\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\n/**\\n * Structure storing internal configuration (per-lcore)\\n */\\nstruct lcore_config {\\n\\tunsigned detected;         /**< true if lcore was detected */\\n\\tpthread_t thread_id;       /**< pthread identifier */\\n\\tint pipe_master2slave[2];  /**< communication pipe with master */\\n\\tint pipe_slave2master[2];  /**< communication pipe with master */\\n\\tlcore_function_t * volatile f;         /**< function to call */\\n\\tvoid * volatile arg;       /**< argument of function */\\n\\tvolatile int ret;          /**< return value of function */\\n\\tvolatile enum rte_lcore_state_t state; /**< lcore state */\\n\\tunsigned socket_id;        /**< physical socket id for this lcore */\\n\\tunsigned core_id;          /**< core number on socket for this lcore */\\n\\tint core_index;            /**< relative index, starting from 0 */\\n\\trte_cpuset_t cpuset;       /**< cpu set which the lcore affinity to */\\n};\\n```\\n\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u51e0\u7c7b\uff1a\\n\\n1. \u6807\u8bc6\u7ed1\u5b9a\u5230\u7684\u7ebf\u7a0b\u7684\u6210\u5458\\n2. \u7528\u4e8e\u63a7\u5236\u3001\u63cf\u8ff0 lcore \u7ebf\u7a0b\u6267\u884c\u72b6\u6001\u7684\u6210\u5458\\n3. \u4ee3\u8868\u5206\u53d1\u5230 lcore \u7ebf\u7a0b\u4e2d\u7684\u6267\u884c\u5355\u5143\u7684\u6210\u5458\\n4. \u7528\u4e8e\u63cf\u8ff0 cpu \u4eb2\u548c\u6027\u53ca numa \u8282\u70b9\u7684\u6210\u5458\\n\\n\u4e0a\u8ff0\u4e0d\u540c\u7c7b\u522b\u7684\u6210\u5458\u4e00\u8d77\u62bd\u8c61\u51fa\u4e86 dpdk \u4e0b\u53d1\u5230\u6bcf\u4e2a lcore \u7ebf\u7a0b\u7684\u914d\u7f6e\uff0c**dpdk \u5185\u90e8\u7ef4\u62a4\u4e86\u4e00\u4e2a lcore_config \u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u6bcf\u4e2a\u4f7f\u80fd\u7684\u903b\u8f91\u6838\u90fd\u4f1a\u5360\u636e\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u4e00\u9879\u3002**\\n\\n\u4e0b\u9762\u6211\u9488\u5bf9 lcore_config \u7ed3\u6784\u7684\u51e0\u4e2a\u7c7b\u522b\u7684\u6210\u5458\u8fdb\u884c\u5206\u6790\u3002\\n\\n### lcore_config \u4e2d\u6807\u8bc6\u7ed1\u5b9a\u5230\u7684\u7ebf\u7a0b\u7684\u6210\u5458\\n```c\\n\\tunsigned detected;         /**< true if lcore was detected */\\n\\tpthread_t thread_id;       /**< pthread identifier */\\n```\\ndetected \u6807\u5fd7\u8fd9\u4e2a lcore \u662f\u5426\u53ef\u7528\uff0cthread_id \u4ee3\u8868\u7ed1\u5b9a\u5230\u5f53\u524d lcore_config \u4e0a\u7684\u7ebf\u7a0b id\u3002\\n\\nthread_id \u4e0d\u8db3\u4e3a\u5947\uff0cdpdk \u5728\u521b\u5efa\u9700\u8981\u7684\u903b\u8f91\u6838\u7ebf\u7a0b\u65f6\u4e3a thread_id \u8d4b\u503c\uff0c\u4f46**\u4e3a\u4f55\u8981\u521b\u5efa\u4e00\u4e2a detected \u6210\u5458\u5462**\uff1f\\n\\n\u7531\u4e8e dpdk \u7a0b\u5e8f\u5728\u8fd0\u884c\u524d**\u5e76\u4e0d\u786e\u5b9a\u7cfb\u7edf\u4e0a\u7684\u903b\u8f91\u6838\u6570\u76ee**\uff0c\u4f46\u662f\u5b83\u5185\u90e8\u5b9e\u73b0\u4e3a\u9700\u8981\u63d0\u524d\u5206\u914d\u6bcf\u4e2a\u903b\u8f91\u6838\u7684 lcore_config \u7ed3\u6784\u7684\u65b9\u5f0f\uff0c\u800c\u5206\u914d\u591a\u5c11\u4e2a\u903b\u8f91\u6838\u7684 lcore_config \u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a\u5fc5\u987b\u7684\u53c2\u6570\uff0c\u4e3a\u6b64 dpdk \u9884\u8bbe\u4e86\u4e00\u4e2a\u53c2\u6570\uff0c**\u9ed8\u8ba4\u652f\u6301 128 \u4e2a\u903b\u8f91\u6838\uff0c\u540c\u65f6\u8fd9\u9879\u914d\u7f6e\u4e5f\u5bfc\u51fa\u5230 .config \u4e2d\u8ba9\u7528\u6237\u52a8\u6001\u914d\u7f6e**\u3002\\n\\n\u8fd9\u6837\u5f53 dpdk \u7a0b\u5e8f\u8fd0\u884c\u65f6\uff0c\u9700\u8981\u6839\u636e\u8fd0\u884c\u73af\u5883\u7684\u5b9e\u9645\u903b\u8f91\u6838\u6765\u8bbe\u5b9a\u7279\u5b9a\u7684 lcore_config \u7ed3\u6784\uff0c\u8fd9\u5c31\u9700\u8981\u6807\u8bc6\u51fa\u54ea\u4e9b lcore_config \u7ed3\u6784\u662f\u53ef\u7528\u7684\uff0c\u8fd9\u5c31\u662f detected \u6210\u5458\u7684\u529f\u80fd\u3002\\n\\ndpdk \u901a\u8fc7\u5728 rte_eal_init \u51fd\u6570\u4e2d\u8c03\u7528 rte_eal_cpu_init \u51fd\u6570\u6765\u521d\u59cb\u5316\u9884\u8bbe\u7684\u6bcf\u4e2a lcore_config \u7ed3\u6784\u4e2d\u7684 detected \u5b57\u6bb5\uff0c\u6b64\u5916 cpuset\u3001 core_id \u3001 socket_id \u4e5f\u90fd\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u88ab\u8bbe\u5b9a\u3002\\n\\n### \u7528\u4e8e\u63a7\u5236\u3001\u63cf\u8ff0 lcore \u7ebf\u7a0b\u6267\u884c\u72b6\u6001\u7684\u6210\u5458\\ndpdk \u9700\u8981\u5206\u53d1\u6267\u884c\u5355\u5143\u5230 lcore \u7ebf\u7a0b\u4e2d\uff0c\u8fd9\u5c31\u6d89\u53ca\u5230\u4e0e\u6bcf\u4e2a lcore \u7ebf\u7a0b\u7684\u4ea4\u4e92\uff0c\u9700\u8981\u63a7\u5236\u6267\u884c\u5355\u5143\u6267\u884c\u7684\u65f6\u673a\uff0c\u5e76\u80fd\u591f\u901a\u8fc7\u67d0\u4e2a\u5185\u90e8\u6210\u5458\u8868\u793a\u51fa\u6bcf\u4e2a lcore \u7ebf\u7a0b\u7684\u5f53\u524d\u72b6\u6001\u3002\\n\\n\u5982\u4e0a\u529f\u80fd\u5bf9\u5e94 lcore_config \u4e2d\u7684\u5982\u4e0b\u6210\u5458\uff1a\\n\\n```c\\n\\tint pipe_master2slave[2];  /**< communication pipe with master */\\n\\tint pipe_slave2master[2];  /**< communication pipe with master */\\n\\tvolatile enum rte_lcore_state_t state; /**< lcore state */\\n```\\npipe_master2slave \u4e0e pipe_slave2master \u5efa\u7acb\u8d77\u4e86\u4e3b\u7ebf\u7a0b\u4e0e\u6bcf\u4e2a lcore \u903b\u8f91\u7ebf\u7a0b\u4e4b\u95f4\u7684\u901a\u4fe1\u7ba1\u9053\u3002\\n\\n**\u4e3a\u4ec0\u4e48\u8981\u521b\u5efa\u4e24\u4e2a\u533f\u540d\u7ba1\u9053\u5462\uff1f**\\n\\npipe \u662f\u534a\u53cc\u5de5\u7684\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\uff0c\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u5982\u4e0b\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210506214520105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\\n\u4e00\u822c\u6765\u8bf4\uff0cpipe \u7684\u4e00\u7aef\u8d1f\u8d23\u8bfb\uff0c\u4e00\u7aef\u8d1f\u8d23\u5199\uff0c\u6570\u636e\u7684\u6d41\u52a8\u662f\u5355\u5411\u7684\u3002dpdk \u4e3a\u4e86\u5b9e\u73b0 master \u7ebf\u7a0b\u4e0e slave \u7ebf\u7a0b\u4e4b\u95f4\u7684**\u53cc\u5411\u901a\u4fe1**\u5c31\u4e3a\u6bcf\u4e2a lcore \u7ebf\u7a0b\u521b\u5efa\u4e86**\u4e24\u4e2a**\u533f\u540d\u7ba1\u9053\u3002\\n\\nstate \u53d8\u91cf\u8868\u793a lcore \u7ebf\u7a0b\u7684\u72b6\u6001\uff0c\u6709\u5982\u4e0b\u51e0\u79cd\u7c7b\u578b\uff1a\\n\\n1. WAIT \u72b6\u6001\uff0c\u7b49\u5f85\u4e0b\u53d1\u4efb\u52a1\\n2. RUNNING \u72b6\u6001\uff0c\u6b63\u5728\u6267\u884c\u4e0b\u53d1\u7684\u4efb\u52a1\\n3. FINISHED \u72b6\u6001\uff0c\u4e0b\u53d1\u4efb\u52a1\u6267\u884c\u5b8c\u6210\\n\\nrte_eal_init \u521b\u5efa\u6bcf\u4e2a\u903b\u8f91\u6838\u7ebf\u7a0b\u65f6\uff0c\u5c06 state \u8bbe\u7f6e\u4e3a WAIT \u72b6\u6001\uff0c\u8868\u793a\u7ebf\u7a0b\u7b49\u5f85\u4efb\u52a1\u4e0b\u53d1\u3002\\n\\nrte_eal_init \u4e2d\u7684\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n\\tRTE_LCORE_FOREACH_SLAVE(i) {\\n\\n\\t\\t/*\\n\\t\\t * create communication pipes between master thread\\n\\t\\t * and children\\n\\t\\t */\\n\\t\\tif (pipe(lcore_config[i].pipe_master2slave) < 0)\\n\\t\\t\\trte_panic(\\"Cannot create pipe\\\\n\\");\\n\\t\\tif (pipe(lcore_config[i].pipe_slave2master) < 0)\\n\\t\\t\\trte_panic(\\"Cannot create pipe\\\\n\\");\\n\\n\\t\\tlcore_config[i].state = WAIT;\\n\\n\\t\\t/* create a thread for each lcore */\\n\\t\\tret = pthread_create(&lcore_config[i].thread_id, NULL,\\n\\t\\t\\t\\t     eal_thread_loop, NULL);\\n\\t\\tif (ret != 0)\\n\\t\\t\\trte_panic(\\"Cannot create thread\\\\n\\");\\n\\n\\t\\t/* Set thread_name for aid in debugging. */\\n\\t\\tsnprintf(thread_name, RTE_MAX_THREAD_NAME_LEN,\\n\\t\\t\\t\\"lcore-slave-%d\\", i);\\n\\t\\tret = rte_thread_setname(lcore_config[i].thread_id,\\n\\t\\t\\t\\t\\t\\tthread_name);\\n\\t\\tif (ret != 0)\\n\\t\\t\\tRTE_LOG(ERR, EAL,\\n\\t\\t\\t\\t\\"Cannot set name for lcore thread\\\\n\\");\\n\\t}\\n```\\n\u4e0a\u8ff0\u4ee3\u7801\u4e3a\u6bcf\u4e2a\u903b\u8f91\u6838\u521b\u5efa\u4e24\u4e2a\u533f\u540d\u7ba1\u9053\uff0c\u5e76\u5c06 lcore_config \u6570\u7ec4\u4e2d\u7684\u5bf9\u5e94\u9879\u76ee\u7684 state \u53d8\u91cf\u8bbe\u5b9a\u4e3a WAIT \u72b6\u6001\uff0c\u7136\u540e\u8c03\u7528 pthread_create \u521b\u5efa\u903b\u8f91\u6838\u7ebf\u7a0b\uff0c\u5c06 thread_id \u4fdd\u5b58\u5728 lcore_config \u6570\u7ec4\u4e2d\u5f53\u524d\u9879\u76ee\u7684 thread_id \u4e2d\uff0c\u5e76\u6307\u5b9a\u7ebf\u7a0b\u5165\u53e3\u4e3a eal_thread_loop\u3002\u6700\u540e\u901a\u8fc7 rte_thread_setname \u8bbe\u7f6e\u7ebf\u7a0b\u7684\u540d\u79f0\uff0c**\u6bcf\u4e2a\u903b\u8f91\u6838\u7ebf\u7a0b\u5728\u8fd9\u91cc\u88ab\u79f0\u4e3a slave \u7ebf\u7a0b**\u3002\\n\\n### \u4ee3\u8868\u5206\u53d1\u5230 lcore \u7ebf\u7a0b\u4e2d\u7684\u6267\u884c\u5355\u5143\u7684\u6210\u5458\\nlcore_config \u7ed3\u6784\u7684\u5982\u4e0b\u6210\u5458\u63cf\u8ff0\u4e86\u4e0b\u53d1\u5230 lcore \u7ebf\u7a0b\u4e2d\u7684\u6267\u884c\u5355\u5143\uff1a\\n\\n```c\\n\\tlcore_function_t * volatile f;         /**< function to call */\\n\\tvoid * volatile arg;       /**< argument of function */\\n\\tvolatile int ret;          /**< return value of function */\\n```\\nf \u6307\u5411\u5f85\u6267\u884c\u7684\u4efb\u52a1\u5355\u5143\uff0carg \u6307\u5411\u4efb\u52a1\u5355\u5143\u9644\u5c5e\u7684\u53c2\u6570\uff0cret \u4fdd\u5b58\u6267\u884c\u5355\u5143\u6267\u884c\u7684\u8fd4\u56de\u503c\u3002\\n\\n**eal_common_launch.c** \u4e2d\u5b9e\u73b0\u4e86\u4e0b\u53d1\u4efb\u52a1\u4e0e\u83b7\u53d6\u903b\u8f91\u6838\u72b6\u6001\u7684\u63a5\u53e3\uff0c\u4e0b\u53d1\u4efb\u52a1\u901a\u8fc7\u8c03\u7528 **rte_eal_mp_remote_launch** \u51fd\u6570\u6765\u5b8c\u6210\u3002\\n\\n\u6b64\u51fd\u6570\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nint\\nrte_eal_mp_remote_launch(int (*f)(void *), void *arg,\\n\\t\\t\\t enum rte_rmt_call_master_t call_master)\\n{\\n\\tint lcore_id;\\n\\tint master = rte_get_master_lcore();\\n\\n\\t/* check state of lcores */\\n\\tRTE_LCORE_FOREACH_SLAVE(lcore_id) {\\n\\t\\tif (lcore_config[lcore_id].state != WAIT)\\n\\t\\t\\treturn -EBUSY;\\n\\t}\\n\\n\\t/* send messages to cores */\\n\\tRTE_LCORE_FOREACH_SLAVE(lcore_id) {\\n\\t\\trte_eal_remote_launch(f, arg, lcore_id);\\n\\t}\\n\\n\\tif (call_master == CALL_MASTER) {\\n\\t\\tlcore_config[master].ret = f(arg);\\n\\t\\tlcore_config[master].state = FINISHED;\\n\\t}\\n\\n\\treturn 0;\\n}\\n```\\n\u6b64\u51fd\u6570\u5c06\u4efb\u52a1\u5206\u53d1\u5230\u6bcf\u4e2a\u903b\u8f91\u6838\u7ebf\u7a0b\u4e0a\uff0c\u5206\u53d1\u524d\u5148\u68c0\u67e5\u6bcf\u4e2a\u903b\u8f91\u6838\u7ebf\u7a0b\u7684\u72b6\u6001\uff0c\u6ca1\u6709\u5904\u4e8e WAIT \u72b6\u6001\u8868\u660e\u903b\u8f91\u6838\u7ebf\u7a0b\u5df2\u7ecf\u6709\u4efb\u52a1\u6b63\u5728\u6267\u884c\uff0c\u51fd\u6570\u76f4\u63a5\u8fd4\u56de\u3002\\n\\n\u5f53\u903b\u8f91\u6838\u7ebf\u7a0b\u7a7a\u95f2\u65f6\uff0c\u904d\u5386\u6bcf\u4e2a\u903b\u8f91\u6838\uff0c\u8c03\u7528 rte_eal_remote_launch \u5c06 f \u53c2\u6570\u4ee3\u8868\u7684\u6267\u884c\u5355\u5143\u5206\u53d1\u5230\u76f8\u5e94\u7684\u903b\u8f91\u6838\u7ebf\u7a0b\u4e2d\u3002\\n\\nrte_eal_remote_launch \u51fd\u6570\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a\\n\\n1. \u83b7\u53d6 rte_eal_init \u4e2d\u4e3a\u5f53\u524d\u903b\u8f91\u6838\u7ebf\u7a0b\u521b\u5efa\u7684\u533f\u540d\u7ba1\u9053\uff0cmaster \u5230 slave \u7684\u7ba1\u9053\u4e3a m2s\uff0cslave \u5230 master \u7684\u7ba1\u9053\u4e3a s2m\u3002\\n2. \u5224\u65ad slave \u7ebf\u7a0b\u662f\u5426\u5904\u4e8e WAIT \u72b6\u6001\uff0c\u5426\uff0c\u5219\u8fd4\u56de -EBUSY\u3002\\n3. \u5c06 f \u4e0e arg \u53c2\u6570\u8bbe\u5b9a\u5230\u5f53\u524d\u903b\u8f91\u6838\u7ebf\u7a0b\u5bf9\u5e94\u7684 lcore_config \u9879\u76ee\u7684 f \u4e0e arg \u6210\u5458\u4e0a\u3002\\n4. \u901a\u8fc7 m2s \u5411 slave \u7ebf\u7a0b\u7684\u7ba1\u9053\u5199\u5165\u5b57\u7b26 \'0\'\u3002\\n5. \u4ece s2m \u7ba1\u9053\u8bfb\u53d6 slave \u7ebf\u7a0b\u5411 master \u7ebf\u7a0b\u56de\u590d\u7684 ack\uff0c\u6536\u5230\u56de\u590d\u5219\u6210\u529f\u8fd4\u56de\uff0c\u672a\u6536\u5230\u56de\u590d\u3001\u5176\u5b83\u5f02\u5e38\u60c5\u51b5\u5219\u76f4\u63a5\u7ec8\u6b62\u7a0b\u5e8f\u3002\\n\\nrte_eal_remote_launch \u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\uff0c\u8fd4\u56de\u5230 rte_eal_mp_remote_launch \u51fd\u6570\u4e2d\uff0c\u5224\u65ad **call_master** \u53c2\u6570\u662f\u5426\u4e3a **CALL_MASTER**\uff0c\u662f\u5219\u5728\u5f53\u524d\u7ebf\u7a0b\u4e0a\u8c03\u7528 f \u51fd\u6570\u5e76\u4fdd\u5b58\u8fd4\u56de\u503c\u5230 master \u7ebf\u7a0b\u5bf9\u5e94\u7684 lcore_config \u7ed3\u6784\u7684 ret \u53d8\u91cf\u4e2d\uff0c\u6267\u884c\u5b8c\u6210\u540e\u5c06 master \u7ebf\u7a0b\u5bf9\u5e94\u7684 lcore_config \u6570\u7ec4\u4e2d\u7684 state \u53d8\u91cf\u8bbe\u5b9a\u4e3a FINISHED\u3002\\n\\n###  \u7528\u4e8e\u63cf\u8ff0\u7ebf\u7a0b cpu \u4eb2\u548c\u6027\u53ca numa \u8282\u70b9\u7684\u6210\u5458\\n\u76f8\u5173\u6570\u636e\u6210\u5458\u5982\u4e0b\uff1a\\n\\n```c\\n\\tunsigned socket_id;        /**< physical socket id for this lcore */\\n\\tunsigned core_id;          /**< core number on socket for this lcore */\\n\\tint core_index;            /**< relative index, starting from 0 */\\n\\trte_cpuset_t cpuset;       /**< cpu set which the lcore affinity to */\\n```\\nsocket_id \u8868\u793a\u903b\u8f91\u6838\u6240\u5728\u7684\u7269\u7406 numa id\uff0ccore_id \u8868\u793a\u5f53\u524d\u903b\u8f91\u6838\u6240\u5728\u7684 numa \u8282\u70b9\u4e0a\u7684\u6838\u6570\uff0ccore_index \u8868\u793a\u4ece 0 \u5f00\u59cb\u7684\u6838\u4e0b\u6807\uff0ccpuset \u8868\u793a\u5f53\u524d\u903b\u8f91\u6838\u7684 cpu \u4eb2\u548c\u6027\u8bbe\u7f6e\u3002\\n\\nsocket_id\u3001core_id\u3001core_index\u3001cpuset \u5728 rte_eal_init \u51fd\u6570\u7684\u5b50\u51fd\u6570\u8c03\u7528\u4e2d\u88ab\u521d\u59cb\u5316\uff0ccpuset \u5728 eal_thread_loop \u51fd\u6570\u4e2d\u88ab\u8bbe\u5b9a\u5230\u5bf9\u5e94\u7684\u7ebf\u7a0b\u4e0a\u3002\\n\\neal_thread_loop \u51fd\u6570\u6e90\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n/* main loop of threads */\\n__attribute__((noreturn)) void *\\neal_thread_loop(__attribute__((unused)) void *arg)\\n{\\n\\tchar c;\\n\\tint n, ret;\\n\\tunsigned lcore_id;\\n\\tpthread_t thread_id;\\n\\tint m2s, s2m;\\n\\tchar cpuset[RTE_CPU_AFFINITY_STR_LEN];\\n\\n\\tthread_id = pthread_self();\\n\\n\\t/* retrieve our lcore_id from the configuration structure */\\n\\tRTE_LCORE_FOREACH_SLAVE(lcore_id) {\\n\\t\\tif (thread_id == lcore_config[lcore_id].thread_id)\\n\\t\\t\\tbreak;\\n\\t}\\n\\tif (lcore_id == RTE_MAX_LCORE)\\n\\t\\trte_panic(\\"cannot retrieve lcore id\\\\n\\");\\n\\n\\tm2s = lcore_config[lcore_id].pipe_master2slave[0];\\n\\ts2m = lcore_config[lcore_id].pipe_slave2master[1];\\n\\n\\t/* set the lcore ID in per-lcore memory area */\\n\\tRTE_PER_LCORE(_lcore_id) = lcore_id;\\n\\n\\t/* set CPU affinity */\\n\\tif (eal_thread_set_affinity() < 0)\\n\\t\\trte_panic(\\"cannot set affinity\\\\n\\");\\n\\n\\tret = eal_thread_dump_affinity(cpuset, RTE_CPU_AFFINITY_STR_LEN);\\n\\n\\tRTE_LOG(DEBUG, EAL, \\"lcore %u is ready (tid=%x;cpuset=[%s%s])\\\\n\\",\\n\\t\\tlcore_id, (int)thread_id, cpuset, ret == 0 ? \\"\\" : \\"...\\");\\n\\n\\t/* read on our pipe to get commands */\\n\\twhile (1) {\\n\\t\\tvoid *fct_arg;\\n\\n\\t\\t/* wait command */\\n\\t\\tdo {\\n\\t\\t\\tn = read(m2s, &c, 1);\\n\\t\\t} while (n < 0 && errno == EINTR);\\n\\n\\t\\tif (n <= 0)\\n\\t\\t\\trte_panic(\\"cannot read on configuration pipe\\\\n\\");\\n\\n\\t\\tlcore_config[lcore_id].state = RUNNING;\\n\\n\\t\\t/* send ack */\\n\\t\\tn = 0;\\n\\t\\twhile (n == 0 || (n < 0 && errno == EINTR))\\n\\t\\t\\tn = write(s2m, &c, 1);\\n\\t\\tif (n < 0)\\n\\t\\t\\trte_panic(\\"cannot write on configuration pipe\\\\n\\");\\n\\n\\t\\tif (lcore_config[lcore_id].f == NULL)\\n\\t\\t\\trte_panic(\\"NULL function pointer\\\\n\\");\\n\\n\\t\\t/* call the function and store the return value */\\n\\t\\tfct_arg = lcore_config[lcore_id].arg;\\n\\t\\tret = lcore_config[lcore_id].f(fct_arg);\\n\\t\\tlcore_config[lcore_id].ret = ret;\\n\\t\\trte_wmb();\\n\\t\\tlcore_config[lcore_id].state = FINISHED;\\n\\t}\\n\\n\\t/* never reached */\\n\\t/* pthread_exit(NULL); */\\n\\t/* return NULL; */\\n}\\n```\\n\u6b64\u51fd\u6570\u7684\u5173\u952e\u8fc7\u7a0b\u5982\u4e0b\uff1a\\n\\n1. \u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u7684 thread_id\\n2. \u4f7f\u7528\u83b7\u53d6\u5230\u7684 thread_id \u5728 lcore_config \u6570\u7ec4\u4e2d\u5339\u914d\uff0c\u786e\u5b9a\u5bf9\u5e94\u7684 lcore_id\uff0clcore_id \u4e0d\u5408\u6cd5\u5219\u7ec8\u6b62\u7a0b\u5e8f\uff0c\u5408\u6cd5\u5219\u83b7\u53d6 m2s\uff08\u4e3b\u7ebf\u7a0b\u5230\u4ece\u7ebf\u7a0b\u7684\u533f\u540d\u7ba1\u9053\uff09\u4e0e s2m \uff08\u4ece\u7ebf\u7a0b\u5230\u4e3b\u7ebf\u7a0b\u7684\u533f\u540d\u7ba1\u9053\uff09\\n3. \u8bbe\u5b9a\u6bcf\u7ebf\u7a0b\u53d8\u91cf per_lcore__lcore_id\uff0c\u8bbe\u5b9a\u540e\u8c03\u7528 pthread \u5e93\u7684\u51fd\u6570\u8bbe\u5b9a\u5f53\u524d\u7ebf\u7a0b\u7684 cpu \u4eb2\u548c\u6027\\n4. dump \u5f53\u524d\u7ebf\u7a0b\u7684 cpu \u4eb2\u548c\u6027\\n5. \u4ece m2s \u8bfb\u53d6\u4e3b\u7ebf\u7a0b\u53d1\u9001\u7684\u6570\u636e\uff0c\u5931\u8d25\u5219\u76f4\u63a5\u7ec8\u6b62\u7a0b\u5e8f\uff0c\u6210\u529f\u5219\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u6b65\\n6. \u8bbe\u5b9a\u5f53\u524d\u7ebf\u7a0b lcore_config \u7ed3\u6784\u4e2d\u7684 state \u53d8\u91cf\u4e3a RUNNING\uff0c\u6807\u5fd7\u4e0b\u53d1\u4efb\u52a1\u5373\u5c06\u6267\u884c\\n7. \u901a\u8fc7 s2m \u5411\u4e3b\u7ebf\u7a0b\u53d1\u9001 ack\uff0c\u5931\u8d25\u5219\u76f4\u63a5\u7ec8\u6b62\u7a0b\u5e8f\uff0c\u6210\u529f\u5219\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u6b65\\n8. \u5224\u65ad\u5f53\u524d\u7ebf\u7a0b lcore_config \u7ed3\u6784\u4e2d\u7684 f \u53d8\u91cf\u503c\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u7a7a\u5219\u7ec8\u6b62\u7a0b\u5e8f\uff0c\u4e0d\u4e3a\u7a7a\u5219\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u6b65\\n9. \u8c03\u7528\u5f53\u524d\u7ebf\u7a0b lcore_config \u7ed3\u6784\u4e2d\u8bbe\u5b9a\u7684 f \u51fd\u6570\uff0c\u5e76\u4fdd\u5b58\u5176\u8fd4\u56de\u503c\u5230 lcore_config \u7ed3\u6784\u4e2d\u7684 ret \u53d8\u91cf\u4e2d\uff0c\u6700\u540e\u5c06 lcore_config \u7ed3\u6784\u4e2d\u7684 state \u53d8\u91cf\u8bbe\u5b9a\u4e3a FINISHED \u6807\u5fd7\u4e0b\u53d1\u4efb\u52a1\u6267\u884c\u5b8c\u6210\u3002\\n\\n ### \u4f7f\u7528\u6bcf\u7ebf\u7a0b\u6570\u636e lcore_id \u7684\u610f\u4e49\\n\\n dpdk \u5b9a\u4e49\u4e86\u6bcf\u7ebf\u7a0b\u6570\u636e lcore_id\uff0c\u8fd9\u4e2a lcore_id \u662f\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u672c\u5730\u6570\u636e\uff0c\u5b83\u88ab\u7528\u4e8e\u5feb\u901f\u83b7\u53d6 lcore_config \u6570\u7ec4\u3001\u5176\u5b83\u5168\u5c40\u6570\u7ec4\u4e2d\uff0c\u5f53\u524d\u7ebf\u7a0b\u5360\u636e\u7684\u5143\u7d20\u3002\\n\\n\u6700\u521d\u521b\u5efa\u903b\u8f91\u6838\u7ebf\u7a0b\u65f6\uff0c\u6bcf\u4e2a lcore_config \u6570\u7ec4\u4e2d\u4e0d\u540c\u9879\u76ee\u7684 thread_id \u4e2d\u4fdd\u5b58\u4e86\u7ed1\u5b9a\u5230\u7684\u7ebf\u7a0b\u7684 id \u53f7\u3002dpdk \u9700\u8981\u5728\u903b\u8f91\u6838\u7ebf\u7a0b\u7684\u6267\u884c\u51fd\u6570\u4e2d\u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u5bf9\u5e94\u7684 lcore_config \u7ed3\u6784\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u904d\u5386 lcore_config \u6570\u7ec4\u6765\u786e\u5b9a\uff0c\u6548\u7387\u5f88\u5dee\uff0c\u540c\u65f6\u6bcf\u4e2a\u903b\u8f91\u6838\u5bf9\u5e94\u7684 lcore_config \u7ed3\u6784\u5df2\u7ecf\u521b\u5efa\u5e76\u5173\u8054\u540e\u5c31\u662f\u786e\u5b9a\u7684\uff0c\u4e0d\u4f1a\u518d\u53d8\u5316\u3002\\n\\n\u6309\u7167\u6211\u7684\u7406\u89e3\uff0c\u57fa\u4e8e\u8fd9\u4e24\u70b9\u539f\u56e0\uff0cdpdk \u5b9a\u4e49\u4e86\u6bcf\u7ebf\u7a0b\u6570\u636e lcore_id\uff0c\u5728 eal_thread_loop \u51fd\u6570\u4e2d\u4e3a\u8fd9\u4e2a\u6bcf\u7ebf\u7a0b id \u8d4b\u503c\uff0c\u8d4b\u503c\u5b8c\u6210\u540e\uff0c\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u4e2d\u5c31\u53ef\u4ee5\u4ee5 lcore_id \u4e3a\u4e0b\u6807\u6765\u83b7\u53d6\u5230\u8bf8\u5982 lcore_config \u8fd9\u79cd\u6bcf\u4e2a\u7ebf\u7a0b\u7684\u7ed3\u6784\u3002\\n\\n## \u4e3a\u4ec0\u4e48\u4e0d\u5c06 lcore_config \u7ed3\u6784\u4e5f\u5b9a\u4e49\u4e3a\u6bcf\u7ebf\u7a0b\u6570\u636e\uff1f\\n\u6309\u7167\u4e0a\u6587\u7684\u63cf\u8ff0\uff0c\u6bcf\u4e2a\u903b\u8f91\u6838\u7ebf\u7a0b\u90fd\u9700\u8981\u5206\u914d\u4e00\u4e2a lcore_config \u7ed3\u6784\uff0c\u90a3\u4e3a\u4ec0\u4e48\u8981\u901a\u8fc7\u5168\u5c40\u6570\u7ec4\uff0c\u80fd\u5426\u5c06 lcore_config \u7ed3\u6784\u4e5f\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6bcf\u7ebf\u7a0b\u6570\u636e\u6765\u5b9e\u73b0\u5462\uff1f\\n\\n\u4ed4\u7ec6\u60f3\u60f3\u8fd9\u662f\u4e0d\u5408\u7406\u7684\uff0clcore_config \u7ed3\u6784\u4e2d\u7684\u4e00\u4e9b\u6210\u5458\u5982\u6267\u884c\u5355\u5143\u76f8\u5173\u7684\u6210\u5458\u9700\u8981\u5728\u5176\u5b83\u7ebf\u7a0b\u4e2d\u88ab\u8bbf\u95ee\u5e76\u8d4b\u503c\uff0c\u800c\u5728\u5176\u5b83\u7ebf\u7a0b\u4e2d\u8bbf\u95ee\u5230\u7684 lcore_config \u7ed3\u6784\u662f\u672c\u7ebf\u7a0b\u7684 tls \u53d8\u91cf\uff0c\u8fd9\u6837\u5c31\u8bbe\u5b9a\u4e0d\u4e86\u5176\u5b83\u7ebf\u7a0b\u7684 lcore_config \u7ed3\u6784\u7684\u6210\u5458\uff0c\u6545\u800c\u4e0d\u80fd\u5c06 lcore_config \u7ed3\u6784\u5b9a\u4e49\u4e3a\u6bcf\u7ebf\u7a0b\u6570\u636e\u3002"},{"id":"/dpdk/dpdk-16.04 eal \u521d\u59cb\u5316 log \u4fe1\u606f\u89e3\u6790","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 eal \u521d\u59cb\u5316 log \u4fe1\u606f\u89e3\u6790","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 eal \u521d\u59cb\u5316 log \u4fe1\u606f\u89e3\u6790.md","source":"@site/blog/dpdk/dpdk-16.04 eal \u521d\u59cb\u5316 log \u4fe1\u606f\u89e3\u6790.md","title":"dpdk/dpdk-16.04 eal \u521d\u59cb\u5316 log \u4fe1\u606f\u89e3\u6790","description":"\u524d\u8a00","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":15.88,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk \u591a\u7ebf\u7a0b\u6d41\u6c34\u7ebf","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 eal lcore \u591a\u7ebf\u7a0b\u673a\u5236\u5206\u6790"},"nextItem":{"title":"dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898"}},"content":"## \u524d\u8a00\\n\u6700\u8fd1\u4e00\u5e74\u5de6\u53f3\u6211\u89e3\u51b3\u4e86\u5f88\u591a dpdk \u7a0b\u5e8f\u76f8\u5173\u7684\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\u4e2d\u6709\u4e00\u4e9b\u95ee\u9898\u80fd\u591f\u4ece\u7a0b\u5e8f\u8fd0\u884c\u7684\u8f93\u51fa\u4fe1\u606f\u4e2d\u627e\u5230\u539f\u56e0\uff0c\u53ef\u7531\u4e8e\u5bf9\u8fd9\u90e8\u5206\u4fe1\u606f\u7684\u91cd\u89c6\u7a0b\u5ea6\u4e0d\u591f\uff0c\u4e1c\u7ed5\u897f\u7ed5\u624d\u80fd\u627e\u51fa\u771f\u6b63\u7684\u95ee\u9898\uff0c\u5176\u6548\u7387\u65e0\u7591\u3010\u975e\u5e38\u4f4e\u4e0b\u3011\u3002\\n\\n\u540c\u65f6\u4e5f\u9047\u5230\u8fc7\u4ea7\u54c1\u7684\u540c\u4e8b\u54a8\u8be2 dpdk \u7a0b\u5e8f\u8f93\u51fa\u4fe1\u606f\u7684\u95ee\u9898\uff0c\u4e00\u4e9b\u95ee\u9898\u81ea\u5df1\u4e5f\u65e0\u6cd5\u89e3\u91ca\uff0c\u573a\u9762\u4e00\u5ea6\u3010\u5341\u5206\u5c34\u5c2c\u3011\u3002\\n\\n\u9274\u4e8e\u4ee5\u4e0a\u4e24\u70b9\u5185\u5bb9\uff0c\u6211\u5728\u672c\u7bc7\u6587\u7ae0\u4e2d\u57fa\u4e8e dpdk-16.04 l2fwd \u63cf\u8ff0\u4e0b dpdk \u7a0b\u5e8f\u8f93\u51fa\u4fe1\u606f\u7684\u4e0d\u540c\u542b\u4e49\uff0c\u4f5c\u4e3a\u8bb0\u5f55\u7684\u540c\u65f6\u4e5f\u5e0c\u671b\u80fd\u4e3a\u5b9a\u4f4d\u95ee\u9898\u63d0\u4f9b\u3010\u53c2\u8003\u3011\u3002\\n\\n## \u8bbe\u5907\u73af\u5883\u4fe1\u606f\\n\u6211\u4f7f\u7528\u672c\u5730\u7684\u865a\u62df\u673a\u6d4b\u8bd5\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u76f8\u5173\u7684\u73af\u5883\u4fe1\u606f\uff1a\\n\\n### 1. cpu \u6838\u4e0e numa \u4fe1\u606f\\n\\n```bash\\nlongyu@virt-debian10:~/$ lscpu\\nArchitecture:        x86_64\\nCPU op-mode(s):      32-bit, 64-bit\\nByte Order:          Little Endian\\nAddress sizes:       40 bits physical, 48 bits virtual\\nCPU(s):              4\\nOn-line CPU(s) list: 0-3\\nThread(s) per core:  4\\nCore(s) per socket:  1\\nSocket(s):           1\\nNUMA node(s):        1\\nVendor ID:           GenuineIntel\\nCPU family:          6\\nModel:               94\\nModel name:          Intel Core Processor (Skylake, IBRS)\\nStepping:            3\\nCPU MHz:             1800.000\\nBogoMIPS:            3600.00\\nVirtualization:      VT-x\\nHypervisor vendor:   KVM\\nVirtualization type: full\\nL1d cache:           32K\\nL1i cache:           32K\\nL2 cache:            4096K\\nL3 cache:            16384K\\nNUMA node0 CPU(s):   0-3\\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology cpuid tsc_known_freq pni pclmulqdq vmx ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault invpcid_single pti ssbd ibrs ibpb tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid mpx rdseed adx smap clflushopt xsaveopt xsavec xgetbv1 xsaves arat umip\\n```\\n\u6211\u4f7f\u7528\u7684\u865a\u673a\u4e3a\u5355\u6838 4 \u7ebf\u7a0b\uff0c\u6709 1 \u4e2a numa \u8282\u70b9\uff0ccpu \u9891\u7387\u4e3a 1.8G\u3002\\n\\n### 2. hugepage \u4fe1\u606f\\n```bash\\nlongyu@virt-debian10:~$ grep -i \'huge\' /proc/meminfo \\nAnonHugePages:      2048 kB\\nShmemHugePages:        0 kB\\nHugePages_Total:     512\\nHugePages_Free:      512\\nHugePages_Rsvd:        0\\nHugePages_Surp:        0\\nHugepagesize:       2048 kB\\nHugetlb:         1048576 kB\\n```\\n\u865a\u673a\u8bbe\u5b9a\u4e86 512 \u4e2a 2M \u5927\u5c0f\u7684 hugepage \u5e76\u6302\u8f7d hugetlbfs\u3002\\n\\n### 3. \u63a5\u53e3\u7ed1\u5b9a\u4fe1\u606f\\n```bash\\nlongyu@virt-debian10:~$ dpdk-devbind.py -s \\n\\nNetwork devices using DPDK-compatible driver\\n============================================\\n0000:04:00.0 \'82574L Gigabit Network Connection\' drv=igb_uio unused=e1000e\\n0000:08:00.0 \'82574L Gigabit Network Connection\' drv=igb_uio unused=e1000e\\n0000:09:00.0 \'82574L Gigabit Network Connection\' drv=igb_uio unused=e1000e\\n\\nNetwork devices using kernel driver\\n===================================\\n0000:01:00.0 \'Virtio network device\' if=enp1s0 drv=virtio-pci unused=virtio_pci,igb_uio *Active*\\n\\nOther network devices\\n=====================\\n<none>\\n```\\n\u7ba1\u7406\u53e3\u4f7f\u7528 virtio \u7f51\u5361\uff0c\u5176\u5b83\u4e09\u4e2a\u4e1a\u52a1\u53e3\u4f7f\u7528 e1000e \u7f51\u5361\u5e76\u7ed1\u5b9a\u5230 igb_uio \u9a71\u52a8\u4e2d\u3002\\n\\n### 4. dpdk \u7248\u672c\u4e0e\u6d4b\u8bd5\u7a0b\u5e8f\\ndpdk \u7248\u672c\uff1adpdk-16.04\\ndpdk \u6d4b\u8bd5\u7a0b\u5e8f\uff1adpdk \u793a\u4f8b\u7a0b\u5e8f\u2014\u2014l2fwd\\n\\n## l2fwd \u6267\u884c\u8f93\u51fa\u4fe1\u606f\\n\u6267\u884c\u547d\u4ee4\u5982\u4e0b\uff1a\\n```bash\\n\\tsudo ./l2fwd -- -p0x1\\n```\\nl2fwd \u7a0b\u5e8f\u6267\u884c\u7684\u8f93\u51fa\u4fe1\u606f\u5982\u4e0b\uff1a\\n```bash\\nEAL: Detected lcore 0 as core 0 on socket 0\\nEAL: Detected lcore 1 as core 0 on socket 0\\nEAL: Detected lcore 2 as core 0 on socket 0\\nEAL: Detected lcore 3 as core 0 on socket 0\\nEAL: Support maximum 128 logical core(s) by configuration.\\nEAL: Detected 4 lcore(s)\\nEAL: No free hugepages reported in hugepages-1048576kB\\nEAL: Probing VFIO support...\\nEAL: Module /sys/module/vfio_pci not found! error 2 (No such file or directory)\\nEAL: VFIO modules not loaded, skipping VFIO support...\\nEAL: Setting up child physically contiguous memory...\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400005000000 (size = 0x200000)\\nEAL: Ask a virtual area of 0x9000000 bytes\\nEAL: Virtual area found at 0x400005200000 (size = 0x9000000)\\nEAL: Ask a virtual area of 0xc00000 bytes\\nEAL: Virtual area found at 0x40000e200000 (size = 0xc00000)\\nEAL: Ask a virtual area of 0x20c00000 bytes\\nEAL: Virtual area found at 0x40000ee00000 (size = 0x20c00000)\\nEAL: Ask a virtual area of 0x14800000 bytes\\nEAL: Virtual area found at 0x40002fa00000 (size = 0x14800000)\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400044200000 (size = 0x200000)\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400044400000 (size = 0x200000)\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400044600000 (size = 0x200000)\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400044800000 (size = 0x200000)\\nEAL: Ask a virtual area of 0x400000 bytes\\nEAL: Virtual area found at 0x400044a00000 (size = 0x400000)\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400044e00000 (size = 0x200000)\\nEAL: Requesting 512 pages of size 2MB from socket 0\\nEAL: TSC frequency is ~1800013 KHz\\nEAL: WARNING: cpu flags constant_tsc=yes nonstop_tsc=no -> using unreliable clock cycles !\\nEAL: Master lcore 0 is ready (tid=794d43c0;cpuset=[0])\\nEAL: lcore 1 is ready (tid=78cd1700;cpuset=[1])\\nEAL: lcore 2 is ready (tid=784d0700;cpuset=[2])\\nEAL: lcore 3 is ready (tid=77ccf700;cpuset=[3])\\nEAL: PCI device 0000:01:00.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1041 rte_virtio_pmd\\nEAL:   Not managed by a supported kernel driver, skipped\\nEAL: PCI device 0000:04:00.0 on NUMA socket -1\\nEAL:   probe driver: 8086:10d3 rte_em_pmd\\nEAL:   PCI memory mapped at 0x400045000000\\nEAL:   PCI memory mapped at 0x400045020000\\nEAL:   PCI memory mapped at 0x400045040000\\nPMD: eth_em_dev_init(): port_id 0 vendorID=0x8086 deviceID=0x10d3\\nEAL: PCI device 0000:08:00.0 on NUMA socket -1\\nEAL:   probe driver: 8086:10d3 rte_em_pmd\\nEAL:   PCI memory mapped at 0x400045044000\\nEAL:   PCI memory mapped at 0x400045064000\\nEAL:   PCI memory mapped at 0x400045084000\\nPMD: eth_em_dev_init(): port_id 1 vendorID=0x8086 deviceID=0x10d3\\nEAL: PCI device 0000:09:00.0 on NUMA socket -1\\nEAL:   probe driver: 8086:10d3 rte_em_pmd\\nEAL:   PCI memory mapped at 0x400045088000\\nEAL:   PCI memory mapped at 0x4000450a8000\\nEAL:   PCI memory mapped at 0x4000450c8000\\nPMD: eth_em_dev_init(): port_id 2 vendorID=0x8086 deviceID=0x10d3\\n--------------(nil)\\n```\\n\u6709\u4e86\u5b8c\u6574\u7684\u8f93\u51fa\u4fe1\u606f\u540e\uff0c\u4e0b\u9762\u6839\u636e\u4e0d\u540c\u7684\u529f\u80fd\u62c6\u5206\u8fdb\u884c\u63cf\u8ff0\u3002\\n\\n### 1. cpu \u6838\u4e0e numa \u7684\u5173\u7cfb\\n```bash\\nEAL: Detected lcore 0 as core 0 on socket 0\\nEAL: Detected lcore 1 as core 0 on socket 0\\nEAL: Detected lcore 2 as core 0 on socket 0\\nEAL: Detected lcore 3 as core 0 on socket 0\\nEAL: Support maximum 128 logical core(s) by configuration.\\nEAL: Detected 4 lcore(s)\\n```\\n\u6d4b\u8bd5\u73af\u5883\u4e3a 4 \u6838\u5355 numa \u7ed3\u6784\uff0cnuma \u5728\u4e0a\u8ff0\u8f93\u51fa\u4e2d\u5bf9\u5e94\u7684\u4fe1\u606f\u4e3a **socket 0**\uff0c0 \u8868\u793a\u7b2c\u4e00\u4e2a numa \u8282\u70b9\u3002\\n\\n\u5728\u8fd9\u4e2a\u73af\u5883\u4e2d\uff0cl2fwd \u68c0\u6d4b\u5230\u56db\u4e2a\u903b\u8f91\u6838\uff0c\u8fd9\u56db\u4e2a\u6838\u90fd\u4f4d\u4e8e\u4e00\u4e2a cpu \u4e0a\u3002\\n\\n### 2. \u6620\u5c04\u7684 hugepage \u79cd\u7c7b\u4e0e\u5927\u5c0f\\n```c\\nEAL: No free hugepages reported in hugepages-1048576kB\\n...........\\nEAL: Requesting 512 pages of size 2MB from socket 0\\n```\\ndpdk \u652f\u6301\u591a\u79cd\u4e0d\u540c\u5927\u5c0f\u7684 hugepage size\uff0c\u5e38\u89c1\u7684\u6709 2M\u3001512M\u30011G \u7b49\u7c7b\u578b\uff0c\u5177\u4f53\u652f\u6301\u54ea\u79cd hugepage size \u4e0e\u5185\u6838\u914d\u7f6e\u6709\u5173\u3002\\n\\n\u4e0a\u8ff0\u8f93\u51fa\u7684\u7b2c\u4e00\u884c\u8868\u660e\uff0c\u5f53\u524d\u7cfb\u7edf\u4e2d\u672a\u521b\u5efa 1G \u7684 hugepage \u5927\u9875\uff0c\u7b2c\u4e8c\u884c\u8f93\u51fa\u8868\u660e hugepage \u4ece numa 0 \u4e2d\u6620\u5c04\u4e86 512 \u4e2a 2M \u7684\u5927\u9875\uff0c\u5171\u8ba1 1G \u7a7a\u95f4\u3002\\n\\n\u6211\u5728 [Failed to mmap 2 MB hugepages \u4e0e max_map_count limit](https://blog.csdn.net/Longyu_wlz/article/details/113561592?spm=1001.2014.3001.5501) \u4e2d\u63cf\u8ff0\u4e86\u5927\u9875\u6570\u91cf\u8fc7\u591a\u5bfc\u81f4\u6620\u5c04\u5931\u8d25\u7684\u4e00\u4e2a\u95ee\u9898\u3002dpdk-16.04 \u4f1a\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u7684\u65f6\u5019\u6620\u5c04\u6240\u6709\u7684\u5927\u9875\uff0c\u5373\u4fbf\u5b58\u5728 -m \u53c2\u6570\u9650\u5b9a\uff0c\u4ecd\u65e7\u4f1a\u5148\u6620\u5c04\u6240\u6709\u7684\u5927\u9875\u3002\\n\\n### 3. vfio \u76f8\u5173\u529f\u80fd\u521d\u59cb\u5316\\n```bash\\nEAL: Probing VFIO support...\\nEAL: Module /sys/module/vfio_pci not found! error 2 (No such file or directory)\\nEAL: VFIO modules not loaded, skipping VFIO support...\\n```\\ndpdk-16.04 \u652f\u6301 vfio \u65b9\u5f0f\u6620\u5c04\u7f51\u5361\u5230\u7528\u6237\u6001\u4e2d\uff0cdpdk \u901a\u8fc7 vfio_pci \u5185\u6838\u6a21\u5757\u662f\u5426\u52a0\u8f7d\u6765\u5224\u65ad\u662f\u5426\u4f7f\u80fd VFIO \u6a21\u5757\u3002\\n\\n\u5f53 vfio_pci \u6a21\u5757\u52a0\u8f7d\u540e\uff0c\u91cd\u65b0\u6267\u884c dpdk \u7a0b\u5e8f\u8f93\u51fa\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```c\\nEAL: Probing VFIO support...\\nEAL:   IOMMU type 1 (Type 1) is supported\\nEAL:   IOMMU type 8 (No-IOMMU) is not supported\\nEAL: VFIO support initialized\\n```\\n\u8fd9\u4e9b\u4fe1\u606f\u8868\u660e dpdk \u5185\u90e8 vfio \u6a21\u5757\u6210\u529f\u521d\u59cb\u5316\u3002\\n\\n### 3. \u4f7f\u7528 hugepage \u521d\u59cb\u5316\u7684 heap \u5185\u5b58\u4fe1\u606f\\n```bash\\nEAL: Setting up child physically contiguous memory...\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400005000000 (size = 0x200000)\\nEAL: Ask a virtual area of 0x9000000 bytes\\nEAL: Virtual area found at 0x400005200000 (size = 0x9000000)\\nEAL: Ask a virtual area of 0xc00000 bytes\\nEAL: Virtual area found at 0x40000e200000 (size = 0xc00000)\\nEAL: Ask a virtual area of 0x20c00000 bytes\\nEAL: Virtual area found at 0x40000ee00000 (size = 0x20c00000)\\nEAL: Ask a virtual area of 0x14800000 bytes\\nEAL: Virtual area found at 0x40002fa00000 (size = 0x14800000)\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400044200000 (size = 0x200000)\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400044400000 (size = 0x200000)\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400044600000 (size = 0x200000)\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400044800000 (size = 0x200000)\\nEAL: Ask a virtual area of 0x400000 bytes\\nEAL: Virtual area found at 0x400044a00000 (size = 0x400000)\\nEAL: Ask a virtual area of 0x200000 bytes\\nEAL: Virtual area found at 0x400044e00000 (size = 0x200000)\\nEAL: Requesting 512 pages of size 2MB from socket 0\\n```\\ndpdk \u5185\u90e8\u7684 heap \u4f7f\u7528 hugepage \u5185\u5b58\u6765\u5206\u914d\u7a7a\u95f4\uff0c\u4e0a\u8ff0\u8f93\u51fa\u63cf\u8ff0\u4e86\u521d\u59cb\u5316 heap \u7684\u8fc7\u7a0b\u3002Ask a virtual area of xxx bytes \u8868\u660e\u4e86\u7533\u8bf7\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u7684\u5927\u5c0f\uff0c\u7533\u8bf7\u7684\u5185\u5b58\u603b\u5927\u5c0f\u4e3a 1G\u3002\\n\\n\u4e0a\u8ff0\u8f93\u51fa\u4e2d Ask a virtual area of xxx \u8f93\u51fa\u591a\u6b21\uff0c\u8fd9\u8868\u660e\u5185\u6838\u5206\u914d\u7684 hugepage \u5185\u5b58\u76f8\u5bf9\u5206\u6563\u3002\\n\\n\u4e0a\u8ff0\u8f93\u51fa\u4e2d\u521d\u59cb\u5316\u7684\u6700\u5927\u5185\u5b58\u533a\u57df\u4e3a 549453824 \u5b57\u8282\uff08524M\uff09\uff0c\u8fd9\u51b3\u5b9a\u4e86\u7a0b\u5e8f\u80fd\u591f\u7533\u8bf7\u7684\u5355\u4e2a\u5185\u5b58\u7684\u4e0a\u9650\uff0c\u5f53 dpdk \u7a0b\u5e8f\u62a5\u9519\u4fe1\u606f\u8868\u660e\u4e0e\u7533\u8bf7\u5185\u5b58\u7a7a\u95f4\u6709\u5173\u65f6\uff0c\u4e0d\u59a8\u6bd4\u5bf9\u4e0b\u7533\u8bf7\u7a7a\u95f4\u7684\u5927\u5c0f\u4e0e\u8fd9\u91cc\u63d0\u5230\u7684\u5355\u4e2a\u5185\u5b58\u7684\u4e0a\u9650\u3002\\n\\n\u4e00\u822c\u6765\u8bf4\u5728\u7cfb\u7edf\u8fd0\u884c\u540e\u901a\u8fc7\u5199\u5165 /sys \u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u6765\u5206\u914d\u5927\u9875\u5219\u5bb9\u6613\u51fa\u73b0\u5927\u9875\u4e0d\u8fde\u7eed\u5206\u5e03\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5373\u4fbf\u589e\u52a0\u5927\u9875\u7684\u6570\u76ee\u4e5f\u53ef\u80fd\u56e0\u4e3a\u5185\u5b58\u7a7a\u95f4\u7684\u5206\u6563\u800c\u9047\u5230\u76f8\u540c\u7684\u95ee\u9898\uff0c\u4e00\u822c\u5c06\u9884\u7559\u7684\u5927\u9875\u6570\u76ee\u5199\u5165\u5230\u5185\u6838\u5f15\u5bfc\u53c2\u6570\u4e2d\uff0c\u5728\u5185\u6838\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u5c31\u9884\u7559\u597d\u5927\u9875\u5185\u5b58\uff0c\u907f\u514d\u56e0\u540e\u671f\u5185\u5b58\u7684\u4f7f\u7528\u800c\u4ea7\u751f\u4e0d\u540c\u5927\u5c0f\u7684\u79bb\u6563\u7a7a\u95f4\u3002\\n\\n### 4. \u8bc6\u522b\u5230\u7684\u9891\u7387\u4fe1\u606f\\n```bash\\nEAL: TSC frequency is ~1800013 KHz\\nEAL: WARNING: cpu flags constant_tsc=yes nonstop_tsc=no -> using unreliable clock cycles !\\n```\\n\u7b2c\u4e00\u884c\u8f93\u51fa\u8868\u660e dpdk \u63a2\u6d4b\u5230 cpu \u9891\u7387\u5728 1.8G \u5de6\u53f3\uff0c\u4e0e\u4e0a\u6587\u63cf\u8ff0\u8fc7\u7684\u865a\u62df\u673a\u914d\u7f6e\u63a5\u8fd1\u3002\u8fd9\u91cc\u7684\u9891\u7387\u7528\u4e8e dpdk \u5185\u90e8\u5ef6\u65f6\u8ba1\u7b97\uff0cdpdk \u5185\u90e8\u9700\u8981\u7ef4\u62a4\u5185\u90e8\u5b9a\u65f6\u5668\u65f6\u95f4\uff0c\u540c\u65f6\u7f51\u5361\u786c\u4ef6\u521d\u59cb\u5316\u4e2d\u4e5f\u9700\u8981\u6309\u7167\u65f6\u5e8f\u8981\u6c42\u800c\u5ef6\u65f6\uff0c\u4e14\u5bf9\u7cbe\u5ea6\u6709\u4e00\u5b9a\u7684\u8981\u6c42\u3002\\n\\n\u7b2c\u4e8c\u884c\u7684\u4fe1\u606f\u8868\u660e\u7cfb\u7edf\u4f7f\u7528\u4e86\u4e0d\u53ef\u9760\u7684\u65f6\u949f\u5468\u671f\uff0c\u8fd9\u4e2a\u8f93\u51fa\u901a\u8fc7\u83b7\u53d6 /proc/cpuinfo \u4e2d\u7684 cpu flags \u53c2\u6570\u786e\u5b9a\u3002\u5176\u4e2d\u63d0\u5230\u7684\u4e24\u4e2a\u4e0e\u65f6\u949f\u76f8\u5173\u7684\u540d\u8bcd\u89e3\u91ca\u5982\u4e0b\uff1a\\n\\n>constant_tsc: TSC ticks at a constant rate\\n>nonstop_tsc: TSC does not stop in C states\\n\\nconstant_tsc \u8868\u660e\u65f6\u949f\u5468\u671f\u6309\u7167\u56fa\u5b9a\u7684\u9891\u7387\u89e6\u53d1\uff0cnonstop_tsc \u8868\u660e\u65f6\u949f\u4e0d\u4f1a\u5728\u3000ACPI \u5207\u6362\u4e3a C \u72b6\u6001\u7684\u65f6\u5019\u505c\u6b62\u3002\\n\\n\u5728\u6211\u6d4b\u8bd5\u7528\u7684\u865a\u62df\u673a\u4e2d\uff0c\u652f\u6301 constant_tsc \u800c\u4e0d\u652f\u6301 nonstop_tsc\uff0c\u6545\u800c\u8f93\u51fa\u4f7f\u7528\u4e0d\u53ef\u9760\u65f6\u949f\u6e90\u7684\u4fe1\u606f\u3002\\n### 5. master \u7ebf\u7a0b\u6240\u5728 cpu \u6838\\n```bash\\nEAL: Master lcore 0 is ready (tid=794d43c0;cpuset=[0])\\n```\\n\u6b64\u884c\u8f93\u51fa\u8868\u660e dpdk \u4f7f\u7528 lcorea 0 \u4f5c\u4e3a master \u7ebf\u7a0b\uff0ccpuset \u8868\u660e master \u7ebf\u7a0b\u88ab\u7ed1\u5b9a\u5230 0 \u6838\u4e0a\u3002\\n\\n### 6. \u975e master \u7ebf\u7a0b\u7684 cpuset \u4fe1\u606f\\n```bash\\nEAL: lcore 1 is ready (tid=78cd1700;cpuset=[1])\\nEAL: lcore 2 is ready (tid=784d0700;cpuset=[2])\\nEAL: lcore 3 is ready (tid=77ccf700;cpuset=[3])\\n```\\n\u4e0a\u8ff0\u8f93\u51fa\u8868\u660e\u521b\u5efa\u4e86\u4e09\u4e2a\u975e master \u7ebf\u7a0b\uff0c\u8fd9\u4e9b\u7ebf\u7a0b\u5206\u522b\u88ab\u7ed1\u5b9a\u5230 1\u30012\u30013 \u6838\u4e0a\u3002\\n### 7. \u8bc6\u522b\u5230\u4e86\u54ea\u4e9b\u7f51\u5361\u63a5\u53e3\u7c7b\u578b\\ndpdk \u5728\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u4f1a\u626b\u63cf pci \u8bbe\u5907\u5e76 probe\uff0c\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u4e24\u4e2a\u7c7b\u522b\u7684\u4fe1\u606f\uff1a\\n\\n### 1. \u672a\u7ed1\u5b9a\u5230\u7528\u6237\u6001\u9a71\u52a8\u7684 pci \u8bbe\u5907\\n```bash\\nEAL: PCI device 0000:01:00.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1041 rte_virtio_pmd\\nEAL:   Not managed by a supported kernel driver, skipped\\n```\\ndpdk \u4f1a\u626b\u63cf\u6240\u6709\u7684 pci \u8bbe\u5907\uff0c\u5efa\u7acb pci \u8bbe\u5907\u94fe\u8868\uff0c\u5e76\u5c1d\u8bd5 probe \u8bbe\u5907\u3002\u7b2c\u4e00\u884c\u8f93\u51fa\u4e2d 0000:01:00.0 \u8868\u793a\u4e00\u4e2a pci \u8bbe\u5907\uff0cNUMA socket \u503c\u4e3a -1 \u8868\u660e\u6ca1\u6709\u83b7\u53d6\u5230\u8bbe\u5907\u6240\u5728\u7684 numa \u8282\u70b9\u4fe1\u606f\u3002\\n\\n\u7b2c\u4e8c\u884c\u8f93\u51fa\u8868\u660e dpdk \u5c1d\u8bd5 probe \u8bbe\u5907\uff0c1af4:1041 \u662f\u8bbe\u5907\u7684 vendor id \u4e0e device id\uff0crte_virtio_pmd \u8868\u793a dpdk \u5339\u914d\u5230\u7684\u8bbe\u5907\u9a71\u52a8\u540d\u79f0\uff0c\u8fd9\u662f\u4e00\u4e2a virtio \u7f51\u5361\u63a5\u53e3\u3002\\n\\n\u7b2c\u4e09\u884c\u8f93\u51fa\u4fe1\u606f\u8868\u660e\u6b64\u63a5\u53e3\u672a\u7ed1\u5b9a\u5230 dpdk \u652f\u6301\u7684\u7528\u6237\u6001\u9a71\u52a8\u4e2d\uff0cprobe \u8fc7\u7a0b\u88ab\u8df3\u8fc7\uff0cdpdk \u5c06\u4e0d\u4f1a\u4f7f\u7528\u8be5\u63a5\u53e3\u3002\\n### 2. \u7ed1\u5b9a\u5230\u7528\u6237\u6001\u9a71\u52a8\u7684 pci \u8bbe\u5907\\n```bash\\nEAL: PCI device 0000:04:00.0 on NUMA socket -1\\nEAL:   probe driver: 8086:10d3 rte_em_pmd\\nEAL:   PCI memory mapped at 0x400045000000\\nEAL:   PCI memory mapped at 0x400045020000\\nEAL:   PCI memory mapped at 0x400045040000\\nPMD: eth_em_dev_init(): port_id 0 vendorID=0x8086 deviceID=0x10d3\\n```\\n\u524d\u4e24\u884c\u7684\u4fe1\u606f\u4e0a\u6587\u5df2\u7ecf\u89e3\u91ca\u8fc7\uff0c\u8fd9\u4e2a\u63a5\u53e3\u662f e1000e \u7f51\u5361\uff0c\u652f\u6301\u7684\u9a71\u52a8\u4e3a rte_em_pmd \u9a71\u52a8\uff0c\u7b2c 3~5 \u884c\u8f93\u51fa pci \u5185\u5b58\u6620\u5c04\u5730\u5740\uff0c\u8fd9\u4e9b\u5730\u5740\u7528\u4e8e\u540e\u7eed\u7f51\u5361\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u3002\\n\\n\u6700\u540e\u4e00\u884c\u4fe1\u606f\u4e2d PMD: \u8868\u660e\u4fe1\u606f\u8f93\u51fa\u6a21\u5757\u4f4d\u4e8e PMD \u9a71\u52a8\u4e2d\uff0ceth_em_dev_init \u662f\u6b64\u9a71\u52a8\u7684\u521d\u59cb\u5316\u51fd\u6570\u3002port_id \u662f dpdk \u5185\u90e8\u5bf9 probe \u63a5\u53e3\u7684\u6807\u8bc6\uff0c\u6b64\u63a5\u53e3\u7684 id \u4e3a 0\uff0c\u6700\u540e\u8f93\u51fa\u7684 vendorID \u4e0e deviceID \u4e0e\u7b2c\u4e8c\u884c\u7684\u8f93\u51fa\u76f8\u540c\u3002\\n\\ndpdk \u7a0b\u5e8f\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u4f1a\u5bf9\u626b\u63cf\u5230\u7684 pci \u53f7\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\uff0cport_id \u4f9d\u6b21\u9012\u589e\u3002\\n\\n\u8fd9\u4e9b\u8f93\u51fa\u4fe1\u606f\u8868\u660e\u4e86 dpdk \u7a0b\u5e8f\u8bc6\u522b\u5e76 probe \u4e86\u54ea\u4e9b\u63a5\u53e3\uff0c\u5f53\u4f60\u6dfb\u52a0\u65b0\u7f51\u5361\u65f6\uff0c\u521d\u59cb\u5316\u4fe1\u606f\u770b\u4e0d\u5230\u5bf9\u5e94\u7684\u63a5\u53e3\u8f93\u51fa\u4fe1\u606f\uff0c\u53ef\u4ee5\u4ece\u5982\u4e0b\u4e24\u4e2a\u65b9\u9762\u8fdb\u884c\u6392\u67e5\uff1a\\n\\n1. dpdk \u662f\u5426\u652f\u6301\u65b0\u7f51\u5361\uff08\u67e5\u770b lib/librte_eal/common/include/rte_pci_dev_ids.h\uff09\\n2. dpdk \u7a0b\u5e8f\u662f\u5426\u94fe\u63a5\u65b0\u7f51\u5361\u7684 pmd \u9a71\u52a8\u5e93\\n\\ndpdk \u4f7f\u7528 gcc \u7684 constructor \u6765\u6ce8\u518c\u4e0d\u540c\u7684 pmd \u9a71\u52a8\uff0c\u4f7f\u7528\u9759\u6001\u5e93\u65f6\u6ca1\u6709\u94fe\u63a5\u76f8\u5173\u7684\u5e93\u5219\u4e0d\u4f1a\u652f\u6301\u76f8\u5e94\u7684\u7f51\u5361\u3002\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\u8bf7\u8bbf\u95ee [gcc constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u672a\u88ab\u94fe\u63a5\u95ee\u9898](https://blog.csdn.net/Longyu_wlz/article/details/113725959?spm=1001.2014.3001.5501)\u3002\\n\\n## \u603b\u7ed3\\n\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5e38\u5e38\u4f1a\u6709\u4e00\u4e9b**\u8f93\u51fa\u4fe1\u606f**\uff0c\u8fd9\u4e9b\u8f93\u51fa\u4fe1\u606f\u5374\u5e38\u5e38\u88ab\u5ffd\u7565\u3002\u8fd9\u4e9b\u4fe1\u606f\u5e76\u4e0d\u662f\u591a\u4f59\u7684\u5185\u5bb9\uff0c\u5176\u4e2d\u53ef\u80fd\u9690\u85cf\u7740\u95ee\u9898\u7684\u86db\u4e1d\u9a6c\u8ff9\u3002\\n\\n\u7ecf\u5e38\u51fa\u73b0\u7684\u573a\u666f\u662f\uff0c\u8981\u5b9a\u4f4d\u67d0\u95ee\u9898\u65f6\uff0c\u627e\u4e0d\u5230\u7a0b\u5e8f\u7684\u8f93\u51fa\u4fe1\u606f\uff0c\u6216\u8005\u627e\u5230\u4e86\u8f93\u51fa\u4fe1\u606f\uff0c\u5374\u4e0d\u61c2\u8f93\u51fa\u4fe1\u606f\u7684\u542b\u4e49\uff0c\u9051\u8bba\u4ece\u4e2d\u627e\u5230\u7591\u70b9\u3002\\n\\n\u56de\u8fc7\u5934\u60f3\u60f3\uff0c\u5176\u5b9e\u8f93\u51fa\u4fe1\u606f\u4e00\u76f4\u90fd\u5728\u90a3\u91cc\uff0c\u6b63\u5982\u95ee\u9898\u4e00\u76f4\u90fd\u5728\u90a3\u91cc\u4e00\u6837\uff0c\u4f60\u80fd\u5426\u53d1\u73b0\u5b83\u5e76\u5e26\u6709\u597d\u5947\u5fc3\u53bb\u7814\u7a76\u5b83\u5374\u56e0\u4eba\u800c\u5f02\u4e86\uff01"},{"id":"/dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898.md","source":"@site/blog/dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898.md","title":"dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":6.695,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-16.04 eal \u521d\u59cb\u5316 log \u4fe1\u606f\u89e3\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 eal \u521d\u59cb\u5316 log \u4fe1\u606f\u89e3\u6790"},"nextItem":{"title":"dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n\\ni350 igb \u7535\u53e3\uff0c\u8c03\u7528 dpdk rte_eth_stats_get \u83b7\u53d6\u5230\u7684\u63a5\u53e3\u53d1\u5305\u5b57\u8282\u7edf\u8ba1\uff0c\u6bcf\u4e2a\u5305\u5c11\u4e86 crc len \u957f\u5ea6\uff0c\u5bfc\u81f4\u6839\u636e\u6b64\u7edf\u8ba1\u8ba1\u7b97\u7684 bps \u4e0d\u51c6\u786e\u3002\\n\\n## \u95ee\u9898\u5206\u6790\\n\\n### \u5e95\u5c42\u9a71\u52a8\u83b7\u53d6\u7f51\u5361\u6536\u53d1\u5305\u5b57\u8282\u7edf\u8ba1\u6570\u636e\\n\\nigb \u9a71\u52a8\u5e95\u5c42\u7edf\u8ba1\u51fd\u6570\u4e3a eth_igb_stats_get \u51fd\u6570\uff0c\u6b64\u51fd\u6570\u901a\u8fc7\u8bfb\u53d6\u7f51\u5361\u7edf\u8ba1\u76f8\u5173\u5bc4\u5b58\u5668\u5b9e\u73b0\u529f\u80fd\u3002\u5411\u4e0a\u5c42\u8fd4\u56de\u7684\u6536\u53d1\u5305\u5b57\u8282\u7edf\u8ba1\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n\\trte_stats->ibytes   = stats->gorc;\\n\\trte_stats->obytes   = stats->gotc;\\n```\\n\\n\u5e95\u5c42\u8bfb\u5bc4\u5b58\u5668\u5904\u7684\u4ee3\u7801\u903b\u8f91\u5982\u4e0b\uff1a\\n\\n```c\\n/* Workaround CRC bytes included in size, take away 4 bytes/packet */\\n\\tstats->gorc += E1000_READ_REG(hw, E1000_GORCL);\\n\\tstats->gorc += ((uint64_t)E1000_READ_REG(hw, E1000_GORCH) << 32);\\n\\tstats->gorc -= (stats->gprc - old_gprc) * ETHER_CRC_LEN;\\n\\tstats->gotc += E1000_READ_REG(hw, E1000_GOTCL);\\n\\tstats->gotc += ((uint64_t)E1000_READ_REG(hw, E1000_GOTCH) << 32);\\n\\tstats->gotc -= (stats->gptc - old_gptc) * ETHER_CRC_LEN;\\n```\\n\\n\u5728\u4e0a\u8ff0\u903b\u8f91\u4e2d\uff0c\u6bcf\u4e2a\u6536\u53d1\u7684\u62a5\u6587\u90fd\u3010\u51cf\u6389 crc len \u957f\u5ea6\u3011\u5b57\u8282\uff0c\u4ee3\u7801\u7684\u6ce8\u91ca\u8868\u660e\u8fd9\u90e8\u5206\u903b\u8f91\u6b63\u662f\u4e3a\u4e86\u89c4\u907f CRC \u5b57\u8282\u88ab\u8ba1\u7b97\u5230\u6bcf\u4e2a\u62a5\u6587\u957f\u5ea6\u4e2d\u7684\u95ee\u9898\u3002\\n\\ndpdk \u5185\u90e8\u6709\u4e00\u4e2a\u9488\u5bf9\u7f51\u5361\u662f\u5426 strip crc \u7684\u914d\u7f6e\u529f\u80fd\u2014\u2014**hw_strip_crc**\uff0c\u9ed8\u8ba4\u4e3a 0\uff0c\u8868\u660e\u7f51\u5361\u4e0d strip crc\uff0c\u8bbe\u7f6e\u4e3a 1 \u8868\u660e\u7f51\u5361\u4f7f\u80fd strip crc \u529f\u80fd\u3002\\n\\n### hw_strip_crc \u5728 igb \u9a71\u52a8\u4e2d\u7684\u5f71\u54cd\\n**1. \u5bf9\u786c\u4ef6\u7684\u5f71\u54cd**\\n    \\n   \u5728 up \u63a5\u53e3\u7684\u65f6\u5019\uff0c\u4f7f\u7528 igb \u7f51\u5361\u65f6\uff0cdpdk \u4f1a\u8c03\u7528 **eth_igb_rx_init** \u51fd\u6570\uff0c\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u6709\u5bf9 **hw_strip_crc** \u8fdb\u884c\u5224\u65ad\uff0c\u6839\u636e\u5224\u65ad\u7684\u7ed3\u679c\u8bbe\u5b9a\u786c\u4ef6\u72b6\u6001\u3002\\n    \\n   \u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n    /* Setup the Receive Control Register. */\\n            if (dev->data->dev_conf.rxmode.hw_strip_crc) {\\n                    rctl |= E1000_RCTL_SECRC; /* Strip Ethernet CRC. */\\n    \\n                    /* set STRCRC bit in all queues */\\n                    if (hw->mac.type == e1000_i350 ||\\n                        hw->mac.type == e1000_i210 ||\\n                        hw->mac.type == e1000_i211 ||\\n                        hw->mac.type == e1000_i354) {\\n                            for (i = 0; i < dev->data->nb_rx_queues; i++) {\\n                                    rxq = dev->data->rx_queues[i];\\n                                    uint32_t dvmolr = E1000_READ_REG(hw,\\n                                            E1000_DVMOLR(rxq->reg_idx));\\n                                    dvmolr |= E1000_DVMOLR_STRCRC;\\n                                    E1000_WRITE_REG(hw, E1000_DVMOLR(rxq->reg_idx), dvmolr);\\n                            }\\n                    }\\n            } else {\\n                    rctl &= ~E1000_RCTL_SECRC; /* Do not Strip Ethernet CRC. */\\n    \\n                    /* clear STRCRC bit in all queues */\\n                    if (hw->mac.type == e1000_i350 ||\\n                        hw->mac.type == e1000_i210 ||\\n                        hw->mac.type == e1000_i211 ||\\n                        hw->mac.type == e1000_i354) {\\n                            for (i = 0; i < dev->data->nb_rx_queues; i++) {\\n                                    rxq = dev->data->rx_queues[i];\\n                                    uint32_t dvmolr = E1000_READ_REG(hw,\\n                                            E1000_DVMOLR(rxq->reg_idx));\\n                                    dvmolr &= ~E1000_DVMOLR_STRCRC;\\n                                    E1000_WRITE_REG(hw, E1000_DVMOLR(rxq->reg_idx), dvmolr);\\n                            }\\n                    }\\n            }\\n```\\n\\n\u4e0a\u8ff0\u903b\u8f91\u8868\u660e\uff0cigb \u7f51\u5361 dpdk pmd \u9a71\u52a8\u4e2d\uff0chw_strip_crc \u7684\u914d\u7f6e\u5c06\u4f1a\u88ab\u7528\u4e8e\u8bbe\u5b9a\u7f51\u5361\u3010\u63a5\u6536\u63a7\u5236\u5bc4\u5b58\u5668\u3011\u4e0e\u6bcf\u4e2a\u3010\u6536\u5305\u961f\u5217\u7684\u914d\u7f6e\u5bc4\u5b58\u5668\u3011\u3002\\n    \\n\u6211\u4eec\u7684\u7a0b\u5e8f\u9ed8\u8ba4\u662f\u5173\u95ed **hw_strip_crc** \u7684\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7f51\u5361\u4e0d strip crc\uff0c\u540c\u65f6\u83b7\u53d6\u6536\u5305\u5b57\u8282\u7edf\u8ba1\u7684\u65f6\u5019\u4e3a\u6bcf\u4e2a\u6536\u5230\u7684\u5305\u51cf\u6389 crc \u957f\u5ea6\uff0c\u8fd9\u4e2a\u884c\u4e3a\u4e0e\u6ce8\u91ca\u5185\u5bb9\u4e00\u81f4\u3002\u4f46\u662f\u5f53 hw_strip_crc \u4f7f\u80fd\u540e\uff0c\u6536\u5305\u5b57\u8282\u7edf\u8ba1\u4e2d\u4ecd\u65e7\u4e3a\u6bcf\u4e2a\u5305\u51cf\u6389 crc \u957f\u5ea6\uff0c\u8fd9\u91cc\u5b58\u5728\u95ee\u9898\u3002\\n    \\n   **\u521d\u6b65\u7684\u89e3\u91ca\u662f\u7f51\u5361 strip crc \u5e76\u4e0d\u4f1a\u5728\u786c\u4ef6\u4fa7\u51cf\u6389\u6bcf\u4e2a\u5305\u7684 crc \u957f\u5ea6\uff0c\u5305\u7684\u5b57\u8282\u7edf\u8ba1\u4e0e hw_strip_crc \u529f\u80fd\u662f\u5426\u4f7f\u80fd\u5e76\u65e0\u5173\u7cfb\u3002**\\n    \\n   \u4f7f\u7528 testpmd \u6d4b\u8bd5\uff1a\\n    \\n   1. \u5173\u95ed crc strip\\n\\n ```c\\n    testpmd> start\\n      io packet forwarding - CRC stripping disabled - packets/burst=32\\n      nb forwarding cores=1 - nb forwarding ports=1\\n      RX queues=1 - RX desc=128 - RX free threshold=32\\n      RX threshold registers: pthresh=8 hthresh=8 wthresh=4\\n      TX queues=1 - TX desc=512 - TX free threshold=0\\n      TX threshold registers: pthresh=8 hthresh=1 wthresh=16\\n      TX RS bit threshold=0 - TXQ flags=0x0\\n    testpmd> show port stats all\\n    \\n      ######################## NIC statistics for port 0  ########################\\n      RX-packets: 0          RX-missed: 0          RX-bytes:  0\\n      RX-errors: 0\\n      RX-nombuf:  0\\n      TX-packets: 0          TX-errors: 0          TX-bytes:  0\\n      ############################################################################\\n    testpmd> show port stats all\\n    \\n      ######################## NIC statistics for port 0  ########################\\n      RX-packets: 3          RX-missed: 0          RX-bytes:  180\\n      RX-errors: 0\\n      RX-nombuf:  0\\n      TX-packets: 3          TX-errors: 0          TX-bytes:  180\\n      ############################################################################\\n ```\\n\\n   \u5bf9\u7aef\u53d1\u51fa 3 \u4e2a 64-byte \u7684\u5305\uff0ccrc_len \u957f\u5ea6\u88ab\u51cf\u6389\u3002\\n    \\n   2. \u5f00\u542f crc strip\\n\\n   ```c\\n    testpmd> start\\n      io packet forwarding - CRC stripping enabled - packets/burst=32\\n      nb forwarding cores=1 - nb forwarding ports=1\\n      RX queues=1 - RX desc=128 - RX free threshold=32\\n      RX threshold registers: pthresh=8 hthresh=8 wthresh=4\\n      TX queues=1 - TX desc=512 - TX free threshold=0\\n      TX threshold registers: pthresh=8 hthresh=1 wthresh=16\\n      TX RS bit threshold=0 - TXQ flags=0x0\\n    \\n    testpmd> show port stats 0\\n    \\n      ######################## NIC statistics for port 0  ########################\\n      RX-packets: 6          RX-missed: 0          RX-bytes:  360\\n      RX-errors: 0\\n      RX-nombuf:  0\\n      TX-packets: 6          TX-errors: 0          TX-bytes:  360\\n      ############################################################################\\n    testpmd> show port stats 0\\n    \\n      ######################## NIC statistics for port 0  ########################\\n      RX-packets: 9          RX-missed: 0          RX-bytes:  540\\n      RX-errors: 0\\n      RX-nombuf:  0\\n      TX-packets: 9          TX-errors: 0          TX-bytes:  540\\n      ############################################################################\\n   ```\\n\\n   \u5bf9\u7aef\u53d1\u51fa 3 \u4e2a 64-byte \u7684\u5305\uff0ccrc_len \u957f\u5ea6\u88ab\u51cf\u6389\uff0c\u4e0e\u5173\u95ed crc strip \u7684\u6548\u679c\u4e00\u81f4\u8868\u660e\u731c\u6d4b\u5408\u7406\u3002\\n    \\n**2. \u5bf9\u8f6f\u4ef6\u7684\u5f71\u54cd**\\n    \\n   \u5728 eth_igb_rx_init  \u51fd\u6570\u4e2d\u6709\u5982\u4e0b\u4ee3\u7801\uff1a\\n    \\n   ```c\\n    rxq->crc_len = (uint8_t)(dev->data->dev_conf.rxmode.hw_strip_crc ?\\n                                                            0 : ETHER_CRC_LEN);\\n   ```\\n\\n   \u6b64\u4ee3\u7801\u4f7f\u7528 hw_strip_crc \u914d\u7f6e\u5224\u65ad\uff0c\u6536\u5305\u961f\u5217\u4e2d\u662f\u5426\u51cf\u6389 crc_len\u3002\\n   hw_strip_crc \u5f00\u542f\u65f6\uff0crxq->crc_len \u957f\u5ea6\u8d4b\u503c\u4e3a 0 \u8868\u660e\u4e0d\u9700\u8981\u51cf\u6389\u6b64\u90e8\u5206\u957f\u5ea6\uff0c\u6b64\u90e8\u5206\u5de5\u4f5c\u7531\u7f51\u5361\u5b8c\u6210\u3002\\n   hw_strip_crc \u5173\u95ed\u65f6\uff0crxq->crc_len \u8d4b\u503c\u4e3a ETHER_CRC_LEN \u6765\u5728\u6536\u5305\u903b\u8f91\u4e2d\u51cf\u6389 crc_len \u957f\u5ea6\uff0c\u8fd9\u91cc\u6700\u7ec8\u8ba1\u7b97\u5f97\u51fa\u7684\u62a5\u6587\u957f\u5ea6\u4f1a\u586b\u5145\u5230\u62a5\u6587\u6240\u5728 mbuf \u7684 pkt_len \u5b57\u6bb5\u4e2d\u3002\\n    \\n\\n### \u53d1\u5305\u65f6 crc len \u7684\u5904\u7406\\n\\n\u53d1\u5305\u7684\u65f6\u5019\u9700\u8981\u586b\u5145\u62a5\u6587\u7684 CRC\uff0c\u6ca1\u6709\u7279\u522b\u7684\u5904\u7406\u3002igb dpdk pmd \u9a71\u52a8\u4e2d\u5728\u53d1\u5305\u5b57\u8282\u7edf\u8ba1\u4e2d\u51cf\u6389\u6bcf\u4e2a\u53d1\u51fa\u5305\u7684 CRC \u957f\u5ea6\u3002\\n\\n## \u89e3\u51b3\u65b9\u6848\\n\\n\u4fee\u6539 igb \u7f51\u5361\u83b7\u53d6\u7f51\u5361\u7edf\u8ba1\u4ee3\u7801\uff0c\u53d6\u6d88\u51cf\u6389\u6bcf\u4e2a\u53d1\u51fa\u5305\u7684 crc len \u7684\u903b\u8f91\u3002\u4fee\u6539 patch \u5982\u4e0b\uff1a\\n\\n```c\\nndex: drivers/net/e1000/igb_ethdev.c\\n===================================================================\\n--- drivers/net/e1000/igb_ethdev.c     \\n+++ drivers/net/e1000/igb_ethdev.c\\n@@ -1729,12 +1729,13 @@\\n        /* Both registers clear on the read of the high dword */\\n\\n        /* Workaround CRC bytes included in size, take away 4 bytes/packet */\\n+       /* included CRC length to fix igb netcard bps leak */\\n        stats->gorc += E1000_READ_REG(hw, E1000_GORCL);\\n        stats->gorc += ((uint64_t)E1000_READ_REG(hw, E1000_GORCH) << 32);\\n-        stats->gorc -= (stats->gprc - old_gprc) * ETHER_CRC_LEN;\\n+       /* stats->gorc -= (stats->gprc - old_gprc) * ETHER_CRC_LEN; */\\n        stats->gotc += E1000_READ_REG(hw, E1000_GOTCL);\\n        stats->gotc += ((uint64_t)E1000_READ_REG(hw, E1000_GOTCH) << 32);\\n-       stats->gotc -= (stats->gptc - old_gptc) * ETHER_CRC_LEN;\\n+       /* stats->gotc -= (stats->gptc - old_gptc) * ETHER_CRC_LEN; */\\n\\n        stats->rnbc += E1000_READ_REG(hw, E1000_RNBC);\\n        stats->ruc += E1000_READ_REG(hw, E1000_RUC);\\n```\\n\\n## \u5176\u5b83\u7f51\u5361\u5982\u4f55\u5904\u7406 hw_strip_crc \u914d\u7f6e\u7684\uff1f\\n\\nixgbe: \u4e0e Igb \u5904\u7406\u8fc7\u7a0b\u4e00\u81f4\uff0c\u786c\u4ef6 + \u8f6f\u4ef6\\n\\ni40e: \u53ea\u7528\u6765\u8bbe\u7f6e rxq->crc_len\uff0c\u6ca1\u6709\u786c\u4ef6\u76f8\u5173\u914d\u7f6e\\n\\nice: \u540c i40e"},{"id":"/dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790.md","source":"@site/blog/dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790.md","title":"dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790","description":"igb_uio \u662f dpdk \u5185\u90e8\u5b9e\u73b0\u7684\u5c06\u7f51\u5361\u6620\u5c04\u5230\u7528\u6237\u6001\u7684\u5185\u6838\u6a21\u5757\uff0c\u5b83\u662f uio \u6a21\u5757\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":19.06,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898"},"nextItem":{"title":"dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790"}},"content":"igb_uio \u662f dpdk \u5185\u90e8\u5b9e\u73b0\u7684\u5c06\u7f51\u5361\u6620\u5c04\u5230\u7528\u6237\u6001\u7684\u5185\u6838\u6a21\u5757\uff0c\u5b83\u662f uio \u6a21\u5757\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002\\n\\nigb_uio \u662f\u4e00\u79cd pci \u9a71\u52a8\uff0c\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u9694\u79bb\u4e86\u7f51\u5361\u7684\u5185\u6838\u9a71\u52a8\uff0c\u540c\u65f6 igb_uio \u5b8c\u6210\u7f51\u5361\u4e2d\u65ad\u5185\u6838\u6001\u521d\u59cb\u5316\u5e76\u5c06\u4e2d\u65ad\u4fe1\u53f7\u6620\u5c04\u5230\u7528\u6237\u6001\u3002\\n\\nigb_uio \u4e0e uio \u6a21\u5757\u5bc6\u5207\u76f8\u5173\uff0c\u6211\u5c06\u4ece uio \u6a21\u5757\u7740\u624b\u5206\u6790 igb_uio \u6a21\u5757\u7684\u5de5\u4f5c\u539f\u7406\u3002\\n\\n## uio \u6a21\u5757\u5206\u6790\\nuio \u662f\u4e00\u79cd**\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8**\uff0c\u5728\u6b64\u9a71\u52a8\u4e2d\u6ce8\u518c\u4e86\u5355\u72ec\u7684 **file_operations \u51fd\u6570\u8868**\uff0cuio \u8bbe\u5907\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u79cd\u72ec\u7acb\u7684\u8bbe\u5907\u7c7b\u578b\u3002\\n\\n**file_operations** \u51fd\u6570\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```c\\nstatic const struct file_operations uio_fops = {\\n\\t.owner\\t\\t= THIS_MODULE,\\n\\t.open\\t\\t= uio_open,\\n\\t.release\\t= uio_release,\\n\\t.read\\t\\t= uio_read,\\n\\t.write\\t\\t= uio_write,\\n\\t.mmap\\t\\t= uio_mmap,\\n\\t.poll\\t\\t= uio_poll,\\n\\t.fasync\\t\\t= uio_fasync,\\n\\t.llseek\\t\\t= noop_llseek,\\n};\\n```\\n\u8be5\u51fd\u6811\u8868\u5728 **uio_major_init** \u4e2d\u521d\u59cb\u5316 **cdev** \u7ed3\u6784\u4f53\u65f6\u4f7f\u7528\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n    cdev->owner = THIS_MODULE;\\n\\tcdev->ops = &uio_fops;\\n\\tkobject_set_name(&cdev->kobj, \\"%s\\", name);\\n\\t\\n\\tresult = cdev_add(cdev, uio_dev, UIO_MAX_DEVICES);\\n```\\n\u6211\u4eec\u5bf9 /dev/uioxx \u6587\u4ef6\u7684\u64cd\u4f5c\u6700\u7ec8\u90fd\u4f1a\u5bf9\u5e94\u5230**\u5bf9 uio_fops \u7684\u4e0d\u540c\u65b9\u6cd5\u7684\u8c03\u7528\u4e0a**\u3002\\n\\n## uio_info \u7ed3\u6784\u4f53\u53ca\u5176\u5b9e\u4f8b\u5316\u8fc7\u7a0b\\n**uio** \u6a21\u5757\u4e2d\u7684 **idev** \u53d8\u91cf\u662f\u4e00\u4e2a\u6307\u5411 **struct uio_device** \u7684\u6307\u9488\uff0c**struct uio_device** \u4e2d\u53c8\u5305\u542b \u4e00\u4e2a\u6307\u5411 **struct uio_info** \u7684\u6307\u9488\uff0c**struct uio_info** \u7ed3\u6784\u4f53\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```c\\nstruct uio_info {\\n\\tstruct uio_device\\t*uio_dev;\\n\\tconst char\\t\\t*name;\\n\\tconst char\\t\\t*version;\\n\\tstruct uio_mem\\t\\tmem[MAX_UIO_MAPS];\\n\\tstruct uio_port\\t\\tport[MAX_UIO_PORT_REGIONS];\\n\\tlong\\t\\t\\tirq;\\n\\tunsigned long\\t\\tirq_flags;\\n\\tvoid\\t\\t\\t*priv;\\n\\tirqreturn_t (*handler)(int irq, struct uio_info *dev_info);\\n\\tint (*mmap)(struct uio_info *info, struct vm_area_struct *vma);\\n\\tint (*open)(struct uio_info *info, struct inode *inode);\\n\\tint (*release)(struct uio_info *info, struct inode *inode);\\n\\tint (*irqcontrol)(struct uio_info *info, s32 irq_on);\\n};\\n```\\n\u6bcf\u4e00\u4e2a uio \u8bbe\u5907\u90fd\u4f1a**\u5b9e\u4f8b\u5316**\u4e00\u4e2a uio_info \u7ed3\u6784\u4f53\uff0c**uio \u9a71\u52a8\u81ea\u8eab\u4e0d\u4f1a\u5b9e\u4f8b\u5316 uio_info** \u7ed3\u6784\u4f53\uff0c\u5b83\u53ea\u63d0\u4f9b\u4e00\u4e2a**\u6846\u67b6**\uff0c\u53ef\u4ee5\u5728\u5176\u5b83\u6a21\u5757\u4e2d\u8c03\u7528 **uio_register_device** \u6765**\u5b9e\u4f8b\u5316 uio_info \u7ed3\u6784\u4f53**\uff0c\u5728 dpdk \u4e2d\uff0c\u5e38\u89c1\u65b9\u5f0f\u662f\u5728**\u9a71\u52a8\u7ed1\u5b9a igb_uio** \u7684\u65f6\u5019\u8c03\u7528 **uio_register_device** \u8fdb\u884c\u5b9e\u4f8b\u5316\u3002\\n\\n## igb_uio.c \u4e2d\u521d\u59cb\u5316\u5f53\u524d\u8bbe\u5907 uio_info \u7ed3\u6784\u8fc7\u7a0b\\n\u53ef\u4ee5\u5728 igb_uio.c \u7684 **probe** \u51fd\u6570 **igbuio_pci_probe** \u4e2d\u627e\u5230\u5b9e\u4f8b\u5316\u7684\u76f8\u5173\u4ee3\u7801\uff0c\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n```c\\n410     /* remap IO memory */\\n411     err = igbuio_setup_bars(dev, &udev->info);\\n.....................................................\\n428     /* fill uio infos */\\n429     udev->info.name = \\"igb_uio\\";\\n430     udev->info.version = \\"0.1\\";\\n431     udev->info.handler = igbuio_pci_irqhandler;\\n432     udev->info.irqcontrol = igbuio_pci_irqcontrol;\\n433 #ifdef CONFIG_XEN_DOM0\\n434     /* check if the driver run on Xen Dom0 */\\n435     if (xen_initial_domain())\\n436         udev->info.mmap = igbuio_dom0_pci_mmap;\\n437 #endif\\n438     udev->info.priv = udev;\\n\\t\\n...........................................................\\n\\n478     /* register uio driver */\\n479     err = uio_register_device(&dev->dev, &udev->info);\\n```\\n411 \u884c\u8c03\u7528 igbuio_setup_bars \u6620\u5c04 pci \u8bbe\u5907 bar \u4e2d\u7684\u5185\u5b58\u533a\u57df\uff0c\u6b64\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\n332 static int\\n333 igbuio_setup_bars(struct pci_dev *dev, struct uio_info *info)\\n334 {   \\n335     int i, iom, iop, ret;\\n336     unsigned long flags;\\n337     static const char *bar_names[PCI_STD_RESOURCE_END + 1]  = {\\n338         \\"BAR0\\",\\n339         \\"BAR1\\",\\n340         \\"BAR2\\",\\n341         \\"BAR3\\",\\n342         \\"BAR4\\",\\n343         \\"BAR5\\",\\n344     };\\n345     \\n346     iom = 0;\\n347     iop = 0;\\n348     \\n349     for (i = 0; i < ARRAY_SIZE(bar_names); i++) {\\n350         if (pci_resource_len(dev, i) != 0 &&\\n351                 pci_resource_start(dev, i) != 0) {\\n352             flags = pci_resource_flags(dev, i);\\n353             if (flags & IORESOURCE_MEM) {\\n354                 ret = igbuio_pci_setup_iomem(dev, info, iom,\\n355                                  i, bar_names[i]);\\n356                 if (ret != 0)\\n357                     return ret;\\n358                 iom++;\\n359             } else if (flags & IORESOURCE_IO) {\\n360                 ret = igbuio_pci_setup_ioport(dev, info, iop,\\n361                                   i, bar_names[i]);\\n362                 if (ret != 0)\\n363                     return ret;\\n364                 iop++;\\n365             }\\n366         }\\n367     }\\n368     \\n369     return (iom != 0) ? ret : -ENOENT;\\n370 }\\n```\\n\\n\u5b83\u5c06 pci \u8bbe\u5907\u6bcf\u4e2a bar \u7684\u5185\u5b58\u7a7a\u95f4\u6620\u5c04\u5230 uio_info \u7ed3\u6784\u4e2d\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u7c7b\u522b\uff1a\\n\\n1. IORESOURCE_MEM\\n2. IORESOURCE_IO\\n\\n\u6bcf\u4e2a bar \u7684 IORESOURCE_MEM \u5185\u5b58\u4fe1\u606f\u586b\u5145 uio_info \u4e2d\u7684 mem \u5b57\u6bb5\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n289     info->mem[n].name = name;\\n290     info->mem[n].addr = addr;\\n291     info->mem[n].internal_addr = internal_addr;\\n292     info->mem[n].size = len;\\n293     info->mem[n].memtype = UIO_MEM_PHYS;\\n```\\nn \u4ece 0 \u5f00\u59cb\uff0c\u4ee3\u8868\u6bcf\u4e00\u5757\u72ec\u7acb\u7684\u5185\u5b58\u533a\u57df\u3002\\n\\n\u6bcf\u4e2a bar \u7684 IORESOURCE_IO \u5185\u5b58\u4fe1\u606f\u586b\u5145 uio_info \u4e2d\u7684 port \u5b57\u6bb5\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\n312     info->port[n].name = name;\\n313     info->port[n].start = addr;\\n314     info->port[n].size = len;\\n315     info->port[n].porttype = UIO_PORT_X86;\\n```\\nn \u4ece 0 \u5f00\u59cb\u7d2f\u52a0\uff0c\u4ee3\u8868\u6bcf\u4e00\u5757\u6709\u6548\u7684 io \u5185\u5b58\u533a\u57df\uff0cigb_uio \u4e2d\u6620\u5c04\u7684 pci bar \u7684\u5185\u5b58\u533a\u57df\u5e76\u4e0d\u4f1a\u88ab\u76f4\u63a5\u4f7f\u7528\uff0c\u5728\u7a0b\u5e8f\u6267\u884c mmap \u6620\u5c04 /dev/uioX \u8bbe\u5907\u5185\u5b58\u65f6 info \u7ed3\u6784\u4e2d\u7684 mem \u4e0e port \u5b57\u6bb5\u7684\u503c\u88ab\u4f7f\u7528\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u5c06\u7f51\u5361\u7684 pci \u7269\u7406\u5730\u5740\u6620\u5c04\u4e3a\u7528\u6237\u6001\u7a7a\u95f4\u7684\u865a\u62df\u5730\u5740\u3002\\n\\n**\u7814\u7a76 dpdk-16.04 \u5185\u90e8\u4ee3\u7801\u5374\u53d1\u73b0\u5b83\u6620\u5c04\u7f51\u5361 pci resource \u5730\u5740\uff0c\u5e76\u4e0d\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5b9e\u9645\u662f\u901a\u8fc7\u8bbf\u95ee\u6bcf\u4e2a pci \u8bbe\u5907\u5728 /sys \u76ee\u5f55\u6811\u4e0b\u751f\u6210\u7684 resource \u6587\u4ef6\u83b7\u53d6 pci \u5185\u5b58\u8d44\u6e90\u4fe1\u606f\uff0c\u7136\u540e\u4f9d\u6b21 mmap \u6bcf\u4e2a pci \u5185\u5b58\u8d44\u6e90\u5bf9\u5e94\u7684 resourceX \u6587\u4ef6\uff0c\u8fd9\u91cc\u6267\u884c\u7684 mmap \u5c06 resource \u6587\u4ef6\u4e2d\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u4e3a\u7528\u6237\u6001\u7a0b\u5e8f\u4e2d\u7684\u865a\u62df\u5730\u5740\uff01**\\n\\n## uio_info \u7ed3\u6784\u4f53\u4e2d mem \u4e0e port io \u5b57\u6bb5\u5728 igb_uio \u4e2d\u586b\u5145\u7684\u4fe1\u606f\u5b58\u5728\u7684\u610f\u4e49\\n\\n\u9605\u8bfb uio \u6a21\u5757\u4ee3\u7801\uff0c\u53d1\u73b0\u6bcf\u4e2a uio \u8bbe\u5907\u793a\u4f8b\u5316\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u8c03\u7528 **uio_dev_add_attributes** \u521b\u5efa **maps \u4e0e portio sysfs \u5c5e\u6027**\uff0c\u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee sysfs \u76ee\u5f55\u4e2d\u5f53\u524d pci \u8bbe\u5907 uio maps \u4e0e uio portio \u6587\u4ef6\u6765\u83b7\u53d6\u5230\u7f51\u5361\u7684 pci bar \u4e2d\u7684\u7269\u7406\u5185\u5b58\u4fe1\u606f\u3002\\n\\n\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```bash\\n [root] # pwd\\n/sys/bus/pci/drivers/igb_uio/0000:00:06.0\\n [root] # cat ./uio/uio2/maps/map0/addr ./uio/uio2/maps/map0/name  ./uio/uio2/maps/map0/size\\n0xfebf3000\\nBAR1\\n0x1000\\n [root] # cat ./uio/uio2/portio/port0/start ./uio/uio2/portio/port0/name  ./uio/uio2/portio/port0/size ./uio/uio2/portio/port0/porttype\\n0xc080\\nBAR0\\n0x20\\nport_x86\\n\\n```\\n\\n\u5982\u4e0a\u4fe1\u606f\u8bf4\u660e 00:06.0 pci \u63a5\u53e3\uff0c\u5176\u6709\u6548 IORESOURCE_MEM \u4f4d\u4e8e BAR1 \u4e2d\uff0c\u7269\u7406\u5730\u5740\u662f 0xfebf3000\uff0c\u957f\u5ea6\u662f 0x1000\uff0c\u6709\u6548 IORESOURCE_IO \u4f4d\u4e8e BAR0 \u4e2d\uff0c\u7269\u7406\u5730\u5740\u662f 0xc080\uff0c\u957f\u5ea6\u4e3a 0x20\uff0c\u7c7b\u578b\u4e3a port_x86\u3002\\n\\n\u83b7\u53d6 resource \u6587\u4ef6\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```bssh\\n [root] # cat ./resource\\n0x000000000000c080 0x000000000000c09f 0x0000000000040101\\n0x00000000febf3000 0x00000000febf3fff 0x0000000000040200\\n0x0000000000000000 0x0000000000000000 0x0000000000000000\\n0x0000000000000000 0x0000000000000000 0x0000000000000000\\n0x0000000000000000 0x0000000000000000 0x0000000000000000\\n0x0000000000000000 0x0000000000000000 0x0000000000000000\\n0x00000000feb80000 0x00000000febbffff 0x000000000004e200\\n0x0000000000000000 0x0000000000000000 0x0000000000000000\\n0x0000000000000000 0x0000000000000000 0x0000000000000000\\n0x0000000000000000 0x0000000000000000 0x0000000000000000\\n0x0000000000000000 0x0000000000000000 0x0000000000000000\\n0x0000000000000000 0x0000000000000000 0x0000000000000000\\n0x0000000000000000 0x0000000000000000 0x0000000000000000\\n```\\n\\nresource \u6587\u4ef6\u4fe1\u606f\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u4e2a pci \u8d44\u6e90\u7a7a\u95f4\uff0cdpdk \u4e2d\u53ea\u4f7f\u7528\u4e86\u524d 6 \u4e2a\u8d44\u6e90\u7a7a\u95f4\u3002\u6bcf\u4e00\u4e2a\u8d44\u6e90\u7a7a\u95f4\u7684\u7b2c\u4e00\u5217\u4e3a\u8d77\u59cb\u7269\u7406\u5730\u5740\uff0c\u7b2c\u4e8c\u5217\u4e3a\u7ec8\u6b62\u7269\u7406\u5730\u5740\uff0c\u7b2c\u4e09\u5217\u4e3a flag \u6807\u5fd7\u3002\\n\\n\u5176\u5185\u5bb9\u4e0e uio \u751f\u6210\u7684 maps \u6587\u4ef6\u53ca portio \u6587\u4ef6\u7684\u8f93\u51fa\u4fe1\u606f\u662f\u4e00\u81f4\u7684\uff01\u5b9e\u9645\u4e0a\u6211\u4eec\u4e5f\u53ef\u7528\u901a\u8fc7 mmap /dev/uioX \u6765\u5b8c\u6210 pci \u8bbe\u5907\u5185\u5b58\u8d44\u6e90\u6620\u5c04\u5230\u7528\u6237\u6001\u7684\u5de5\u4f5c\u3002\\n\\n\\n\\n## \u5982\u4f55\u901a\u8fc7 mmap /dev/uiox \u6587\u4ef6\u6765\u6620\u5c04\u7f51\u5361 pci \u5185\u5b58\u8d44\u6e90\\n\u4e0a\u6587\u63d0\u5230\u8fc7\uff0cmmap /dev/uiox \u9700\u8981\u901a\u8fc7 uio \u751f\u6210\u7684 maps \u6587\u4ef6\u5b8c\u6210\uff0c\u4ece\u5185\u6838\u6587\u6863\u4e2d\u627e\u5230\u4e0e maps \u6587\u4ef6\u76f8\u5173\u7684\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\nEach `mapX/` directory contains four read-only files that show attributes of the memory:\\n\\n- `name`: A string identifier for this mapping. This is optional, the string can be empty. Drivers can set this to make it easier for userspace to find the correct mapping.\\n- `addr`: The address of memory that can be mapped.\\n- `size`: The size, in bytes, of the memory pointed to by addr.\\n- `offset`: The offset, in bytes, that has to be added to the pointer returned by `mmap()` to get to the actual device memory. This is important if the device\u2019s memory is not page aligned. Remember that pointers returned by `mmap()` are always page aligned, so it is good style to always add this offset.\\n\\nFrom userspace, the different mappings are distinguished by adjusting the `offset` parameter of the `mmap()` call. To map the memory of mapping N, you have to use N times the page size as your offset:\\n\\n```\\noffset = N * getpagesize();\\n```\\n\\n\u4e0d\u540c\u7684 pci \u5185\u5b58\u533a\u57df\u901a\u8fc7 offset \u6765\u533a\u5206\uff0c\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u5f53\u5b58\u5728\u4e24\u4e2a pci \u8d44\u6e90\u5185\u5b58\u5927\u5c0f\u4e00\u81f4\u60c5\u51b5\u65f6\u7684\u6b63\u5e38\u5904\u7406\u3002\\n\\n## igb_uio \u6a21\u5757\u7684\u521d\u59cb\u5316\u4e0e\u89e3\u521d\u59cb\u5316\u51fd\u6570\\nigb_uio \u6a21\u5757\u7684\u521d\u59cb\u5316\u4e0e\u89e3\u521d\u59cb\u5316\u51fd\u6570\u8c03\u7528\u8bed\u53e5\u5982\u4e0b\uff1a\\n```c\\n568 module_init(igbuio_pci_init_module);\\n569 module_exit(igbuio_pci_exit_module);\\n```\\nigb_uio \u6a21\u5757\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a pci \u9a71\u52a8\u7684\u5b9e\u4f8b\uff0c\u5176\u6d41\u7a0b\u4e0e pci \u9a71\u52a8\u521d\u59cb\u5316\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u5b83\u5b9e\u4f8b\u5316\u4e86\u4e00\u4e2a id_table \u4e3a\u7a7a\u7684 pci \u9a71\u52a8\uff0c\u5728\u7ed1\u5b9a\u7f51\u5361\u5230 igb_uio \u524d\u9700\u8981\u5148\u5199\u5165\u7f51\u5361\u7684 vendor id \u4e0e device id \u5230 igb_uio \u9a71\u52a8\u7684 new_id \u6587\u4ef6\uff0c\u52a8\u6001\u6269\u5145 igb_uio \u652f\u6301\u7684 pci \u8bbe\u5907\u578b\u53f7\uff0c\u8fd9\u4e0e\u5e38\u89c1\u7684 pci \u9a71\u52a8\u6709\u6240\u533a\u522b\u3002\\n\\nigb_uio pci \u9a71\u52a8\u5b9e\u4f8b\u53ca\u521d\u59cb\u5316\u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\n543 static struct pci_driver igbuio_pci_driver = {\\n544     .name = \\"igb_uio\\",\\n545     .id_table = NULL,\\n546     .probe = igbuio_pci_probe,\\n547     .remove = igbuio_pci_remove,\\n548 };\\n549 \\n550 static int __init\\n551 igbuio_pci_init_module(void)\\n552 {\\n553     int ret;\\n554 \\n555     ret = igbuio_config_intr_mode(intr_mode);\\n556     if (ret < 0)\\n557         return ret;\\n558 \\n559     return pci_register_driver(&igbuio_pci_driver);\\n560 }\\n561 \\n```\\nigbuio_config_intr_mode \u914d\u7f6e\u6a21\u5757\u4f7f\u7528\u7684\u4e2d\u65ad\u6a21\u578b\uff0cintr_mode \u662f igb_uio \u6a21\u5757\u5b9a\u4e49\u7684\u4e00\u4e2a\u6a21\u5757\u53c2\u6570\uff0c\u5728\u52a0\u8f7d\u6a21\u5757\u7684\u65f6\u5019\u63d0\u4f9b\uff0c\u6ca1\u6709\u6307\u5b9a\u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528 MSIX \u4e2d\u65ad\u6a21\u578b\u3002\\n\\n559 \u884c\u6ce8\u518c\u4e86 igbuio pci \u8bbe\u5907\uff0c\u4e0e\u4e4b\u5bf9\u5e94\u5728\u89e3\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u79fb\u9664\u6ce8\u518c\u7684 pci \u9a71\u52a8\uff0c\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n562 static void __exit\\n563 igbuio_pci_exit_module(void)\\n564 {\\n565     pci_unregister_driver(&igbuio_pci_driver);\\n566 }\\n```\\n## \u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u65f6 probe \u7684\u8fc7\u7a0b\\n\u5f53\u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u65f6\u4f1a\u6267\u884c probe \u64cd\u4f5c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n377 igbuio_pci_probe(struct pci_dev *dev, const struct pci_device_id *id)\\n378 {\\n379     struct rte_uio_pci_dev *udev;\\n380     struct msix_entry msix_entry;\\n381     int err;\\n382 \\n383     udev = kzalloc(sizeof(struct rte_uio_pci_dev), GFP_KERNEL);\\n384     if (!udev)\\n385         return -ENOMEM;\\n386 \\n387     /*\\n388      * enable device: ask low-level code to enable I/O and\\n389      * memory\\n390      */\\n391     err = pci_enable_device(dev);\\n392     if (err != 0) {\\n393         dev_err(&dev->dev, \\"Cannot enable PCI device\\\\n\\");\\n394         goto fail_free;\\n395     }\\n396 \\n397     /*\\n398      * reserve device\'s PCI memory regions for use by this\\n399      * module\\n400      */\\n401     err = pci_request_regions(dev, \\"igb_uio\\");\\n402     if (err != 0) {\\n403         dev_err(&dev->dev, \\"Cannot request regions\\\\n\\");\\n404         goto fail_disable;\\n405     }\\n406 \\n407     /* enable bus mastering on the device */\\n408     pci_set_master(dev);\\n410     /* remap IO memory */\\n411     err = igbuio_setup_bars(dev, &udev->info);\\n412     if (err != 0)\\n413         goto fail_release_iomem;\\n414 \\n415     /* set 64-bit DMA mask */\\n416     err = pci_set_dma_mask(dev,  DMA_BIT_MASK(64));\\n417     if (err != 0) {\\n418         dev_err(&dev->dev, \\"Cannot set DMA mask\\\\n\\");\\n419         goto fail_release_iomem;\\n420     }\\n421 \\n422     err = pci_set_consistent_dma_mask(dev, DMA_BIT_MASK(64));\\n423     if (err != 0) {\\n424         dev_err(&dev->dev, \\"Cannot set consistent DMA mask\\\\n\\");\\n425         goto fail_release_iomem;\\n426     }\\n427 \\n.................................................................\\n439     udev->pdev = dev;\\n440 \\n441     switch (igbuio_intr_mode_preferred) {\\n442     case RTE_INTR_MODE_MSIX:\\n443         /* Only 1 msi-x vector needed */\\n444         msix_entry.entry = 0;\\n445         if (pci_enable_msix(dev, &msix_entry, 1) == 0) {\\n446             dev_dbg(&dev->dev, \\"using MSI-X\\");\\n447             udev->info.irq = msix_entry.vector;\\n448             udev->mode = RTE_INTR_MODE_MSIX;\\n449             break;\\n450         }\\n451         /* fall back to INTX */\\n452     case RTE_INTR_MODE_LEGACY:\\n453         if (pci_intx_mask_supported(dev)) {\\n454             dev_dbg(&dev->dev, \\"using INTX\\");\\n455             udev->info.irq_flags = IRQF_SHARED;\\n456             udev->info.irq = dev->irq;\\n457             udev->mode = RTE_INTR_MODE_LEGACY;\\n458             break;\\n459         }\\n460         dev_notice(&dev->dev, \\"PCI INTX mask not supported\\\\n\\");\\n461         /* fall back to no IRQ */\\n462     case RTE_INTR_MODE_NONE:\\n463         udev->mode = RTE_INTR_MODE_NONE;\\n464         udev->info.irq = 0;\\n465         break;\\n466 \\n467     default:\\n468         dev_err(&dev->dev, \\"invalid IRQ mode %u\\",\\n469             igbuio_intr_mode_preferred);\\n470         err = -EINVAL;\\n471         goto fail_release_iomem;\\n472     }\\n473 \\n474     err = sysfs_create_group(&dev->dev.kobj, &dev_attr_grp);\\n475     if (err != 0)\\n476         goto fail_release_iomem;\\n477 \\n..............................................................\\n480     if (err != 0)\\n481         goto fail_remove_group;\\n482 \\n483     pci_set_drvdata(dev, udev);\\n484 \\n485     dev_info(&dev->dev, \\"uio device registered with irq %lx\\\\n\\",\\n486          udev->info.irq);\\n487 \\n488     return 0;\\n489 \\n490 fail_remove_group:\\n491     sysfs_remove_group(&dev->dev.kobj, &dev_attr_grp);\\n492 fail_release_iomem:\\n493     igbuio_pci_release_iomem(&udev->info);\\n494     if (udev->mode == RTE_INTR_MODE_MSIX)\\n495         pci_disable_msix(udev->pdev);\\n496     pci_release_regions(dev);\\n497 fail_disable:\\n498     pci_disable_device(dev);\\n499 fail_free:\\n500     kfree(udev);\\n501 \\n502     return err;\\n503 }\\n```\\n383 \u884c\u521b\u5efa\u4e86\u4e00\u4e2a rte_uio_pci_dev \u7ed3\u6784\u4f53\u5b9e\u4f8b\uff0c387~408 \u884c\u4f7f\u80fd pci \u8bbe\u5907\u5e76\u4fdd\u7559\u8bbe\u5907\u7684 pci \u5185\u5b58\u533a\u57df\u5230 igb_uio \u6a21\u5757\u4e2d\u5e76\u4f7f\u80fd\u603b\u7ebf\u63a7\u5236\u3002\\n\\n411 \u884c\u8c03\u7528 igbuio_setup_bars \u6620\u5c04 pci \u8bbe\u5907\u7684 6 \u4e2a bar\uff0c\u5e76\u5c06\u5185\u5b58\u5730\u5740\u53ca\u957f\u5ea6\u4fdd\u5b58\u5230 rte_uio_pci_dev \u7ed3\u6784\u4f53\u7684 info \u5b57\u6bb5\u4e2d\uff0c\u8be6\u7ec6\u4fe1\u606f\u89c1\u4e0a\u6587\u3002\\n\\n415~426 \u884c\u8bbe\u7f6e dma mask \u4fe1\u606f\uff0c\u8df3\u8fc7\u4e86 uio_info \u7ed3\u6784\u4f53\u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u5728\u63a2\u8ba8 uio \u7684\u65f6\u5019\u63cf\u8ff0\u3002\\n\\n441~472 \u884c\u5224\u65ad igb_uio \u4f7f\u7528\u7684\u4e2d\u65ad\u6a21\u578b\uff0c\u6839\u636e\u4e0d\u540c\u7684\u4e2d\u65ad\u6a21\u578b\u7533\u8bf7\u4f7f\u80fd\u5e76\u586b\u5145\u4e2d\u65ad\u4fe1\u606f\u3002474 \u884c\u521b\u5efa\u4e86 igb_uio \u5185\u90e8\u7684 sysfs \u5c5e\u6027\uff0c\u8fd9\u4e4b\u540e 483 \u884c\u8c03\u7528 pci_set_drvdata \u5c06 udev \u8bbe\u7f6e\u4e3a pci \u8bbe\u5907\u7684\u79c1\u6709\u6570\u636e\u3002\\n\\n\\n\\n## dpdk \u4e0e uio \u8bbe\u5907\u6587\u4ef6\u7684\u4ea4\u4e92\u8fc7\u7a0b\\n\\ndpdk \u901a\u8fc7\u8bbf\u95ee uio \u8bbe\u5907\u6587\u4ef6\u6765\u5b8c\u6210\u7269\u7406\u7f51\u5361\u5185\u6838\u6001\u7684\u4e2d\u65ad\u4ea4\u4e92\u8fc7\u7a0b\uff0c\u963b\u585e\u5f0f\u8bfb\u53d6\u3001epoll uio \u6587\u4ef6\u6765\u76d1\u542c\u662f\u5426\u6709\u4e2d\u65ad\u4e8b\u4ef6\uff0c\u5f53\u4e2d\u65ad\u5230\u6765\u540e\uff0cread\u3001epoll \u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\uff0c\u7528\u6237\u6001\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u6e05\u9664\u76f8\u5e94\u7684\u4e2d\u65ad\u6807\u5fd7\u4f4d\u3002\\n\\n\u7ed1\u5b9a\u7f51\u5361\u5230 igb_uio \u65f6\uff0c\u5b9e\u4f8b\u5316\u4e00\u4e2a uio \u8bbe\u5907\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u7533\u8bf7 request_irq\uff0c\u5e76\u4f20\u5165\u4e86\u4e2d\u65ad\u56de\u8c03\u51fd\u6570 uio_interrupt\uff0c\u8fd9\u662f uio \u80fd\u591f\u6355\u83b7\u5230\u4e2d\u65ad\u4fe1\u53f7\u7684\u5173\u952e\uff01\\n\\n## \u6807\u51c6 UIO \u8bbe\u5907\u63a7\u5236\u4e2d\u65ad\u8fc7\u7a0b\\n\\n\u5bf9\u4e8e\u6807\u51c6\u7684 uio \u8bbe\u5907\uff0c\u901a\u8fc7**\u5411\u8bbe\u5907\u6587\u4ef6\u4e2d\u5199\u5165 1** \u6765**\u4f7f\u80fd**\u4e2d\u65ad\uff0c\u4e0e\u4e4b\u7c7b\u4f3c**\u5173\u95ed\u4e2d\u65ad**\u7684\u8fc7\u7a0b\u662f**\u5411\u8bbe\u5907\u6587\u4ef6**\u4e2d**\u5199\u5165 0**\u3002\\n\\n\u4f7f\u7528 uio \u6620\u5c04\u7f51\u5361\u5230\u7528\u6237\u6001\u65f6\uff0c\u7f51\u5361\u9a71\u52a8\u4f1a\u8c03\u7528 **uio_intr_enable** \u51fd\u6570\u6765\u4f7f\u80fd uio uio \u4e2d\u65ad\u3002\u5176\u4ee3\u7801\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n```c\\nstatic int\\nuio_intr_enable(struct rte_intr_handle *intr_handle)\\n{\\n\\tconst int value = 1;\\n\\n\\tif (write(intr_handle->fd, &value, sizeof(value)) < 0) {\\n\\t\\tRTE_LOG(ERR, EAL,\\n\\t\\t\\t\\"Error enabling interrupts for fd %d (%s)\\\\n\\",\\n\\t\\t\\tintr_handle->fd, strerror(errno));\\n\\t\\treturn -1;\\n\\t}\\n\\treturn 0;\\n}\\n```\\n\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u5199 1 \u5230 uio \u8bbe\u5907\u6587\u4ef6\u4e2d\u6765\u5b8c\u6210\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b\u3002\\n\\n## \u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u6709\u600e\u6837\u7684\u5f71\u54cd\uff1f\\nuio_write \u662f**\u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u65f6**\u5185\u6838\u4e2d**\u6700\u7ec8\u8c03\u7528\u5230**\u7684\u5199\u5165\u51fd\u6570\uff0c\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nstatic ssize_t uio_write(struct file *filep, const char __user *buf,\\n\\t\\t\\tsize_t count, loff_t *ppos)\\n{\\t\\n\\tstruct uio_listener *listener = filep->private_data;\\n\\tstruct uio_device *idev = listener->dev;\\n\\tssize_t retval;\\n\\ts32 irq_on;\\n\\n\\tif (count != sizeof(s32))\\n\\t\\treturn -EINVAL;\\n\\n\\tif (copy_from_user(&irq_on, buf, count))\\n\\t\\treturn -EFAULT;\\n\\n\\tmutex_lock(&idev->info_lock);\\n\\tif (!idev->info) {\\n\\t\\tretval = -EINVAL;\\n\\t\\tgoto out;\\n\\t}\\n\\n\\tif (!idev->info || !idev->info->irq) {\\n\\t\\tretval = -EIO;\\n\\t\\tgoto out;\\n\\t}\\n\\n\\tif (!idev->info->irqcontrol) {\\n\\t\\tretval = -ENOSYS;\\n\\t\\tgoto out;\\n\\t}\\n\\n\\tretval = idev->info->irqcontrol(idev->info, irq_on);\\n\\nout:\\n\\tmutex_unlock(&idev->info_lock);\\n\\treturn retval ? retval : sizeof(s32);\\n}\\n```\\n\u53ef\u4ee5\u770b\u5230\u5b83\u4ece**\u7528\u6237\u6001**\u83b7\u53d6\u5230 **irq_on** \u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u4e3a 1 \u5bf9\u5e94\u8981\u4f7f\u80fd\u4e2d\u65ad\uff0c\u4e3a 0 \u5219\u8868\u793a\u5173\u95ed\u4e2d\u65ad\uff0c\u5728\u83b7\u53d6\u4e86\u8fd9\u4e2a\u53c2\u6570\u540e\uff0c\u5b83\u9996\u5148**\u5360\u7528\u4e92\u65a5\u9501**\uff0c\u7136\u540e\u8c03\u7528 info \u7ed3\u6784\u4f53\u4e2d\u5b9e\u4f8b\u5316\u7684 **irqcontrol** \u5b50\u51fd\u6570\u6765\u5b8c\u6210\u5de5\u4f5c\u3002\\n\\n## write \u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u7684\u5b8c\u6574\u8fc7\u7a0b\\n\u4e0a\u6587\u4e2d\u6211\u5df2\u7ecf\u63d0\u5230\u8fc7\u4f7f\u7528 write \u7cfb\u7edf\u8c03\u7528\u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u6700\u7ec8\u5c06\u4f1a\u8c03\u7528\u5230 **info \u7ed3\u6784\u4f53**\u4e2d\u5b9e\u4f8b\u5316\u7684 **irqcontrol \u5b50\u51fd\u6570**\u6765\u5b8c\u6210\u5de5\u4f5c\uff0cigb_uio \u5c31\u63d0\u4f9b\u4e86\u8fd9\u6837\u4e00\u4e2a\u51fd\u6570\u3002\\n\\n\u4e5f\u5c31\u662f\u8bf4\u5728**\u7ed1\u5b9a\u7f51\u5361\u5230 igb_uio \u65f6**\uff0c**\u5199\u5165**\u63a5\u53e3\u5bf9\u5e94\u7684 **uio \u8bbe\u5907\u6587\u4ef6**\u65f6\u5c06\u4f1a\u8c03\u7528 igb_uio \u4e2d\u5b9e\u4f8b\u5316\u7684 **info->irqcontrol** \u51fd\u6570\u6765**\u63a7\u5236\u4e2d\u65ad\u72b6\u6001**\u3002\\n\\n\u8fd9\u91cc\u63d0\u5230\u7684 **irqcontrol** \u7684\u5b9e\u4f8b\u5316\u51fd\u6570\uff0c\u5728 igb_uio \u4e2d\u5bf9\u5e94\u7684\u5c31\u662f **igbuio_pci_irqcontrol** \u51fd\u6570\u3002\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nstatic int\\nigbuio_pci_irqcontrol(struct uio_info *info, s32 irq_state)\\n{\\n\\tstruct rte_uio_pci_dev *udev = info->priv;\\n\\tstruct pci_dev *pdev = udev->pdev;\\n\\n\\tpci_cfg_access_lock(pdev);\\n\\tif (udev->mode == RTE_INTR_MODE_LEGACY)\\n\\t\\tpci_intx(pdev, !!irq_state);\\n\\n\\telse if (udev->mode == RTE_INTR_MODE_MSIX) {\\n\\t\\tstruct msi_desc *desc;\\n\\n#if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 3, 0))\\n\\t\\tlist_for_each_entry(desc, &pdev->msi_list, list)\\n\\t\\t\\tigbuio_msix_mask_irq(desc, irq_state);\\n#else\\n\\t\\tlist_for_each_entry(desc, &pdev->dev.msi_list, list)\\n\\t\\t\\tigbuio_msix_mask_irq(desc, irq_state);\\n#endif\\n\\t}\\n\\tpci_cfg_access_unlock(pdev);\\n\\n\\treturn 0;\\n}\\n```\\n\\n\u8fd9\u91cc\u9700\u8981**\u8bbf\u95ee pci \u914d\u7f6e\u7a7a\u95f4**\uff0c\u6839\u636e\u4e0d\u540c\u7684**\u4e2d\u65ad\u7c7b\u578b**\u6765\u63a7\u5236\u4e2d\u65ad\u72b6\u6001\u3002\\n\\n## write \u8fc7\u7a0b\u56fe\u793a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210421152518118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\\n\\n\\ndpdk \u7a0b\u5e8f\u5728\u521d\u59cb\u5316\u7f51\u5361\u65f6\u4f1a\u5199\u5165\u7f51\u5361\u63a5\u53e3\u5bf9\u5e94\u7684 uio \u6587\u4ef6\u6765\u4f7f\u80fd\u4e2d\u65ad\uff0c\u5f53\u4e2d\u65ad\u4f7f\u80fd\u540e\uff0c\u4e00\u65e6\u6709\u4e2d\u65ad\u5230\u6765\uff0cuio_interrupt \u4e2d\u65ad\u56de\u8c03\u4f1a\u88ab\u6267\u884c\u3002\\n\\n\u6b64\u56de\u8c03\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n\\n/**\\n * uio_interrupt - hardware interrupt handler\\n * @irq: IRQ number, can be UIO_IRQ_CYCLIC for cyclic timer\\n * @dev_id: Pointer to the devices uio_device structure\\n */\\nstatic irqreturn_t uio_interrupt(int irq, void *dev_id)\\n{\\n        struct uio_device *idev = (struct uio_device *)dev_id;\\n        irqreturn_t ret = idev->info->handler(irq, idev->info);\\n\\n        if (ret == IRQ_HANDLED)\\n                uio_event_notify(idev->info);\\n\\n        return ret;\\n}\\n```\\n\\n\u5b83\u9996\u5148\u8c03\u7528\u4e86 uio_info \u4e2d\u7684 handler \u51fd\u6570\uff0c\u5bf9 igb_uio \u6765\u8bf4\uff0c\u6b64\u51fd\u6570\u662f igbuio_pci_irqhandler\uff0c\u5176\u6e90\u7801\u5982\u4e0b\uff1a\\n\\n\\n\\n```c\\n207 /**\\n208  * This is interrupt handler which will check if the interrupt is for the right device.\\n209  * If yes, disable it here and will be enable later.\\n210  */\\n211 static irqreturn_t\\n212 igbuio_pci_irqhandler(int irq, struct uio_info *info)\\n213 {\\n214     struct rte_uio_pci_dev *udev = info->priv;\\n215\\n216     /* Legacy mode need to mask in hardware */\\n217     if (udev->mode == RTE_INTR_MODE_LEGACY &&\\n218         !pci_check_and_mask_intx(udev->pdev))\\n219         return IRQ_NONE;\\n220\\n221     /* Message signal mode, no share IRQ and automasked */\\n222     return IRQ_HANDLED;\\n223 }\\n```\\n\\n\u5bf9\u4e8e Legacy \u4e2d\u65ad\u6a21\u5f0f\uff0c\u9700\u8981\u8bbe\u7f6e\u786c\u4ef6\u63a9\u7801\u503c\uff0c\u6211\u53ea\u5173\u6ce8\u8fd4\u56de IRQ_HANDLED \u7684\u6d41\u7a0b\u3002\u5f53 handler \u51fd\u6570\u8c03\u7528\u5b8c\u6210\u540e\uff0c\u5982\u679c\u8fd4\u56de\u503c\u662f IRQ_HANDLED\uff0c\u5219\u8c03\u7528 uio_event_notify \u5524\u9192\u963b\u585e\u5728 uio \u8bbe\u5907\u7b49\u5f85\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b\uff0c\u4ee5\u901a\u77e5\u7528\u6237\u6001\u7a0b\u5e8f\u4e2d\u65ad\u5230\u8fbe\u3002\\n\\n## dpdk \u7a0b\u5e8f\u4e2d\u76d1\u542c\u4e2d\u65ad\u4e8b\u4ef6\u7684\u8fc7\u7a0b\\n\\ndpdk \u5355\u72ec\u521b\u5efa\u4e86\u4e00\u4e2a\u4e2d\u65ad\u7ebf\u7a0b\u8d1f\u8d23\u76d1\u542c\u5e76\u5904\u7406\u4e2d\u65ad\u4e8b\u4ef6\uff0c\u5176\u4e3b\u8981\u8fc7\u7a0b\u5982\u4e0b\uff1a\\n\\n1. \u521b\u5efa epoll_event\\n2. \u904d\u5386\u4e2d\u65ad\u6e90\u5217\u8868\uff0c\u6dfb\u52a0\u6bcf\u4e00\u4e2a\u9700\u8981\u76d1\u542c\u7684 uio \u8bbe\u5907\u4e8b\u4ef6\u7684 uio \u6587\u4ef6\u63cf\u8ff0\u7b26\u5230 epoll_event \u4e2d\\n3. \u8c03\u7528 epoll_wait \u76d1\u542c\u4e8b\u4ef6\uff0c\u76d1\u542c\u5230\u4e8b\u4ef6\u540e\u8c03\u7528 eal_intr_process_interrupts \u8c03\u7528\u76f8\u5173\u7684\u4e2d\u65ad\u56de\u8c03\u51fd\u6570"},{"id":"/dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790.md","source":"@site/blog/dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790.md","title":"dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790","description":"l2fwd \u662f dpdk \u4e8c\u5c42\u8f6c\u53d1\u793a\u4f8b\uff0c\u5b83\u4f1a\u5c06\u4e00\u4e2a\u53e3\u6536\u5230\u7684\u62a5\u6587\u7ecf\u8fc7\u76f8\u90bb\u53e3\u8f6c\u53d1\u51fa\u53bb\uff0c\u5728\u65e5\u5e38\u6d4b\u8bd5\u4e2d\u7ecf\u5e38\u7528\u5230\u3002","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":20.015,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790"},"nextItem":{"title":"\u95ee\u9898\u63cf\u8ff0","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u4e0e\u5185\u6838\u5185\u5b58\u6cc4\u9732\u95ee\u9898"}},"content":"l2fwd \u662f dpdk \u4e8c\u5c42\u8f6c\u53d1\u793a\u4f8b\uff0c\u5b83\u4f1a\u5c06\u4e00\u4e2a\u53e3\u6536\u5230\u7684\u62a5\u6587\u7ecf\u8fc7\u76f8\u90bb\u53e3\u8f6c\u53d1\u51fa\u53bb\uff0c\u5728\u65e5\u5e38\u6d4b\u8bd5\u4e2d\u7ecf\u5e38\u7528\u5230\u3002\\n\\n\u4e0b\u9762\u6211\u4ece\u6e90\u7801\u5165\u624b\uff0c\u5206\u6790\u4e0b l2fwd \u5185\u90e8\u7684\u5de5\u4f5c\u539f\u7406\u3002\\n\\n## l2fwd \u521d\u59cb\u5316 eal \u5e76\u89e3\u6790\u53c2\u6570\\n```c\\n516 int\\n517 main(int argc, char **argv)\\n518 {\\n519     struct lcore_queue_conf *qconf;\\n520     struct rte_eth_dev_info dev_info;\\n521     int ret;\\n522     uint8_t nb_ports;\\n523     uint8_t nb_ports_available;\\n524     uint8_t portid, last_port;\\n525     unsigned lcore_id, rx_lcore_id;\\n526     unsigned nb_ports_in_mask = 0;\\n527 \\n528     /* init EAL */\\n529     ret = rte_eal_init(argc, argv);\\n530     if (ret < 0)\\n531         rte_exit(EXIT_FAILURE, \\"Invalid EAL arguments\\\\n\\");\\n532     argc -= ret;\\n533     argv += ret;\\n534 \\n535     force_quit = false;\\n536     signal(SIGINT, signal_handler);\\n537     signal(SIGTERM, signal_handler);\\n538 \\n539     /* parse application arguments (after the EAL ones) */\\n540     ret = l2fwd_parse_args(argc, argv);\\n541     if (ret < 0)\\n542         rte_exit(EXIT_FAILURE, \\"Invalid L2FWD arguments\\\\n\\");\\n```\\n\u7b2c 529 \u884c\u8c03\u7528 rte_eal_init \u521d\u59cb\u5316 eal \u73af\u5883\uff0c\u7531\u4e8e rte_eal_init \u4e2d\u4f1a\u5bf9 dpdk \u5185\u90e8\u7684\u53c2\u6570\u8fdb\u884c\u89e3\u6790\uff0cl2fwd \u9700\u8981\u8c03\u6574 argc \u4e0e argv \u7684\u4f4d\u7f6e\u4ee5\u89e3\u6790 l2fwd \u81ea\u5b9a\u4e49\u7684\u53c2\u6570\u3002\\n\\n\u7b2c 535 \u5c06 force_quit \u53d8\u91cf\u8bbe\u7f6e\u4e3a false\uff0c536 ~ 537 \u884c\u6ce8\u518c\u4e86 SIGINT \u4e0e SIGTERM \u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570 signal_handler\uff0c\u6b64\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n506 static void\\n507 signal_handler(int signum)\\n508 {\\n509     if (signum == SIGINT || signum == SIGTERM) {\\n510         printf(\\"\\\\n\\\\nSignal %d received, preparing to exit...\\\\n\\",\\n511                 signum);\\n512         force_quit = true;\\n513     }\\n514 }\\n```\\nsignal_handler \u51fd\u6570\u5411\u7ec8\u7aef\u6253\u5370\u51c6\u5907\u9000\u51fa\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u5c06 force_quit \u8bbe\u7f6e\u4e3a true\uff0c\u5f53\u6536\u53d1\u5305\u7ebf\u7a0b\u68c0\u6d4b\u5230 force_quit \u4e3a true \u540e\u4e3b\u52a8\u9000\u51fa\uff0c\u7a0b\u5e8f\u4e3b\u52a8\u7ec8\u6b62\uff0c\u9000\u51fa\u524d\u4f1a\u91ca\u653e\u5360\u7528\u7684\u63a5\u53e3\uff0c\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\uff1a\\n\\n```c\\n709     for (portid = 0; portid < nb_ports; portid++) {\\n710         if ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\\n711             continue;\\n712         printf(\\"Closing port %d...\\", portid);\\n713         rte_eth_dev_stop(portid);\\n714         rte_eth_dev_close(portid);\\n715         printf(\\" Done\\\\n\\");\\n716     }\\n717     printf(\\"Bye...\\\\n\\");\\n```\\n\u5728 for \u5faa\u73af\u4e2d\u5224\u65ad\u5f53\u524d\u63a5\u53e3\u662f\u5426\u662f l2fwd \u4f7f\u80fd\u7684\u63a5\u53e3\uff0c\u662f\u5219\u6253\u5370\u4fe1\u606f\u4fe1\u606f\u5e76 stop \u4e0e close \u63a5\u53e3\uff0c\u5426\u5219\u8df3\u8fc7\u63a5\u53e3\u3002\\n\\n\u7b2c 540 \u884c\u8c03\u7528\u7684 l2fwd_parse_args \u89e3\u6790 l2fwd \u5185\u90e8\u5b9a\u4e49\u7684\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u5728 ```--```\u4e4b\u540e\u8f93\u5165\uff0c\u4e0e dpdk \u5185\u90e8\u53c2\u6570\u9694\u79bb\u5f00\u3002\\n\\n## l2fwd_parse_args \u51fd\u6570\\nl2fwd \u652f\u6301\u4e09\u4e2a\u53c2\u6570\uff0c-p \u53c2\u6570\u4f7f\u7528\u5341\u516d\u8fdb\u5236\u63a9\u7801\u8868\u793a\u8981\u4f7f\u80fd\u7684\u63a5\u53e3\uff0c\u6bcf\u4e00\u4f4d\u8868\u793a\u4e00\u4e2a\u63a5\u53e3\uff1b-q \u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u6bcf\u4e2a\u6838\u4e0a\u7684\u961f\u5217\u6570\u76ee\uff1b-T \u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u65f6\u95f4\u5468\u671f\uff0c\u4e0d\u592a\u5e38\u7528\u3002\\n\\n```c\\n380 /* Parse the argument given in the command line of the application */\\n381 static int\\n382 l2fwd_parse_args(int argc, char **argv)\\n383 {\\n384     int opt, ret;\\n385     char **argvopt;\\n386     int option_index;\\n387     char *prgname = argv[0];\\n388     static struct option lgopts[] = {\\n389         {NULL, 0, 0, 0}\\n390     };\\n391 \\n392     argvopt = argv;\\n393 \\n394     while ((opt = getopt_long(argc, argvopt, \\"p:q:T:\\",\\n395                   lgopts, &option_index)) != EOF) {\\n396 \\n397         switch (opt) {\\n398         /* portmask */\\n399         case \'p\':\\n400             l2fwd_enabled_port_mask = l2fwd_parse_portmask(optarg);\\n401             if (l2fwd_enabled_port_mask == 0) {\\n402                 printf(\\"invalid portmask\\\\n\\");\\n403                 l2fwd_usage(prgname);\\n404                 return -1;\\n405             }\\n406             break;\\n407 \\n408         /* nqueue */\\n409         case \'q\':\\n410             l2fwd_rx_queue_per_lcore = l2fwd_parse_nqueue(optarg);\\n411             if (l2fwd_rx_queue_per_lcore == 0) {\\n412                 printf(\\"invalid queue number\\\\n\\");\\n413                 l2fwd_usage(prgname);\\n414                 return -1;\\n415             }\\n416             break;\\n417 \\n418         /* timer period */\\n419         case \'T\':\\n420             timer_period = l2fwd_parse_timer_period(optarg) * 1000 * TIMER_MILLISECOND;\\n421             if (timer_period < 0) {\\n422                 printf(\\"invalid timer period\\\\n\\");\\n423                 l2fwd_usage(prgname);\\n424                 return -1;\\n425             }   \\n426             break;\\n427             \\n428         /* long options */\\n429         case 0:\\n430             l2fwd_usage(prgname);\\n431             return -1;\\n432             \\n433         default:\\n434             l2fwd_usage(prgname);\\n435             return -1;\\n436         }   \\n437     }   \\n438 \\n439     if (optind >= 0)\\n440         argv[optind-1] = prgname;\\n441 \\n442     ret = optind-1;\\n443     optind = 0; /* reset getopt lib */\\n444     return ret;\\n```\\n\u7b2c 532 \u4e0e 533 \u884c\u5bf9 argc \u4e0e argv \u8fdb\u884c\u4e86\u8c03\u6574\uff0cl2fwd \u5f97\u4ee5\u6b63\u5e38\u89e3\u6790\u5185\u90e8\u53c2\u6570\u3002l2fwd_parse_args \u8c03\u7528\u5173\u7cfb\u89c1\u4e0b\u56fe\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210419211237930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\\nl2fwd \u901a\u8fc7 getopt_long \u4f9d\u6b21\u89e3\u6790\u6bcf\u4e2a\u53c2\u6570\uff0coptarg \u6307\u5411\u53c2\u6570\u7684\u503c\uff0c\u901a\u8fc7\u8c03\u7528 strtoul\u3001strtol \u6765\u89e3\u6790\u53c2\u6570\u503c\u5e76\u5b58\u50a8\u5230\u76f8\u5e94\u7684\u53d8\u91cf\u4e2d\u3002\\n\\n\u53c2\u6570\u89e3\u6790\u5b8c\u6210\u540e\uff0cl2fwd_enabled_port_mask \u53d8\u91cf\u4fdd\u5b58 l2fwd \u7a0b\u5e8f\u8981\u4f7f\u80fd\u7684\u63a5\u53e3\uff0cl2fwd_rx_queue_per_lcore \u53d8\u91cf\u4fdd\u5b58\u6bcf\u4e00\u4e2a\u903b\u8f91\u6838\u4e0a\u7684 rx \u961f\u5217\u6570\u76ee\uff0ctimer_period \u4fdd\u5b58 drain \u7684\u65f6\u95f4\u3002\\n\\n## \u521b\u5efa pktmbuf pool \u5e76 reset l2fwd_dst_ports \u7ed3\u6784\u4f53\\n```c\\n544     /* create the mbuf pool */\\n545     l2fwd_pktmbuf_pool = rte_pktmbuf_pool_create(\\"mbuf_pool\\", NB_MBUF, 32,\\n546         0, RTE_MBUF_DEFAULT_BUF_SIZE, rte_socket_id());\\n547     if (l2fwd_pktmbuf_pool == NULL)\\n548         rte_exit(EXIT_FAILURE, \\"Cannot init mbuf pool\\\\n\\");\\n549 \\n550     nb_ports = rte_eth_dev_count();\\n551     if (nb_ports == 0)\\n552         rte_exit(EXIT_FAILURE, \\"No Ethernet ports - bye\\\\n\\");\\n553 \\n554     if (nb_ports > RTE_MAX_ETHPORTS)\\n555         nb_ports = RTE_MAX_ETHPORTS;\\n556 \\n557     /* reset l2fwd_dst_ports */\\n558     for (portid = 0; portid < RTE_MAX_ETHPORTS; portid++)\\n559         l2fwd_dst_ports[portid] = 0;\\n560     last_port = 0;\\n```\\n\u7b2c 545 \u884c\u521b\u5efa\u4e86 l2fwd \u7684 pktmbuf \u5185\u5b58\u6c60\uff0cpktmbuf \u7edf\u4e00\u5728 pktmbuf \u5185\u5b58\u6c60\u4e2d\u5206\u914d\u56de\u6536\uff0c\u5f53\u521b\u5efa\u5931\u8d25\u540e l2fwd \u6253\u5370\u5931\u8d25\u4fe1\u606f\u5e76\u9000\u51fa\u3002\\n\\n550~556 \u884c\u83b7\u53d6\u53ef\u7528\u7684\u63a5\u53e3\u6570\u91cf\uff0c\u5f53\u6570\u91cf\u4e3a 0 \u65f6\u6253\u5370\u5931\u8d25\u4fe1\u606f\u540e\u9000\u51fa\uff0c\u5f53\u6570\u91cf\u5927\u4e8e config \u4e2d\u914d\u7f6e\u7684\u6700\u5927\u63a5\u53e3\u6570\u76ee\u65f6\uff0c\u5c06 nb_ports \u91cd\u7f6e\u4e3a\u652f\u6301\u7684\u6700\u5927\u63a5\u53e3\u6570\u76ee\u3002\\n\\n557~560 \u884c reset \u4e86 l2fwd_dst_ports\uff0c\u6b64\u6570\u7ec4\u7528\u4e8e\u4fdd\u5b58\u76f8\u90bb\u8f6c\u53d1\u63a5\u53e3\u7684\u5173\u7cfb\uff0c\u5728\u6536\u53d1\u5305\u7ebf\u7a0b\u4e2d\u88ab\u8bbf\u95ee\u7528\u4e8e\u786e\u5b9a\u53d1\u5305\u4f7f\u7528\u7684\u7aef\u53e3\u53f7\u3002\\n\\n## \u521d\u59cb\u5316\u8f6c\u53d1\u7aef\u53e3\u5173\u7cfb\u6570\u7ec4\\n```c\\n562     /*\\n563      * Each logical core is assigned a dedicated TX queue on each port.\\n564      */\\n565     for (portid = 0; portid < nb_ports; portid++) {\\n566         /* skip ports that are not enabled */\\n567         if ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\\n568             continue;\\n569 \\n570         if (nb_ports_in_mask % 2) {\\n571             l2fwd_dst_ports[portid] = last_port;\\n572             l2fwd_dst_ports[last_port] = portid;\\n573         }\\n574         else\\n575             last_port = portid;\\n576 \\n577         nb_ports_in_mask++;\\n578 \\n579         rte_eth_dev_info_get(portid, &dev_info);\\n580     }\\n581     if (nb_ports_in_mask % 2) {\\n582         printf(\\"Notice: odd number of ports in portmask.\\\\n\\");\\n583         l2fwd_dst_ports[last_port] = last_port;\\n584     }\\n```\\n\\n565~584 \u5b8c\u6210 l2fwd_dst_ports \u7aef\u53e3\u7684\u5173\u8054\u8868\uff0c**\u786e\u5b9a\u6bcf\u4e2a\u4f7f\u80fd\u7aef\u53e3\u7684\u53d1\u5305\u7aef\u53e3**\u3002\u5f53\u4f7f\u80fd\u7684\u7aef\u53e3\u6570\u76ee\u4e3a\u5076\u6570\u65f6\uff0c**\u4e0a\u4e00\u4e2a\u53e3\u4f7f\u7528\u4e0b\u4e00\u4e2a\u53e3\u53d1\u5305\uff0c\u4e0b\u4e00\u4e2a\u53e3\u4f7f\u7528\u4e0a\u4e00\u4e2a\u53e3\u53d1\u5305**\uff0c\u5f53\u4f7f\u80fd\u7684\u7aef\u53e3\u6570\u76ee\u4e3a\u5947\u6570\u65f6\uff0c**\u6700\u540e\u7684\u5355\u4e2a\u53e3\u53d1\u5305\u4f7f\u7528\u5f53\u524d\u53e3**\u3002\\n\\n## \u521d\u59cb\u5316\u6bcf\u4e2a lcore \u4e0a\u7ed1\u5b9a\u7684\u6536\u5305\u7aef\u53e3\u5173\u7cfb\u6570\u7ec4\\nl2fwd \u652f\u6301\u5728\u5355\u4e2a lcore \u4e0a\u7ed1\u5b9a\u591a\u4e2a\u53e3\u8fdb\u884c\u6536\u5305\uff0c\u4e3a\u6b64 l2fwd \u5b9a\u4e49\u4e86 lcore_queue_conf \u7ed3\u6784\u4f53\uff0c\u6b64\u7ed3\u6784\u4f53\u7684\u6570\u91cf\u4e3a\u7cfb\u7edf\u652f\u6301\u7684 lcore \u7684\u6700\u5927\u503c\u3002\\n\\n\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```\uff43\\n101 static unsigned int l2fwd_rx_queue_per_lcore = 1;\\n102 \\n103 #define MAX_RX_QUEUE_PER_LCORE 16\\n104 #define MAX_TX_QUEUE_PER_PORT 16\\n105 struct lcore_queue_conf {\\n106     unsigned n_rx_port;\\n107     unsigned rx_port_list[MAX_RX_QUEUE_PER_LCORE];\\n108 } __rte_cache_aligned;\\n109 struct lcore_queue_conf lcore_queue_conf[RTE_MAX_LCORE];  \\n```\\n\\nn_rx_port \u4ee3\u8868\u4e00\u4e2a lcore_queue_conf \u4e2d\u7ed1\u5b9a\u7684\u6536\u5305\u7aef\u53e3\u6570\u76ee\uff0crx_port_list \u4e2d\u4fdd\u5b58 lcore_queue_conf \u4e2d\u7684\u6bcf\u4e00\u4e2a\u6536\u5305\u7aef\u53e3\u7684 portid\u3002\\n\\n\u7b2c 109 \u884c\u5b9a\u4e49 RTE_MAX_LCORE \u7684\u4f5c\u7528\u5728\u4e8e\u901a\u8fc7\u4f7f\u7528 lcore_id \u8fd9\u79cd\u6bcf\u7ebf\u7a0b\u6570\u636e\u6765\u9694\u79bb\u6bcf\u4e2a lcore \u7684 queue_conf \u914d\u7f6e\u3002\\n\\nlcore_queue_conf \u521d\u59cb\u5316\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n586     rx_lcore_id = 0;\\n587     qconf = NULL;\\n588 \\n589     /* Initialize the port/queue configuration of each logical core */\\n590     for (portid = 0; portid < nb_ports; portid++) {\\n591         /* skip ports that are not enabled */\\n592         if ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\\n593             continue;\\n594 \\n595         /* get the lcore_id for this port */\\n596         while (rte_lcore_is_enabled(rx_lcore_id) == 0 ||\\n597                lcore_queue_conf[rx_lcore_id].n_rx_port ==\\n598                l2fwd_rx_queue_per_lcore) {\\n599             rx_lcore_id++;\\n600             if (rx_lcore_id >= RTE_MAX_LCORE)\\n601                 rte_exit(EXIT_FAILURE, \\"Not enough cores\\\\n\\");\\n602         }\\n603 \\n604         if (qconf != &lcore_queue_conf[rx_lcore_id])\\n605             /* Assigned a new logical core in the loop above. */\\n606             qconf = &lcore_queue_conf[rx_lcore_id];\\n607 \\n608         qconf->rx_port_list[qconf->n_rx_port] = portid;\\n609         qconf->n_rx_port++;\\n610         printf(\\"Lcore %u: RX port %u\\\\n\\", rx_lcore_id, (unsigned) portid);\\n611     }\\n612 \\n613     nb_ports_available = nb_ports;\\n```\\n\\n596 ~ 603 \u884c\u4e3a\u5f53\u524d port \u627e\u5230\u4e00\u4e2a\u53ef\u7528\u7684 lcore_id\uff0c\u5f53 lcore_id \u88ab\u4f7f\u80fd\uff0c\u4e14\u6b64 lcore_id \u5bf9\u5e94\u7684 queue_conf \u4e2d\u7ed1\u5b9a\u7684\u6536\u5305\u63a5\u53e3\u6570\u76ee\u4e0d\u7b49\u4e8e l2fwd_rx_queue_per_lcore\uff08\u89e3\u6790\u53c2\u6570\u8bbe\u5b9a\u7684\u6bcf\u4e2a\u6838\u4e0a\u7684\u961f\u5217\u6570\u76ee\uff09\u65f6\uff0c\u6b64 lcore_id \u53ef\u7528\u3002\\n\\n\u4e0d\u6ee1\u8db3\u5982\u4e0a\u8981\u6c42\u65f6\uff0clcore_id \u9012\u589e\uff0c\u5f53 lcore_id \u7684\u6570\u76ee\u8d85\u8fc7\u7cfb\u7edf\u652f\u6301\u7684\u6700\u5927 lcore \u6570\u76ee\u65f6\uff0c\u7a0b\u5e8f\u6253\u5370\u5f02\u5e38\u4fe1\u606f\u5e76\u9000\u51fa\u3002\\n\\n604~606 \u884c\u83b7\u53d6\u5f53\u524d\u63a5\u53e3\u4f7f\u7528\u7684 lcore \u5bf9\u5e94\u7684 lcore_queue_conf \u7ed3\u6784\u4f53\u5730\u5740\uff0c608~610 \u884c\u5c06\u5f53\u524d\u7684 portid \u8d4b\u503c\u7ed9 lcore_queue_conf \u7ed3\u6784\u4f53\u4e2d rx_port_list \u6570\u7ec4\u4e2d\u7684\u5bf9\u5e94\u9879\u76ee\uff0c\u7136\u540e\u5bf9 n_rx_port \u52a0 1\uff0c\u8868\u793a\u6b64 lcore_queue_conf \u4e2d\u7ed1\u5b9a\u7684\u7aef\u53e3\u6570\u76ee\u53c8\u589e\u52a0\u4e86\u4e00\u4e2a\u3002\\n\\nl2fwd \u9ed8\u8ba4\u5728\u4e00\u4e2a lcore \u4e0a\u7ed1\u5b9a\u4e00\u4e2a\u63a5\u53e3\uff0c\u8fd9\u6837\u4f7f\u80fd\u4e86\u51e0\u4e2a\u63a5\u53e3\u5c31\u9700\u8981\u76f8\u5e94\u6570\u76ee\u7684 lcore\uff0c\u5f53 lcore \u4e0d\u8db3\u65f6\u5c31\u4f1a\u56e0\u4e3a\u65e0\u6cd5\u5206\u914d lcore \u800c\u9000\u51fa\u3002\\n\\n## \u521d\u59cb\u5316\u6bcf\u4e00\u4e2a\u4f7f\u80fd\u7684\u63a5\u53e3\\n```c\\n613     nb_ports_available = nb_ports;\\n614\\n615     /* Initialise each port */\\n616     for (portid = 0; portid < nb_ports; portid++) {\\n617         /* skip ports that are not enabled */\\n618         if ((l2fwd_enabled_port_mask & (1 << portid)) == 0) {\\n619             printf(\\"Skipping disabled port %u\\\\n\\", (unsigned) portid);\\n620             nb_ports_available--;\\n621             continue;\\n622         }\\n623         /* init port */\\n624         printf(\\"Initializing port %u... \\", (unsigned) portid);\\n625         fflush(stdout);\\n626         ret = rte_eth_dev_configure(portid, 1, 1, &port_conf);\\n627         if (ret < 0)\\n628             rte_exit(EXIT_FAILURE, \\"Cannot configure device: err=%d, port=%u\\\\n\\",\\n629                   ret, (unsigned) portid);\\n630 \\n631         rte_eth_macaddr_get(portid,&l2fwd_ports_eth_addr[portid]);\\n632 \\n633         /* init one RX queue */\\n634         fflush(stdout);\\n635         ret = rte_eth_rx_queue_setup(portid, 0, nb_rxd,\\n636                          rte_eth_dev_socket_id(portid),\\n637                          NULL,\\n638                          l2fwd_pktmbuf_pool);\\n639         if (ret < 0)\\n640             rte_exit(EXIT_FAILURE, \\"rte_eth_rx_queue_setup:err=%d, port=%u\\\\n\\",\\n641                   ret, (unsigned) portid);\\n642 \\n643         /* init one TX queue on each port */\\n644         fflush(stdout);\\n645         ret = rte_eth_tx_queue_setup(portid, 0, nb_txd,\\n646                 rte_eth_dev_socket_id(portid),\\n647                 NULL);\\n648         if (ret < 0)\\n649             rte_exit(EXIT_FAILURE, \\"rte_eth_tx_queue_setup:err=%d, port=%u\\\\n\\",\\n650                 ret, (unsigned) portid);\\n651 \\n652         /* Initialize TX buffers */\\n653         tx_buffer[portid] = rte_zmalloc_socket(\\"tx_buffer\\",\\n654                 RTE_ETH_TX_BUFFER_SIZE(MAX_PKT_BURST), 0,\\n655                 rte_eth_dev_socket_id(portid));\\n656         if (tx_buffer[portid] == NULL)                                    \\n660         rte_eth_tx_buffer_init(tx_buffer[portid], MAX_PKT_BURST);\\n661 \\n662         ret = rte_eth_tx_buffer_set_err_callback(tx_buffer[portid],\\n663                 rte_eth_tx_buffer_count_callback,\\n664                 &port_statistics[portid].dropped);\\n665         if (ret < 0)\\n666                 rte_exit(EXIT_FAILURE, \\"Cannot set error callback for \\"\\n667                         \\"tx buffer on port %u\\\\n\\", (unsigned) portid);\\n668 \\n669         /* Start device */\\n670         ret = rte_eth_dev_start(portid);\\n671         if (ret < 0)\\n672             rte_exit(EXIT_FAILURE, \\"rte_eth_dev_start:err=%d, port=%u\\\\n\\",\\n673                   ret, (unsigned) portid);\\n674 \\n675         printf(\\"done: \\\\n\\");\\n676 \\n677         rte_eth_promiscuous_enable(portid);\\n678 \\n679         printf(\\"Port %u, MAC address: %02X:%02X:%02X:%02X:%02X:%02X\\\\n\\\\n\\",\\n680                 (unsigned) portid,\\n681                 l2fwd_ports_eth_addr[portid].addr_bytes[0],\\n682                 l2fwd_ports_eth_addr[portid].addr_bytes[1],\\n683                 l2fwd_ports_eth_addr[portid].addr_bytes[2],\\n684                 l2fwd_ports_eth_addr[portid].addr_bytes[3],\\n685                 l2fwd_ports_eth_addr[portid].addr_bytes[4],\\n686                 l2fwd_ports_eth_addr[portid].addr_bytes[5]);\\n687 \\n688         /* initialize port stats */\\n689         memset(&port_statistics, 0, sizeof(port_statistics));\\n690     }\\n```\\n\\n\u7b2c 613 \u884c\u5c06 nb_port_available \u53d8\u91cf\u7684\u503c\u8bbe\u7f6e\u4e3a nb_ports\uff0c\u5176\u503c\u4ee3\u8868 dpdk \u53ef\u7528\u7684\u63a5\u53e3\u6570\u76ee\uff0c\u68c0\u6d4b\u5230\u4e00\u4e2a dpdk \u53ef\u7528\u800c l2fwd \u5374\u6ca1\u4f7f\u80fd\u7684\u63a5\u53e3\uff0c\u90fd\u5c06 nb_port_available \u7684\u503c\u51cf\u4e00\uff0c\u5f53 for \u5faa\u73af\u904d\u5386\u5b8c\u6210\u540e\uff0c\u5224\u65ad nb_port_available \u7684\u503c\uff0c\u5982\u679c\u53d8\u4e3a 0\uff0c\u8bf4\u660e\u6ca1\u6709\u4f7f\u80fd\u4e00\u4e2a\u63a5\u53e3\uff0c\u6253\u5370\u62a5\u9519\u4fe1\u606f\u5e76\u9000\u51fa\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n692     if (!nb_ports_available) {\\n693         rte_exit(EXIT_FAILURE,\\n694             \\"All available ports are disabled. Please set portmask.\\\\n\\");\\n695     }   \\n```\\n\u5f53\u81f3\u5c11\u6709\u4e00\u4e2a\u63a5\u53e3\u4f7f\u80fd\u65f6\uff0c623 \u884c\u4e4b\u540e\u7684\u903b\u8f91\u4f1a\u88ab\u6267\u884c\u3002626 \u884c\u8c03\u7528 rte_eth_dev_configure \u914d\u7f6e\u4f7f\u7528\u4e00\u4e2a\u6536\u53d1\u961f\u5217\uff0c\u4e14\u8bbe\u7f6e port_conf\u3002\\n\\n631 \u884c\u83b7\u53d6\u5f53\u524d\u63a5\u53e3\u7684 mac \u5730\u5740\u5e76\u586b\u5145\u5230 l2fwd_ports_eth_addr \u6570\u7ec4\u4e2d\u5f53\u524d\u63a5\u53e3\u5360\u7528\u7684\u8868\u9879\u4e2d\uff0c\u8fd9\u4e00 mac \u5730\u5740\u5728 l2fwd_simple_forward \u51fd\u6570\u4fee\u6539\u62a5\u6587\u7684\u6e90 mac \u5730\u5740\u65f6\u88ab\u4f7f\u7528\uff0c\u662f\u5178\u578b\u7684\u7a7a\u95f4\u6362\u65f6\u95f4\u7684\u6848\u4f8b\u3002\\n\\n633 \uff5e650 \u884c\u521d\u59cb\u5316 rx queue \u4e0e tx queue\uff0c\u8bbe\u7f6e\u6bcf\u4e2a queue \u4e0a\u7684\u63cf\u8ff0\u7b26\u6570\u76ee\u53ca\u4f7f\u7528\u7684 pktmbuf \u5185\u5b58\u6c60\uff0c\u5f53\u8bbe\u7f6e\u5931\u8d25\u65f6\u6253\u5370\u5f02\u5e38\u4fe1\u606f\u540e\u9000\u51fa\u3002\\n\\n652~668 \u884c\u521d\u59cb\u5316\u5f53\u524d port \u7684 rte_eth_dev_tx_buffer \u7ed3\u6784\uff0c\u6b64\u7ed3\u6784\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```\uff43\\nstruct rte_eth_dev_tx_buffer {\\n\\tbuffer_tx_error_fn error_callback;\\n\\tvoid *error_userdata;\\n\\tuint16_t size;           /**< Size of buffer for buffered tx */\\n\\tuint16_t length;         /**< Number of packets in the array */\\n\\tstruct rte_mbuf *pkts[];\\n\\t/**< Pending packets to be sent on explicit flush or when full */\\n};\\n```\\n\\n\u53ef\u4ee5\u770b\u5230 pkts \u6570\u7ec4\u6ca1\u6709\u8bbe\u5b9a\u5927\u5c0f\uff0c\u7b2c 653 \u884c\u8c03\u7528 rte_zmalloc_socket \u7684\u65f6\u5019\uff0c\u4f20\u9012\u7684\u5927\u5c0f\u4e3a RTE_ETH_TX_BUFFER_SIZE(MAX_PKT_BURST)\u3002\\n\\nRTE_ETH_TX_BUFFER_SIZE \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n#define RTE_ETH_TX_BUFFER_SIZE(sz) \\\\\\n\\t(sizeof(struct rte_eth_dev_tx_buffer) + (sz) * sizeof(struct rte_mbuf *))\\n\\n\u53ef\u4ee5\u53d1\u73b0\u5b83\u989d\u5916\u521b\u5efa\u4e86 MAX_PKT_BURST \u4e2a\u6307\u9488\uff0cpkts \u5c31\u6307\u5411\u8fd9\u4e00\u989d\u5916\u5185\u5b58\u533a\u57df\uff0c\u80fd\u591f\u76f4\u63a5\u83b7\u53d6\u586b\u5145\u7684 mbuf \u5730\u5740\u3002\\n\\n\u7b2c 660 \u884c\u521d\u59cb\u5316 tx_buffer\uff0c\u6ce8\u610f\u6b64\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u6307\u5b9a\u4e86\u4e00\u4e2a\u9600\u503c\uff0c**\u5f53 tx_buffer \u4e2d\u7684\u5305\u6570\u76ee\u4f4e\u4e8e\u6b64\u9600\u503c\u65f6 rte_eth_tx_buffer \u4e0d\u4f1a\u7acb\u523b\u53d1\u5305\u51fa\u53bb\uff0c\u7c7b\u4f3c\u4e8e\u7f13\u51b2\u529f\u80fd**\u3002 \\n\\n\u540c\u65f6\u9700\u8981\u8bf4\u660e\u7684\u662f rte_eth_tx_buffer_init \u4f1a\u6ce8\u518c\u4e00\u4e2a\u9ed8\u8ba4\u7684\u56de\u8c03\u51fd\u6570 rte_eth_tx_buffer_drop_callback\uff0c\u6b64\u56de\u8c03\u51fd\u6570\u4f1a**\u8c03\u7528 rte_pktmbuf_free \u5c06\u6ca1\u6709\u6210\u529f\u53d1\u9001\u51fa\u53bb\u7684\u5305\u91ca\u653e\u6389\uff0c\u7f3a\u5c11\u8fd9\u4e00\u8fc7\u7a0b\u4f1a\u5bfc\u81f4 mbuf \u6cc4\u9732\uff01**\\n\\n662~668 \u884c\u91cd\u65b0\u6ce8\u518c\u4e86\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u6b64\u56de\u8c03\u51fd\u6570\u5728\u8c03\u7528 rte_pktmbuf_free \u91ca\u653e\u672a\u6210\u529f\u53d1\u9001\u7684\u62a5\u6587\u540e\u4f1a\u5c06\u672a\u6210\u529f\u53d1\u9001\u7684\u62a5\u6587\u6570\u76ee\u52a0\u5230\u6bcf\u4e2a\u63a5\u53e3\u7684 dropped \u5b57\u6bb5\u4e0a\u3002\\n\\n669~689 \u884c\u9996\u5148 start \u63a5\u53e3\uff0c\u7136\u540e\u5f00\u542f\u6df7\u6dc6\u6a21\u5f0f\uff0c\u8f93\u51fa\u5f53\u524d\u63a5\u53e3\u7684 mac \u5730\u5740\u5e76\u6e05\u7a7a l2fwd \u7684\u63a5\u53e3\u7edf\u8ba1\u6570\u636e\u3002\\n\\nstart \u63a5\u53e3\u65f6\u4f1a up \u63a5\u53e3\uff0c\u53ea\u6709\u5f53\u63a5\u53e3\u5904\u4e8e up \u72b6\u6001\u624d\u80fd\u6b63\u5e38\u6536\u53d1\u5305\uff0c\u5728\u6536\u53d1\u5305\u4e4b\u524d\u9700\u8981\u68c0\u67e5\u63a5\u53e3\u94fe\u8def\u72b6\u6001\u3002\\n\\n```c\\n697     check_all_ports_link_status(nb_ports, l2fwd_enabled_port_mask);\\n```\\n697 \u884c\u5c31\u662f\u68c0\u67e5\u63a5\u53e3 link \u72b6\u6001\u7684\u903b\u8f91\uff0ccheck_all_ports_link_status \u4f1a\u5728 9s \u5185\u4e0d\u65ad\u8c03\u7528 rte_eth_link_get_nowait \u83b7\u53d6\u6bcf\u4e00\u4e2a\u63a5\u53e3\u7684 link \u72b6\u6001\uff0c\u5f53\u6240\u6709\u4f7f\u80fd\u63a5\u53e3\u90fd up\u3001timeout \u65f6\uff0c\u51fd\u6570\u4f1a\u8bbe\u7f6e print_flag \u53d8\u91cf\u4e3a 1\uff0c\u6253\u5370\u63a5\u53e3\u72b6\u6001\u4fe1\u606f\u540e\u8fd4\u56de\u3002\\n\\n## \u5728\u6bcf\u4e2a lcore \u4e0a\u8fd0\u884c l2fwd_launch_one_lcore \u51fd\u6570\\n```c\\n699     ret = 0;\\n700     /* launch per-lcore init on every lcore */\\n701     rte_eal_mp_remote_launch(l2fwd_launch_one_lcore, NULL, CALL_MASTER);\\n702     RTE_LCORE_FOREACH_SLAVE(lcore_id) {\\n703         if (rte_eal_wait_lcore(lcore_id) < 0) {\\n704             ret = -1;\\n705             break;\\n706         }\\n707     }\\n```\\n701 \u884c\u8c03\u7528 rte_eal_mp_remote_launch \u5728\u6bcf\u4e2a\u4f7f\u80fd\u7684 lcore \u4e0a\u521d\u59cb\u5316\u5c06\u8981\u8fd0\u884c\u7684\u51fd\u6570\uff0c\u8bbe\u5b9a\u6bcf\u4e2a lcore \u5bf9\u5e94\u7684 lcore_config \u6570\u636e\u7ed3\u6784\uff0c\u5e76\u7acb\u5373\u6267\u884c\u3002\\n\\n702~707 \u884c\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a slave lcore \u7ebf\u7a0b\u7684\u72b6\u6001\uff0c\u5f53 rte_eal_wait_lcore \u51fd\u6570\u8fd4\u56de\u503c\u5c0f\u4e8e 0 \u65f6\u8df3\u51fa\u5faa\u73af\u3002\\n\\n## \u6536\u53d1\u5305\u7ebf\u7a0b\u7684\u6267\u884c\u8fc7\u7a0b\\n```c\\n311 static int\\n312 l2fwd_launch_one_lcore(__attribute__((unused)) void *dummy)                                                                                                              \\n313 {\\n314     l2fwd_main_loop();\\n315     return 0;\\n316 }\\n```\\nl2fwd_lanuch_one_lcore \u4f1a\u5728\u6bcf\u4e00\u4e2a\u6536\u53d1\u5305\u7ebf\u7a0b\u4e0a\u6267\u884c\uff0c\u5b83\u901a\u8fc7\u8c03\u7528 l2fwd_main_loop \u5b8c\u6210\u5de5\u4f5c\u3002\\n\\n```\uff43\\n213 /* main processing loop */\\n214 static void\\n215 l2fwd_main_loop(void)\\n216 {\\n217     struct rte_mbuf *pkts_burst[MAX_PKT_BURST];\\n218     struct rte_mbuf *m;\\n219     int sent;\\n220     unsigned lcore_id;\\n221     uint64_t prev_tsc, diff_tsc, cur_tsc, timer_tsc;\\n222     unsigned i, j, portid, nb_rx;\\n223     struct lcore_queue_conf *qconf;\\n224     const uint64_t drain_tsc = (rte_get_tsc_hz() + US_PER_S - 1) / US_PER_S *\\n225             BURST_TX_DRAIN_US;\\n226     struct rte_eth_dev_tx_buffer *buffer;\\n227 \\n228     prev_tsc = 0;\\n229     timer_tsc = 0;\\n230 \\n231     lcore_id = rte_lcore_id();\\n232     qconf = &lcore_queue_conf[lcore_id];\\n233 \\n234     if (qconf->n_rx_port == 0) {\\n235         RTE_LOG(INFO, L2FWD, \\"lcore %u has nothing to do\\\\n\\", lcore_id);\\n236         return;\\n237     }\\n238 \\n239     RTE_LOG(INFO, L2FWD, \\"entering main loop on lcore %u\\\\n\\", lcore_id);\\n240 \\n241     for (i = 0; i < qconf->n_rx_port; i++) {\\n242 \\n243         portid = qconf->rx_port_list[i];\\n244         RTE_LOG(INFO, L2FWD, \\" -- lcoreid=%u portid=%u\\\\n\\", lcore_id,\\n245             portid);\\n246 \\n247     }\\n```\\n231 \u884c\u83b7\u53d6\u5230\u5f53\u524d\u7ebf\u7a0b\u7684 lcore_id\uff0c232 \u884c\u4f7f\u7528\u83b7\u53d6\u5230\u7684 lcore_id\uff0c\u83b7\u53d6\u5230 lcore_queue_conf \u4e2d\u7684\u8868\u9879\u3002\\n\\n234 \u884c\u5224\u65ad\u5f53\u524d lcore \u7ed1\u5b9a\u7684\u6536\u5305\u7aef\u53e3\u6570\u76ee\uff0c\u4e3a 0 \u8868\u793a\u4e0d\u6536\u5305\uff0c\u8fd9\u4e00\u822c\u662f master \u7ebf\u7a0b\u3002\\n\\n241~247 \u884c\u6253\u5370\u5f53\u524d lcore \u7ed1\u5b9a\u7684\u6bcf\u4e2a\u7aef\u53e3\u53f7\u7684 port_id\u3002\u5b8c\u6210\u4e86\u8fd9\u4e9b\u64cd\u4f5c\u540e\uff0c\u8fdb\u5165\u5230 while \u5faa\u73af\u4e2d\uff0c\u6ce8\u610f\u5faa\u73af\u7ec8\u6b62\u6761\u4ef6\u4e3a force_quit \u4e3a true\uff0c\u5f53 l2fwd \u6536\u5230 SIGINT\u3001SIGTERM \u4fe1\u53f7\u65f6\u5c31\u4f1a\u5c06 force_quit \u8bbe\u7f6e\u4e3a true\uff0c\u6536\u53d1\u5305\u7ebf\u7a0b\u68c0\u6d4b\u5230\u540e\u5c31\u4f1a\u9000\u51fa\u5faa\u73af\u3002\\n\\n```c\\n249     while (!force_quit) {\\n250 \\n251         cur_tsc = rte_rdtsc();\\n252 \\n253         /*\\n254          * TX burst queue drain\\n255          */\\n256         diff_tsc = cur_tsc - prev_tsc;\\n257         if (unlikely(diff_tsc > drain_tsc)) {\\n258 \\n259             for (i = 0; i < qconf->n_rx_port; i++) {\\n260 \\n261                 portid = l2fwd_dst_ports[qconf->rx_port_list[i]];\\n262                 buffer = tx_buffer[portid];\\n263 \\n264                 sent = rte_eth_tx_buffer_flush(portid, 0, buffer);\\n265                 if (sent)\\n266                     port_statistics[portid].tx += sent;\\n267 \\n268             }\\n269 \\n270             /* if timer is enabled */\\n271             if (timer_period > 0) {\\n272 \\n273                 /* advance the timer */\\n274                 timer_tsc += diff_tsc;\\n275 \\n276                 /* if timer has reached its timeout */\\n277                 if (unlikely(timer_tsc >= (uint64_t) timer_period)) {\\n278 \\n279                     /* do this only on master core */\\n280                     if (lcore_id == rte_get_master_lcore()) {\\n281                         print_stats();\\n282                         /* reset the timer */\\n283                         timer_tsc = 0;\\n284                     }\\n285                 }\\n286             }\\n287 \\n288             prev_tsc = cur_tsc;\\n289         }\\n291         /*\\n292          * Read packet from RX queues\\n293          */\\n294         for (i = 0; i < qconf->n_rx_port; i++) {\\n295 \\n296             portid = qconf->rx_port_list[i];\\n297             nb_rx = rte_eth_rx_burst((uint8_t) portid, 0,\\n298                          pkts_burst, MAX_PKT_BURST);\\n299 \\n300             port_statistics[portid].rx += nb_rx;\\n301 \\n302             for (j = 0; j < nb_rx; j++) {\\n303                 m = pkts_burst[j];\\n304                 rte_prefetch0(rte_pktmbuf_mtod(m, void *));\\n305                 l2fwd_simple_forward(m, portid);\\n306             }\\n307         }\\n308     }\\n309 }\\n```\\n\u6536\u53d1\u5305\u7ebf\u7a0b\u7b2c\u4e00\u6b21\u6267\u884c\u65f6\u4f1a\u5148\u6267\u884c 294~307 \u884c\u8fd9\u4e2a\u5faa\u73af\uff0c\u6b64\u5faa\u73af\u4f9d\u6b21\u5728\u5f53\u524d lcore \u7ed1\u5b9a\u7684\u7aef\u53e3\u4e0a\u6536\u5305\uff0c\u6536\u5230\u5305\u540e\u5148\u589e\u52a0 port_statistics \u4e2d\u7684 rx \u7edf\u8ba1\uff0c\u7136\u540e\u5bf9\u6536\u5230\u7684\u6bcf\u4e2a\u62a5\u6587\u8c03\u7528 l2fwd_simple_forward\u3002\\n\\n```c\\n188 static void\\n189 l2fwd_simple_forward(struct rte_mbuf *m, unsigned portid)\\n190 {\\n191     struct ether_hdr *eth;\\n192     void *tmp;\\n193     unsigned dst_port;\\n194     int sent;\\n195     struct rte_eth_dev_tx_buffer *buffer;\\n196 \\n197     dst_port = l2fwd_dst_ports[portid];\\n198     eth = rte_pktmbuf_mtod(m, struct ether_hdr *);\\n199 \\n200     /* 02:00:00:00:00:xx */\\n201     tmp = &eth->d_addr.addr_bytes[0];\\n202     *((uint64_t *)tmp) = 0x000000000002 + ((uint64_t)dst_port << 40);\\n203 \\n204     /* src addr */\\n205     ether_addr_copy(&l2fwd_ports_eth_addr[dst_port], &eth->s_addr);\\n206 \\n207     buffer = tx_buffer[dst_port];\\n208     sent = rte_eth_tx_buffer(dst_port, 0, buffer, m);\\n209     if (sent)\\n210         port_statistics[dst_port].tx += sent;\\n211 }\\n```\\nl2fwd_simple_forward \u51fd\u6570\u4e2d\u9996\u5148\u83b7\u53d6\u5f53\u524d\u63a5\u53e3\u7684\u8f6c\u53d1\u63a5\u53e3\uff0c\u7136\u540e\u5c06\u8f6c\u53d1\u63a5\u53e3\u7684 mac \u5730\u5740\u586b\u5145\u5230\u62a5\u6587\u7684\u6e90 mac \u5730\u5740\u5904\u3002\\n\\n\u586b\u5145\u5b8c\u6210\u7684\u62a5\u6587\u901a\u8fc7\u8c03\u7528 rte_eth_tx_buffer \u6295\u9012\u5230\u5f53\u524d lcore \u7684 tx_buffer \u4e2d\uff0c\u5f53 tx_buffer \u4e2d\u7684\u62a5\u6587\u6570\u76ee\u5c0f\u4e8e\u95e8\u9650\u503c\uff0832\uff09\u7684\u65f6\u5019\u62a5\u6587\u4e0d\u4f1a\u7acb\u523b\u53d1\u9001\u51fa\u53bb\u3002\\n\\n\u4e3a\u6b64 l2fwd \u8bbe\u5b9a\u4e86\u4e00\u4e2a drain \u5ef6\u65f6\uff0c\u5b83\u7684\u65f6\u95f4\u662f 100 us\uff0c\u7531\u4e8e l2fwd \u4f7f\u7528 tsc \u6765\u8ba1\u65f6\uff0c224 \u884c\u5c06 100us \u8f6c\u5316\u4e3a\u4e86 tsc \u5468\u671f\u6570\u76ee\u3002\\n\\n251 \u884c\u9996\u5148\u8bb0\u5f55\u5f53\u524d\u7684 tsc \u65f6\u95f4\uff0c\u51cf\u53bb\u4e0a\u4e00\u6b21\u8bb0\u5f55\u7684\u65f6\u95f4\u5c31\u5f97\u5230\u4e86\u5ef6\u65f6\uff0c\u5f53\u5ef6\u65f6\u5927\u4e8e 100us \u7684\u65f6\u5019\uff0c\u904d\u5386\u5f53\u524d lcore \u4e0a\u7ed1\u5b9a\u7684\u6bcf\u4e00\u4e2a\u7aef\u53e3\uff0c\u8c03\u7528 rte_eth_tx_buffer_flush \u6765\u7acb\u523b\u53d1\u51fa buffer \u4e2d\u7684\u62a5\u6587\uff0c\u7136\u540e\u589e\u52a0\u53d1\u5305\u7edf\u8ba1\u3002\\n\\n270~287 \u884c\u9996\u5148\u5224\u65ad timer_period \u662f\u5426\u4f7f\u80fd\uff0c\u5f53\u4f7f\u80fd\u65f6\uff0c\u8c03\u6574\u5b9a\u65f6\u5668\u7684\u503c\uff08timer_tsc \u7684\u503c\uff09\uff0c\u5f53 timer_tsc \u7684\u503c\u5927\u4e8e\u7b49\u4e8e timer_period \u8868\u793a\u4e00\u4e2a\u5468\u671f\u5230\u8fbe\uff0c280~284 \u884c\u5224\u65ad\u5f53\u524d\u7ebf\u7a0b\u662f\u5426\u662f\u7ba1\u7406\u7ebf\u7a0b\uff0c\u662f\u7ba1\u7406\u7ebf\u7a0b\u5219\u8c03\u7528 print_stats \u8f93\u51fa\u7edf\u8ba1\uff0c\u7136\u540e\u6e05\u7a7a timer_tsc \u91cd\u65b0\u8ba1\u6570\u3002\\n\\n288 \u884c\u66f4\u65b0\u4e0a\u4e00\u6b21\u7684 tsc \u65f6\u95f4\uff0c\u8fd9\u5c31\u5b8c\u6210\u4e86\u6574\u4e2a\u8fc7\u7a0b\uff01"},{"id":"/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u4e0e\u5185\u6838\u5185\u5b58\u6cc4\u9732\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u4e0e\u5185\u6838\u5185\u5b58\u6cc4\u9732\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u4e0e\u5185\u6838\u5185\u5b58\u6cc4\u9732\u95ee\u9898.md","source":"@site/blog/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u4e0e\u5185\u6838\u5185\u5b58\u6cc4\u9732\u95ee\u9898.md","title":"\u95ee\u9898\u63cf\u8ff0","description":"\u67d0\u8bbe\u5907\u8fd0\u884c dpdk \u7a0b\u5e8f\uff0cfree \u7684\u5185\u5b58\u7a7a\u95f4\u5728\u9010\u6e10\u4e0b\u964d\u3002","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":7.425,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790"},"nextItem":{"title":"dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u5206\u6790"}},"content":"\u67d0\u8bbe\u5907\u8fd0\u884c dpdk \u7a0b\u5e8f\uff0cfree \u7684\u5185\u5b58\u7a7a\u95f4\u5728\u9010\u6e10\u4e0b\u964d\u3002\\n\\n\u7b2c\u4e00\u6b21\u67e5\u770b\uff1a\\n\\n```bash\\n[root]# free -h\\ntotal        used        free      shared  buff/cache   available\\nMem:           3.6G        1.5G        425M        403M        1.7G        534M\\nSwap:            0B          0B          0B\\n```\\n\\n\u51e0\u5206\u949f\u540e\u67e5\u770b\uff1a\\n\\n```bash\\n[root]# free -h\\ntotal        used        free      shared  buff/cache   available\\nMem:           3.6G        1.2G        425M        403M        1.4G        534M\\nSwap:            0B          0B          0B\\n```\\n\\n\u6301\u7eed\u89c2\u5bdf\u786e\u5b9a free \u7684\u5185\u5b58\u5728\u3010\u6301\u7eed\u964d\u4f4e\u3011\u3002\\n\\n# \u95ee\u9898\u5b9a\u4f4d\u8fc7\u7a0b\\n\\n1. \u4f7f\u7528 top \u67e5\u770b\u7528\u6237\u6001\u7a0b\u5e8f\u7684\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u672a\u53d1\u73b0\u660e\u663e\u5f02\u5e38\\n2. \u6267\u884c echo 3 > /proc/sys/vm/drop_caches \u6e05\u9664\u7f13\u5b58\uff0cfree \u7684\u7a7a\u95f4\u4ecd\u65e7\u6ca1\u6709\u589e\u52a0\\n3. \u89c2\u5bdf /proc/slabinfo \u53d1\u73b0 kmalloc-8192 \u8fd9\u79cd\u7c7b\u578b\u7684 slab \u7a7a\u95f4\u4e00\u76f4\u5728\u589e\u52a0\\n\\n\u7b2c\u4e00\u6b21\u67e5\u770b\uff1a\\n\\n```bash\\nkmalloc-8192      128016 128016   8192    4    8 : tunables    0    0    0 : slabdata  32004  32004      0\\n```\\n\\n\u51e0\u5206\u949f\u540e\u67e5\u770b\uff1a\\n\\n```bash\\nkmalloc-8192 135760 135760 8192 4 8 : tunables 0 0 0 : slabdata 33940 33940 0\\n```\\n\\n\u6000\u7591\u5c31\u662f kmalloc-8192 \u5bfc\u81f4\u7684\u95ee\u9898\u3002\\n\\n# \u8ddf\u8e2a kmalloc-8192 \u7684 alloc \u4e0e free \u8fc7\u7a0b\\n\\n\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u5f00\u542f\u5185\u6838 kmalloc-8192 \u7c7b slab \u5bf9\u8c61\u7684 **trace** \u529f\u80fd\uff1a\\n\\n```bash\\necho 1 > /sys/kernel/slab/kmalloc-8192/trace\\n```\\n\\n\u51e0\u5341\u79d2\u540e\u67e5\u770b dmesg \u4fe1\u606f\uff0c\u770b\u5230\u5982\u4e0b\u5185\u5bb9\uff1a\\n\\n```bash\\n\\n[90556.444309] TRACE kmalloc-8192 alloc 0xffff88001a0d8000 inuse=4 fp=0x          (null)\\n.........\\n[90556.444342] Call Trace:\\n[90556.444355]  [<ffffffff826cbd7c>] dump_stack+0x63/0x7f\\n[90556.444362]  [<ffffffff826ca454>] alloc_debug_processing+0xb1/0x105\\n[90556.444368]  [<ffffffff826ca84a>] __slab_alloc+0x3a2/0x40f\\n[90556.444375]  [<ffffffff825a7d4c>] ? kzalloc+0xf/0x11\\n[90556.444383]  [<ffffffff826d3792>] ? _raw_spin_unlock_irqrestore+0x1a/0x2d\\n[90556.444389]  [<ffffffff8258eb55>] ? pci_conf1_read+0xdb/0xf3\\n[90556.444394]  [<ffffffff825a7d4c>] ? kzalloc+0xf/0x11\\n[90556.444401]  [<ffffffff82139fad>] __kmalloc+0xf5/0x156\\n[90556.444409]  [<ffffffff825c4f0b>] ? eth_mac_addr+0x28/0x28\\n[90556.444413]  [<ffffffff825a7d4c>] kzalloc+0xf/0x11\\n[90556.444419]  [<ffffffff825ae850>] alloc_netdev_mqs+0x80/0x2d9\\n[90556.444425]  [<ffffffff825c5075>] alloc_etherdev_mqs+0x1c/0x1e\\n[90556.444463]  [<ffffffffa0058840>] igb_kni_probe+0x64/0xa56 [rte_kni]\\n[90556.444471]  [<ffffffff82402fdf>] ? put_device+0x12/0x14\\n[90556.444478]  [<ffffffff82305dda>] ? pci_get_dev_by_id+0x71/0x79\\n[90556.444483]  [<ffffffff82305e16>] ? pci_get_subsys+0x34/0x3b\\n[90556.444507]  [<ffffffffa003567e>] kni_ioctl_create+0x32d/0x5a1 [rte_kni]\\n[90556.444531]  [<ffffffffa0035924>] kni_ioctl+0x32/0x3b [rte_kni]\\n[90556.444539]  [<ffffffff82156a05>] do_vfs_ioctl+0x351/0x415\\n[90556.444546]  [<ffffffff8215e905>] ? __fget+0x66/0x70\\n[90556.444552]  [<ffffffff82156b14>] SyS_ioctl+0x4b/0x76\\n[90556.444558]  [<ffffffff826d3f89>] system_call_fastpath+0x16/0x1b\\n```\\n\\n\u4e0a\u9762\u7684\u4fe1\u606f\u8868\u660e\u6b64\u5904\u7684 alloc \u662f\u5728 kni \u63a5\u53e3\u521d\u59cb\u5316\u65f6\u6267\u884c\u7684\u3002\u540c\u65f6\u4e5f\u770b\u5230\u4e86\u5176\u5b83\u6a21\u5757\u7684\u6253\u5370\uff0creiserfs \u7684\u4e00\u4e2a\u6253\u5370\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```bash\\n90560.232045] TRACE kmalloc-8192 alloc 0xffff88001a0da000 inuse=4 fp=0x          (null)\\n.........\\n[90560.232083] Call Trace:\\n[90560.232096]  [<ffffffff826cbd7c>] dump_stack+0x63/0x7f\\n[90560.232103]  [<ffffffff826ca454>] alloc_debug_processing+0xb1/0x105\\n[90560.232109]  [<ffffffff826ca84a>] __slab_alloc+0x3a2/0x40f\\n[90560.232117]  [<ffffffff821adca2>] ? fix_nodes+0x188/0x1b1d\\n[90560.232124]  [<ffffffff8216bb01>] ? touch_buffer+0xd/0xf\\n[90560.232130]  [<ffffffff8216c4eb>] ? __find_get_block+0x1e5/0x1f7\\n[90560.232136]  [<ffffffff821adca2>] ? fix_nodes+0x188/0x1b1d\\n[90560.232143]  [<ffffffff82139fad>] __kmalloc+0xf5/0x156\\n[90560.232149]  [<ffffffff821adca2>] fix_nodes+0x188/0x1b1d\\n[90560.232156]  [<ffffffff8210b43b>] ? mark_page_accessed+0xf/0xc5\\n[90560.232161]  [<ffffffff8216bb01>] ? touch_buffer+0xd/0xf\\n[90560.232167]  [<ffffffff8210b43b>] ? mark_page_accessed+0xf/0xc5\\n[90560.232172]  [<ffffffff8216bb01>] ? touch_buffer+0xd/0xf\\n[90560.232178]  [<ffffffff821bdd39>] ? journal_mark_dirty+0x62/0x25f\\n[90560.232185]  [<ffffffff821b95f1>] reiserfs_insert_item+0x1ba/0x247\\n[90560.232196]  [<ffffffff821b1675>] add_save_link+0x170/0x1b8\\n[90560.232202]  [<ffffffff826d1ccf>] ? mutex_unlock+0x11/0x13\\n[90560.232209]  [<ffffffff821a8a2b>] reiserfs_truncate_file+0x197/0x278\\n[90560.232215]  [<ffffffff8210c341>] ? truncate_pagecache+0x4d/0x54\\n[90560.232221]  [<ffffffff821abc4a>] reiserfs_setattr+0x2e2/0x311\\n[90560.232228]  [<ffffffff8218c405>] ? __dquot_initialize+0x20/0x14c\\n[90560.232236]  [<ffffffff820ac766>] ? preempt_count_add+0x75/0x88\\n[90560.232241]  [<ffffffff820ac6c2>] ? get_parent_ip+0xd/0x3c\\n[90560.232248]  [<ffffffff8215e092>] notify_change+0x1e2/0x2c6\\n[90560.232255]  [<ffffffff82147096>] do_truncate+0x64/0x89\\n[90560.232262]  [<ffffffff82153f2c>] do_last.isra.46+0x976/0x9a5\\n[90560.232269]  [<ffffffff82154172>] path_openat+0x217/0x4ab\\n[90560.232275]  [<ffffffff8215547d>] do_filp_open+0x35/0x7a\\n[90560.232281]  [<ffffffff826d3765>] ? _raw_spin_unlock+0x12/0x25\\n[90560.232287]  [<ffffffff8215ee1f>] ? __alloc_fd+0xe5/0xf4\\n[90560.232293]  [<ffffffff8214830f>] do_sys_open+0x6b/0xfa\\n[90560.232298]  [<ffffffff821483b7>] SyS_open+0x19/0x1b\\n[90560.232303]  [<ffffffff826d3f89>] system_call_fastpath+0x16/0x1b\\n[90560.232321] TRACE kmalloc-8192 free 0xffff88001a0da000 inuse=3 fp=0xffff88001a0dc000\\n```\\n\\n\u5b83\u4e0e kni \u6a21\u5757 alloc \u7a7a\u95f4\u6253\u5370\u7684\u5806\u6808\u4fe1\u606f\u7684\u533a\u522b\u5728\u4e8e\u6700\u540e\u4e00\u884c\uff0c\u5373 TRACE **kmalloc-8192 free 0xffff88001a0da000 .......**\uff0c\u6b64\u884c\u8868\u660e\u3010\u91ca\u653e\u3011\u4e86 8192 \u5927\u5c0f\u7684\u7a7a\u95f4\uff0c\u800c kni \u6a21\u5757\u7684\u6253\u5370\u4e2d\u6ca1\u6709\u91ca\u653e\u7684\u6253\u5370\uff0c\u8868\u660e\u53ea\u5728\u521b\u5efa\u3002\\n\\n# \u4e3a\u4ec0\u4e48 kni \u6a21\u5757\u5728\u4e00\u76f4\u521b\u5efa netdev \u5462\uff1f\\n\\n\u4f7f\u7528 kni \u6a21\u5757\u7684\u7a0b\u5e8f\u53ea\u5728\u3010\u521d\u59cb\u5316\u3011\u7684\u8fc7\u7a0b\u4e2d\u624d\u4f1a\u521b\u5efa netdev\uff0c\u7a0b\u5e8f\u6b7b\u4ea1\u540e netdev \u4f1a\u91ca\u653e\uff0c\u90a3\u4e0a\u9762\u8bf4\u7684\u6ca1\u6709\u91ca\u653e\u662f\u5426\u662f\u56e0\u4e3a\u7a0b\u5e8f\u4e00\u76f4\u5728\u8fd0\u884c\uff1f\\n\\n\u67e5\u770b\u7a0b\u5e8f\u72b6\u6001\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7adf\u7136\u5728\u4e00\u76f4\u91cd\u542f\uff0c\u540c\u65f6 kmalloc-8192 \u7684\u6570\u91cf\u5728\u4ee5\u56fa\u5b9a\u7684\u6570\u76ee\u7f13\u6162\u589e\u957f\uff0c\u91cd\u547d\u540d\u7a0b\u5e8f\u540e\u4e0d\u518d\u589e\u957f\uff0c**\u80fd\u591f\u786e\u5b9a\u662f rte_kni \u5185\u90e8\u6a21\u5757\u5b58\u5728\u5185\u5b58\u6cc4\u9732\u95ee\u9898**\u3002\\n\\n# rte_kni.ko \u4ee3\u7801\u5206\u6790\\n\\n\u9605\u8bfb rte_kni.ko \u6e90\u7801\u53d1\u73b0\uff0c\u5728 **igb_kni_probe** \u51fd\u6570\u4e2d\u4f1a\u8c03\u7528 **alloc_etherdev_mq** \u521b\u5efa\u4e00\u4e2a **netdev**\uff0c\u6b64\u5916 **kni_ioctl_create** \u4e2d\u4e5f\u4f1a\u521b\u5efa\u4e00\u4e2a **netdev**\uff0c\u800c\u5728\u3010\u91ca\u653e\u3011\u903b\u8f91\u4e2d\uff0c**kni_dev_remove** \u4e2d\u53ea\u91ca\u653e\u4e86 **kni_ioctl_create**  \u4e2d\u521b\u5efa\u7684 **netdev**\uff0c\u3010\u6ca1\u6709\u91ca\u653e\u3011 e1000\u3001igb\u3001ixgbe xxx_kni_probe \u4e2d\u521b\u5efa\u7684 netdev \u7ed3\u6784\uff0c\u5bfc\u81f4\u5185\u5b58\u6cc4\u9732\u3002\\n\\n# \u89e3\u51b3\u65b9\u6848\\n\\n\u5728 e1000\u3001igb\u3001ixgbe \u7684 xxx_kni_probe \u4e2d\u521b\u5efa\u7684 netdev \u7ed3\u6784\u4f1a\u88ab\u586b\u5145\u5230 kni_dev \u7ed3\u6784\u7684 **lad_dev** \u5b57\u6bb5\u4e2d\uff0c\u53ea\u9700\u8981\u5728 kni_dev_remove \u51fd\u6570\u4e2d\u5224\u65ad lad_dev \u5b57\u6bb5\u662f\u5426\u4e3a\u7a7a\uff0c\u4e0d\u4e3a\u7a7a\u5219\u8c03\u7528 free_netdev \u91ca\u653e\u5373\u53ef\u3002\\n\\n\u4fee\u6539\u540e\u7684 kni_dev_remove \u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nstatic int\\nkni_dev_remove(struct kni_dev *dev)\\n{\\n\\tif (!dev)\\n\\t\\treturn -ENODEV;\\n\\t.........\\n\\tif (dev->lad_dev) {\\n\\t\\tfree_netdev(dev->lad_dev);\\n\\t}\\n\\n\\tif (dev->net_dev) {\\n\\t\\tunregister_netdev(dev->net_dev);\\n\\t\\tfree_netdev(dev->net_dev);\\n\\t}\\n\\n\\treturn 0;\\n}\\n```\\n\\n# \u9a8c\u8bc1\u65b9\u6848\\n\\n\u4f7f\u7528 **ftrace** \u8ddf\u8e2a**\u5185\u6838\u51fd\u6570\u8c03\u7528**\u6765\u9a8c\u8bc1\u4fee\u6539\u6709\u6548\uff0c\u4f7f\u7528 ftrace \u8ddf\u8e2a kni \u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u8c03\u7528 alloc_netdev_mqs \u4ee5\u53ca\u6b7b\u4ea1\u65f6\u8c03\u7528 free_netdev \u7684\u8fc7\u7a0b\u6765\u9a8c\u8bc1\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u3002\\n\\nkni \u7a0b\u5e8f\u8fd0\u884c\u547d\u4ee4\u5982\u4e0b\uff1a\\n\\n```bash\\n[root]# ./kni  -- -p0x3 --config=\\"(0,0,1),(1,1,1)\\"\\n```\\n\\nftrace \u8ddf\u8e2a\u5230 alloc_netdev_mqs \u51fd\u6570\u8c03\u7528\u60c5\u51b5\u5982\u4e0b\uff1a\\n\\n```bash\\n# tracer: function\\n#\\n# entries-in-buffer/entries-written: 4/4   #P:4\\n#\\n#                              _-----=> irqs-off\\n#                             / _----=> need-resched\\n#                            | / _---=> hardirq/softirq\\n#                            || / _--=> preempt-depth\\n#                            ||| /     delay\\n#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION\\n#              | |       |   ||||       |         |\\n             kni-11436 [000] ....  1906.033365: alloc_netdev_mqs <-kni_ioctl_create\\n             kni-11436 [000] ....  1906.033435: alloc_netdev_mqs <-alloc_etherdev_mqs\\n             kni-11436 [000] ....  1906.220368: alloc_netdev_mqs <-kni_ioctl_create\\n             kni-11436 [000] ....  1906.220440: alloc_netdev_mqs <-alloc_etherdev_mqs\\n\\n```\\n\\n\u6740\u6b7b kni \u7a0b\u5e8f\u540e\uff0cftrace \u8ddf\u8e2a\u5230 free_netdev \u8c03\u7528\u60c5\u51b5\u5982\u4e0b\uff1a\\n\\n```bash\\n Develop>cat ./trace\\n# tracer: function\\n#\\n# entries-in-buffer/entries-written: 2/2   #P:4\\n#\\n#                              _-----=> irqs-off\\n#                             / _----=> need-resched\\n#                            | / _---=> hardirq/softirq\\n#                            || / _--=> preempt-depth\\n#                            ||| /     delay\\n#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION\\n#              | |       |   ||||       |         |\\n             kni-11436 [000] ....  1990.960338: free_netdev <-kni_dev_remove\\n             kni-11436 [000] ....  1990.986674: free_netdev <-kni_dev_remove\\n```\\n\\n\u80fd\u591f\u770b\u5230\u8fd9\u91cc\u7533\u8bf7\u4e86\u56db\u6b21\uff0c\u4f46\u662f\u53ea\u91ca\u653e\u4e86\u4e24\u6b21\uff0c\u6cc4\u9732\u4e86\u4e24\u4e2a netdev \u7ed3\u6784\uff08\u6bcf\u4e2a\u53e3\u6cc4\u9732\u4e00\u4e2a\uff09\uff0c\u7b26\u5408\u9884\u671f\u3002\\n\\n\u91cd\u65b0\u52a0\u8f7d\u4fee\u6539\u540e\u7684 rte_kni.ko \u6587\u4ef6\u540e\u6d4b\u8bd5\u8bb0\u5f55\u5982\u4e0b\uff1a\\n\\nftrace \u8ddf\u8e2a\u5230 alloc_netdev_mqs \u51fd\u6570\u8c03\u7528\u60c5\u51b5\u5982\u4e0b\uff1a\\n\\n```bash\\n \\n Develop>cat ./trace\\n# tracer: function\\n#\\n# entries-in-buffer/entries-written: 8/8   #P:4\\n#\\n#                              _-----=> irqs-off\\n#                             / _----=> need-resched\\n#                            | / _---=> hardirq/softirq\\n#                            || / _--=> preempt-depth\\n#                            ||| /     delay\\n#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION\\n#              | |       |   ||||       |         |\\n             kni-13861 [000] ....  2951.871499: alloc_netdev_mqs <-kni_ioctl_create\\n             kni-13861 [000] ....  2951.871571: alloc_netdev_mqs <-alloc_etherdev_mqs\\n             kni-13861 [000] ....  2952.059302: alloc_netdev_mqs <-kni_ioctl_create\\n             kni-13861 [000] ....  2952.059372: alloc_netdev_mqs <-alloc_etherdev_mqs\\n\\n```\\n\\n\u6740\u6389 kni \u7a0b\u5e8f\u540e\uff0cftrace \u8ddf\u8e2a\u5230 free_netdev \u8c03\u7528\u60c5\u51b5\u5982\u4e0b\uff1a\\n\\n```bash\\n# tracer: function\\n#\\n# entries-in-buffer/entries-written: 4/4   #P:4\\n#\\n#                              _-----=> irqs-off\\n#                             / _----=> need-resched\\n#                            | / _---=> hardirq/softirq\\n#                            || / _--=> preempt-depth\\n#                            ||| /     delay\\n#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION\\n#              | |       |   ||||       |         |\\n             kni-13861 [000] ....  3000.154817: free_netdev <-kni_dev_remove\\n             kni-13861 [000] ....  3000.165235: free_netdev <-kni_dev_remove\\n             kni-13861 [000] ....  3000.181801: free_netdev <-kni_dev_remove\\n             kni-13861 [000] ....  3000.190228: free_netdev <-kni_dev_remove\\n```\\n\\n\u4fee\u590d\u540e\u7533\u8bf7\u4e86\u56db\u6b21\uff0c\u91ca\u653e\u4e86\u56db\u6b21\uff0c\u7b26\u5408\u9884\u671f\u3002\\n\\n# \u603b\u7ed3\\n\\n\u524d\u671f\u5df2\u7ecf\u89e3\u51b3\u8fc7\u4e00\u4e9b rte_kni.ko \u6a21\u5757\u7684\u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u6b21\u66b4\u9732\u51fa\u7684\u95ee\u9898\u8868\u660e\u5176\u4e2d\u4ecd\u65e7\u6f5c\u85cf\u7740\u4e00\u4e9b\u95ee\u9898\u3002\\n\\n\u9ad8\u7248\u672c\u7684\u8d8b\u52bf\u662f\u5148\u3010\u5265\u79bb\u3011 rte_kni.ko \u6a21\u5757\u7684 ethtool \u529f\u80fd\uff0c\u6700\u7ec8\u3010\u5b8c\u5168\u629b\u5f03\u3011\uff0c\u8fd9\u662f\u6b63\u786e\u7684\u65b9\u5411\u3002\\n\\nrte_kni.ko \u6a21\u5757\u7684 ethtool \u529f\u80fd\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u3010\u8fc7\u6e21\u529f\u80fd\u3011\uff0c\u3010\u7a33\u5b9a\u6027\u582a\u5fe7\u3011\uff0c\u6211\u4eec\u4e5f\u5e94\u5f53\u8ffd\u968f\u6f6e\u6d41\u5f03\u7528 rte_kni.ko \u7684 ethtool \u529f\u80fd\u3002"},{"id":"/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u5206\u6790","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u5206\u6790","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u5206\u6790.md","source":"@site/blog/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u5206\u6790.md","title":"dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u5206\u6790","description":"\u524d\u8a00","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":24.245,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u95ee\u9898\u63cf\u8ff0","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u4e0e\u5185\u6838\u5185\u5b58\u6cc4\u9732\u95ee\u9898"},"nextItem":{"title":"dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled \u63a5\u53e3\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled \u63a5\u53e3\u95ee\u9898"}},"content":"## \u524d\u8a00\\nrte_kni \u6a21\u5757\u5145\u5f53\u4e86\u7528\u6237\u6001\u9a71\u52a8\u4e0e\u5185\u6838\u534f\u8bae\u6808\u4e4b\u95f4\u7684\u6865\u6881\uff0c\u8ba9 dpdk \u7a0b\u5e8f\u80fd\u591f\u4e0a\u9001\u6d41\u91cf\u5230\u5185\u6838\u534f\u8bae\u6808\uff0c\u540c\u65f6\u4e5f\u652f\u6301\u4f7f\u7528 ethtool\u3001ifconfig \u7b49\u91cd\u8981\u7684\u7f51\u7edc\u7ba1\u7406\u547d\u4ee4\u6765\u63a7\u5236\u63a5\u53e3\u72b6\u6001\u3002\\n\\n**rte_kni \u6a21\u5757\u53ef\u4ee5\u770b\u4f5c\u662f\u4e00\u4e2a\u865a\u62df\u7684\u7f51\u5361\u9a71\u52a8\uff0c\u7b26\u5408\u7f51\u5361\u9a71\u52a8\u7684\u5e38\u89c1\u7279\u5f81\uff0c\u5176\u6536\u53d1\u5305\u8fc7\u7a0b\u5374\u4e0e\u7f51\u5361\u9a71\u52a8\u6709\u5f88\u5927\u7684\u5dee\u522b\uff0c\u63a5\u53e3\u63a7\u5236\u8fc7\u7a0b\u4e5f\u4e0d\u540c\u4e8e\u666e\u901a\u7684\u7f51\u5361\u9a71\u52a8\uff0c\u5b83\u6d89\u53ca\u4e0e pmd \u4e2d\u9891\u7e41\u7684\u4ea4\u4e92\u5de5\u4f5c\uff0c\u8fd9\u662f rte_kni \u529f\u80fd\u7684\u91cd\u70b9\u3002**\\n\\n**rte_kni \u5b9e\u73b0\u4e86\u4e00\u4e2a\u865a\u62df\u7f51\u5361\u9a71\u52a8\uff0c\u4e0d\u5b58\u5728\u7f51\u5361 probe \u8fc7\u7a0b\uff0c\u6545\u800c\u4e0d\u80fd\u76f4\u63a5\u521d\u59cb\u5316\u3002\u540c\u65f6 kni \u865a\u62df\u7f51\u5361\u7684\u521d\u59cb\u5316\u4e5f\u4f9d\u8d56\u8bf8\u591a\u7528\u6237\u6001\u63d0\u4f9b\u7684\u53c2\u6570\uff0c\u4e0d\u7b26\u5408\u6b63\u5e38\u865a\u62df\u7f51\u5361\u9a71\u52a8\u6d41\u7a0b\u3002**\\n\\n\u57fa\u4e8e\u8fd9\u4e9b\u56e0\u7d20\uff0crte_kni \u8fd8\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5b57\u7b26\u9a71\u52a8\uff0c**\u901a\u8fc7\u5b57\u7b26\u9a71\u52a8\u7684 open\u3001ioctl\u3001release \u6765\u63a7\u5236\u865a\u62df\u7f51\u5361\u63a5\u53e3\u7684\u521b\u5efa\u3001\u91ca\u653e\u8fc7\u7a0b\uff0c\u800c\u865a\u62df\u63a5\u53e3\u4f9d\u8d56\u7684\u8bf8\u591a\u53c2\u6570\u4e5f\u80fd\u901a\u8fc7 ioctl \u6765\u63d0\u4f9b\u3002**\\n\\n\u540c\u65f6\u4e3a\u4e86\u652f\u6301 ethtool \u547d\u4ee4\u83b7\u53d6\u6570\u636e\uff0crte_kni \u4e5f\u6a21\u62df\u4e86\u7f51\u5361\u9a71\u52a8\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u5e76\u6ce8\u518c ethtool_ops \u7ed3\u6784\u4f53\uff0c\u8fd9\u4e00\u90e8\u5206\u7684\u4ee3\u7801\u5728\u9ad8\u7248\u672c\u5df2\u7ecf\u88ab\u79fb\u9664\u3002\u57fa\u4e8e\u8fd9\u70b9\uff0c\u672c\u6587\u96c6\u4e2d\u53d9\u8ff0 rte_kni \u865a\u62df\u7f51\u5361\u521d\u59cb\u5316\u4e0e\u6536\u53d1\u5305\u7684\u8fc7\u7a0b\u53ca\u4e0e pmd \u4ea4\u4e92\u7684\u539f\u7406\uff0cethtool \u76f8\u5173\u4ee3\u7801\u4e0d\u5728\u672c\u6587\u7684\u63a2\u8ba8\u8303\u56f4\u5185\u3002\\n\\n## rte_kni \u6a21\u5757\u7684\u76ee\u5f55\u7ed3\u6784\\nrte_kni \u6a21\u5757\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a\\n\\n```bash\\nMakefile  compat.h  ethtool  kni_dev.h  kni_ethtool.c  kni_fifo.h  kni_misc.c  kni_net.c  kni_vhost.c\\n```\\n\\n1. Makefile \u6587\u4ef6\u4e3a rte_kni \u7f16\u8bd1\u811a\u672c\\n\\n2. compat.h \u6587\u4ef6\u7528\u4e8e\u9002\u914d\u4e0d\u540c\u7248\u672c\u5185\u6838\u7684\u4e00\u4e9b\u63a5\u53e3\\n3. ethtool \u76ee\u5f55\u4e2d\u5b58\u653e\u9002\u914d igb\u3001ixgbe \u7f51\u5361 ethtool \u529f\u80fd\u7684\u4ee3\u7801\\n\\n4. kni_dev.h \u4e2d\u5b9a\u4e49 kni device \u7b49\u91cd\u8981\u7ed3\u6784\u4f53\\n\\n5. kni_ethtool.c \u4e2d\u5b9a\u4e49 kni_ethtool_ops \u7ed3\u6784\u4f53\uff0c\u6b64\u7ed3\u6784\u4f53\u4e2d\u7684\u65b9\u6cd5\u5c01\u88c5\u4e86\u5bf9 lad_dev->ethtool_ops \u4e2d\u65b9\u6cd5\u7684\u8c03\u7528\\n6. kni_fifo.h \u4e2d\u5b9a\u4e49\u5171\u4eab\u961f\u5217\u7684\u521d\u59cb\u5316\u3001count\u3001get\u3001put \u63a5\u53e3\\n7. kni_misc.c \u4e2d\u5b9e\u73b0 kni \u5b57\u7b26\u8bbe\u5907\uff0c\u4ee5\u53ca\u64cd\u4f5c\u8fd9\u4e9b\u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\u7684\u65b9\u6cd5\uff0c\u5982 open\u3001ioctl \u65b9\u6cd5\u7b49\\n8. kni_net.c \u4e2d\u5b9e\u73b0 kni \u865a\u62df\u7f51\u7edc\u8bbe\u5907\u9a71\u52a8\\n9. kni_vhost.c \u662f\u9488\u5bf9 vhost \u7684\u5b9a\u5236\uff0c\u4e0d\u5728\u672c\u6587\u63a2\u8ba8\u8303\u56f4\u5185\\n\\n## kni \u6a21\u5757\u521d\u59cb\u5316\u8fc7\u7a0b\\n\\nkni \u6a21\u5757\u521d\u59cb\u5316\u51fd\u6570\u4e3a kni_init\uff0c\u5176\u6e90\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n155 static int __init\\n156 kni_init(void)\\n157 {\\n158     int rc;\\n159\\n160     KNI_PRINT(\\"######## DPDK kni module loading ########\\\\n\\");\\n161\\n162     if (kni_parse_kthread_mode() < 0) {\\n163         KNI_ERR(\\"Invalid parameter for kthread_mode\\\\n\\");\\n164         return -EINVAL;\\n165     }\\n166\\n167 #if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 32)\\n168     rc = register_pernet_subsys(&kni_net_ops);\\n169 #else\\n170     rc = register_pernet_gen_subsys(&kni_net_id, &kni_net_ops);\\n171 #endif /* LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 32) */\\n172     if (rc)\\n173         return -EPERM;\\n174\\n175     rc = misc_register(&kni_misc);\\n176     if (rc != 0) {\\n177         KNI_ERR(\\"Misc registration failed\\\\n\\");\\n178         goto out;\\n179     }\\n180\\n181     /* Configure the lo mode according to the input parameter */\\n182     kni_net_config_lo_mode(lo_mode);\\n183\\n184     KNI_PRINT(\\"######## DPDK kni module loaded  ########\\\\n\\");\\n185\\n186     return 0;\\n187\\n188 out:\\n189 #if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 32)\\n190     unregister_pernet_subsys(&kni_net_ops);\\n191 #else\\n192     register_pernet_gen_subsys(&kni_net_id, &kni_net_ops);\\n193 #endif /* LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 32) */\\n194     return rc;\\n195 }\\n```\\n\\n\u6b64\u51fd\u6570\u9996\u5148\u89e3\u6790 kthread_mode \u6a21\u5757\u53c2\u6570\uff0c\u6839\u636e\u53c2\u6570\u8bbe\u7f6e multiple_kthread_on\u3001g_kni_net_rx \u53d8\u91cf\u7684\u503c\u3002\\n\\n\u6b64\u540e\u6ce8\u518c kni \u7f51\u7edc\u547d\u540d\u7a7a\u95f4\u8bbe\u5907\uff0ckni_net_ops \u4e2d\u5b9e\u4f8b\u5316\u7684 kni_init_net \u51fd\u6570\u4f1a\u5728\u6bcf\u4e2a\u7f51\u7edc\u547d\u540d\u7a7a\u95f4\u521b\u5efa\u7684\u65f6\u5019\u88ab\u8c03\u7528\uff0c\u521b\u5efa\u4e00\u4e2a kni_net \u7ed3\u6784\uff0c\u5e76\u521d\u59cb\u5316\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7136\u540e\u6ce8\u518c\u3002\\n\\n\u4e0e\u6b64\u7c7b\u4f3c\uff0ckni_net_ops \u4e2d\u5b9e\u4f8b\u5316\u7684 kni_exit_net \u51fd\u6570\u5728\u6bcf\u4e2a\u7f51\u7edc\u547d\u4ee4\u7a7a\u95f4\u9500\u6bc1\u65f6\u88ab\u8c03\u7528\uff0c\u5b83\u4f1a free kni_net \u7ed3\u6784\u3002\\n\\n175 \u884c\u6ce8\u518c kni misc \u8bbe\u5907\uff0c\u6210\u529f\u540e\u7ee7\u7eed\u8c03\u7528 kni_net_config_lo_mode \u89e3\u6790 lo_mode \u6a21\u5757\u53c2\u6570\uff0c\u914d\u7f6e\u4e0d\u540c\u7684 kni \u6536\u5305\u51fd\u6570\uff0c\u4e0d\u592a\u5e38\u7528\uff0c\u4e0d\u8fdb\u884c\u5206\u6790\u3002\\n\\n## kni misc \u9a71\u52a8\u7684\u539f\u7406\\nkni misc \u9a71\u52a8\u5b9e\u4f8b\u5316\u4e86\u4e00\u4e2a miscdevice \u7ed3\u6784\u4f53\uff0c \u6b64\u7ed3\u6784\u4f53\u4e2d\u7684 name \u5b57\u6bb5\u7528\u4e8e\u6807\u8bc6 kni misc \u9a71\u52a8\uff0cminor \u5b57\u6bb5\u6307\u5b9a\u8bbe\u5907 minor \u53f7\u52a8\u6001\u5206\u914d\uff0cfops \u8868\u793a\u7ed1\u5b9a\u5728\u6b64\u8bbe\u5907\u6587\u4ef6\u4e0a\u7684\u6587\u4ef6\u64cd\u4f5c\u65b9\u6cd5\u3002\\n\\n1. kni_open \u4f1a\u5728\u6253\u5f00 /dev/kni \u6587\u4ef6\u7684\u65f6\u5019\u88ab\u8c03\u7528\\n2. kni_release \u4f1a\u5728\u5173\u95ed /dev/kni \u6587\u4ef6\u7684\u65f6\u5019\u88ab\u8c03\u7528\\n3. kni_ioctl \u4e0e kni_compat_ioctl \u5728\u901a\u8fc7 ioctl \u63a7\u5236 /dev/kni \u6587\u4ef6\u65f6\u88ab\u8c03\u7528\\n\\n\u5b9e\u4f8b\u5316\u7684\u6570\u636e\u7ed3\u6784\u5b9a\u4e49\u5982\u4e0b\uff1a\\n```c\\n 73 static struct file_operations kni_fops = {\\n 74     .owner = THIS_MODULE,\\n 75     .open = kni_open,\\n 76     .release = kni_release,\\n 77     .unlocked_ioctl = (void *)kni_ioctl,\\n 78     .compat_ioctl = (void *)kni_compat_ioctl,\\n 79 };\\n 80 \\n 81 static struct miscdevice kni_misc = {\\n 82     .minor = MISC_DYNAMIC_MINOR,\\n 83     .name = KNI_DEVICE,\\n 84     .fops = &kni_fops,\\n 85 };\\n```\\nkni misc \u8bbe\u5907\u4f7f\u7528\u65f6\uff0c\u7528\u6237\u6001\u7a0b\u5e8f\u9996\u5148 open /dev/kni\uff0c\u7136\u540e\u6267\u884c ioctl \u5e76\u4f20\u9012 RTE_KNI_IOCTL_CREATE \u9009\u9879\u521b\u5efa kni \u865a\u62df\u63a5\u53e3\uff0c\u7136\u540e\u6b63\u5e38\u8fd0\u884c\uff0c\u9000\u51fa\u524d\u7ee7\u7eed\u8c03\u7528 ioctl \u5e76\u4f20\u9012 RTE_KNI_IOCTL_RELEASE \u91ca\u653e kni \u865a\u62df\u63a5\u53e3\uff0c\u6700\u540e\u8c03\u7528 close /dev/kni \u6765\u91ca\u653e kni \u8bbe\u5907\u3002\\n\\n### kni_open\\n```c\\n231 static int\\n232 kni_open(struct inode *inode, struct file *file)\\n233 {\\n234     struct net *net = current->nsproxy->net_ns;\\n235     struct kni_net *knet = net_generic(net, kni_net_id);\\n236 \\n237     /* kni device can be opened by one user only per netns */\\n238     if (test_and_set_bit(KNI_DEV_IN_USE_BIT_NUM, &knet->device_in_use))\\n239         return -EBUSY;\\n240 \\n241     /* Create kernel thread for single mode */\\n242     if (multiple_kthread_on == 0) {\\n243         KNI_PRINT(\\"Single kernel thread for all KNI devices\\\\n\\");\\n244         /* Create kernel thread for RX */\\n245         knet->kni_kthread = kthread_run(kni_thread_single, (void *)knet,\\n246                         \\"kni_single\\");\\n247         if (IS_ERR(knet->kni_kthread)) {\\n248             KNI_ERR(\\"Unable to create kernel threaed\\\\n\\");\\n249             return PTR_ERR(knet->kni_kthread);\\n250         }\\n251     } else\\n252         KNI_PRINT(\\"Multiple kernel thread mode enabled\\\\n\\");\\n253 \\n254     file->private_data = get_net(net);\\n255     KNI_PRINT(\\"/dev/kni opened\\\\n\\");\\n256 \\n257     return 0;\\n258 }\\n```\\n238 \u884c\u9996\u5148\u5224\u65ad kni_net \u7ed3\u6784\u4f53\u4e2d\u7684 device_in_use \u5b57\u6bb5\u7684\u503c\uff0c\u786e\u4fdd\u6bcf\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u5185\u53ea\u88ab\u4e00\u4e2a\u7528\u6237\u5360\u7528\u3002\\n\\n241~252 \u884c\u521b\u5efa kni \u5185\u6838\u6001\u7ebf\u7a0b\uff0c\u6b64\u7ebf\u7a0b\u7528\u4e8e kni \u6536\u5305\uff0ckthread_run \u51fd\u6570\u8fd4\u56de\u7684\u7ebf\u7a0b\u63cf\u8ff0\u7b26\u5b58\u50a8\u5230 kni_net \u7ed3\u6784\u4f53\u4e2d\u7684 kni_thread \u5b57\u6bb5\u4e2d\u3002\\n\\n254 \u884c\u5c06 kni net \u7ed3\u6784\u4f53\u5730\u5740\u5b58\u50a8\u5230\u5f53\u524d\u8fdb\u7a0b file \u7ed3\u6784\u7684 private_data \u5b57\u6bb5\u4e2d\uff0c\u6b64\u5b57\u6bb5\u5728 kni_release \u4e2d\u88ab\u8bbf\u95ee\uff0ckni_release \u901a\u8fc7\u83b7\u53d6\u5230 file \u7ed3\u6784\u4e2d\u9884\u5148\u5b58\u50a8\u7684 kni net \u7ed3\u6784\u6765\u91ca\u653e\u521b\u5efa\u7684\u5185\u6838\u7ebf\u7a0b\u4e0e kni \u865a\u62df\u63a5\u53e3\uff0c\u91ca\u653e\u5b8c\u6210\u540e\u6e05\u9664 kni_net \u7ed3\u6784\u4e2d\u7684 device_in_use \u5b57\u6bb5\u8868\u793a\u6b64 kni \u8bbe\u5907\u7a7a\u95f2\u3002\\n\\nkni_release \u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\n254 static int\\n255 kni_release(struct inode *inode, struct file *file)\\n256 {\\n257     struct net *net = file->private_data;\\n258     struct kni_net *knet = net_generic(net, kni_net_id);\\n259     struct kni_dev *dev, *n;\\n260 \\n261     /* Stop kernel thread for single mode */                                                                                                                             \\n262     if (multiple_kthread_on == 0) {\\n263         /* Stop kernel thread */\\n264         kthread_stop(knet->kni_kthread);\\n265         knet->kni_kthread = NULL;\\n266     }\\n267 \\n268     down_write(&knet->kni_list_lock);\\n269     list_for_each_entry_safe(dev, n, &knet->kni_list_head, list) {\\n270         /* Stop kernel thread for multiple mode */\\n271         if (multiple_kthread_on && dev->pthread != NULL) {\\n272             kthread_stop(dev->pthread);\\n273             dev->pthread = NULL;\\n274         }\\n275 \\n276 #ifdef RTE_KNI_VHOST\\n277         kni_vhost_backend_release(dev);\\n278 #endif\\n279         kni_dev_remove(dev);\\n280         list_del(&dev->list);\\n281     }\\n282     up_write(&knet->kni_list_lock);\\n283 \\n284     /* Clear the bit of device in use */\\n285     clear_bit(KNI_DEV_IN_USE_BIT_NUM, &knet->device_in_use);\\n286 \\n287     put_net(net);\\n288     KNI_PRINT(\\"/dev/kni closed\\\\n\\");\\n289 \\n290     return 0;\\n291 }\\n```\\n### kni_ioctl \u51fd\u6570\\nkni_ioctl \u51fd\u6570\u63a7\u5236 kni \u865a\u62df\u7f51\u5361\u63a5\u53e3\u7684\u521b\u5efa\u4e0e\u6ce8\u9500\u8fc7\u7a0b\uff0c\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\n628 static int\\n629 kni_ioctl(struct inode *inode,\\n630     unsigned int ioctl_num,\\n631     unsigned long ioctl_param)\\n632 {\\n633     int ret = -EINVAL;\\n634     struct net *net = current->nsproxy->net_ns;\\n635 \\n636     KNI_DBG(\\"IOCTL num=0x%0x param=0x%0lx\\\\n\\", ioctl_num, ioctl_param);\\n637 \\n638     /*\\n639      * Switch according to the ioctl called\\n640      */\\n641     switch (_IOC_NR(ioctl_num)) {\\n642     case _IOC_NR(RTE_KNI_IOCTL_TEST):\\n643         /* For test only, not used */\\n644         break;\\n645     case _IOC_NR(RTE_KNI_IOCTL_CREATE):\\n646         ret = kni_ioctl_create(net, ioctl_num, ioctl_param);\\n647         break;\\n648     case _IOC_NR(RTE_KNI_IOCTL_RELEASE):\\n649         ret = kni_ioctl_release(net, ioctl_num, ioctl_param);\\n650         break;\\n651     default:\\n652         KNI_DBG(\\"IOCTL default\\\\n\\");\\n653         break;\\n654     }\\n655 \\n656     return ret;\\n657 }\\n```\\n\u5b83\u6839\u636e ioctl_num \u6765\u5206\u53d1\u5904\u7406\u903b\u8f91\uff0cRTE_KNI_IOCTL_TEST \u4ec5\u7528\u4e8e\u6d4b\u8bd5\uff0c\u4e0d\u6267\u884c\u4efb\u4f55\u903b\u8f91\uff0cRTE_KNI_IOCTL_CREATE\u3001RTE_KNI_IOCTL_RELEASE \u5206\u522b\u7528\u4e8e\u521b\u5efa\u3001\u9500\u6bc1 kni \u865a\u62df\u7f51\u5361\u3002\\n\\n### kni_ioctl_create \u51fd\u6570\\nkni_ioctl_create \u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\n389 static int\\n390 kni_ioctl_create(struct net *net,\\n391         unsigned int ioctl_num, unsigned long ioctl_param)\\n392 {\\n393     struct kni_net *knet = net_generic(net, kni_net_id);\\n394     int ret;\\n395     struct rte_kni_device_info dev_info;\\n396     struct pci_dev *pci = NULL;\\n397     struct pci_dev *found_pci = NULL;\\n398     struct net_device *net_dev = NULL;\\n399     struct net_device *lad_dev = NULL;\\n400     struct kni_dev *kni, *dev, *n;\\n401 \\n402     printk(KERN_INFO \\"KNI: Creating kni...\\\\n\\");\\n403     /* Check the buffer size, to avoid warning */\\n404     if (_IOC_SIZE(ioctl_num) > sizeof(dev_info))\\n405         return -EINVAL;\\n406 \\n407     /* Copy kni info from user space */\\n408     ret = copy_from_user(&dev_info, (void *)ioctl_param, sizeof(dev_info));\\n409     if (ret) {\\n410         KNI_ERR(\\"copy_from_user in kni_ioctl_create\\");\\n411         return -EIO;\\n412     }\\n413 \\n414     /**\\n415      * Check if the cpu core id is valid for binding,\\n416      * for multiple kernel thread mode.\\n417      */\\n418     if (multiple_kthread_on && dev_info.force_bind &&\\n419                 !cpu_online(dev_info.core_id)) {\\n420         KNI_ERR(\\"cpu %u is not online\\\\n\\", dev_info.core_id);\\n421         return -EINVAL;\\n422     }\\n423 \\n424     /* Check if it has been created */\\n425     down_read(&knet->kni_list_lock);\\n426     list_for_each_entry_safe(dev, n, &knet->kni_list_head, list) {\\n427         if (kni_check_param(dev, &dev_info) < 0) {\\n428             up_read(&knet->kni_list_lock);\\n429             return -EINVAL;\\n430         }\\n431     }\\n432     up_read(&knet->kni_list_lock);\\n433 \\n434     net_dev = alloc_netdev(sizeof(struct kni_dev), dev_info.name,\\n435 #ifdef NET_NAME_UNKNOWN\\n436                             NET_NAME_UNKNOWN,\\n437 #endif\\n438                             kni_net_init);\\n439     if (net_dev == NULL) {\\n440         KNI_ERR(\\"error allocating device \\\\\\"%s\\\\\\"\\\\n\\", dev_info.name);\\n441         return -EBUSY;\\n442     }\\n443 \\n444     dev_net_set(net_dev, net);\\n445 \\n446     kni = netdev_priv(net_dev);\\n447 \\n448     kni->net_dev = net_dev;\\n449     kni->group_id = dev_info.group_id;\\n450     kni->core_id = dev_info.core_id;\\n451     strncpy(kni->name, dev_info.name, RTE_KNI_NAMESIZE);\\n452 \\n453     /* Translate user space info into kernel space info */\\n454     kni->tx_q = phys_to_virt(dev_info.tx_phys);\\n455     kni->rx_q = phys_to_virt(dev_info.rx_phys);\\n456     kni->alloc_q = phys_to_virt(dev_info.alloc_phys);\\n457     kni->free_q = phys_to_virt(dev_info.free_phys);\\n459     kni->req_q = phys_to_virt(dev_info.req_phys);\\n460     kni->resp_q = phys_to_virt(dev_info.resp_phys);\\n461     kni->sync_va = dev_info.sync_va;\\n462     kni->sync_kva = phys_to_virt(dev_info.sync_phys);\\n463 \\n464     kni->mbuf_kva = phys_to_virt(dev_info.mbuf_phys);\\n465     kni->mbuf_va = dev_info.mbuf_va;\\n466 \\n467 #ifdef RTE_KNI_VHOST\\n468     kni->vhost_queue = NULL;\\n469     kni->vq_status = BE_STOP;\\n470 #endif\\n471     kni->mbuf_size = dev_info.mbuf_size;\\n472 \\n.............................................................. \\n497     pci = pci_get_device(dev_info.vendor_id, dev_info.device_id, NULL);\\n499     /* Support Ethtool */\\n500     while (pci) {\\n501         KNI_PRINT(\\"pci_bus: %02x:%02x:%02x \\\\n\\",\\n502                     pci->bus->number,\\n503                     PCI_SLOT(pci->devfn),\\n504                     PCI_FUNC(pci->devfn));\\n505 \\n506         if ((pci->bus->number == dev_info.bus) &&\\n507             (PCI_SLOT(pci->devfn) == dev_info.devid) &&\\n508             (PCI_FUNC(pci->devfn) == dev_info.function)) {\\n509             found_pci = pci;\\n510             switch (dev_info.device_id) {\\n511             #define RTE_PCI_DEV_ID_DECL_IGB(vend, dev) case (dev):\\n512             #include <rte_pci_dev_ids.h>\\n513                 ret = igb_kni_probe(found_pci, &lad_dev);\\n514                 break;\\n.................................................................\\n520             default:\\n521                 ret = -1;\\n522                 break;\\n523             }\\n524 \\n525             KNI_DBG(\\"PCI found: pci=0x%p, lad_dev=0x%p\\\\n\\",\\n526                             pci, lad_dev);\\n527             if (ret == 0) {\\n528                 kni->lad_dev = lad_dev;\\n529                 kni_set_ethtool_ops(kni->net_dev);\\n530             } else {\\n531                 KNI_ERR(\\"Device not supported by ethtool\\");\\n532                 kni->lad_dev = NULL;\\n533             }\\n534 \\n535             kni->pci_dev = found_pci;\\n536             kni->device_id = dev_info.device_id;\\n537             break;\\n538         }\\n539         pci = pci_get_device(dev_info.vendor_id,\\n540                 dev_info.device_id, pci);\\n541     }                                                                                                                                                                    \\n542     if (pci)\\n543         pci_dev_put(pci);\\n544 \\n545     ret = register_netdev(net_dev);\\n546     if (ret) {\\n547         KNI_ERR(\\"error %i registering device \\\\\\"%s\\\\\\"\\\\n\\",\\n548                     ret, dev_info.name);\\n549         kni_dev_remove(kni);\\n550         return -ENODEV;\\n551     }\\n552 \\n553 #ifdef RTE_KNI_VHOST\\n554     kni_vhost_init(kni);\\n555 #endif\\n556 \\n557     /**\\n558      * Create a new kernel thread for multiple mode, set its core affinity,\\n559      * and finally wake it up.\\n560      */\\n561     if (multiple_kthread_on) {\\n562         kni->pthread = kthread_create(kni_thread_multiple,\\n563                           (void *)kni,\\n564                           \\"kni_%s\\", kni->name);\\n565         if (IS_ERR(kni->pthread)) {\\n566             kni_dev_remove(kni);\\n567             return -ECANCELED;\\n568         }\\n569         if (dev_info.force_bind)\\n570             kthread_bind(kni->pthread, kni->core_id);\\n571         wake_up_process(kni->pthread);\\n572     }\\n573 \\n574     down_write(&knet->kni_list_lock);\\n575     list_add(&kni->list, &knet->kni_list_head);\\n576     up_write(&knet->kni_list_lock);\\n577 \\n578     return 0;\\n579 }\\n```\\nkni_ioctl_create \u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a\\n\\n1. \u4ece\u7528\u6237\u6001\u62f7\u8d1d rte_kni_device_info \u7ed3\u6784\uff0c\u586b\u5145\u5230 dev_info \u4e2d\\n2. \u5224\u65ad multiple_thread \u6a21\u5f0f\u662f\u5426\u5f00\u542f\uff0c\u5f00\u542f\u65f6\u5219\u5f53\u8bbe\u5b9a\u4e86 dev_info \u7684 force_bind \u9009\u9879\u540e\u68c0\u67e5 dev_info \u4e2d\u8bbe\u5b9a\u7684 core_id \u662f\u5426\u5408\u6cd5\uff0c\u4e0d\u5408\u6cd5\u5219\u7acb\u5373\u8fd4\u56de\\n3. \u83b7\u53d6 kni_net \u7ed3\u6784\u4e2d kni_list_lock \u4fe1\u53f7\u91cf\uff0c\u904d\u5386 kni_net \u7684 kni_list_head \u94fe\u8868\uff0c\u68c0\u67e5\u5f85\u521b\u5efa\u7684\u63a5\u53e3\u662f\u5426\u5df2\u7ecf\u88ab\u521b\u5efa\u8fc7\uff0c\u662f\u5219\u91ca\u653e\u4fe1\u53f7\u91cf\u5e76\u8fd4\u56de\\n4. \u91ca\u653e\u4fe1\u53f7\u91cf\u5e76\u8c03\u7528 alloc_netdev \u521b\u5efa\u4e00\u4e2a kni_net  netdev \u63a5\u53e3\uff0cdev_info \u7684 name \u5b57\u6bb5\u4e3a netdev \u7684\u540d\u79f0\uff0ckni_net_init \u7528\u4e8e\u521d\u59cb\u5316\u6b64 netdev \u7ed3\u6784\u4e2d kni \u7684\u79c1\u6709\u53d8\u91cf\\n5. \u5efa\u7acb kni netdev \u7ed3\u6784\u4e0e net \u7ed3\u6784\u7684\u5173\u8054\uff0c\u586b\u5145 kni_dev \u4e2d\u7684\u5b57\u6bb5\uff0c\u586b\u5145 txq\u3001rxq \u7b49\u5171\u4eab fifo \u5730\u5740\u65f6\u8c03\u7528 phys_to_virt \u5c06\u7269\u7406\u5730\u5740\u8f6c\u5316\u4e3a\u5185\u6838\u7684\u865a\u62df\u5730\u5740\u4f7f\u7528\\n6. \u5faa\u73af\u8c03\u7528 pci_get_device \u4f9d\u6b21\u904d\u5386 pci \u8bbe\u5907\uff0c\u5f53 pci \u53f7\u4e0e dev_info \u4e2d\u914d\u7f6e\u7684 pci \u53f7\u4e00\u81f4\u65f6\uff0c\u6839\u636e device id \u6765\u9009\u62e9 probe \u51fd\u6570\\n7. device id \u4e0e rte_pci_dev_ids.h \u4e2d\u5b9a\u4e49\u7684 igb\u3001ixgbe \u7f51\u5361\u5339\u914d\u65f6\uff0c\u8c03\u7528 igb_kni_probe\u3001ixgbe_kni_probe \u63a5\u53e3\u5b8c\u6210\u7c7b\u4f3c\u7f51\u5361\u9a71\u52a8 probe \u7684\u8fc7\u7a0b\uff0c\u6b63\u5e38 probe \u4f1a\u7ee7\u7eed\u521b\u5efa\u4e00\u4e2a netdev \u7ed3\u6784\uff0c\u6b64\u7ed3\u6784\u88ab\u5b58\u50a8\u5230 lad_dev \u4e2d\u8fd4\u56de\uff0c\u6b64 lad_dev \u7684\u503c\u6700\u7ec8\u88ab\u4fdd\u5b58\u5230 kni_net \u7ed3\u6784\u4e2d\u7684 lad_dev \u5b57\u6bb5\u4e2d\uff0cprobe \u6210\u529f\u540e\uff0ckni \u4f1a\u8bbe\u5b9a kni_net \u4e2d net_dev \u7684 ethtool_ops \u5b57\u6bb5\uff0c\u6b64\u5b57\u6bb5\u5c01\u88c5\u4e86\u5bf9 lad_dev->ethtool_ops \u4e2d\u65b9\u6cd5\u7684\u8c03\u7528\u3002\u7f51\u5361\u4e0d\u652f\u6301 ethtool \u7684\u65f6\u5019 lad_dev \u4e3a\u7a7a\\n8. \u5f53 pci \u6709\u6548\u65f6\uff0c\u8c03\u7528 pci_dev_put \u91ca\u653e pci \\n9. \u8c03\u7528 register_netdev \u6ce8\u518c kni net_device \u7ed3\u6784\uff0c\u5931\u8d25\u5219\u8c03\u7528 kni_dev_remove \u79fb\u9664\u865a\u62df\u63a5\u53e3\\n10. multiple_thread \u6a21\u5f0f\u5f00\u542f\u540e\uff0c\u521b\u5efa\u56de\u8c03\u51fd\u6570\u4e3a kni_thread_multiple  \u7684\u5185\u6838\u7ebf\u7a0b\u5e76\u5728 dev_info \u4e2d\u7684 force_bind \u5b57\u6bb5\u8bbe\u5b9a\u65f6\uff0c\u7ed1\u5b9a\u7ebf\u7a0b\u5230\u6307\u5b9a\u7684\u6838\u4e0a\\n11. \u83b7\u53d6 kni_net \u7ed3\u6784\u4e2d\u7684 kni_list_lock \u4fe1\u53f7\u91cf\uff0c\u6ce8\u518c kni \u8bbe\u5907\u5230 kni_list_head \u94fe\u8868\u4e2d\uff0c\u6700\u540e\u91ca\u653e\u4fe1\u53f7\u91cf\\n\\nkni \u5728\u904d\u5386 pci \u5217\u8868\u5e76 probe \u9a71\u52a8\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a\u6280\u5de7\uff0c\u5b83\u5728 probe igb \u7f51\u5361\u65f6\u4f7f\u7528\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n511             #define RTE_PCI_DEV_ID_DECL_IGB(vend, dev) case (dev):\\n512             #include <rte_pci_dev_ids.h>\\n513                 ret = igb_kni_probe(found_pci, &lad_dev);\\n```\\n\u9996\u5148\u5b9a\u4e49\u4e86\u4e00\u4e2a RTE_PCI_DEV_ID_DECL_IGB \u5b8f\uff0c\u6b64\u5b8f\u4f7f\u7528 dev \u53c2\u6570\uff0c\u9884\u5904\u7406\u540e\u5219\u4e3a case (0201): \u8fd9\u79cd\u683c\u5f0f\uff0c\u5b83\u6b63\u597d\u662f\u4e00\u4e2a\u4ee5\u8bbe\u5907 id \u4e3a\u6761\u4ef6\u7684 case \u9009\u9879\uff0c\u5305\u542b\u4e86 rte_pci_dev_ids.h \u540e\uff0c\u6240\u6709\u7684\u652f\u6301\u7684 igb \u7f51\u5361\u90fd\u4f1a\u751f\u6210\u76f8\u5173\u7684 case\uff0c\u800c\u8fd9\u4e9b case \u7684\u4e3b\u4f53\u51fd\u6570\u90fd\u662f igb_kni_probe\uff0c\u8fd9\u5c31\u662f\u8fd9\u91cc\u7684\u673a\u5173\u3002\\n\\n## rte_kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u7684\u6536\u5305\u51fd\u6570\\nrte_kni \u521b\u5efa\u7684\u865a\u62df\u7f51\u7edc\u63a5\u53e3\u652f\u6301\u591a\u4e2a\u6536\u5305\u51fd\u6570\uff0c\u4e0b\u9762\u6211\u4ee5 kni_net_rx_normal \u8fd9\u4e2a\u666e\u901a\u7684\u51fd\u6570\u4e3a\u4f8b\uff0c\u63a2\u8ba8\u8fd9\u91cc\u7684\u8fc7\u7a0b\u3002\\n\\n```c\\n128 static void\\n129 kni_net_rx_normal(struct kni_dev *kni)\\n130 {\\n131     unsigned ret;\\n132     uint32_t len;\\n133     unsigned i, num_rx, num_fq;\\n134     struct rte_kni_mbuf *kva;\\n135     struct rte_kni_mbuf *va[MBUF_BURST_SZ];\\n136     void * data_kva;\\n137 \\n138     struct sk_buff *skb;\\n139     struct net_device *dev = kni->net_dev;\\n140 \\n141     /* Get the number of free entries in free_q */\\n142     num_fq = kni_fifo_free_count(kni->free_q);\\n143     if (num_fq == 0) {\\n144         /* No room on the free_q, bail out */\\n145         return;\\n146     }\\n147 \\n148     /* Calculate the number of entries to dequeue from rx_q */\\n149     num_rx = min(num_fq, (unsigned)MBUF_BURST_SZ);\\n150 \\n151     /* Burst dequeue from rx_q */\\n152     num_rx = kni_fifo_get(kni->rx_q, (void **)va, num_rx);\\n153     if (num_rx == 0)\\n154         return;\\n155 \\n156     /* Transfer received packets to netif */\\n157     for (i = 0; i < num_rx; i++) {\\n158         kva = (void *)va[i] - kni->mbuf_va + kni->mbuf_kva;\\n159         len = kva->data_len;\\n160         data_kva = kva->buf_addr + kva->data_off - kni->mbuf_va\\n161                 + kni->mbuf_kva;\\n162 \\n163         skb = dev_alloc_skb(len + 2);\\n164         if (!skb) {\\n165             KNI_ERR(\\"Out of mem, dropping pkts\\\\n\\");\\n166             /* Update statistics */\\n167             kni->stats.rx_dropped++;\\n168         }\\n169         else {\\n170             /* Align IP on 16B boundary */\\n171             skb_reserve(skb, 2);\\n172             memcpy(skb_put(skb, len), data_kva, len);\\n173             skb->dev = dev;\\n174             skb->protocol = eth_type_trans(skb, dev);\\n175             skb->ip_summed = CHECKSUM_UNNECESSARY;\\n176 \\n177             /* Call netif interface */\\n178             netif_rx_ni(skb);\\n179 \\n180             /* Update statistics */\\n181             kni->stats.rx_bytes += len;\\n182             kni->stats.rx_packets++;\\n183         }\\n184     }\\n185 \\n186     /* Burst enqueue mbufs into free_q */\\n187     ret = kni_fifo_put(kni->free_q, (void **)va, num_rx);\\n188     if (ret != num_rx)\\n189         /* Failing should not happen */\\n190         KNI_ERR(\\"Fail to enqueue entries into free_q\\\\n\\");\\n191 }\\n\\n```\\n\u6b64\u51fd\u6570\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a\\n\\n1. \u5224\u65ad free_q \u4e2d\u662f\u5426\u6709\u7a7a\u95f4\uff0c\u65e0\u5219\u76f4\u63a5\u8fd4\u56de\uff0c\u6709\u5219\u7ee7\u7eed\u4e0b\u4e00\u6b65\\n2. \u786e\u5b9a\u80fd\u591f\u4ece rx_q \u4e2d\u51fa\u961f\u5217\u7684\u6570\u76ee\uff0c\u6b64\u6570\u76ee\u662f free_q \u4e2d\u7684\u7a7a\u95f2\u6570\u76ee\u4e0e burst \u5927\u5c0f\u7684\u6700\u5c0f\u503c\\n3. \u8c03\u7528 kni_fifo_get \u4ece rx_q \u961f\u5217\u4e2d\u83b7\u53d6 num_rx \u4e2a mbuf \u7684\u5730\u5740\uff0c\u6570\u91cf\u4e3a 0 \u5219\u8fd4\u56de\\n4. \u5bf9\u4e8e\u6bcf\u4e2a\u51fa\u961f\u5217\u7684 mbuf\uff0c\u521b\u5efa sk_buff \u7ed3\u6784\uff0c\u590d\u5236 mbuf \u4e2d\u7684\u62a5\u6587\u5230 sk_buff \u4e2d\u5e76\u586b\u5145\u76f8\u5173\u7684\u5b57\u6bb5\uff0c\u901a\u8fc7 netif_rx_ni \u6295\u9012\u5230\u5185\u6838\u534f\u8bae\u6808\u5e76\u589e\u52a0 kni \u5185\u90e8\u7edf\u8ba1\\n5. \u5c06 mbuf \u91ca\u653e\u5230 free_q \u961f\u5217\u4e2d\\n\\n## rte_kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u7684\u53d1\u5305\u51fd\u6570\\n```c\\n390 static int\\n391 kni_net_tx(struct sk_buff *skb, struct net_device *dev)\\n392 {\\n393     int len = 0;\\n394     unsigned ret;\\n395     struct kni_dev *kni = netdev_priv(dev);\\n396     struct rte_kni_mbuf *pkt_kva = NULL;\\n397     struct rte_kni_mbuf *pkt_va = NULL;\\n398 \\n399     dev->trans_start = jiffies; /* save the timestamp */\\n400 \\n401     /* Check if the length of skb is less than mbuf size */\\n402     if (skb->len > kni->mbuf_size)\\n403         goto drop;\\n404 \\n405     /**\\n406      * Check if it has at least one free entry in tx_q and\\n407      * one entry in alloc_q.\\n408      */\\n409     if (kni_fifo_free_count(kni->tx_q) == 0 ||\\n410             kni_fifo_count(kni->alloc_q) == 0) {\\n411         /**\\n412          * If no free entry in tx_q or no entry in alloc_q,\\n413          * drops skb and goes out.\\n414          */\\n415         goto drop;\\n416     }\\n417 \\n418     /* dequeue a mbuf from alloc_q */\\n419     ret = kni_fifo_get(kni->alloc_q, (void **)&pkt_va, 1);\\n420     if (likely(ret == 1)) {\\n421         void *data_kva;\\n422 \\n423         pkt_kva = (void *)pkt_va - kni->mbuf_va + kni->mbuf_kva;\\n424         data_kva = pkt_kva->buf_addr + pkt_kva->data_off - kni->mbuf_va\\n425                 + kni->mbuf_kva;\\n426 \\n427         len = skb->len;\\n428         memcpy(data_kva, skb->data, len);\\n429         if (unlikely(len < ETH_ZLEN)) {\\n430             memset(data_kva + len, 0, ETH_ZLEN - len);           \\n431             len = ETH_ZLEN;\\n432         }\\n433         pkt_kva->pkt_len = len;\\n434         pkt_kva->data_len = len;\\n435 \\n436         /* enqueue mbuf into tx_q */\\n437         ret = kni_fifo_put(kni->tx_q, (void **)&pkt_va, 1);\\n438         if (unlikely(ret != 1)) {\\n439             /* Failing should not happen */\\n440             KNI_ERR(\\"Fail to enqueue mbuf into tx_q\\\\n\\");\\n441             goto drop;\\n442         }\\n443     } else {\\n444         /* Failing should not happen */\\n445         KNI_ERR(\\"Fail to dequeue mbuf from alloc_q\\\\n\\");\\n446         goto drop;\\n447     }\\n448 \\n449     /* Free skb and update statistics */\\n450     dev_kfree_skb(skb);\\n451     kni->stats.tx_bytes += len;\\n452     kni->stats.tx_packets++;\\n453 \\n454     return NETDEV_TX_OK;\\n455 \\n456 drop:\\n457     /* Free skb and update statistics */\\n458     dev_kfree_skb(skb);\\n459     kni->stats.tx_dropped++;\\n460 \\n461     return NETDEV_TX_OK;\\n462 }\\n```\\n\u5f53\u5185\u6838\u534f\u8bae\u6808\u8981\u901a\u8fc7 kni \u63a5\u53e3\u53d1\u5305\u65f6\uff0c\u4f1a\u8c03\u7528\u5230 kni_net_tx \u51fd\u6570\uff0c\u6b64\u51fd\u6570\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a\\n\\n1. \u5224\u65ad alloc_q \u4e0e tx_q \u4e2d\u662f\u5426\u6709\u7a7a\u95f2\u9879\u76ee\uff0c\u65e0\u7a7a\u95f2\u9879\u76ee\u5219\u4e22\u5f03 sk_buff \u5e76\u589e\u52a0\u7edf\u8ba1\\n2. \u4ece alloc_q \u4e2d\u83b7\u53d6\u4e00\u4e2a mbuf \u5730\u5740\uff0c\u83b7\u53d6\u5931\u8d25\u5219\u4e22\u5f03 sk_buff \u5e76\u589e\u52a0\u7edf\u8ba1\\n3. \u83b7\u53d6\u5230 mbuf \u5730\u5740\u540e\u5c06 sk_buff \u4e2d\u7684\u62a5\u6587\u586b\u5145\u5230 mbuf \u4e2d\u7136\u540e\u653e\u5230 tx_q \u961f\u5217\u4e2d\\n4. \u91ca\u653e sk_buff \u7ed3\u6784\u5e76\u589e\u52a0\u7edf\u8ba1\\n\\n## rte_kni \u865a\u62df\u63a5\u53e3\u6536\u53d1\u5305\u4e2d mbuf \u7684\u6d41\u52a8\u8fc7\u7a0b\\n\u4e0b\u56fe\u5f62\u8c61\u7684\u8868\u793a\u51fa\u4e86 kni \u865a\u62df\u63a5\u53e3\u6536\u53d1\u8fc7\u7a0b\u4e2d mbuf \u7684\u6d41\u52a8\uff0c\u6458\u81ea dpdk \u5b98\u7f51\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210422084914778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\\n\\n\u53ef\u4ee5\u53c2\u8003 [dpdk-16.04 kni \u793a\u4f8b\u7a0b\u5e8f\u5206\u6790](https://blog.csdn.net/Longyu_wlz/article/details/115918403?spm=1001.2014.3001.5501) \u6765\u5b66\u4e60\u3002\\n## \u91ca\u653e kni \u865a\u62df\u63a5\u53e3\u7684\u8fc7\u7a0b\\n\u91ca\u653e kni \u865a\u62df\u63a5\u53e3\u65f6\uff0c\u7528\u6237\u6001\u7a0b\u5e8f\u8c03\u7528 ioctl \u5e76\u4f20\u9012 RTE_KNI_IOCTL_RELEASE \u53c2\u6570\uff0c\u5185\u6838\u6001\u4e2d\u4f1a\u8c03\u7528 kni_ioctl_release \u51fd\u6570\uff0c\u6b64\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n581 static int\\n582 kni_ioctl_release(struct net *net,\\n583         unsigned int ioctl_num, unsigned long ioctl_param)\\n584 {\\n585     struct kni_net *knet = net_generic(net, kni_net_id);\\n586     int ret = -EINVAL;\\n587     struct kni_dev *dev, *n;\\n588     struct rte_kni_device_info dev_info;\\n589 \\n590     if (_IOC_SIZE(ioctl_num) > sizeof(dev_info))\\n591             return -EINVAL;\\n592 \\n593     ret = copy_from_user(&dev_info, (void *)ioctl_param, sizeof(dev_info));\\n594     if (ret) {\\n595         KNI_ERR(\\"copy_from_user in kni_ioctl_release\\");\\n596         return -EIO;\\n597     }\\n598 \\n599     /* Release the network device according to its name */\\n600     if (strlen(dev_info.name) == 0)\\n601         return ret;\\n602 \\n603     down_write(&knet->kni_list_lock);\\n604     list_for_each_entry_safe(dev, n, &knet->kni_list_head, list) {\\n605         if (strncmp(dev->name, dev_info.name, RTE_KNI_NAMESIZE) != 0)\\n606             continue;\\n607 \\n608         if (multiple_kthread_on && dev->pthread != NULL) {\\n609             kthread_stop(dev->pthread);\\n610             dev->pthread = NULL;\\n611         }\\n612 \\n613 #ifdef RTE_KNI_VHOST\\n614         kni_vhost_backend_release(dev);\\n615 #endif\\n616         kni_dev_remove(dev);\\n617         list_del(&dev->list);\\n618         ret = 0;\\n619         break;\\n620     }\\n621     up_write(&knet->kni_list_lock);\\n622     printk(KERN_INFO \\"KNI: %s release kni named %s\\\\n\\",\\n623         (ret == 0 ? \\"Successfully\\" : \\"Unsuccessfully\\"), dev_info.name);\\n624         \\n625     return ret;\\n626 }\\n```\\n\u6b64\u51fd\u6570\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a\\n\\n1. \u4ece\u7528\u6237\u6001\u590d\u5236\u53c2\u6570\u5230 dev_info \u7ed3\u6784\u4f53\u4e2d\\n2. \u83b7\u53d6 kni_net \u7ed3\u6784\u4f53\u7684 kni_list_lock \u4fe1\u53f7\u91cf\uff0c\u904d\u5386 kni_list_head \u94fe\u8868\uff0c\u4f7f\u7528 dev_info.name \u6765\u5339\u914d\uff0c\u5339\u914d\u6210\u529f\u540e\u91ca\u653e kni \u8bbe\u5907\u4e2d\u521b\u5efa\u7684\u5185\u6838\u7ebf\u7a0b\uff0c\u8c03\u7528 kni_dev_remove \u6267\u884c\u7f51\u5361\u76f8\u5173\u6570\u636e\u7ed3\u6784\u7684\u91ca\u653e\u8fc7\u7a0b\\n3. \u5c06\u5f53\u524d\u8bbe\u5907\u4ece kni_net \u94fe\u8868\u4e2d\u79fb\u9664\\n4. \u91ca\u653e\u5b8c\u6210\u540e\uff0c\u91ca\u653e\u83b7\u53d6\u5230\u7684 kni_list_lock \u4fe1\u53f7\u91cf\\n\\nkni_dev_remove \u4e0e kni_ioctl_create \u6709\u76f8\u540c\u4e4b\u5904\uff0c\u5b83\u9996\u5148\u5339\u914d\u9a71\u52a8\uff0c\u5339\u914d\u5230\u540e\u5219\u8c03\u7528\u7f51\u5361\u7684 xx_kni_remove \u51fd\u6570\u6765\u91ca\u653e xx_kni_probe \u51fd\u6570\u4e2d\u521b\u5efa\u7684\u76f8\u5173\u6570\u636e\u7ed3\u6784\uff0c\u6b64\u540e\u5f53 kni \u8bbe\u5907\u4e2d net_dev \u5b58\u5728\u65f6\uff0cunregister net_dev \u5e76\u91ca\u653e\u6b64\u7ed3\u6784\u3002\\n\\nkni_dev_remove \u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n347 static int\\n348 kni_dev_remove(struct kni_dev *dev)\\n349 {\\n350     if (!dev)\\n351         return -ENODEV;\\n352 \\n353     switch (dev->device_id) {\\n354     #define RTE_PCI_DEV_ID_DECL_IGB(vend, dev) case (dev):\\n355     #include <rte_pci_dev_ids.h>\\n356         igb_kni_remove(dev->pci_dev);\\n357         break;\\n358     #define RTE_PCI_DEV_ID_DECL_IXGBE(vend, dev) case (dev):\\n359     #include <rte_pci_dev_ids.h>\\n360         ixgbe_kni_remove(dev->pci_dev);\\n361         break;\\n362     default:\\n363         break;\\n364     }\\n365 \\n366     if (dev->net_dev) {\\n367         unregister_netdev(dev->net_dev);\\n368         free_netdev(dev->net_dev);\\n369     }\\n370 \\n371     return 0;\\n372 }\\n```\\n\u5728\u6267\u884c\u4e86\u4e0a\u8ff0\u8fc7\u7a0b\u540e\uff0c\u7a0b\u5e8f\u901a\u8fc7 close /dev/kni \u6765\u91ca\u653e kni \u8bbe\u5907\u6587\u4ef6\uff0c\u6b64\u8fc7\u7a0b\u5728\u5185\u6838\u4e2d\u901a\u8fc7\u8c03\u7528 kni_release \u51fd\u6570\u6765\u5b8c\u6210\uff0c\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n254 static int\\n255 kni_release(struct inode *inode, struct file *file)\\n256 {\\n257     struct net *net = file->private_data;\\n258     struct kni_net *knet = net_generic(net, kni_net_id);\\n259     struct kni_dev *dev, *n;\\n260 \\n261     /* Stop kernel thread for single mode */\\n262     if (multiple_kthread_on == 0) {\\n263         /* Stop kernel thread */\\n264         kthread_stop(knet->kni_kthread);\\n265         knet->kni_kthread = NULL;\\n266     }\\n267 \\n268     down_write(&knet->kni_list_lock);\\n269     list_for_each_entry_safe(dev, n, &knet->kni_list_head, list) {\\n270         /* Stop kernel thread for multiple mode */\\n271         if (multiple_kthread_on && dev->pthread != NULL) {\\n272             kthread_stop(dev->pthread);\\n273             dev->pthread = NULL;\\n274         }\\n275 \\n276 #ifdef RTE_KNI_VHOST\\n277         kni_vhost_backend_release(dev);\\n278 #endif\\n279         kni_dev_remove(dev);\\n280         list_del(&dev->list);\\n281     }\\n282     up_write(&knet->kni_list_lock);\\n283 \\n284     /* Clear the bit of device in use */\\n285     clear_bit(KNI_DEV_IN_USE_BIT_NUM, &knet->device_in_use);\\n286 \\n287     put_net(net);\\n288     KNI_PRINT(\\"/dev/kni closed\\\\n\\");\\n289 \\n290     return 0;\\n291 }\\n```\\n\u5176\u8fc7\u7a0b\u7c7b\u4f3c kni_ioctl_release\uff0c\u5374\u589e\u52a0\u4e86\u5bf9 kni_net \u4e2d\u521b\u5efa\u7684\u5185\u6838\u7ebf\u7a0b\u7684\u91ca\u653e\u8fc7\u7a0b\uff0c\u5e76\u5c06 kni_net \u4e2d\u7684 device_in_use \u7f6e\u4f4d\uff0c\u8868\u660e\u8bbe\u5907\u7a7a\u95f2\uff0c\u7136\u540e\u8c03\u7528 put_net \u9012\u51cf net \u7ed3\u6784\u7684\u5f15\u7528\u8ba1\u6570\uff0c\u6253\u5370\u4fe1\u606f\u540e\u9000\u51fa\u3002\\n\\n## \u4e3a\u4ec0\u4e48 dpdk \u7a0b\u5e8f\u88ab\u5f3a\u5236\u6740\u6b7b\u7684\u65f6\u5019 kni \u63a5\u53e3\u88ab\u91ca\u653e\uff1f\\n\u5f53 dpdk \u7a0b\u5e8f\u88ab\u5f3a\u5236\u6740\u6b7b\u65f6\uff0c\u5185\u6838\u4f1a\u56de\u6536\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8c03\u7528 kni_release \u6765\u91ca\u653e kni \u865a\u62df\u7f51\u5361\u8bbe\u5907\u3002\\n\\n## rte_kni \u6a21\u5757\u7684\u89e3\u521d\u59cb\u5316\u51fd\u6570\\nrte_kni \u6a21\u5757\u7684\u89e3\u521d\u59cb\u5316\u51fd\u6570\u4e3a kni_exit\uff0c\u6b64\u51fd\u6570\u4e2d\u9996\u5148\u89e3\u9664 kni misc \u8bbe\u5907\u6ce8\u518c\u4fe1\u606f\uff0c\u7136\u540e\u89e3\u9664\u6ce8\u518c\u7684\u6bcf\u7f51\u7edc\u547d\u4ee4\u7a7a\u95f4\u7684 kni_net_ops \u64cd\u4f5c\u3002\\n\\n\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n197 static void __exit\\n198 kni_exit(void)                                                                                                                                                           \\n199 {\\n200     misc_deregister(&kni_misc);\\n201 #if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 32)\\n202     unregister_pernet_subsys(&kni_net_ops);\\n203 #else\\n204     register_pernet_gen_subsys(&kni_net_id, &kni_net_ops);\\n205 #endif /* LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 32) */\\n206     KNI_PRINT(\\"####### DPDK kni module unloaded  #######\\\\n\\");\\n207 }\\n```"},{"id":"/dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled \u63a5\u53e3\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled \u63a5\u53e3\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled \u63a5\u53e3\u95ee\u9898.md","source":"@site/blog/dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled \u63a5\u53e3\u95ee\u9898.md","title":"dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled \u63a5\u53e3\u95ee\u9898","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":4.9,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 rte_kni \u6a21\u5757\u5206\u6790"},"nextItem":{"title":"\u7f16\u8bd1\u76f8\u5173\u914d\u7f6e\u6dfb\u52a0","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u6269\u5c55\u65b0\u7f51\u5361\u9a71\u52a8\u8fc7\u7a0b"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\ndpdk-16.04 \u9002\u914d vpp \u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u6267\u884c vpp \u7a0b\u5e8f\u9047\u5230\u4e86\u5982\u4e0b\u62a5\u9519\u5185\u5bb9\uff1a\\n\\n```bash\\nload_one_plugin:145: /lib/vpp_plugins/router.so: undefined symbol: rte_cpu_get_flag_enabled\\nload_one_plugin:146: Failed to load plugin \'router.so\'\\n```\\n\\n\u62a5\u9519\u4fe1\u606f\u8868\u660e\u672a\u627e\u5230 rte_cpu_get_flag_enabled \u8fd9\u4e2a\u7b26\u53f7\u7684\u5b9a\u4e49\uff0c\u4f7f\u7528 nm \u67e5\u770b router.so \u4e2d\u76f8\u5173\u7684\u7b26\u53f7\u4fe1\u606f\uff0c\u5f97\u5230\u4e86\u5982\u4e0b\u5185\u5bb9\uff1a\\n\\n\\n```bash\\n                 U rte_cpu_get_flag_enabled\\n00000000000037a0 t rte_rtm_init\\n```\\n\\n\u786e\u5b9a rte_cpu_get_flag_enabled \u51fd\u6570\u786e\u5b9e\u6ca1\u6709\u5b9a\u4e49!\\n\\n## rte_cpu_get_flag_enabled \u5728\u54ea\u91cc\u88ab\u5b9a\u4e49\uff1f\\n\u5728 dpdk 16.04 \u6e90\u7801\u4e2d\u641c\u7d22\u53d1\u73b0\u8fd9\u4e2a\u51fd\u6570\u5728\u4e0b\u9762\u51e0\u4e2a\u6587\u4ef6\u4e2d\u90fd\u6709\u5b9a\u4e49\u3002\\n\\n```bash\\n./lib/librte_eal/common/arch/tile/rte_cpuflags.c:44:rte_cpu_get_flag_enabled(__attribute__((unused)) enum rte_cpu_flag_t feature)\\n./lib/librte_eal/common/arch/x86/rte_cpuflags.c:187:rte_cpu_get_flag_enabled(enum rte_cpu_flag_t feature)\\n./lib/librte_eal/common/arch/arm/rte_cpuflags.c:157:rte_cpu_get_flag_enabled(enum rte_cpu_flag_t feature)\\n./lib/librte_eal/common/arch/ppc_64/rte_cpuflags.c:125:rte_cpu_get_flag_enabled(enum rte_cpu_flag_t feature)\\n```\\n\u6211\u7f16\u8bd1\u7684\u7248\u672c\u4e3a x86-64 \u67b6\u6784\uff0c\u5bf9\u5e94 **./lib/librte_eal/common/arch/x86/rte_cpuflags.c** \u6587\u4ef6\uff0c\u540c\u65f6\u6211\u7f16\u8bd1\u7684\u76ee\u6807\u67b6\u6784\u4e3a linux \u7cfb\u7edf\uff0cMakefile \u4e2d\u7684\u7f16\u8bd1\u8bed\u53e5\u5982\u4e0b\uff1a\\n\\n```bash\\n./lib/librte_eal/linuxapp/eal/Makefile:104:SRCS-$(CONFIG_RTE_EXEC_ENV_LINUXAPP) += rte_cpuflags.c\\n```\\n\u80fd\u591f\u786e\u5b9a **rte_cpu_get_flag_enabled** \u51fd\u6570\u88ab\u7f16\u8bd1\u5230\u4e86 librte_eal.a \u4e2d\uff0c\u53ea\u6709\u94fe\u63a5\u4e86\u8fd9\u4e2a\u5e93\u5e94\u8be5\u80fd\u591f\u627e\u5230\u8fd9\u4e2a\u7b26\u53f7\u3002\\n\\n## \u4e3a\u4ec0\u4e48 rte_cpu_get_flag_enabled \u672a\u88ab\u94fe\u63a5\uff1f\\n\u9996\u5148\u68c0\u67e5\u7f16\u8bd1\u53c2\u6570\uff0c\u53d1\u73b0\u7f16\u8bd1\u53c2\u6570\u4e2d\u6ca1\u6709\u94fe\u63a5 librte_eal.a\uff0c\u8fd9\u80fd\u591f\u89e3\u91ca rte_cpu_get_flag_enabled \u51fd\u6570\u627e\u4e0d\u5230\u5b9a\u4e49\u7684\u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u4e2a\u51fd\u6570\u53c8\u5728\u54ea\u91cc\u88ab\u8c03\u7528\u5462\uff1f\\n\\n\u5728 router.so \u4ee3\u7801\u4e2d\u641c\u7d22\uff0c**\u6ca1\u6709\u53d1\u73b0\u8c03\u7528\u70b9**\uff0c\u9887\u6709\u4e9b\u610f\u5916\u3002\u60f3\u5230\u8fd9\u4e2a\u51fd\u6570\u53ef\u80fd\u662f\u5728 dpdk \u51fd\u6570\u4e2d\u88ab\u8c03\u7528\uff0c\u641c\u7d22\u53d1\u73b0\u5b83\u539f\u6765\u662f\u5728 **rte_rtm_init** \u51fd\u6570\u4e2d\u88ab\u8c03\u7528\u3002x86 \u67b6\u6784\u4e2d\uff0c\u5176\u5b9a\u4e49\u4f4d\u4e8e **./lib/librte_eal/common/include/arch/x86/rte_spinlock.h** \u6587\u4ef6\u4e2d\u3002\\n\\nrte_spinlock.h \u6587\u4ef6\u4e2d\u7684\u76f8\u5173\u6e90\u7801\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n```c\\nstatic uint8_t rtm_supported; /* cache the flag to avoid the overhead\\n                                 of the rte_cpu_get_flag_enabled function */\\n\\nstatic inline void __attribute__((constructor))\\nrte_rtm_init(void)\\n{\\n        rtm_supported = rte_cpu_get_flag_enabled(RTE_CPUFLAG_RTM);\\n}\\n\\nstatic inline int rte_tm_supported(void)\\n{\\n        rte_cpu_get_flag_enabled(RTE_CPUFLAG_RTM);\\n        return rtm_supported;\\n}\\n```\\n\u8fd9\u4e2a\u5934\u6587\u4ef6\u4e2d\u7684\u5b9a\u4e49\u5185\u5bb9\u6709\u5982\u4e0b\u51e0\u4e2a\u7279\u522b\u4e4b\u5904\uff1a\\n\\n1. \u5728\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9759\u6001\u53d8\u91cf rtm_supported\\n2. rte_rtm_init \u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a\u5185\u8054\u51fd\u6570+\u6784\u9020\u51fd\u6570\uff0c\u5c06\u4f1a\u5728 main \u51fd\u6570\u6267\u884c\u524d\u88ab\u8c03\u7528\\n3. rte_rtm_init \u4e2d\u8c03\u7528\u4e86\u4e00\u4e2a\u975e\u5185\u8054\u51fd\u6570 rte_cpu_get_flag_enabled\\n\\n\u5728\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u9759\u6001\u53d8\u91cf\uff0c\u5219\u53ea\u8981\u5305\u542b\u4e86\u8fd9\u4e2a\u5934\u6587\u4ef6\u90fd\u4f1a\u6709\u4e00\u4e2a rtm_supported \u7684\u5b9a\u4e49\uff0c\u4e0d\u8fc7\u7531\u4e8e**\u53d8\u91cf\u7c7b\u578b\u4e3a\u9759\u6001\u53d8\u91cf\uff0c\u6709\u5c40\u90e8\u4f5c\u7528\u57df\u56e0\u800c\u6ca1\u6709\u9020\u6210\u95ee\u9898**\u3002\\n\\nrte_rtm_init \u5728\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u5e76\u88ab\u58f0\u660e\u4e3a**\u6784\u9020\u51fd\u6570**\uff0c\u5219\u53ea\u8981**\u5305\u542b\u4e86\u8fd9\u4e2a\u5934\u6587\u4ef6**\u5c31\u4f1a\u94fe\u63a5 **rte_rtm_init**\u3002\u6709 **inline** \u7684\u4fee\u9970\u52a0\u5b8c\u6574\u7684\u5b9a\u4e49\uff0c\u4e5f\u80fd\u591f\u8fd9\u6837\u73a9\u3002\\n\\n\u53ef\u662f\u5728\u8fd9\u91cc\uff0c **rte_rtm_init** \u4e2d\u5374\u8c03\u7528\u4e86\u4e00\u4e2a\u975e\u5185\u8054\u51fd\u6570 **rte_cpu_get_flag_enabled**\uff0c\u800c **rte_cpu_get_flag_enabled** \u5374\u9700\u8981\u94fe\u63a5 **librte_eal.a** \u624d\u80fd\u627e\u5230\u5b9e\u9645\u7684\u5b9a\u4e49\uff0c\u8fd9\u5c31\u5b58\u5728\u4e00\u79cd\u9690\u5f0f\u7684\u4f9d\u8d56\u3002\u5373**\u5305\u542b\u4e86 rte_spinlock.h \u5c31\u5fc5\u987b\u94fe\u63a5 librte_eal.a**\u3002\\n\\nrouter.so \u4e2d\u5b58\u5728\u5305\u542b\u4e86 **rte_spinlock.h** \u7684\u60c5\u51b5\uff0c\u5374\u6ca1\u6709\u94fe\u63a5 **librte_eal.a**\uff0c\u5c31\u8e29\u5230\u4e86\u8fd9\u4e2a\u5751\uff01\\n\\n## \u5982\u4f55\u89e3\u51b3\u95ee\u9898\uff1f\\ndpdk 16.04 \u662f\u4e00\u4e2a\u6bd4\u8f83\u8001\u7684\u7248\u672c\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u5728\u9ad8\u7248\u672c\u5df2\u7ecf\u88ab\u4fee\u590d\u4e86\u3002\u4e8e\u662f\u67e5\u770b git log\uff0c\u627e\u5230\u4e86\u5982\u4e0b\u63d0\u4ea4\u5185\u5bb9\uff1a\\n\\n```bash\\ncommit a088b5ea35e78d3866d492ed5e8c8f47118696a6\\nAuthor: Damjan Marion <damarion@cisco.com>\\nDate:   Thu Jul 14 15:27:29 2016 +0200\\n\\n    spinlock: move constructor out of x86 header file\\n    \\n    Having constructor function in the header file is generally\\n    a bad idea, as it will eventually be implanted to 3rd party\\n    library.\\n    \\n    In this case it causes linking issues with 3rd party libraries\\n    when an application is not linked to dpdk, due to missing\\n    symbol called by constructor.\\n    \\n    Fixes: ba7468997ea6 (\\"spinlock: add HTM lock elision for x86\\")\\n    \\n    Signed-off-by: Damjan Marion <damarion@cisco.com>\\n    Reviewed-by: Jan Viktorin <viktorin@rehivetech.com>\\n    Signed-off-by: Thomas Monjalon <thomas.monjalon@6wind.com>\\n```\\n\u4ece\u65f6\u95f4\u4e0a\u770b\u5728 16.07 \u7248\u672c\u5c31\u4fee\u590d\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ec5\u4ec5\u5728 16.04 \u53d1\u5e03\u7684 3 \u4e2a\u6708\u540e\uff01\uff01\\n\\n\u5173\u952e\u4fee\u6539\u5185\u5bb9\u662f\u6dfb\u52a0\u4e00\u4e2a rte_spinlock.c \u6587\u4ef6\uff0c\u5c06\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u9759\u6001\u53d8\u91cf\u4e0e rte_rtm_init \u6784\u9020\u51fd\u6570\u653e\u5230 .c \u4e2d\u3002\\n\\n\u76f8\u5173\u4ee3\u7801\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n```c\\n#include <stdint.h>\\n\\n#include \\"rte_cpuflags.h\\"\\n\\nuint8_t rte_rtm_supported; /* cache the flag to avoid the overhead\\n                             of the rte_cpu_get_flag_enabled function */\\n\\nstatic void __attribute__((constructor))\\nrte_rtm_init(void)\\n{\\n       rte_rtm_supported = rte_cpu_get_flag_enabled(RTE_CPUFLAG_RTM);\\n}\\n```\\n\u4ece\u9ad8\u7248\u672c\u5bfc\u51fa patch \u7136\u540e\u6253\u4e0a\uff0c\u95ee\u9898\u5f97\u5230\u89e3\u51b3\uff01\uff01\\n\\n## \u603b\u7ed3\\n\u95ee\u9898\u4e00\u76f4\u90fd\u5b58\u5728\uff0c\u800c\u4f60\u80fd\u5426\u53d1\u73b0\u5b83\u5374\u53e6\u5f53\u522b\u8bba\uff01\u53d1\u73b0\u95ee\u9898\uff0c\u89e3\u51b3\u95ee\u9898\uff0c\u6211\u4eec\u624d\u80fd\u4e0d\u65ad\u6210\u957f\u3002\u53d1\u73b0\u4e0d\u4e86\u65b0\u7684\u95ee\u9898\uff0c\u53ef\u80fd\u662f\u5b8c\u5168\u638c\u63e1\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u77e5\u534a\u89e3\u3002"},{"id":"/dpdk/dpdk-16.04 \u6269\u5c55\u65b0\u7f51\u5361\u9a71\u52a8\u8fc7\u7a0b","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u6269\u5c55\u65b0\u7f51\u5361\u9a71\u52a8\u8fc7\u7a0b","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 \u6269\u5c55\u65b0\u7f51\u5361\u9a71\u52a8\u8fc7\u7a0b.md","source":"@site/blog/dpdk/dpdk-16.04 \u6269\u5c55\u65b0\u7f51\u5361\u9a71\u52a8\u8fc7\u7a0b.md","title":"\u7f16\u8bd1\u76f8\u5173\u914d\u7f6e\u6dfb\u52a0","description":"1. \u786e\u5b9a\u7f51\u5361\u7684 vendor id \u4e0e device id\uff0c\u5728 rtepcidev_ids.h \u4e2d\u6dfb\u52a0\u65b0\u7684\u8bbe\u5907\u5b9a\u4e49","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":18.83,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled \u63a5\u53e3\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled \u63a5\u53e3\u95ee\u9898"},"nextItem":{"title":"dpdk/dpdk-16.04 \u6839\u76ee\u5f55\u4e2d .git \u76ee\u5f55\u5bf9\u7f16\u8bd1\u53c2\u6570\u7684\u5f71\u54cd","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u6839\u76ee\u5f55\u4e2d .git \u76ee\u5f55\u5bf9\u7f16\u8bd1\u53c2\u6570\u7684\u5f71\u54cd"}},"content":"## 1. \u786e\u5b9a\u7f51\u5361\u7684 vendor id \u4e0e device id\uff0c\u5728 rte_pci_dev_ids.h \u4e2d\u6dfb\u52a0\u65b0\u7684\u8bbe\u5907\u5b9a\u4e49\\n\\n\u793a\u4f8b\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```c\\n#ifndef RTE_PCI_DEV_ID_DECL_ICE\\n#define RTE_PCI_DEV_ID_DECL_ICE(vend, dev)\\n#endif\\n\\nRTE_PCI_DEV_ID_DECL_ICE(PCI_VENDOR_ID_INTEL, ICE_DEV_ID_PF)\\nRTE_PCI_DEV_ID_DECL_ICE(PCI_VENDOR_ID_INTEL, ICE_DEV_ID_SDI_FM10420_QDA2)\\n\\n#undef RTE_PCI_DEV_ID_DECL_ICE\\n```\\n\\n## 2. \u5728 drivers/net/ \u76ee\u5f55\u4e2d\u521b\u5efa\u9a71\u52a8\u5b50\u76ee\u5f55 \\n\\n\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```bash\\n drivers/net/ice/\\n```\\n## 3. \u4fee\u6539 mk/rte.app.mk \u6587\u4ef6\uff0c\u6dfb\u52a0\u4e00\u4e2a\u94fe\u63a5\u9879\u76ee\\n\\n\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```Makefile\\n_LDLIBS-$(CONFIG_RTE_LIBRTE_ICE_PMD)       += -lrte_pmd_ice\\n```\\n\\n## 4. \u4fee\u6539 drivers/net/Makefile \u6587\u4ef6\uff0c\u6dfb\u52a0\u65b0\u9a71\u52a8\u76ee\u5f55\\n\\n\u793a\u4f8b\u5982\u4e0b\uff1a\\n```bash\\nDIRS-$(CONFIG_RTE_LIBRTE_ICE_PMD)     += ice\\n```\\n\\n## 5. config/common_base \u4e2d\u6dfb\u52a0\u65b0\u7684\u7f51\u5361\u9a71\u52a8\u914d\u7f6e\u9879\u76ee\\n\\n\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```c\\n#\\n# Compile burst-oriented ICE PMD driver\\n#\\nCONFIG_RTE_LIBRTE_ICE_PMD=y\\nCONFIG_RTE_LIBRTE_ICE_DEBUG_RX=n\\nCONFIG_RTE_LIBRTE_ICE_DEBUG_TX=n\\nCONFIG_RTE_LIBRTE_ICE_DEBUG_TX_FREE=n\\nCONFIG_RTE_ICE_INC_VECTOR=n\\n```\\n\\n## 6. \u91cd\u65b0\u751f\u6210 $RTE_TARGET/.config \u4e2d\u7684\u914d\u7f6e\u6587\u4ef6\\n\\n# \u9a71\u52a8\u9700\u8981\u5b9e\u73b0\u7684\u5185\u5bb9\\n\\n## 1. drivers/net/xx \u76ee\u5f55\u4e2d\u6dfb\u52a0\u76f8\u5173\u7684 Makefile\\n\\n\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n\\n```mk\\n# SPDX-License-Identifier: BSD-3-Clause\\n# Copyright(c) 2018 Intel Corporation\\n\\ninclude $(RTE_SDK)/mk/rte.vars.mk\\n\\n#\\n# library name\\n#\\nLIB = librte_pmd_ice.a\\n\\nCFLAGS += -O3\\nCFLAGS += $(WERROR_FLAGS)\\nCFLAGS += -DALLOW_EXPERIMENTAL_API\\n\\nLDLIBS += -lrte_eal -lrte_mbuf -lrte_ethdev -lrte_kvargs\\nLDLIBS += -lrte_bus_pci -lrte_mempool -lrte_hash\\n\\nEXPORT_MAP := rte_pmd_ice_version.map\\n\\n#\\n# Add extra flags for base driver files (also known as shared code)\\n# to disable warnings\\n#\\nifeq ($(CONFIG_RTE_TOOLCHAIN_ICC),y)\\nCFLAGS_BASE_DRIVER +=\\nelse ifeq ($(CONFIG_RTE_TOOLCHAIN_CLANG),y)\\nCFLAGS_BASE_DRIVER += -Wno-unused-parameter\\nCFLAGS_BASE_DRIVER += -Wno-unused-variable\\nelse\\nCFLAGS_BASE_DRIVER += -Wno-unused-parameter\\nCFLAGS_BASE_DRIVER += -Wno-unused-variable\\n\\nifeq ($(shell test $(GCC_VERSION) -ge 44 && echo 1), 1)\\nCFLAGS_BASE_DRIVER += -Wno-unused-but-set-variable\\nendif\\n\\nendif\\nOBJS_BASE_DRIVER=$(patsubst %.c,%.o,$(notdir $(wildcard $(SRCDIR)/base/*.c)))\\n$(foreach obj, $(OBJS_BASE_DRIVER), $(eval CFLAGS_$(obj)+=$(CFLAGS_BASE_DRIVER)))\\n\\nVPATH += $(SRCDIR)/base\\n\\n#\\n# all source are stored in SRCS-y\\n#\\nSRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_controlq.c\\nSRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_common.c\\nSRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_sched.c\\nSRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_switch.c\\nSRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_nvm.c\\nSRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_flex_pipe.c\\nSRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_flow.c\\n\\nSRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_ethdev.c\\nSRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_rxtx.c\\n\\ninclude $(RTE_SDK)/mk/rte.lib.mk\\n```\\n\\n## 2. \u5bf9\u63a5 DPDK PMD pci \u9a71\u52a8\u6846\u67b6\\n\\n### 1. \u9a71\u52a8\u6ce8\u518c\u63a5\u53e3\\n```c\\nPMD_REGISTER_DRIVER(rte_xxx_driver);\\n```\\n\\n### \u5b9e\u73b0 rte_xxx_driver \u7ed3\u6784\u4f53\\n\\n\u793a\u4f8b\u5185\u5bb9\u5982\u4e0b\uff1a\\n```c\\nstatic struct rte_driver rte_ice_driver = {\\n    .type = PMD_PDEV,\\n    .init = rte_ice_pmd_init,\\n};\\n```\\n\\n### \u5b9e\u73b0 struct eth_driver \u7ed3\u6784\u4f53\u5b9a\u4e49\\n\\n\u793a\u4f8b\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```c\\nstatic struct eth_driver rte_ice_pmd = {\\n\\t.pci_drv = {\\n\\t\\t.name = \\"rte_ice_pmd\\",\\n\\t\\t.id_table = pci_id_ice_map,\\n\\t\\t.drv_flags = RTE_PCI_DRV_NEED_MAPPING | RTE_PCI_DRV_INTR_LSC |\\n\\t\\t\\tRTE_PCI_DRV_DETACHABLE,\\n\\t},\\n\\t.eth_dev_init = ice_dev_init,\\n\\t.eth_dev_uninit = ice_dev_uninit,\\n\\t.dev_private_size = sizeof(struct ice_adapter),\\n};\\n```\\n## \u9a71\u52a8\u521d\u59cb\u5316\u63a5\u53e3\u4e0e dpdk pci \u6846\u67b6\u7684\u5bf9\u63a5\\n\u9a71\u52a8\u5b9e\u4f8b\u5316\u7684 eth_driver \u7ed3\u6784\u4e2d\uff0ceth_dev_init \u51fd\u6570\u5b8c\u6210\u4e0e dpdk pci \u6846\u67b6\u5bf9\u63a5\u8fc7\u7a0b\u3002\u5f53\u63a5\u53e3 match \u5230\u4e00\u4e2a\u9a71\u52a8\u65f6\uff0c\u8c03\u7528\u9a71\u52a8 eth_driver \u7ed3\u6784\u4e2d\u7684 eth_dev_init \u51fd\u6570\u524d pci \u6846\u67b6\u5b8c\u6210\u4e86\u5982\u4e0b\u4efb\u52a1\uff1a\\n\\n1. \u5f53\u524d\u63a5\u53e3\u7684 pci \u4fe1\u606f\u5df2\u7ecf\u4fdd\u5b58\u5230\u4e86\u4e00\u4e2a rte_pci_device \u7ed3\u6784\u4e2d\\n2. \u5f53\u524d\u63a5\u53e3\u7684\u524d 6 \u4e2a bar \u7a7a\u95f4\u7684\u7269\u7406\u5730\u5740\u5df2\u7ecf\u88ab\u6620\u5c04\u4e3a\u7528\u6237\u6001\u865a\u62df\u5730\u5740\\n3. \u5f53\u524d\u63a5\u53e3\u5df2\u7ecf\u5206\u914d\u4e86\u4e00\u4e2a rte_eth_dev \u7ed3\u6784\u5e76\u5efa\u7acb\u8d77\u4e0e\u5bf9\u5e94 rte_pci_device \u7ed3\u6784\u7684\u5173\u8054\\n4. \u5f53\u524d\u63a5\u53e3\u5bf9\u5e94\u7684 rte_eth_dev \u7ed3\u6784\u7684 data \u7ed3\u6784\u88ab\u5206\u914d\u5e76\u8fdb\u884c\u4e86\u4e00\u4e9b\u521d\u59cb\u5316\\n5. \u5f53\u524d\u63a5\u53e3\u5206\u914d\u7684 rte_eth_dev \u7ed3\u6784\u4e2d data \u7ed3\u6784\u4f53\u7684 dev_private \u53d8\u91cf\u533a\u57df\u88ab\u521b\u5efa\\n6. \u5f53\u524d\u63a5\u53e3\u5206\u914d\u7684 rte_eth_dev \u7ed3\u6784\u4e2d\u7684\u94fe\u8def\u56de\u8c03\u51fd\u6570\u94fe\u8868\u88ab\u521d\u59cb\u5316\\n7. \u5f53\u524d\u63a5\u53e3\u7684\u9ed8\u8ba4 mtu \u88ab\u8bbe\u7f6e\\n\\n\u6bcf\u4e00\u79cd\u9a71\u52a8\u5b9e\u4f8b\u5316\u7684 eth_dev_init \u51fd\u6570\u6b63\u662f\u57fa\u4e8e\u4e0a\u9762\u8fd9\u4e9b\u73af\u5883\u5b8c\u6210\u4e0e pci \u6846\u67b6\u7684\u5bf9\u63a5\uff0c\u5173\u952e\u8fc7\u7a0b\u5982\u4e0b\uff1a\\n\\n1. \u5c06 dev->data->dev_private \u5730\u5740\u8f6c\u5316\u4e3a\u9a71\u52a8\u5185\u90e8\u7ed3\u6784\u5730\u5740\\n2. \u6ce8\u518c\u9a71\u52a8\u5b9e\u4f8b\u5316\u7684 eth_dev_ops \u5230 dev->dev_ops \u4e2d\uff0c\u5bf9\u63a5 ethdev \u5c42\u63d0\u4f9b\u7684\u5916\u90e8\u63a5\u53e3\\n3. \u5c06\u5bc4\u5b58\u5668\u6240\u5728\u7684 bar \u7684\u865a\u62df\u5730\u5740\u5438\u5165\u5230\u9a71\u52a8\u5185\u90e8\u6570\u636e\u7ed3\u6784\u7684\u67d0\u4e2a\u53d8\u91cf\u4e2d\uff0cintel \u7684\u7f51\u5361\u4e00\u822c\u53eb\u505a hw_addr\\n4. \u4f7f\u7528 dev->pci_dev \u4e2d\u7684\u5b57\u6bb5\u586b\u5145\u9a71\u52a8\u5185\u90e8\u6570\u636e\u7ed3\u6784\\n5. \u6839\u636e\u5f53\u524d\u63a5\u53e3\u7684 device id\uff0c\u786e\u5b9a\u5177\u4f53\u7684 mac \u7c7b\u578b\\n6. \u521d\u59cb\u5316\u9a71\u52a8\u5185\u90e8\u5206\u5c42\u5bf9\u8c61\u865a\u51fd\u6570\u8868\uff0c\u5982 eeprom_operations\u3001mac_operations\u3001phy_operations\u3001link_operations\u3001mbx_operations \u7b49\u51fd\u6570\u8868\\n7. \u6267\u884c\u63a5\u53e3 reset \u540e\u6267\u884c\u5176\u5b83\u786c\u4ef6\u521d\u59cb\u5316\u64cd\u4f5c\\n9. \u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u540e\u4f7f\u80fd\u4e2d\u65ad\\t\\n\\n## 3. eth_dev_ops \u9a71\u52a8\u5e95\u5c42\u63a5\u53e3\u5b9e\u73b0\\n\\n\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a xxx_eth_dev_ops\uff0c\u8fd9\u4e9b\u9a71\u52a8\u7531 rte_ethdev.c \u4e2d\u5c01\u88c5\u7684\u63a5\u53e3\u8c03\u7528\u3002\\n\\n\u793a\u4f8b\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```c\\nstatic const struct eth_dev_ops ice_eth_dev_ops = {\\n\\t.dev_configure                = ice_dev_configure,\\n\\t.dev_start                    = ice_dev_start,\\n\\t.dev_stop                     = ice_dev_stop,\\n\\t.dev_close                    = ice_dev_close,\\n\\t.rx_queue_start               = ice_rx_queue_start,\\n\\t.rx_queue_stop                = ice_rx_queue_stop,\\n\\t.tx_queue_start               = ice_tx_queue_start,\\n\\t.tx_queue_stop                = ice_tx_queue_stop,\\n\\t.rx_queue_setup               = ice_rx_queue_setup,\\n\\t.rx_queue_release             = ice_rx_queue_release,\\n\\t.tx_queue_setup               = ice_tx_queue_setup,\\n\\t.tx_queue_release             = ice_tx_queue_release,\\n\\t.dev_infos_get                = ice_dev_info_get,\\n\\t.dev_supported_ptypes_get     = ice_dev_supported_ptypes_get,\\n\\t.link_update                  = ice_link_update,\\n\\t.mtu_set                      = ice_mtu_set,\\n\\t.mac_addr_set                 = ice_macaddr_set,\\n\\t.mac_addr_add                 = ice_macaddr_add,\\n\\t.mac_addr_remove              = ice_macaddr_remove,\\n\\t.vlan_filter_set              = ice_vlan_filter_set,\\n\\t.vlan_offload_set             = ice_vlan_offload_set,\\n\\t.vlan_tpid_set                = ice_vlan_tpid_set,\\n\\t.reta_update                  = ice_rss_reta_update,\\n\\t.reta_query                   = ice_rss_reta_query,\\n\\t.rss_hash_update              = ice_rss_hash_update,\\n\\t.rss_hash_conf_get            = ice_rss_hash_conf_get,\\n\\t.promiscuous_enable           = ice_promisc_enable,\\n\\t.promiscuous_disable          = ice_promisc_disable,\\n\\t.allmulticast_enable          = ice_allmulti_enable,\\n\\t.allmulticast_disable         = ice_allmulti_disable,\\n\\t.rx_queue_intr_enable         = ice_rx_queue_intr_enable,\\n\\t.rx_queue_intr_disable        = ice_rx_queue_intr_disable,\\n\\t.get_eeprom_length            = ice_get_eeprom_length,\\n\\t.get_eeprom                   = ice_get_eeprom,\\n\\t.stats_get                    = ice_stats_get,\\n\\t.stats_reset                  = ice_stats_reset,\\n\\t.xstats_get                   = ice_xstats_get,\\n\\t.xstats_reset                 = ice_stats_reset,\\n};\\n```\\n\u4e3b\u8981\u529f\u80fd\u5212\u5206\u5982\u4e0b\uff1a\\n\\n| \u529f\u80fd                               | \u51fd\u6570                                                         |\\n| ---------------------------------- | ------------------------------------------------------------ |\\n| \u63a5\u53e3\u914d\u7f6e                           | dev_configure                                                |\\n| \u63a5\u53e3 down\u3001up                      | dev_start\u3001dev_stop                                          |\\n| \u63a5\u53e3\u91ca\u653e                           | dev_close                                                    |\\n| \u63a5\u6536\u3001\u53d1\u9001\u961f\u5217\u914d\u7f6e                 | rx/tx_queue_start\u3001rx/tx_queue_stop\u3001rx/tx_queue_setup\u3001rx/tx_queue_release |\\n| \u83b7\u53d6\u63a5\u53e3\u7684\u9ed8\u8ba4\u914d\u7f6e\u503c               | dev_infos_get                                                |\\n| \u83b7\u53d6\u63a5\u53e3\u5f53\u524d\u94fe\u8def\u72b6\u6001               | link_update                                                  |\\n| \u8bbe\u7f6e\u63a5\u53e3 mtu                       | mtu_set                                                      |\\n| mac \u5730\u5740\u7684\u8bbe\u7f6e\u3001\u6dfb\u52a0\u3001\u5220\u9664         | mac_addr_set/add/remove                                      |\\n| vlan \u8fc7\u6ee4\u3001\u5378\u8f7d\u3001tpid \u8bbe\u7f6e         | vlan_filter_set\u3001vlan_offload_set\u3001vlan_tpid_set             |\\n| \u63a5\u53e3 hash key \u83b7\u53d6\u4e0e\u914d\u7f6e           | rss_hash_update\u3001rss_hash_update                             |\\n| \u6df7\u6dc6\u6a21\u5f0f\u3001\u591a\u64ad\u5e7f\u64ad\u6a21\u5f0f\u7684\u5f00\u542f\u4e0e\u5173\u95ed | promiscuous_enable/disable \u3001allmulticast_enable/disable     |\\n| \u6536\u53d1\u961f\u5217\u4e2d\u65ad\u914d\u7f6e                   | rx/tx_queue_intr_enable                                      |\\n| \u7f51\u5361 eeprom \u5185\u5bb9\u83b7\u53d6               | get_eeprom_length\u3001get_eeprom                                |\\n| \u63a5\u53e3\u6536\u53d1\u7edf\u8ba1\u4fe1\u606f\u83b7\u53d6\u4e0e\u6e05\u96f6         | stats_get/reset\u3001xstats_get/reset                            |\\n\\n## 4. \u5b9e\u73b0\u7f51\u5361\u6536\u53d1\u5305\u63a5\u53e3\\n\\n\u6536\u5305\u63a5\u53e3\u793a\u4f8b\uff1a\\n\\n```c\\nuint16_t\\nice_recv_pkts(void *rx_queue,\\n\\t      struct rte_mbuf **rx_pkts,\\n\\t      uint16_t nb_pkts)\\n```\\n\\n\u53d1\u5305\u63a5\u53e3\u793a\u4f8b\uff1a\\n\\n```c\\nuint16_t\\nice_xmit_pkts(void *tx_queue, struct rte_mbuf **tx_pkts, uint16_t nb_pkts)\\n```\\n\u6536\u53d1\u5305\u63a5\u53e3\u901a\u8fc7\u586b\u5145\u5f53\u524d\u63a5\u53e3\u5206\u914d\u7684 rte_eth_dev \u7ed3\u6784\u4e2d\u7684 rxa_pkt_burst\u3001tx_pkt_burst \u5b8c\u6210\u3002\u5b58\u5728\u591a\u5957\u6536\u53d1\u5305\u63a5\u53e3\u65f6\uff0c\u4e00\u822c\u901a\u8fc7\u4e00\u4e2a xxx_set_rx/tx_function \u51fd\u6570\u6765\u63a2\u6d4b\u5f53\u524d\u914d\u7f6e\u5e94\u8be5\u4f7f\u7528\u7684\u6536\u53d1\u5305\u51fd\u6570\u5b9e\u4f8b\u3002\\n\\n\u4e0d\u540c\u7684\u53d1\u5305\u51fd\u6570\u6709\u5404\u81ea\u4f9d\u8d56\u7684\u914d\u7f6e\uff0c\u8fd9\u4e9b\u914d\u7f6e\u5fc5\u987b\u72ec\u7acb\u3002\\n\\n## dpdk poll mode \u6536\u53d1\u5305\u7684\u539f\u7406\\ndpdk poll mode \u4f9d\u8d56 dma \u6765\u5b8c\u6210\u62a5\u6587\u4ece\u7f51\u5361\u5230\u4e3b\u673a\u5185\u5b58\u53ca\u53cd\u5411\u8fc7\u7a0b\uff0c\u5728\u63cf\u8ff0\u524d\u5148\u4ece ldd3 \u4e2d\u7ffb\u8bd1\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\n### User virtual addresses\\n\u7528\u6237\u6001\u865a\u62df\u5730\u5740\u662f\u7528\u6237\u6001\u7a0b\u5e8f\u53ef\u89c1\u7684\u666e\u901a\u5730\u5740\u3002\u7528\u6237\u5730\u5740\u6709 32-bit\u300164-bit \u957f\u5ea6\uff0c\u4f9d\u8d56\u5177\u4f53\u7684\u786c\u4ef6\u67b6\u6784\uff0c\u6bcf\u4e00\u79cd\u5904\u7406\u5668\u90fd\u6709\u81ea\u5df1\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002\\n### Physical addresses\\n\u8fd9\u4e2a\u5730\u5740\u7528\u4e8e\u5904\u7406\u5668\u4e0e\u7cfb\u7edf\u5185\u5b58\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002\u7269\u7406\u5730\u5740\u662f 32\u300164 \u4f4d\u5bbd\u5ea6\u7684\uff0c\u4e00\u4e9b 32 \u4f4d\u7cfb\u7edf\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u4e5f\u80fd\u591f\u4f7f\u7528\u66f4\u5927\u7684\u7269\u7406\u5730\u5740\u3002\\n\\n### Bus addresses\\n\u8fd9\u4e2a\u5730\u5740\u5728\u5916\u8bbe\u603b\u7ebf\u4e0e\u5185\u5b58\u4e4b\u95f4\u88ab\u4f7f\u7528\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5b83\u4e0e\u5904\u7406\u5668\u4f7f\u7528\u7684\u7269\u7406\u5730\u5740\u4e00\u81f4\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u6240\u6709\u60c5\u51b5\u90fd\u662f\u8fd9\u6837\u3002\u4e00\u4e9b\u67b6\u6784\u652f\u6301 IOMMU \u673a\u5236\uff0c\u901a\u8fc7 IOMMU \u5b8c\u6210\u4e00\u4e2a\u603b\u7ebf\u4e0e\u4e3b\u673a\u5185\u5b58\u95f4\u8bbf\u95ee\u5730\u5740\u7684\u91cd\u6620\u5c04\u3002\\n\\n### dma \u6570\u636e\u4f20\u8f93\u7684\u4e24\u79cd\u7c7b\u522b\\n\\n1. \u8f6f\u4ef6\u540c\u6b65\u8bf7\u6c42\u6570\u636e\\n2. \u786c\u4ef6\u5f02\u6b65\u63a8\u9001\u6570\u636e\u5230\u7cfb\u7edf\u4e2d\\n\\n\u8f6f\u4ef6\u540c\u6b65\u8bf7\u6c42\u6570\u636e\u4e3b\u8981\u8fc7\u7a0b\u5982\u4e0b\uff1a\\n\\n1. \u5f53\u4e00\u4e2a\u7a0b\u5e8f\u8c03\u7528 read \u65f6\uff0c\u9a71\u52a8\u4e2d\u7684\u65b9\u6cd5\u76db\u60c5\u4e00\u4e2a DMA \u7f13\u51b2\u533a\u5e76\u63a7\u5236\u786c\u4ef6\u5c06\u6570\u636e\u4f20\u8f93\u5230\u8fd9\u4e2a\u7f13\u51b2\u533a\u4e2d\u3002\u8fdb\u7a0b\u8fdb\u5165\u7761\u7720\u72b6\u6001\u3002\\n2. \u786c\u4ef6\u5c06\u6570\u636e\u5199\u5165\u5230 DMA \u7f13\u51b2\u533a\u4e2d\uff0c\u5b8c\u6210\u540e\u89e6\u53d1\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u3002\\n3. \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u83b7\u53d6\u5230\u8f93\u5165\u6570\u636e\uff0c\u6e05\u9664\u4e2d\u65ad\u6807\u5fd7\u5e76\u4e14\u5524\u9192\u8fdb\u7a0b\uff0c\u8fd9\u65f6\u8fdb\u7a0b\u5c31\u80fd\u591f\u8bfb\u53d6\u6570\u636e\u4e86\u3002\\n\\n\u786c\u4ef6\u5f02\u6b65\u63a8\u9001\u6570\u636e\u5230\u7cfb\u7edf\u4e2d\u7684\u4e3b\u8981\u8fc7\u7a0b\u5982\u4e0b\uff1a\\n\\n1. \u786c\u4ef6\u89e6\u53d1\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u58f0\u660e\u65b0\u7684\u6570\u636e\u5df2\u7ecf\u5230\u8fbe\\n2. \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u521b\u5efa\u4e00\u4e2a\u7f13\u51b2\u533a\u5e76\u544a\u8bc9\u786c\u4ef6\u8be5\u5c06\u65b0\u7684\u6570\u636e\u4f20\u8f93\u5230\u54ea\u91cc\\n3. \u5916\u8bbe\u5c06\u6570\u636e\u5199\u5165\u5230\u7f13\u51b2\u533a\u4e2d\uff0c\u5b8c\u6210\u540e\u51fa\u53d1\u53e6\u5916\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\\n4. \u4e2d\u65ad\u5904\u7406\u7a0b\u5e8f\u5206\u53d1\u65b0\u6570\u636e\uff0c\u5524\u9192\u76f8\u5173\u8fdb\u7a0b\u5e76\u5b8c\u6210\u5176\u5b83\u6d41\u7a0b\u5904\u7406\\n\\n\u4e00\u4e2a\u5f02\u6b65\u65b9\u6cd5\u7684\u53d8\u4f53\u5728\u7f51\u5361\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002\u8fd9\u4e9b\u7f51\u5361\u9884\u671f\u770b\u5230\u4e00\u4e2a\u73af\u5f62\u7f13\u51b2\u533a\uff08\u53c8\u79f0\u4e3a\u4e00\u4e2a DMA ring buffer\uff09\u5728\u5185\u5b58\u4e2d\u5efa\u7acb\u5e76\u4e0e\u5904\u7406\u5668\u5171\u4eab\uff0c\u6bcf\u4e00\u4e2a\u6536\u5230\u7684\u62a5\u6587\u90fd\u88ab\u653e\u5230\u4e0b\u4e00\u4e2a ring \u4e2d\u53ef\u7528\u7684 buffer \u4e2d\uff0c\u5e76\u89e6\u53d1\u4e00\u4e2a\u4e2d\u65ad\u4fe1\u53f7\u3002\\n\\n\u6b64\u540e\uff0c\u9a71\u52a8\u8d1f\u8d23\u5c06\u7f51\u7edc\u62a5\u6587\u6295\u9012\u5230\u5185\u6838\u7684\u5176\u5b83\u6a21\u5757\u4e2d\u5e76\u4e14\u5c06\u4e00\u4e2a\u65b0\u7684 DMA buffer \u653e\u5230 ring \u4e2d\u3002\\n\\n### DMA buffer \u7684\u95ee\u9898\\nDMA buffer \u5b58\u5728\u7684\u4e00\u4e2a\u4e3b\u8981\u95ee\u9898\u662f\uff0c\u5f53\u5176\u5927\u5c0f\u5927\u4e8e\u4e00\u4e2a\u7269\u7406\u9875\u65f6\uff0c\u7531\u4e8e\u8bbe\u5907\u6570\u636e\u4f20\u8f93\u4f7f\u7528 ISA\u3001PCI \u7cfb\u7edf\u603b\u7ebf\uff0c\u4ed6\u4eec\u90fd\u4f7f\u7528\u7269\u7406\u5730\u5740\uff0c\u56e0\u6b64\u5206\u914d\u7684\u7a7a\u95f4\u5fc5\u987b\u5728\u7269\u7406\u5185\u5b58\u4e2d\u5360\u636e\u8fde\u7eed\u7684\u9875\u3002\u5947\u7279\u7684\u662f\u8fd9\u4e00\u89c4\u5219\u5e76\u4e0d\u9002\u7528\u4e8e SBus\uff0cSBus \u5728\u5916\u8bbe\u603b\u7ebf\u4e0a\u4f7f\u7528\u865a\u62df\u5730\u5740\u3002\\n\\n### Bus Addresses\\n\u4f7f\u7528DMA\u7684\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u5fc5\u987b\u4e0e\u8fde\u63a5\u5230\u63a5\u53e3\u603b\u7ebf\u7684\u786c\u4ef6\u8fdb\u884c\u901a\u4fe1\uff0c\u5b83\u4f7f\u7528\u7269\u7406\u5730\u5740\uff0c\u800c\u7a0b\u5e8f\u4ee3\u7801\u4f7f\u7528\u865a\u62df\u5730\u5740\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u60c5\u51b5\u6bd4\u8fd9\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\u3002 \u57fa\u4e8e DMA \u7684\u786c\u4ef6\u4f7f\u7528\u603b\u7ebf\u5730\u5740\u800c\u975e\u7269\u7406\u5730\u5740\u3002\u5c3d\u7ba1 ISA \u548c PCI \u603b\u7ebf\u5730\u5740\u5728 PC \u4e0a\u5c31\u662f\u666e\u901a\u7684\u7269\u7406\u5730\u5740\uff0c\u8fd9\u4e00\u70b9\u5e76\u4e0d\u9002\u7528\u4e8e\u6bcf\u4e00\u4e2a\u5e73\u53f0\u3002\\n\\n\u5728\u5c1d\u8bd5\u4f7f\u7528 DMA \u4e4b\u524d\u5fc5\u987b\u56de\u7b54\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\u7ed9\u5b9a\u7684\u8bbe\u5907\u662f\u5426\u80fd\u591f\u5728\u5f53\u524d\u4e3b\u673a\u4e0a\u6267\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\u3002\u8bb8\u591a\u8bbe\u5907\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u6240\u80fd\u5bfb\u5740\u7684\u5185\u5b58\u8303\u56f4\u6709\u9650\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5185\u6838\u5047\u8bbe\u4f60\u7684\u8bbe\u5907\u80fd\u591f\u5bf9\u4efb\u610f 32-bit \u5730\u5740\u6267\u884c DMA \u64cd\u4f5c\u3002\u5982\u679c\u8fd9\u4e2a\u5047\u8bbe\u4e0d\u6210\u7acb\uff0c\u4f60\u9700\u8981\u901a\u8fc7\u8c03\u7528 dma_set_mask \u901a\u77e5\u5185\u6838\u771f\u5b9e\u7684\u5730\u5740\u4f4d\u6570\u9650\u5236\u3002\\n\\n### pci \u4ee3\u7801\u7684\u4e24\u79cd DMA \u6620\u5c04\u7c7b\u578b\\nPCI\u4ee3\u7801\u533a\u5206\u4e24\u79cdDMA\u6620\u5c04\u7c7b\u578b\uff0c\u6309\u7167 DMA \u7f13\u51b2\u533a\u7684\u751f\u547d\u5468\u671f\u8fdb\u884c\u533a\u5206\u3002\\n\\n\\n1. \u4e00\u81f4\u6027DMA\u6620\u5c04\\n\\n\u8fd9\u4e9b\u6620\u5c04\u901a\u5e38\u5b58\u5728\u4e8e\u9a71\u52a8\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u4e2d\u3002\u5fc5\u987b\u6709\u4e00\u4e2a\u4e00\u81f4\u7684\u7f13\u51b2\u533a\u540c\u65f6\u7528\u4e8e CPU \u548c\u5916\u56f4\u8bbe\u5907\u3002\u56e0\u6b64\uff0c\u76f8\u5e72\u6620\u5c04\u5fc5\u987b\u5b58\u5728\u4e8e\u4e00\u81f4\u6027 cache \u5185\u5b58\u533a\u57df\u4e2d\u3002\\n\\n2. \u6d41\u5f0fDMA\u6620\u5c04\\n\\n\u6d41\u6620\u5c04\u901a\u5e38\u4e3a\u5355\u4e2a\u64cd\u4f5c\u8bbe\u7f6e\u3002\u4e00\u4e9b\u67b6\u6784\u5141\u8bb8\u5728\u4f7f\u7528\u6d41\u6620\u5c04\u65f6\u8fdb\u884c\u591a\u79cd\u4f18\u5316\uff0c\u4f46\u662f\u8fd9\u4e9b\u6620\u5c04\u4e5f\u53d7\u5230\u4e00\u7ec4\u66f4\u4e25\u683c\u89c4\u5219\u7684\u7ea6\u675f\u6765\u63a7\u5236\u8bbf\u95ee\u3002\u5185\u6838\u5f00\u53d1\u4eba\u5458\u5efa\u8bae\u4f18\u5148\u4f7f\u7528\u6d41\u6620\u5c04\u800c\u975e\u4e00\u81f4\u6027\u6620\u5c04\u3002\\n\\n\u8fd9\u4e00\u5efa\u8bae\u57fa\u4e8e\u5982\u4e0b\u4e24\u4e2a\u539f\u56e0\uff1a\\n1. \u5728\u652f\u6301\u6620\u5c04\u5bc4\u5b58\u5668\u7684\u7cfb\u7edf\u4e0a\uff0c\u6bcf\u4e2a DMA \u6620\u5c04\u5728\u603b\u7ebf\u4e0a\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u5bc4\u5b58\u5668\u3002\u4e00\u81f4\u6027\u6620\u5c04\u6709\u4e00\u4e2a\u975e\u5e38\u957f\u7684\u751f\u547d\u5468\u671f\uff0c\u5728\u4e0d\u4f7f\u7528\u7684\u65f6\u5019\u4e5f\u4e00\u76f4\u72ec\u5360\u8fd9\u4e9b\u5bc4\u5b58\u5668\u3002\\n2. \u5728\u4e00\u4e9b\u786c\u4ef6\u4e0a\uff0c\u6d41\u6620\u5c04\u53ef\u4ee5\u4f7f\u7528\u4e00\u81f4\u6027\u6620\u5c04\u4e0d\u652f\u6301\u7684\u65b9\u5f0f\u8fdb\u884c\u4f18\u5316\u3002\\n\\n### dpdk poll mode \u901a\u8fc7 DMA \u6536\u53d1\u5305\\n\u6709\u4e86\u4e0a\u9762\u5bf9 DMA \u7684\u8ba4\u8bc6\u540e\uff0c\u5f00\u59cb\u63cf\u8ff0 dpdk \u901a\u8fc7 PMD \u5bf9 DMA \u4f7f\u7528\u53ca\u6536\u53d1\u5305\u7684\u5173\u952e\u8fc7\u7a0b\u3002\\n\\n1. \u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u5230 igb_uio\uff0c\u8bbe\u7f6e\u63a5\u53e3 dma_mask \u5e76\u901a\u77e5\u5185\u6838\\n2. \u8c03\u7528  rte_eth_dma_zone_reserve \u521b\u5efa\u6bcf\u4e2a\u961f\u5217\u4e0a\u7684\u6536\u53d1\u786c\u4ef6\u63cf\u8ff0\u7b26 dma \u533a\u57df\uff0c\u7533\u8bf7\u51fa\u7684\u533a\u57df\u5728\u7269\u7406\u9875\u4e0a\u8fde\u7eed\\n3. \u6839\u636e\u7f51\u5361\u624b\u518c\u521d\u59cb\u5316\u63cf\u8ff0\u7b26\u4e2d\u7684\u5fc5\u8981\u5b57\u6bb5\uff0c\u5e76\u5c06\u7533\u8bf7\u5230\u7684\u7528\u4e8e\u6536\u53d1\u63cf\u8ff0\u7b26\u7684 dma \u533a\u57df\u7684\u8d77\u59cb\u5730\u5740\u8f6c\u5316\u4e3a\u7269\u7406\u5730\u5740\u4fdd\u5b58\u5230\u961f\u5217\u7ed3\u6784\u7684\u67d0\u4e2a\u5b57\u6bb5\u4e2d\\n4. \u5c06\u6536\u53d1\u63cf\u8ff0\u7b26\u8d77\u59cb\u5730\u5740\u7684\u7269\u7406\u5730\u5740\u53ca\u603b\u957f\u5ea6\u5199\u5165\u5230\u5bc4\u5b58\u5668\u4e2d\u5e76\u5c06\u4fdd\u5b58\u63cf\u8ff0\u7b26\u5934\u5c3e\u4f4d\u7f6e\u7684\u5bc4\u5b58\u5668\u503c\u6e05\u96f6\\n5. \u4e3a\u6bcf\u4e00\u4e2a\u6536\u5305\u961f\u5217\u7533\u8bf7 nb_rx_desc \u4e2a mbuf\uff0c\u5bf9 mbuf \u6267\u884c\u76f8\u5e94\u7684\u521d\u59cb\u5316\u540e\u5c06 mbuf dataroom \u6240\u5728\u7684\u533a\u57df\u7684\u7269\u7406\u5730\u5740\u5199\u5165\u5230\u6bcf\u4e2a\u63a5\u6536\u63cf\u8ff0\u7b26\u7684\u5b57\u6bb5\u4e2d \\n6. \u8bbe\u7f6e\u63a5\u6536\u3001\u53d1\u9001\u63cf\u8ff0\u7b26\u63a7\u5236\u5bc4\u5b58\u5668\u3001\u8bbe\u7f6e\u63a5\u6536\u3001\u53d1\u9001\u63a7\u5236\u5bc4\u5b58\u5668\u7b49\u7b49\u5fc5\u8981\u7684\u5bc4\u5b58\u5668\uff0c\u5f00\u542f\u6536\u53d1\u5305\\n\\n\u5907\u6ce8\uff1a\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u4e0d\u5305\u542b\u5176\u5b83\u4f9d\u8d56\u7684\u786c\u4ef6\u64cd\u4f5c\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u9700\u8981\u6309\u7167\u7f51\u5361 datasheet \u6765\u914d\u7f6e\\n#### \u7f51\u5361\u4e0e\u9a71\u52a8\u4fa7\u6536\u5305\u8fc7\u7a0b\\n\u5f53\u7f51\u5361\u6536\u5230\u5305\u540e\uff0cphy \u4e0e mac \u5c42\u6709\u76f8\u5bf9\u590d\u6742\u7684\u5904\u7406\u8fc7\u7a0b\u3002\u4e00\u4e2a\u6b63\u5e38\u7684\u62a5\u6587\u901a\u8fc7\u4e86\u8fd9\u4e9b\u5904\u7406\u8fc7\u7a0b\u540e\uff0c\u6700\u7ec8\u88ab\u5b58\u653e\u5230\u7f51\u5361\u7684 fifo \u4e2d\uff0c\u6b64\u540e\u7f51\u5361\u4fa7\u5173\u952e\u8fc7\u7a0b\u5982\u4e0b\uff1a\\n\\n1. \u7f51\u5361 mac \u5c42\u83b7\u53d6\u5230\u5f53\u524d\u786c\u4ef6\u53ef\u7528\u7684 rx \u63cf\u8ff0\u7b26\u7684\u4f4d\u7f6e\uff0c\u83b7\u53d6\u5230\u63cf\u8ff0\u7b26\u4e2d\u9884\u5148\u914d\u7f6e\u7684 mbuf dataroom \u7684\u7269\u7406\u5730\u5740\uff0c\u89e6\u53d1\u4e00\u4e2a DMA \u64cd\u4f5c\uff0c\u5c06\u62a5\u6587\u4ece\u7f51\u5361 fifo \u4e2d\u62f7\u8d1d\u5230 mbuf dataroom \u6307\u5411\u7684\u7269\u7406\u5730\u5740\u4e2d\uff0c\u8fd9\u662f\u96f6\u62f7\u8d1d\u7684\u57fa\u7840\u3002\\n2. \u7f51\u5361\u66f4\u65b0\u5185\u90e8\u7ef4\u6301\u63cf\u8ff0\u7b26\u4f4d\u7f6e\u72b6\u6001\u7684\u5bc4\u5b58\u5668\\n3. \u7f51\u5361\u91cd\u590d\u8fd9\u6837\u7684\u8fc7\u7a0b\uff0c\u76f4\u5230\u83b7\u53d6\u4e0d\u5230\u4e00\u4e2a\u7a7a\u95f2\u7684\u63cf\u8ff0\u7b26\\n\\n\u5f53\u63cf\u8ff0\u7b26\u90fd\u88ab\u586b\u5145\u6ee1\u540e\u65b0\u5230\u7684\u5305\u5982\u4f55\u5904\u7406\u4f9d\u8d56\u7f51\u5361\u82af\u7247\u7684\u8bbe\u8ba1\u3002\\n\\ndpdk \u9a71\u52a8\u4fa7\u6536\u5305\u8fc7\u7a0b\uff1a\\n\\n1. \u7a0b\u5e8f\u4e3b\u52a8\u8c03\u7528\u9a71\u52a8\u4e2d\u5b9e\u73b0\u7684\u6536\u5305\u51fd\u6570\uff0c\u83b7\u53d6\u5f53\u524d\u8f6f\u4ef6\u53ef\u7528\u7684\u63cf\u8ff0\u7b26\u7684\u4f4d\u7f6e\uff0c\u5224\u65ad\u63cf\u8ff0\u7b26\u4e2d\u6807\u5fd7\u5b58\u5728\u62a5\u6587\u7684\u53d8\u91cf\uff0c\u5f53\u5224\u65ad\u901a\u8fc7\u540e\u5904\u7406\u62a5\u6587\\n2. \u83b7\u53d6\u8f6f\u4ef6\u7ef4\u62a4\u7684\u5f53\u524d\u5df2\u7ecf\u586b\u5145\u4e86\u62a5\u6587\u7684\u63cf\u8ff0\u7b26\u5bf9\u5e94\u7684 mbuf \u7684\u5730\u5740\uff0c\u5c06\u63cf\u8ff0\u7b26\u4e2d\u7684\u5b57\u6bb5\u6620\u5c04\u5230 mbuf \u5934\u4e2d\u7684\u5b57\u6bb5\u4e2d\uff0c\u7136\u540e\u7533\u8bf7\u4e00\u4e2a\u65b0\u7684 mbuf \u7ee7\u7eed\u586b\u5165\u5230 rx ring \u4e2d\uff0c\u6700\u540e\u66f4\u65b0\u7f51\u5361\u7ef4\u6301\u63cf\u8ff0\u7b26\u4f4d\u7f6e\u7684\u67d0\u4e2a\u5bc4\u5b58\u5668\u901a\u77e5\u786c\u4ef6\u3002\\n3. dpdk \u5411\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u6536\u5230\u7684\u5305\u7684\u4e2a\u6570\u53ca\u4fdd\u5b58 mbuf \u5730\u5740\u7684\u6307\u9488\u6570\u7ec4\\n\\n\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53\u9a71\u52a8\u4fa7\u83b7\u53d6\u5230\u4e00\u4e2a\u586b\u5145\u4e86\u62a5\u6587\u7684\u63cf\u8ff0\u7b26\u540e\uff0c\u9a71\u52a8\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 mbuf \u5e76\u5c06\u5176 dataroom \u7684\u7269\u7406\u5730\u5740\u586b\u5145\u5230\u5f53\u524d\u7684\u63cf\u8ff0\u7b26\u4e2d\u7684\u76f8\u5173\u5b57\u6bb5\u4e2d\uff0c\u5982\u679c\u786c\u4ef6\u4e0d\u80fd\u66f4\u65b0\u8fd9\u4e2a\u63cf\u8ff0\u7b26\u4e2d\u6807\u5fd7\u5df2\u7ecf\u6536\u5230\u62a5\u6587\u7684\u53d8\u91cf\uff0c\u5c31\u9700\u8981\u8f6f\u4ef6\u8bbe\u7f6e\u3002\\n\\n#### \u7f51\u5361\u4e0e\u9a71\u52a8\u4fa7\u53d1\u5305\u8fc7\u7a0b\\n1. dpdk \u7a0b\u5e8f\u586b\u5145\u5f85\u53d1\u9001\u7684\u62a5\u6587\uff0c\u901a\u8fc7\u8c03\u7528 rte_eth_tx_burst \u53d1\u9001\\n2. \u7f51\u5361\u9a71\u52a8\u5e95\u5c42\u7684\u53d1\u5305\u51fd\u6570\u4f9d\u6b21\u904d\u5386\u4e0a\u5c42\u4f20\u5165\u7684\u62a5\u6587\uff0c\u83b7\u53d6\u7a7a\u95f2\u7684 tx \u63cf\u8ff0\u7b26\uff0c\u5e76\u4f7f\u7528 mbuf \u5934\u4e2d\u7684\u5b57\u6bb5\u586b\u5145\u63cf\u8ff0\u7b26\\n3. \u586b\u5145\u63cf\u8ff0\u7b26\u7684\u5173\u952e\u5728\u4e8e\u5c06 mbuf dataroom \u533a\u57df\u8d77\u59cb\u5730\u5740\u7684\u7269\u7406\u5730\u5740\u5199\u5165\u5230 tx \u63cf\u8ff0\u7b26\u4e2d\\n4. \u6700\u540e\u66f4\u65b0\u7f51\u5361\u4e2d\u7ef4\u62a4\u53d1\u9001\u63cf\u8ff0\u7b26\u4f4d\u7f6e\u7684\u5bc4\u5b58\u5668\u901a\u77e5\u7f51\u5361\u6709\u65b0\u7684\u62a5\u6587\u9700\u8981\u53d1\u9001\\n5. \u7f51\u5361\u83b7\u53d6\u5230\u7ed1\u5b9a\u4e86\u62a5\u6587\u7684\u53d1\u9001\u63cf\u8ff0\u7b26\uff0c\u5c06\u62a5\u6587\u62f7\u8d1d\u5230\u53d1\u9001 fifo \u4e2d\u540e\u7ecf\u8fc7\u4e00\u7cfb\u5217\u786c\u4ef6\u64cd\u4f5c\u540e\u53d1\u9001\u51fa\u53bb\uff0c\u53d1\u9001\u5b8c\u6210\u540e\u66f4\u65b0\u5fc5\u8981\u7684\u5bc4\u5b58\u5668\u503c\\n\\n# \u603b\u7ed3\\ndpdk pmd \u65b0\u9a71\u52a8\u7684\u5f00\u53d1\u76f8\u5bf9\u56f0\u96be\uff0c\u4e00\u65b9\u9762\u7531\u9a71\u52a8\u6846\u67b6\u7684\u590d\u6742\u6027\u51b3\u5b9a\uff0c\u4e00\u65b9\u9762\u7531\u7f51\u5361\u9a71\u52a8\u81ea\u8eab\u7684\u590d\u6742\u6027\u51b3\u5b9a\u3002\u672c\u6587\u4e2d\u68b3\u7406\u4e86\u5f00\u53d1\u4e00\u4e2a\u65b0\u7684\u7f51\u5361\u9a71\u52a8\u7684\u4e3b\u8981\u8fc7\u7a0b\uff0c\u91cd\u70b9\u653e\u5728\u5982\u4f55\u4e0e dpdk pci \u6846\u67b6\u3001\u6536\u53d1\u5305\u6846\u67b6\u5bf9\u63a5\u4e0a\uff0c\u8fd9\u662f\u672c\u6587\u7684\u91cd\u70b9\u3002\u5b9e\u9645\u4e0a\uff0c\u4e00\u4e2a\u7f51\u5361\u9a71\u52a8\u7684\u5f00\u53d1\u662f\u975e\u5e38\u590d\u6742\u7684\uff0c\u53ef\u5173\u952e\u7684\u8fc7\u7a0b\u4e5f\u5c31\u90a3\u51e0\u6b65\uff0c\u80fd\u591f\u8ba4\u8bc6\u8fd9\u51e0\u6b65\u5e76\u641e\u6e05\u695a\u5176\u5185\u90e8\u7684\u539f\u7406\uff0c\u8fd9\u624d\u662f\u5411\u6838\u5fc3\u9760\u62e2\u7684\u8fc7\u7a0b\u3002"},{"id":"/dpdk/dpdk-16.04 \u6839\u76ee\u5f55\u4e2d .git \u76ee\u5f55\u5bf9\u7f16\u8bd1\u53c2\u6570\u7684\u5f71\u54cd","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u6839\u76ee\u5f55\u4e2d .git \u76ee\u5f55\u5bf9\u7f16\u8bd1\u53c2\u6570\u7684\u5f71\u54cd","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 \u6839\u76ee\u5f55\u4e2d .git \u76ee\u5f55\u5bf9\u7f16\u8bd1\u53c2\u6570\u7684\u5f71\u54cd.md","source":"@site/blog/dpdk/dpdk-16.04 \u6839\u76ee\u5f55\u4e2d .git \u76ee\u5f55\u5bf9\u7f16\u8bd1\u53c2\u6570\u7684\u5f71\u54cd.md","title":"dpdk/dpdk-16.04 \u6839\u76ee\u5f55\u4e2d .git \u76ee\u5f55\u5bf9\u7f16\u8bd1\u53c2\u6570\u7684\u5f71\u54cd","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":3.88,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u7f16\u8bd1\u76f8\u5173\u914d\u7f6e\u6dfb\u52a0","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u6269\u5c55\u65b0\u7f51\u5361\u9a71\u52a8\u8fc7\u7a0b"},"nextItem":{"title":"dpdk/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n\\n\u5728\u516c\u53f8\u5185\u90e8\u7ef4\u62a4\u7684 dpdk-16.04 \u76ee\u5f55\u4e2d\u5f00\u53d1\u65b0\u529f\u80fd\u65f6\uff0c\u7f16\u8bd1\u9047\u5230\u5982\u4e0b\u62a5\u9519\u4fe1\u606f\uff1a\\n\\n```bash\\ndpdk-16.04/lib/librte_eal/linuxapp/eal/eal_timer.c: In function \u2018get_tsc_freq\u2019:\\ndpdk-16.04/lib/librte_eal/linuxapp/eal/eal_timer.c:288:10: error: unused variable \u2018test\u2019 [-Werror=unused-variable]\\n   double test = 1.5/1.1;\\n          ^\\ncc1: all warnings being treated as errors\\n  CC rte_malloc.o\\nmake[6]: *** [eal_timer.o] Error 1\\nmake[6]: *** Waiting for unfinished jobs....\\n  CC malloc_elem.o\\n  CC malloc_heap.o\\ndpdk-16.04/lib/librte_eal/linuxapp/eal/eal_pci.c:442:6: error: no previous prototype for \u2018adjust_logic_pci_scan\u2019 [-Werror=missing-prototypes]\\n void adjust_logic_pci_scan(void)\\n      ^\\ncc1: all warnings being treated as errors\\nmake[6]: *** [eal_pci.o] Error 1\\ndpdk-16.04/lib/librte_eal/common/malloc_heap.c: In function \u2018rte_eal_malloc_heap_init\u2019:\\ndpdk-16.04/lib/librte_eal/common/malloc_heap.c:232:3: error: format \u2018%d\u2019 expects argument of type \u2018int\u2019, but argument 4 has type \u2018size_t\u2019 [-Werror=format=]\\n   printf(\\"%s,%d,len=%d,pg=%d\\\\n\\",__FUNCTION__,__LINE__,ms->len,ms->hugepage_sz);\\n```\\n\\n\u4ed4\u7ec6\u67e5\u770b\u8fd9\u4e9b\u62a5\u9519\u4fe1\u606f\u786e\u5b9a\u771f\u6b63\u7684\u95ee\u9898\u662f**\u8b66\u544a\u88ab\u4f5c\u4e3a\u4e86\u9519\u8bef\u5904\u7406**\uff0c\u4e00\u5f00\u59cb\u611f\u89c9\u6709\u4e9b\u5947\u602a\uff0c\u89c9\u5f97\u4e0d\u5e94\u8be5\u51fa\u8fd9\u79cd\u95ee\u9898\uff0c\u4e8e\u662f\u5148\u5bf9\u6bd4\u6b63\u5e38\u7f16\u8bd1\u7684\u6d41\u7a0b\u4e0e\u51fa\u95ee\u9898\u7684\u7f16\u8bd1\u6d41\u7a0b\u4e2d\u7f16\u8bd1\u53c2\u6570\u7684\u533a\u522b\u3002\\n\\n## \u6210\u529f\u4e0e\u5931\u8d25\u7684\u6570\u636e\u5bf9\u6bd4\\n\\n\u4f7f\u7528 make V=1 \u6765\u7f16\u8bd1\uff0c\u6253\u5370\u547d\u4ee4\u884c\u4fe1\u606f\u3002\\n\\n\\n\u6210\u529f\u7f16\u8bd1\u65f6\u7684\u547d\u4ee4\u884c\u53c2\u6570\uff1a\\n```\\ngcc -Wp,-MD,./.malloc_heap.o.d.tmp -m64 -pthread -fPIC  -march=core2 -DRTE_MACHINE_CPUFLAG_SSE -DRTE_MACHINE_CPUFLAG_SSE2 -DRTE_MACHINE_CPUFLAG_SSE3 -DRTE_MACHINE_CPUFLAG_SSSE3  -Idpdk-16.04/x86_64-native-linuxapp-gcc/include -include dpdk-16.04/x86_64-native-linuxapp-gcc/include/rte_config.h -Idpdk-16.04/lib/librte_eal/linuxapp/eal/include -Idpdk-16.04/lib/librte_eal/common -Idpdk-16.04/lib/librte_eal/common/include -Idpdk-16.04/lib/librte_ring -Idpdk-16.04/lib/librte_mempool -Idpdk-16.04/lib/librte_ivshmem -W -Wall -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wold-style-definition -Wpointer-arith -Wcast-align -Wnested-externs -Wcast-qual -Wformat-nonliteral -Wformat-security -Wundef -Wwrite-strings -O3   -o malloc_heap.o -c dpdk-16.04/lib/librte_eal/common/malloc_heap.c\\n```\\n\\n\u7f16\u8bd1\u5931\u8d25\u65f6\u7684\u547d\u4ee4\u884c\u53c2\u6570\uff1a\\n\\n```\\ngcc -Wp,-MD,./.malloc_heap.o.d.tmp -m64 -pthread -fPIC  -march=core2 -DRTE_MACHINE_CPUFLAG_SSE -DRTE_MACHINE_CPUFLAG_SSE2 -DRTE_MACHINE_CPUFLAG_SSE3 -DRTE_MACHINE_CPUFLAG_SSSE3  -Idpdk-16.04/x86_64-native-linuxapp-gcc/include -include dpdk-16.04/x86_64-native-linuxapp-gcc/include/rte_config.h -Idpdk-16.04/lib/librte_eal/linuxapp/eal/include -Idpdk-16.04/lib/librte_eal/common -Idpdk-16.04/lib/librte_eal/common/include -Idpdk-16.04/lib/librte_ring -Idpdk-16.04/lib/librte_mempool -Idpdk-16.04/lib/librte_ivshmem -W -Wall -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wold-style-definition -Wpointer-arith -Wcast-align -Wnested-externs -Wcast-qual -Wformat-nonliteral -Wformat-security -Wundef -Wwrite-strings -Werror -O3   -o malloc_heap.o -c dpdk-16.04/lib/librte_eal/common/malloc_heap.c\\n```\\n\\n\u5bf9\u6bd4\u53d1\u73b0\u7f16\u8bd1\u5931\u8d25\u65f6\u7684\u547d\u4ee4\u884c\u53c2\u6570\u591a\u4e86\u5982\u4e0b\u9009\u9879\uff1a\\n\\n```bash\\n-Werror\\n```\\n\\ngcc \u5b98\u65b9\u624b\u518c\u4e2d\u5bf9 -Werror \u7684\u89e3\u91ca\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n>-Werror Make all warnings into errors.\\n\\n\u5f53\u5f00\u542f\u4e86\u8fd9\u4e2a\u9009\u9879\u540e\u6240\u6709\u7684 warnings \u90fd\u4f1a\u88ab\u5f53\u4f5c\u9519\u8bef\u5904\u7406\u4ece\u800c\u5bfc\u81f4\u7f16\u8bd1\u7ec8\u6b62\u3002\\n\\n## \u4ec0\u4e48\u4fee\u6539\u5bfc\u81f4\u4e86\u7f16\u8bd1\u53c2\u6570\u53d8\u5316\uff1f\\n\\n\u6392\u67e5\u5982\u4e0b\u53ef\u80fd\u7684\u9879\u76ee\uff1a\\n\\n1. \u6e90\u7801\u4fee\u6539\u65e0\u5173\u8054\\n2. \u672a\u4fee\u6539\u73af\u5883\u53d8\u91cf\\n3. \u672a\u4fee\u6539 mk \u76ee\u5f55\u4e2d\u7f16\u8bd1\u811a\u672c\\n4. config \u6587\u4ef6\u672a\u4fee\u6539\\n\\n\u7ecf\u8fc7\u8fd9\u4e00\u901a\u6392\u67e5\u540e\u6ca1\u6709\u627e\u5230\u95ee\u9898\uff0c\u61f5\u903c\u4e86\u51e0\u5206\u949f\u540e\u6211\u60f3\u5230\u4e86\u4e00\u4e2a\u770b\u4e0a\u53bb\u6ca1\u6709\u5173\u8054\u7684\u70b9\u2014\u2014\u5728\u5185\u90e8\u7ef4\u62a4\u7684 dpdk-16.04 \u6839\u76ee\u5f55\u4e2d\u521d\u59cb\u5316 git \u4ed3\u5e93\u3002\\n\\n\u6211\u4eec\u7684 dpdk-16.04 \u4f7f\u7528 svn \u7ba1\u7406\uff0c\u4e3a\u4e86\u5f00\u53d1\u65b9\u4fbf\uff0c\u6211\u5c31\u7528 git \u6765\u7ba1\u7406\u4ee3\u7801\u4fee\u6539\u3002\\n\\n\u91cd\u547d\u540d .git \u76ee\u5f55\u540e\uff0c\u91cd\u65b0\u7f16\u8bd1\u6210\u529f\uff01\\n\\n\\n## dpdk-16.04 \u6839\u76ee\u5f55\u4e2d .git \u76ee\u5f55\u5bf9\u7f16\u8bd1\u53c2\u6570\u7684\u5f71\u54cd\\n\\n\u786e\u5b9a\u4e86\u95ee\u9898\u540e\uff0c\u7ee7\u7eed\u8ffd\u95ee\u6839\u672c\u539f\u56e0\u3002\u76f4\u63a5\u5728 mk \u76ee\u5f55\u4e2d\u4f7f\u7528 grep \u641c\u7d22 .git\uff0c\u679c\u7136\u627e\u5230\u4e86\u76f8\u5173\u7684\u5185\u5bb9\u3002\\n\\nmk/rte.vars.mk \u4e2d\u5982\u4e0b\u8bed\u53e5\u4f1a\u5224\u65ad .git \u76ee\u5f55\u662f\u5426\u5b58\u5728\u6765\u8bbe\u5b9a RTE_DEVEL_BUILD \u53d8\u91cf\u3002\\n\\n```Makefile\\n# developer build automatically enabled in a git tree\\nifneq ($(wildcard $(RTE_SDK)/.git),)\\nRTE_DEVEL_BUILD := y\\nendif\\n```\\n\\nRTE_DEVEL_BUILD \u53d8\u91cf\u5728 toolchain/gcc/rte.vars.mk \u4e2d\u88ab\u5224\u65ad\uff0c\u5f53\u4e3a y \u7684\u65f6\u5019\u5c31\u5728 WERROR_FLAGS \u4e2d\u6dfb\u52a0 -Werror \u53c2\u6570\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n\\n```Makefile\\nifeq ($(RTE_DEVEL_BUILD),y)\\nWERROR_FLAGS += -Werror\\nendif\\n```\\n\\n## \u603b\u7ed3\\n\\n\u5f88\u591a\u65f6\u5019\u95ee\u9898\u4e00\u76f4\u90fd\u5b58\u5728\uff0c\u53ea\u4e0d\u8fc7\u4f60\u5e76\u4e0d\u4e00\u5b9a\u80fd\u591f\u53d1\u73b0\u5b83\u3002\u5f53\u95ee\u9898\u6709\u4e00\u5929\u8df3\u51fa\u6765\uff0c\u53ef\u80fd\u4f1a\u8ba9\u4f60\u5927\u5403\u4e00\u60ca\u3002\u9047\u5230\u4e00\u4e2a\u95ee\u9898\u65f6\uff0c\u5728\u89e3\u51b3\u95ee\u9898\u7684\u540c\u65f6\u5c3d\u53ef\u80fd\u5411\u4e0b\u6316\u6398\uff0c\u5728\u8fd9\u4e00\u8fc7\u7a0b\u4e2d\u4e5f\u8bb8\u4f60\u80fd\u591f\u53d1\u73b0\u65b0\u7684\u95ee\u9898\uff0c\u7ee7\u7eed\u8ffd\u95ee\u8fd9\u4e9b\u95ee\u9898\u4f60\u5c06\u6536\u83b7\u66f4\u591a\u7684\u6210\u957f\u3002"},{"id":"/dpdk/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790.md","source":"@site/blog/dpdk/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790.md","title":"dpdk/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790","description":"\u524d\u8a00","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":6.3,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-16.04 \u6839\u76ee\u5f55\u4e2d .git \u76ee\u5f55\u5bf9\u7f16\u8bd1\u53c2\u6570\u7684\u5f71\u54cd","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u6839\u76ee\u5f55\u4e2d .git \u76ee\u5f55\u5bf9\u7f16\u8bd1\u53c2\u6570\u7684\u5f71\u54cd"},"nextItem":{"title":"dpdk/dpdk-16.04 \u865a\u62df\u5316\u73af\u5883 virtio \u7f51\u5361 secondary \u8fdb\u7a0b\u6bb5\u9519\u8bef\u95ee\u9898\u5206\u6790\u5b9a\u4f4d","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u865a\u62df\u5316\u73af\u5883 virtio \u7f51\u5361 secondary \u8fdb\u7a0b\u6bb5\u9519\u8bef\u95ee\u9898\u5206\u6790\u5b9a\u4f4d"}},"content":"## \u524d\u8a00\\n\u5728 [Eal:Error reading from file descriptor 33: Input/output error](https://blog.csdn.net/Longyu_wlz/article/details/121443906) \u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u63cf\u8ff0\u4e86 VMWARE \u73af\u5883\u4e2d dpdk \u7a0b\u5e8f\u4f7f\u7528 82545EM \u865a\u62df\u7f51\u5361\u65f6\uff0c\u4e00\u76f4\u6253\u5370 Input/output error \u7684\u95ee\u9898\u3002\\n\\n\u8fd9\u4e2a\u95ee\u9898\u6700\u7ec8\u901a\u8fc7\u4fee\u6539 igb_uio \u7684\u4ee3\u7801\u4fee\u590d\uff0c\u4fee\u590d\u540e\u6211\u4e0d\u7981\u5728\u60f3\u7528\u6237\u6001\u662f\u600e\u6837\u5de5\u4f5c\u7684\uff1f\u4ee5\u524d\u5927\u6982\u77e5\u9053\u662f\u901a\u8fc7 epoll \u6765\u76d1\u63a7 uio \u6587\u4ef6\u7684\uff0c\u5374\u5e76\u4e0d\u6e05\u695a\u5177\u4f53\u7684\u6d41\u7a0b\u3002\\n\\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4f7f\u7528 dpdk-16.04 \u4e2d\u65ad\u7ebf\u7a0b\u6a21\u62df demo \u6765\u8fdb\u4e00\u6b65\u7814\u7a76 dpdk \u901a\u8fc7 uio \u6587\u4ef6\u76d1\u63a7\u7f51\u5361\u4e2d\u65ad\u4e8b\u4ef6\u7684\u5173\u952e\u8fc7\u7a0b\u3002\\n## dpdk \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo\\ndemo \u8fd0\u884c\u673a\u5668\u5185\u6838\u4fe1\u606f\uff1a\\n\\n```bash\\nlongyu@debian:~/epoll$ uname -a\\nLinux debian 4.19.0-18-amd64 #1 SMP Debian 4.19.208-1 (2021-09-29) x86_64 GNU/Linux\\n```\\n\\n\u7f51\u5361\u7ed1\u5b9a\u4fe1\u606f\uff1a\\n\\n```bash\\nlongyu@debian:~/epoll$ sudo python ../dpdk-16.04/tools/dpdk_nic_bind.py -s\\n\\nNetwork devices using DPDK-compatible driver\\n============================================\\n0000:02:05.0 \'82545EM Gigabit Ethernet Controller (Copper)\' drv=igb_uio unused=e1000\\n```\\n\u4e3a\u4e86\u89e3\u51b3\u7f16\u8bd1\u95ee\u9898\uff0c\u5bf9 dpdk-16.04 igb_uio.c \u4ee3\u7801\u505a\u4e86\u5982\u4e0b\u4fee\u6539\uff1a\\n\\n```c\\n--- lib/librte_eal/linuxapp/igb_uio/igb_uio.c  \\n+++ lib/librte_eal/linuxapp/igb_uio/igb_uio.c\\n@@ -442,7 +442,7 @@\\n        case RTE_INTR_MODE_MSIX:\\n                /* Only 1 msi-x vector needed */\\n                msix_entry.entry = 0;\\n-               if (pci_enable_msix(dev, &msix_entry, 1) == 0) {\\n+               if (pci_enable_msix_range(dev, &msix_entry, 1, 1) == 0) {s\\n```\\ndemo \u7a0b\u5e8f\u6458\u81ea dpdk-16.04 \u5e76\u8fdb\u884c\u4e86\u4e00\u4e9b\u7b80\u5316\uff0c\u6e90\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n#include <stdio.h>\\n#include <stdarg.h>\\n#include <errno.h>\\n#include <sys/epoll.h>\\n#include <string.h>\\n#include <sys/types.h>\\n#include <sys/stat.h>\\n#include <fcntl.h>\\n#include <unistd.h>\\n#include <stdlib.h>\\n\\nstatic void eal_intr_handle_interrupts(int pfd, unsigned totalfds);\\n\\n#define rte_panic(...) rte_panic_(__func__, __VA_ARGS__, \\"dummy\\")\\n#define rte_panic_(func, format, ...) __rte_panic(func, format \\"%.0s\\", __VA_ARGS__)\\n\\n/* call abort(), it will generate a coredump if enabled */\\nstatic void __rte_panic(const char *funcname, const char *format, ...)\\n{\\n  va_list ap;\\n\\n  va_start(ap, format);\\n  vprintf(format, ap);\\n  va_end(ap);\\n  abort();\\n}\\n\\nstatic void epoll_uio_file(int fd)\\n{\\n  struct epoll_event ev;\\n\\n  for (;;) {\\n    unsigned numfds = 0;\\n\\n    /* create epoll fd */\\n    int pfd = epoll_create(1);\\n    if (pfd < 0)\\n      rte_panic(\\"Cannot create epoll instance\\\\n\\");\\n\\n    ev.events = EPOLLIN | EPOLLPRI;\\n    ev.data.fd = fd;\\n\\n    if (epoll_ctl(pfd, EPOLL_CTL_ADD, fd, &ev) < 0){\\n      rte_panic(\\"Error adding fd %d epoll_ctl, %s\\\\n\\",\\n                fd, strerror(errno));\\n    } else {\\n      numfds++;\\n    }\\n\\n    /* serve the interrupt */\\n    eal_intr_handle_interrupts(pfd, numfds);\\n\\n    /**\\n     * when we return, we need to rebuild the\\n     * list of fds to monitor.\\n     */\\n    close(pfd);\\n  }\\n}\\n\\n#define EAL_INTR_EPOLL_WAIT_FOREVER -1\\n\\nstatic void\\neal_intr_handle_interrupts(int pfd, unsigned totalfds)\\n{\\n  struct epoll_event events[totalfds];\\n  int nfds = 0;\\n  int bytes_read;\\n  char buf[1024];\\n\\n  for(;;) {\\n    nfds = epoll_wait(pfd, events, totalfds,\\n                      EAL_INTR_EPOLL_WAIT_FOREVER);\\n    /* epoll_wait fail */\\n    if (nfds < 0) {\\n      if (errno == EINTR)\\n        continue;\\n      printf(\\"epoll_wait returns with fail\\\\n\\");\\n      return;\\n    }\\n    /* epoll_wait timeout, will never happens here */\\n    else if (nfds == 0)\\n      continue;\\n\\n    /* epoll_wait has at least one fd ready to read */\\n    bytes_read = 1;\\n    bytes_read = read(events[0].data.fd, &buf, bytes_read);\\n\\n    if (bytes_read < 0) {\\n      if (errno == EINTR || errno == EWOULDBLOCK)\\n        continue;\\n\\n      printf(\\"Error reading from file \\"\\n              \\"descriptor %d: %s\\\\n\\",\\n              events[0].data.fd,\\n              strerror(errno));\\n    }\\n  }\\n}\\n\\n#define UIO_PATH \\"/dev/uio0\\"\\n\\nint main(void)\\n{\\n  int fd;\\n\\n  fd = open(UIO_PATH, O_RDWR);\\n\\n  if (fd < 0) {\\n    rte_panic(\\"open %s failed\\\\n\\", UIO_PATH);\\n  }\\n\\n  epoll_uio_file(fd);\\n\\n  return 0;\\n}\\n```\\n\u4e0a\u8ff0 demo \u7684\u5173\u952e\u6d41\u7a0b\u5982\u4e0b\uff1a\\n1. \u6253\u5f00\u7ed1\u5b9a\u5230 igb_uio \u9a71\u52a8\u7684\u7f51\u5361\u63a5\u53e3\u751f\u6210\u7684 uio \u6587\u4ef6\\n2. \u4f7f\u7528 1 \u4e2d\u6253\u5f00 uio \u6587\u4ef6\u83b7\u53d6\u7684 fd \u4e3a\u53c2\u6570\u8c03\u7528 epoll_uio_file \u51fd\u6570\\n3. epoll_uio_file \u51fd\u6570\u521b\u5efa\u4e00\u4e2a epoll \u4e8b\u4ef6\uff0c\u5e76\u5c06\u4f20\u5165\u7684 fd \u6dfb\u52a0\u5230\u76d1\u63a7\u5217\u8868\u4e2d\\n4. epoll_uio_file \u968f\u540e\u8c03\u7528 eal_intr_handle_interrupts \u51fd\u6570\uff0ceal_intr_handle_interrupts \u51fd\u6570\u4e2d\u8c03\u7528 epoll_wait \u76d1\u63a7\u4e8b\u4ef6\uff0c\u5f53\u6709\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u8c03\u7528 read \u51fd\u6570\u8bfb\u53d6\u4e8b\u4ef6\u5185\u5bb9\\n\\n## demo \u8fd0\u884c\u4fe1\u606f\\n\u8fd0\u884c\u7ed3\u679c log \u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```c\\nError reading from file descriptor 3: Input/output error\\nError reading from file descriptor 3: Input/output error\\nError reading from file descriptor 3: Input/output error\\nError reading from file descriptor 3: Input/output error\\nError reading from file descriptor 3: Input/output error\\nError reading from file descriptor 3: Input/output error\\n```\\n\u8f93\u51fa\u4fe1\u606f\u8868\u660e\u590d\u73b0\u51fa\u4e86\u4e0e [Eal:Error reading from file descriptor 33: Input/output error](https://blog.csdn.net/Longyu_wlz/article/details/121443906) \u4e00\u6837\u7684\u95ee\u9898\u3002\\n\\n**strace \u8ddf\u8e2a\u4fe1\u606f\u5982\u4e0b\uff1a**\\n\\n```c\\nopenat(AT_FDCWD, \\"/dev/uio0\\", O_RDWR)   = 3\\nepoll_create(1)                         = 4\\nepoll_ctl(4, EPOLL_CTL_ADD, 3, {EPOLLIN|EPOLLPRI, {u32=3, u64=3}}) = 0\\nepoll_wait(4, [{EPOLLIN|EPOLLPRI|EPOLLERR|EPOLLHUP, {u32=3, u64=3}}], 1, -1) = 1\\nread(3, 0x7ffcdaac3480, 1)              = -1 EIO (Input/output error)\\nfstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...}) = 0\\nbrk(NULL)                               = 0x562f29f41000\\nbrk(0x562f29f62000)                     = 0x562f29f62000\\nwrite(1, \\"Error reading from file descript\\"..., 57) = 57\\nepoll_wait(4, [{EPOLLIN|EPOLLPRI|EPOLLERR|EPOLLHUP, {u32=3, u64=3}}], 1, -1) = 1\\nread(3, 0x7ffcdaac3480, 1)              = -1 EIO (Input/output error)\\nwrite(1, \\"Error reading from file descript\\"..., 57) = 57\\n```\\n## dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u4e00\u4e9b\u529f\u80fd\u4e0e\u5b9e\u73b0\\n### 1. \u4e00\u4e2a\u63a5\u53e3\u652f\u6301\u6ce8\u518c\u591a\u4e2a\u4e2d\u65ad\u56de\u8c03\\n\u6bcf\u4e2a\u4e2d\u65ad\u6e90\u4e4b\u95f4\u4f7f\u7528\u94fe\u8868\u94fe\u8d77\u6765\uff0c\u6bcf\u4e2a\u4e2d\u65ad\u6e90\u8fd8\u6709\u6709\u4e00\u4e2a\u4e2d\u65ad\u56de\u8c03\u94fe\u8868\uff0c\u4e00\u4e2a\u4e2d\u65ad\u56de\u8c03\u7684\u5b9a\u4e49\u662f\u56de\u8c03\u51fd\u6570+\u53c2\u6570\uff0c\u591a\u4e2a\u4e2d\u65ad\u56de\u8c03\u4f7f\u7528\u94fe\u8868\u94fe\u8d77\u6765\u3002\\n\\n\u4e2d\u65ad\u56de\u8c03\u4e0e\u4e2d\u65ad\u6e90\u7ed3\u6784\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\\n```c\\nstruct rte_intr_callback {\\n\\tTAILQ_ENTRY(rte_intr_callback) next;\\n\\trte_intr_callback_fn cb_fn;  /**< callback address */\\n\\tvoid *cb_arg;                /**< parameter for callback */\\n};\\n\\nstruct rte_intr_source {\\n\\tTAILQ_ENTRY(rte_intr_source) next;\\n\\tstruct rte_intr_handle intr_handle; /**< interrupt handle */\\n\\tstruct rte_intr_cb_list callbacks;  /**< user callbacks */\\n\\tuint32_t active;\\n};\\n```\\n\\ndpdk-16.04 \u6ca1\u6709\u68c0\u67e5\u4e2d\u65ad\u56de\u8c03\u7684\u552f\u4e00\u6027\uff0c\u5b58\u5728\u6ce8\u518c\u591a\u4e2a\u76f8\u540c\u4e2d\u65ad\u56de\u8c03\u7684\u60c5\u51b5\u3002\\n### 2. \u652f\u6301\u9ad8\u6548\u7684\u4e8b\u4ef6\u76d1\u63a7\uff0c\u53ca\u65f6\u6355\u83b7\u5904\u7406\u4e2d\u65ad\u4e8b\u4ef6\\n\\ndpdk-16.04 \u4f7f\u7528 epoll \u6765\u76d1\u63a7\u4e2d\u65ad\u4e8b\u4ef6\uff0c\u6ce8\u518c\u4e2d\u65ad\u65f6\uff0cpci \u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u751f\u6210\u7684 uio \u6587\u4ef6\u7684\u53e5\u67c4\u4f1a\u88ab\u6dfb\u52a0\u5230 epoll \u4e8b\u4ef6\u4e2d\uff0c\u6ce8\u518c\u5b8c\u6210\u540e\u901a\u8fc7 epoll_wait \u6765\u76d1\u63a7\u662f\u5426\u6709\u4e2d\u65ad\u89e6\u53d1\u3002\\n### 3. \u652f\u6301\u4e2d\u65ad\u4e8b\u4ef6\u52a8\u6001\u6ce8\u518c\u4e0e\u9500\u6bc1\\ndpdk-16.04 \u521b\u5efa\u4e86\u4e00\u4e2a pipe \u7528\u4e8e\u91cd\u65b0\u6784\u5efa\u4e2d\u65ad\u76d1\u542c\u4e8b\u4ef6\u3002pipe \u7684 read \u7aef\u4e5f\u88ab\u6dfb\u52a0\u5230 epoll \u4e8b\u4ef6\u4e2d\uff0c\u5728\u6ce8\u518c\u4e2d\u65ad\u5b8c\u6210\u540e\u4f1a\u5411 pipe \u7684 write \u7aef\u5199\u5165\u6570\u636e\uff0c\u4e2d\u65ad\u5904\u7406\u7ebf\u7a0b\u76d1\u63a7\u5230 pipe read \u7aef\u6709\u6570\u636e\uff0c\u5219\u91cd\u65b0\u6784\u5efa\u4e2d\u65ad\u4e8b\u4ef6\u3002\\n\\t\u540c\u6837\u5f53\u5728\u9500\u6bc1\u4e00\u4e2a\u4e2d\u65ad\u4e8b\u4ef6\u7684\u6700\u540e\u4e5f\u4f1a\u5411 pipe \u7684 write \u7aef\u5199\u5165\u6570\u636e\uff0c\u901a\u77e5\u4e2d\u65ad\u5904\u7406\u7ebf\u7a0b\uff0c\u91cd\u65b0\u6784\u5efa\u4e8b\u4ef6\u76d1\u542c\u5217\u8868\u3002"},{"id":"/dpdk/dpdk-16.04 \u865a\u62df\u5316\u73af\u5883 virtio \u7f51\u5361 secondary \u8fdb\u7a0b\u6bb5\u9519\u8bef\u95ee\u9898\u5206\u6790\u5b9a\u4f4d","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u865a\u62df\u5316\u73af\u5883 virtio \u7f51\u5361 secondary \u8fdb\u7a0b\u6bb5\u9519\u8bef\u95ee\u9898\u5206\u6790\u5b9a\u4f4d","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 \u865a\u62df\u5316\u73af\u5883 virtio \u7f51\u5361 secondary \u8fdb\u7a0b\u6bb5\u9519\u8bef\u95ee\u9898\u5206\u6790\u5b9a\u4f4d.md","source":"@site/blog/dpdk/dpdk-16.04 \u865a\u62df\u5316\u73af\u5883 virtio \u7f51\u5361 secondary \u8fdb\u7a0b\u6bb5\u9519\u8bef\u95ee\u9898\u5206\u6790\u5b9a\u4f4d.md","title":"dpdk/dpdk-16.04 \u865a\u62df\u5316\u73af\u5883 virtio \u7f51\u5361 secondary \u8fdb\u7a0b\u6bb5\u9519\u8bef\u95ee\u9898\u5206\u6790\u5b9a\u4f4d","description":"\u73af\u5883\u4fe1\u606f","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":6.7,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u76d1\u542c uio \u6587\u4ef6\u68c0\u6d4b\u4e2d\u65ad\u7684\u793a\u4f8b demo \u4e0e\u5185\u90e8\u5b9e\u73b0\u89e3\u6790"},"nextItem":{"title":"dpdk/dpdk-16.04 \u89e3\u521d\u59cb\u5316\u8fc7\u7a0b","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u89e3\u521d\u59cb\u5316\u8fc7\u7a0b"}},"content":"## \u73af\u5883\u4fe1\u606f\\n\\n**\u865a\u673a\u73af\u5883**\uff1aKVM x86 \u865a\u673a\u73af\u5883\\n\\n\u865a\u673a\u7684\u914d\u7f6e\u7684\u7f51\u5361\uff1a\\n```bash\\n00:03.0 Ethernet controller: Red Hat, Inc Virtio network device\\n00:04.0 Ethernet controller: Red Hat, Inc Virtio network device\\n00:09.0 Ethernet controller: Red Hat, Inc Virtio network device\\n00:0a.0 Ethernet controller: Red Hat, Inc Virtio network device\\n00:0b.0 Ethernet controller: Red Hat, Inc Virtio network device\\n```\\n\\n**\u7f51\u53e3\u529f\u80fd**\uff1a00:03.0 \u4f5c\u4e3a\u7ba1\u7406\u53e3\uff0c\u5176\u4f59\u56db\u4e2a\u53e3\u7ed1\u5b9a\u5230 igb_uio \u4f5c\u4e3a\u4e1a\u52a1\u53e3\u3002\\n\\n**dpdk \u7248\u672c\uff1adpdk-16.04**\\n\\n## \u95ee\u9898\u63cf\u8ff0\\n\\n\u8fd0\u884c l2fwd \u540e\uff0c\u8fd0\u884c dpdk_proc_info \u83b7\u53d6\u4fe1\u606f\uff0c\u83b7\u53d6\u4fe1\u606f\u7684\u65f6\u5019\u51fa\u73b0\u6bb5\u9519\u8bef\u3002\\n\\n**\u6bb5\u9519\u8bef\u4fe1\u606f\uff1a**\\n\\n```bash\\nThread 1 \\"dpdk_proc_info\\" received signal SIGSEGV, Segmentation fault.\\n0x00007ffff691856f in vtpci_with_feature (hw=0x0, bit=15)\\n    at /home/longyu/dpdk-16.04/drivers/net/virtio/virtio_pci.h:295\\n295     /home/longyu/dpdk-16.04/drivers/net/virtio/virtio_pci.h: No such file or directory.\\n(gdb) bt\\n#0  0x00007ffff691856f in vtpci_with_feature (hw=0x0, bit=15)\\n    at /home/longyu/dpdk-16.04/drivers/net/virtio/virtio_pci.h:295\\n#1  0x00007ffff691a835 in rx_func_get (\\n    eth_dev=0x69d0c0 <rte_eth_devices+65824>)\\n    at /home/longyu/dpdk-16.04/drivers/net/virtio/virtio_ethdev.c:1160\\n#2  0x00007ffff691ab13 in eth_virtio_dev_init (\\n    eth_dev=0x69d0c0 <rte_eth_devices+65824>)\\n    at /home/longyu/dpdk-16.04/drivers/net/virtio/virtio_ethdev.c:1287\\n#3  0x00007ffff600ad69 in rte_eth_dev_init (\\n    pci_drv=0x7ffff6c9eae0 <rte_virtio_pmd>, pci_dev=0x2772b20)\\n    at /home/longyu/dpdk-16.04/lib/librte_ether/rte_ethdev.c:302\\n#4  0x00007ffff604c628 in rte_eal_pci_probe_one_driver (\\n    dr=0x7ffff6c9eae0 <rte_virtio_pmd>, dev=0x2772b20)\\n    at /home/longyu/dpdk-16.04/lib/librte_eal/common/eal_common_pci.c:199\\n#5  0x00007ffff604c88a in pci_probe_all_drivers (dev=0x2772b20)\\n    at /home/longyu/dpdk-16.04/lib/librte_eal/common/eal_common_pci.c:275\\n```\\n\\ndpdk_proc_info \u521d\u59cb\u5316\u4e2d\u7684\u91cd\u8981\u4fe1\u606f\uff1a\\n\\n```bash\\nEAL: lcore 0 is ready (tid=f1b6d700;cpuset=[0])\\nEAL: PCI device 0000:00:03.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1000 rte_virtio_pmd\\nEAL: PCI device 0000:00:04.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1000 rte_virtio_pmd\\nEAL: PCI device 0000:00:09.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1000 rte_virtio_pmd\\nEAL: PCI device 0000:00:0a.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1000 rte_virtio_pmd\\nEAL: PCI device 0000:00:0b.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1000 rte_virtio_pmd\\n```\\n\\n## \u95ee\u9898\u5206\u6790\\n\\ndpdk_proc_info \u4f5c\u4e3a secondary \u8fdb\u7a0b\uff0c\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019**\u628a 00:03.0 \u7ba1\u7406\u53e3\u4e5f\u4f5c\u4e3a\u666e\u901a\u7684\u4e1a\u52a1\u53e3\u521d\u59cb\u5316\u4e86**\uff0c\u6ca1\u6709**\u8df3\u8fc7 virtio \u7ba1\u7406\u53e3**\u3002\\n\\n**\u5728 l2fwd \u4e2d\u53ea\u521d\u59cb\u5316\u4e86\u56db\u4e2a\u4e1a\u52a1\u53e3**\uff0c**secondary** \u8fdb\u7a0b\u5728\u521d\u59cb\u5316\u5230\u7b2c\u4e94\u4e2a\u53e3\u65f6\uff0c\u7531\u4e8e l2fwd \u5e76**\u6ca1\u6709\u521b\u5efa**\u7b2c\u4e94\u4e2a\u4e1a\u52a1\u53e3\u7684 hw \u6570\u636e\u7ed3\u6784\uff0c\u5bfc\u81f4**\u83b7\u53d6\u5230\u7684\u5171\u4eab\u6570\u636e\u7ed3\u6784\u4e3a NULL\uff0c\u8bbf\u95ee\u6b64\u5b57\u6bb5\u89e6\u53d1\u6bb5\u9519\u8bef**\u3002\\n\\n## \u76f8\u5173\u7684\u51fd\u6570\u8c03\u7528\\n\\n```c\\nrte_eal_init\\n\\trte_eal_pci_probe\\n\\t\\tpci_probe_all_drivers\\n\\t\\t\\trte_eal_pci_probe_one_driver\\n\\t\\t\\t\\trte_eth_dev_init\\n\\t\\t\\t\\t\\trte_eth_dev_allocate\\n\\t\\t\\t\\t\\t\\teth_virtio_dev_init\\n\\t\\t\\t\\t\\t\\t\\trx_func_get \\n```\\n\\n\u91cd\u70b9\u7814\u7a76\u4e0b rte_eth_dev_allocate \u51fd\u6570\uff0c\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```bash\\nstruct rte_eth_dev *\\nrte_eth_dev_allocate(const char *name, enum rte_eth_dev_type type)\\n{\\n\\tuint8_t port_id;\\n\\tstruct rte_eth_dev *eth_dev;\\n\\n\\tport_id = rte_eth_dev_find_free_port();\\n\\tif (port_id == RTE_MAX_ETHPORTS) {\\n\\t\\tRTE_PMD_DEBUG_TRACE(\\"Reached maximum number of Ethernet ports\\\\n\\");\\n\\t\\treturn NULL;\\n\\t}\\n\\n\\tif (rte_eth_dev_data == NULL)\\n\\t\\trte_eth_dev_data_alloc();\\n\\n\\tif (rte_eth_dev_allocated(name) != NULL) {\\n\\t\\tRTE_PMD_DEBUG_TRACE(\\"Ethernet Device with name %s already allocated!\\\\n\\",\\n\\t\\t\\t\\tname);\\n\\t\\treturn NULL;\\n\\t}\\n\\n\\teth_dev = &rte_eth_devices[port_id];\\n\\teth_dev->data = &rte_eth_dev_data[port_id];\\n\\t.........\\n\\tnb_ports++;\\n\\treturn eth_dev;\\n}\\n```\\n\\nrte_eth_dev_allocate \u51fd\u6570\u7528\u4e8e**\u5206\u914d ethdev \u7ed3\u6784**\uff0c**\u6bcf\u4e2a ethdev \u7ed3\u6784**\u4f1a**\u5173\u8054**\u5230\u4e00\u4e2a **struct rte_eth_dev_data \u6570\u636e\u6307\u9488**\uff0cprimary \u8fdb\u7a0b\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u4f1a\u5206\u914d\u4e00\u5757 **RTE_MAX_ETHPORTS** \u4e2a rte_eth_dev_data \u6570\u636e\u7ed3\u6784\uff0c\u5e76\u5c06\u5176\u6e05\u96f6\u3002\\n\\nrte_eth_dev_data_alloc \u51fd\u6570\u5b8c\u6210\u6bcf\u4e2a port struct rte_eth_dev_data \u7ed3\u6784\u7684\u521b\u5efa\uff0c\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```bash\\nstatic void\\nrte_eth_dev_data_alloc(void)\\n{\\n\\tconst unsigned flags = 0;\\n\\tconst struct rte_memzone *mz;\\n\\n\\tif (rte_eal_process_type() == RTE_PROC_PRIMARY) {\\n\\t\\tmz = rte_memzone_reserve(MZ_RTE_ETH_DEV_DATA,\\n\\t\\t\\t\\tRTE_MAX_ETHPORTS * sizeof(*rte_eth_dev_data),\\n\\t\\t\\t\\trte_socket_id(), flags);\\n\\t} else {   \\n            mz = rte_memzone_lookup(MZ_RTE_ETH_DEV_DATA);\\n    }\\n    \\n\\tif (mz == NULL)\\n\\t\\trte_panic(\\"Cannot allocate memzone for ethernet port data\\\\n\\");\\n\\n\\trte_eth_dev_data = mz->addr;\\n\\tif (rte_eal_process_type() == RTE_PROC_PRIMARY)\\n\\t\\tmemset(rte_eth_dev_data, 0,\\n\\t\\t\\t\\tRTE_MAX_ETHPORTS * sizeof(*rte_eth_dev_data));\\n}\\n```\\n\\nsecondary \u8fdb\u7a0b\u901a\u8fc7 **rte_memzone_lookup** \u76f4\u63a5 **attach** \u5230 **primary \u8fdb\u7a0b\u4e2d\u521b\u5efa**\u7684\u5b57\u6bb5\u4e2d\uff0c\u76f4\u63a5\u5171\u4eab\u4f7f\u7528\u3002\u8fd9\u610f\u5473\u7740\u5728 **secondary \u8fdb\u7a0b\u8fd0\u884c\u7684\u65f6\u5019 RTE_MAX_ETHPORTS \u4e2a eth_dev \u7684 rte_eth_dev_data \u7ed3\u6784\u90fd\u88ab\u521b\u5efa\u5b8c\u6210**\u3002\\n\\n## \u6211\u7684\u95ee\u9898\\n\\n### 1. \u4e3a\u4ec0\u4e48 secondary \u8fdb\u7a0b probe \u7f51\u53e3\u7684\u65f6\u5019\u6ca1\u6709\u8df3\u8fc7\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u7684 virtio \u7f51\u5361\uff1f\\n\\n**rte_eal_pci_probe_one_driver** \u4e2d\u5f53 **match** \u5230\u4e00\u4e2a **pci** \u9a71\u52a8\u65f6\uff0c\u5f53\u9a71\u52a8\u7684 **rte_pci_driver \u7ed3\u6784\u7684 drv_flags** \u8bbe\u7f6e\u4e86 **RTE_PCI_DRV_NEED_MAPPING** \u6807\u5fd7\u540e\uff0c**rte_eal_pci_map_device** \u51fd\u6570\u4f1a\u88ab\u8c03\u7528\uff0c\u6b64\u51fd\u6570\u4f1a\u5224\u65ad\u63a5\u53e3\u7ed1\u5b9a\u5230\u7684\u9a71\u52a8\u7c7b\u578b\uff0c\u7ed1\u5b9a\u5230\u7ba1\u7406\u53e3\u7684\u63a5\u53e3 rte_eal_pci_map_device \u51fd\u6570\u4f1a\u6253\u5370\u4fe1\u606f\u5e76\u8fd4\u56de\u9519\u8bef\uff0c\u968f\u540e**rte_eal_pci_probe_one_driver \u51fd\u6570\u4e2d\u4f1a\u76f4\u63a5\u8fd4\u56de\uff0c\u8df3\u8fc7\u5f53\u524d\u63a5\u53e3**\u3002\\n\\n**virtio** \u9a71\u52a8\u7684 **rte_pci_driver** \u7ed3\u6784\u4e2d\u5e76**\u6ca1\u6709\u8bbe\u5b9a\u8fd9\u4e2a\u6807\u5fd7**\uff0c\u5bfc\u81f4\u4e0d\u80fd\u5728\u8fd9\u4e00\u6b65\u8bc6\u522b\u5230\u3002**\u5e38\u89c1\u7684\u7269\u7406\u7f51\u5361\u8bf8\u5982 igb\u3001ixgbe\u3001i40e \u90fd\u8bbe\u7f6e\u4e86\u8fd9\u4e2a\u6807\u5fd7\uff0c\u4e0d\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\u3002**\\n\\n### 2. primary \u8fdb\u7a0b\u5728\u54ea\u91cc\u68c0\u6d4b\u5230\u63a5\u53e3\u672a\u7ed1\u5b9a\u5230 dpdk \u652f\u6301\u7684\u9a71\u52a8\u4e2d\uff1f\\n\\nprimary \u8fdb\u7a0b\u5728\u8c03\u7528 **eth_virtio_dev_init** \u521d\u59cb\u5316\u63a5\u53e3\u7684\u65f6\u5019\uff0c\u5728\u5b50\u51fd\u6570\u8c03\u7528\u4e2d\u4f1a\u6267\u884c\u4e0e **rte_eal_pci_map_device** \u8fc7\u7a0b\u3002\\n\\n\u76f8\u5173\u51fd\u6570\u8c03\u7528\uff1a\\n\\n```c\\n\\neth_virtio_dev_init\\n\\tvtpci_init\\n\\t\\tvirtio_read_caps\\n\\t\\t\\trte_eal_pci_map_device\\n```\\n\\n**vtpci_init** \u51fd\u6570\u7684\u5b50\u51fd\u6570\u8c03\u7528\u4e2d\u6620\u5c04\u7f51\u5361\u7684 pci \u8d44\u6e90\u7a7a\u95f4\u5931\u8d25\uff0c\u8fdb\u800c\u5bfc\u81f4 **eth_virtio_dev_init** \u8fd4\u56de 1\u3002\\n\\n**\u8fd9\u91cc\u7684\u8fd4\u56de\u503c\u975e\u5e38\u5173\u952e\uff0c\u5f53\u8fd4\u56de\u503c\u5927\u4e8e 0 \u65f6\uff0c\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u5230 pci_probe_all_drivers \u4e2d\uff0c\u6b64\u51fd\u6570\u68c0\u6d4b\u5230\u8fd4\u56de\u503c\u5927\u4e8e 0 \u5219\u7ee7\u7eed\u521d\u59cb\u5316\u540e\u7eed\u63a5\u53e3**\uff0c\u5982\u679c**\u8fd4\u56de\u503c\u5c0f\u4e8e 0\uff0c\u51fd\u6570\u8fd4\u56de\u5230 rte_eal_pci_probe \u4e2d\uff0c\u6253\u5370 Requested device xxxx cannot be used \u540e\u7a0b\u5e8f\u7ec8\u6b62**\u3002\\n\\n## \u89e3\u51b3\u65b9\u6848\\n\\n\u4fee\u590d patch \uff1a\\n\\n```cpp\\nIndex: drivers/net/virtio/virtio_ethdev.c\\n===================================================================\\n--- drivers/net/virtio/virtio_ethdev.c  (revision 666666)\\n+++ drivers/net/virtio/virtio_ethdev.c  (working copy)\\n@@ -1266,6 +1266,26 @@\\n        return 0;\\n }\\n\\n+static int check_device_driver(struct rte_pci_device *dev)\\n+{\\n+       int ret = -1;\\n+\\n+       switch (dev->kdrv) {\\n+       case RTE_KDRV_VFIO:\\n+       case RTE_KDRV_IGB_UIO:\\n+       case RTE_KDRV_UIO_GENERIC:\\n+               ret = 0;\\n+               break;\\n+       default:\\n+               RTE_LOG(DEBUG, EAL,\\n+                       \\"  Not managed by a supported kernel driver, skipped\\\\n\\");\\n+               ret = 1;\\n+               break;\\n+       }\\n+\\n+       return ret;\\n+}\\n+\\n /*\\n  * This function is based on probe() function in virtio_pci.c\\n  * It returns 0 on success.\\n@@ -1284,6 +1304,14 @@\\n        eth_dev->tx_pkt_burst = &virtio_xmit_pkts;\\n\\n        if (rte_eal_process_type() == RTE_PROC_SECONDARY) {\\n+               int ret;\\n+               pci_dev = eth_dev->pci_dev;\\n+\\n+               ret = check_device_driver(pci_dev);\\n+\\n+               if (unlikely(ret))\\n+                       return EINVAL;\\n+\\n                rx_func_get(eth_dev);\\n                return 0;\\n        }\\n```\\n\\n\u6b64 patch \u5728 **eth_virtio_dev_init** \u4e2d\u6dfb\u52a0\u5728 SECONDARY \u8fdb\u7a0b\u4e2d\u5224\u65ad pci \u63a5\u53e3\u662f\u5426\u7ed1\u5b9a\u5230 dpdk \u652f\u6301\u7684\u9a71\u52a8\u4e2d\uff0c\u5224\u65ad\u5931\u8d25\u5219\u8fd4\u56de EINVAL\uff08**\u5fc5\u987b\u8fd4\u56de\u6b63\u6570\u7528\u4e8e\u4e0a\u5c42\u903b\u8f91\u5904\u7406**\uff09\u3002\\n\\n## \u6d4b\u8bd5\u8bb0\u5f55\\n\\n\u4fee\u6539\u540e\uff0c\u91cd\u65b0\u6267\u884c dpdk_proc_info \u8fdb\u7a0b\uff0c\u6253\u5370\u5982\u4e0b\uff1a\\n\\n```cpp\\nEAL: PCI device 0000:00:03.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1000 rte_virtio_pmd\\nEAL:   Not managed by a supported kernel driver, skipped\\nEAL: PCI device 0000:00:04.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1000 rte_virtio_pmd\\nEAL: PCI device 0000:00:09.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1000 rte_virtio_pmd\\nEAL: PCI device 0000:00:0a.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1000 rte_virtio_pmd\\nEAL: PCI device 0000:00:0b.0 on NUMA socket -1\\nEAL:   probe driver: 1af4:1000 rte_virtio_pmd\\n```\\n\\n\u53ef\u4ee5\u770b\u5230\u4fee\u6539\u540e\u7ba1\u7406\u53e3\u88ab**\u8df3\u8fc7**\uff0c**\u95ee\u9898\u5f97\u5230\u89e3\u51b3**\u3002"},{"id":"/dpdk/dpdk-16.04 \u89e3\u521d\u59cb\u5316\u8fc7\u7a0b","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u89e3\u521d\u59cb\u5316\u8fc7\u7a0b","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 \u89e3\u521d\u59cb\u5316\u8fc7\u7a0b.md","source":"@site/blog/dpdk/dpdk-16.04 \u89e3\u521d\u59cb\u5316\u8fc7\u7a0b.md","title":"dpdk/dpdk-16.04 \u89e3\u521d\u59cb\u5316\u8fc7\u7a0b","description":"dpdk-16.04 \u7a0b\u5e8f\u89e3\u521d\u59cb\u5316\u8fc7\u7a0b","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":7.51,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-16.04 \u865a\u62df\u5316\u73af\u5883 virtio \u7f51\u5361 secondary \u8fdb\u7a0b\u6bb5\u9519\u8bef\u95ee\u9898\u5206\u6790\u5b9a\u4f4d","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u865a\u62df\u5316\u73af\u5883 virtio \u7f51\u5361 secondary \u8fdb\u7a0b\u6bb5\u9519\u8bef\u95ee\u9898\u5206\u6790\u5b9a\u4f4d"},"nextItem":{"title":"dpdk/dpdk-16.04 \u914d\u7f6e\u4e0e\u7f16\u8bd1\u8fc7\u7a0b\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u914d\u7f6e\u4e0e\u7f16\u8bd1\u8fc7\u7a0b\u5206\u6790"}},"content":"## dpdk-16.04 \u7a0b\u5e8f\u89e3\u521d\u59cb\u5316\u8fc7\u7a0b\\ndpdk-16.04 \u89e3\u521d\u59cb\u5316\u8fc7\u7a0b\u76f8\u5bf9\u7b80\u5355\uff0c\u8fd9\u91cc\u4ee5 l2fwd \u7a0b\u5e8f\u7684\u9000\u51fa\u8fc7\u7a0b\u6765\u5206\u6790\u3002\\n\\n## l2fwd \u7a0b\u5e8f\u9000\u51fa\u8fc7\u7a0b\\n\\nl2fwd \u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n\\tfor (portid = 0; portid < nb_ports; portid++) {\\n\\t\\tif ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\\n\\t\\t\\tcontinue;\\n\\t\\tprintf(\\"Closing port %d...\\", portid);\\n\\t\\trte_eth_dev_stop(portid);\\n\\t\\trte_eth_dev_close(portid);\\n\\t\\tprintf(\\" Done\\\\n\\");\\n\\t}\\n```\\n\\n\u4e0a\u8ff0\u903b\u8f91\u5bf9\u6bcf\u4e2a\u5df2\u7ecf\u4f7f\u80fd\u7684\u63a5\u53e3\u4f9d\u6b21\u6267\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a\\n\\n1. stop \u63a5\u53e3\\n2. close \u63a5\u53e3\\n\\nl2fwd \u7a0b\u5e8f\u5728\u6536\u53d1\u5305\u7ebf\u7a0b\u7684\u5faa\u73af\u4e2d\u4e0d\u65ad\u5224\u65ad force_quit \u53d8\u91cf\u7684\u503c\uff0c\u5f53\u6b64\u503c\u4e0d\u4e3a 0 \u65f6\uff0c\u6536\u53d1\u5305\u7ebf\u7a0b\u4e3b\u52a8\u7ec8\u6b62\uff0c\u4e3b\u7ebf\u7a0b\u4e2d\u68c0\u6d4b\u5230\u6536\u53d1\u5305\u7ebf\u7a0b\u7ec8\u6b62\u540e\uff0c\u91ca\u653e dpdk \u5360\u7528\u7684\u63a5\u53e3\u3002\\n\\nrte_eth_dev_stop \u4e0e rte_eth_dev_close \u662f\u5bf9\u7f51\u5361\u5e95\u5c42 dev_ops \u8c03\u7528\u7684\u5c01\u88c5\u5c42\uff0c\u8fd9\u91cc\u6211\u4ee5 igb \u7f51\u5361\u4e3a\u4f8b\u8bf4\u660e\u4e0b\u5176\u4e2d\u7684\u4e00\u4e9b\u7ec6\u8282\u3002\\n\\n## igb \u7f51\u5361\u5b9e\u4f8b\u5316\u7684 dev_stop \u51fd\u6570\\n\\nigb \u7f51\u5361\u9a71\u52a8\u5b9e\u4f8b\u5316\u7684 dev_stop \u51fd\u6570\u4e3a eth_igb_stop\uff0c\u6b64\u51fd\u6570\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a\\n\\n1. \u8c03\u7528 igb_intr_disable \u5199\u5bc4\u5b58\u5668\u4f7f\u80fd\u6bcf\u4e2a\u4e2d\u65ad\u7684\u63a9\u7801\uff0c\u5173\u95ed\u786c\u4ef6\u4e2d\u65ad\\n2. \u8c03\u7528 rte_intr_disable \u540c\u6b65\u5173\u95ed\u5185\u6838\u6001\u7f51\u5361\u63a5\u53e3\u4e2d\u65ad\uff0c\u5bf9\u4e8e\u4f7f\u7528 uio \u4e0e igb_uio \u8fd9\u79cd\u65b9\u5f0f\u6765\u8bf4\uff0c\u5b83\u4f1a\u5411 /dev/uioX \u6587\u4ef6\u4e2d\u5199\u5165 0 \u6765\u8c03\u7528 igb_uio \u4e2d\u7684 igbuio_pci_irqcontrol \u51fd\u6570\\n3. \u8c03\u7528 igb_pf_reset_hw reset \u7f51\u5361\u63a5\u53e3\uff0c\u5c06\u786c\u4ef6\u72b6\u6001\u8fd8\u539f\u5230\u521d\u59cb\u72b6\u6001\\n4. \u5173\u95ed phy \u7684\u7535\u6e90\\n5. \u91ca\u653e\u6bcf\u4e2a tx_queue\u3001rx_queue \u4e0a sw_ring \u5360\u7528\u7684 mbuf\uff0c\u5e76\u5c06\u961f\u5217\u4e0e\u63cf\u8ff0\u7b26\u91cd\u65b0\u521d\u59cb\u5316\\n6. \u4fee\u6539 link \u63a5\u53e3\u4f53\uff0c\u5c06 link \u8f6f\u4ef6\u72b6\u6001\u8bbe\u7f6e\u4e3a 0\uff0c\u8868\u793a\u63a5\u53e3 down\\n7. \u79fb\u9664\u5f53\u524d\u63a5\u53e3\u4e0a\u8bbe\u5b9a\u7684\u6240\u6709 flex_filter\u3001ntuple_filter \u914d\u7f6e\\n8. \u91cd\u65b0\u6ce8\u518c\u9ed8\u8ba4\u7684\u4e2d\u65ad\u5904\u7406\u51fd\u6570\\n9. \u4ece\u4e2d\u65ad\u7ebf\u7a0b\u7684 epoll \u5217\u8868\u4e2d\u79fb\u9664\u5f53\u524d\u63a5\u53e3\u4f7f\u7528\u7684 /dev/uioX \u6587\u4ef6\u63cf\u8ff0\u7b26\\n\\n10. \u91ca\u653e\u4e2d\u65ad\u5411\u91cf\u53f7\u6570\u7ec4\\n\\n\\n\\n## igb \u7f51\u5361\u5b9e\u4f8b\u5316\u7684 dev_close \u51fd\u6570\\n\\nigb \u7f51\u5361\u9a71\u52a8\u5b9e\u4f8b\u5316\u7684 dev_close \u51fd\u6570\u4e3a eth_igb_close\uff0c\u6b64\u51fd\u6570\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a\\n\\n1. \u8c03\u7528 eth_igb_stop stop \u63a5\u53e3\\n2. reset phy \u5e76\u6267\u884c\u5176\u5b83\u76f8\u5173\u7684\u786c\u4ef6 reset \u64cd\u4f5c\\n3. \u91ca\u653e\u6bcf\u4e2a rx_queue\u3001tx_queue \u4e0a\u7533\u8bf7\u7684\u52a8\u6001\u5185\u5b58\uff0c\u5982\u6240\u6709\u7684 rx_desc \u4e0e tx_desc\uff0c\u6240\u6709\u7684 sw_ring \u53ca rx_queue\u3001tx_queue \u7ed3\u6784\u4f53\\n4. \u91ca\u653e\u4e2d\u65ad\u5411\u91cf\u6570\u7ec4\\n5. \u4fee\u6539 link \u63a5\u53e3\u4f53\uff0c\u5c06 link \u8f6f\u4ef6\u72b6\u6001\u8bbe\u7f6e\u4e3a 0\uff0c\u8868\u793a\u63a5\u53e3 down\\n\\n\u5199\u5230\u8fd9\u91cc\u6211\u53d1\u73b0 eth_igb_close \u4e2d\u8c03\u7528\u4e86 eth_igb_stop\uff0c\u90a3\u4e3a\u5565\u8fd8\u9700\u8981\u8c03\u7528 rte_eth_dev_stop \u5462\uff1f\\n\\n\u9996\u5148\u628a rte_eth_dev_stop \u51fd\u6570\u7684\u4ee3\u7801\u8d34\u5230\u4e0b\u9762\uff1a\\n\\n```c\\nvoid\\nrte_eth_dev_stop(uint8_t port_id)\\n{\\n    struct rte_eth_dev *dev;\\n\\n    RTE_ETH_VALID_PORTID_OR_RET(port_id);\\n    dev = &rte_eth_devices[port_id];\\n\\n    RTE_FUNC_PTR_OR_RET(*dev->dev_ops->dev_stop);\\n\\n    if (dev->data->dev_started == 0) {\\n        RTE_PMD_DEBUG_TRACE(\\"Device with port_id=%\\" PRIu8\\n            \\" already stopped\\\\n\\",\\n            port_id);\\n        return;\\n    }\\n\\n    dev->data->dev_started = 0;\\n    (*dev->dev_ops->dev_stop)(dev);\\n}\\n\\n```\\n\\n\u80fd\u591f\u770b\u5230 rte_eth_dev_stop \u9664\u4e86\u8c03\u7528\u5e95\u5c42\u7f51\u5361\u9a71\u52a8\u5b9e\u73b0\u7684 dev_stop \u4e4b\u5916\uff0c\u8fd8\u8981\u8bbe\u5b9a dev->data->dev_started \u53d8\u91cf\u7684\u503c\uff0c\u8be5\u503c\u662f dpdk \u5185\u90e8\u53d8\u91cf\uff0c\u72ec\u7acb\u4e8e\u6bcf\u4e2a\u7269\u7406\u7f51\u5361\uff0c\u8fd9\u5c31\u662f\u8981\u5728 rte_eth_dev_close \u51fd\u6570\u8c03\u7528\u524d\u8c03\u7528\u4e00\u6b21 rte_eth_dev_stop \u7684\u539f\u56e0\u3002\\n\\n## rte_eth_dev_close \u51fd\u6570\\n\\ndev->data \u4e2d\u7684 rx_queues\u3001tx_queues \u4e2d\u4fdd\u5b58\u7f51\u5361\u6bcf\u4e2a\u6536\u53d1\u961f\u5217\u7684\u5730\u5740\uff0c\u662f dpdk \u5728\u521d\u59cb\u5316\u63a5\u53e3\u7684\u65f6\u5019\u7533\u8bf7\u7684\uff0c\u6b64\u7ed3\u6784\u662f\u9a71\u52a8\u72ec\u7acb\u7684\uff0c\u56e0\u6b64\u7531 dev_ops \u7684\u5c01\u88c5\u5c42\u6765\u91ca\u653e\uff0c\u91ca\u653e\u903b\u8f91\u5728 rte_eth_dev_close \u4e2d\uff0c\u4ee3\u7801\u5982\u4e0b:\\n\\n```c\\nvoid\\nrte_eth_dev_close(uint8_t port_id)\\n{\\n\\tstruct rte_eth_dev *dev;\\n\\n\\tRTE_ETH_VALID_PORTID_OR_RET(port_id);\\n\\tdev = &rte_eth_devices[port_id];\\n\\n\\tRTE_FUNC_PTR_OR_RET(*dev->dev_ops->dev_close);\\n\\tdev->data->dev_started = 0;\\n\\t(*dev->dev_ops->dev_close)(dev);\\n\\n\\trte_free(dev->data->rx_queues);\\n\\tdev->data->rx_queues = NULL;\\n\\trte_free(dev->data->tx_queues);\\n\\tdev->data->tx_queues = NULL;\\n}\\n```\\n\\n\u8fd9\u91cc\u91ca\u653e\u4e86\u5982\u4e0b\u4e24\u4e2a\u9879\u76ee\u7684\u8d44\u6e90\uff1a\\n\\n1. rx_queues \uff08\u5b58\u653e\u6bcf\u4e2a rx_queue \u7684\u5730\u5740\uff09\\n\\n2. tx_queues (\u5b58\u653e\u6bcf\u4e2a tx_queue \u7684\u5730\u5740)\\n\\n## dev->data->dev_private \u7ed3\u6784\u7684\u91ca\u653e\\n\\ndpdk \u7684 pmd pci \u9a71\u52a8\u5b58\u5728\u4e00\u4e9b\u5185\u90e8\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u90e8\u5206\u6570\u636e\u7ed3\u6784\u7684\u5927\u5c0f\u5728\u6ce8\u518c\u9a71\u52a8\u7684\u65f6\u5019\u901a\u8fc7 eth_driver \u4e2d\u7684 dev_private_size \u5b57\u6bb5\u6765\u8bbe\u5b9a\uff0cdpdk probe \u63a5\u53e3\u7684\u65f6\u5019\u4f1a\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684\u6570\u636e\u7ed3\u6784\uff0c\u9a71\u52a8\u5185\u90e8\u901a\u8fc7\u8bbf\u95ee dev->data->dev_private \u6765\u4f7f\u7528\u8fd9\u4e9b\u7ed3\u6784\u3002\\n\\nigb \u7f51\u5361\u7684 eth_driver \u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```c\\nstatic struct eth_driver rte_igb_pmd = {\\n\\t.pci_drv = {\\n\\t\\t.name = \\"rte_igb_pmd\\",\\n\\t\\t.id_table = pci_id_igb_map,\\n\\t\\t.drv_flags = RTE_PCI_DRV_NEED_MAPPING | RTE_PCI_DRV_INTR_LSC |\\n\\t\\t\\tRTE_PCI_DRV_DETACHABLE,\\n\\t},\\n\\t.eth_dev_init = eth_igb_dev_init,\\n\\t.eth_dev_uninit = eth_igb_dev_uninit,\\n\\t.dev_private_size = sizeof(struct e1000_adapter),\\n};\\n```\\n\\nigb \u7f51\u5361\u58f0\u660e\u4e86\u9700\u8981\u521b\u5efa e1000_adapter \u8fd9\u4e2a\u7ed3\u6784\u4f53\u5927\u5c0f\u7684\u79c1\u6709\u7a7a\u95f4\uff0c\u6b64\u7a7a\u95f4\u53ea\u5728\u5e95\u5c42\u9a71\u52a8\u4e2d\u4f7f\u7528\u3002**\u90a3\u8fd9\u4e2a\u7a7a\u95f4\u5728\u54ea\u91cc\u88ab\u91ca\u653e\u5462\uff1f**\\n\\n\u4e0a\u6587\u4e2d\u63cf\u8ff0\u7684 l2fwd \u7684\u9000\u51fa\u903b\u8f91\u5e76\u4e0d\u4f1a\u91ca\u653e dev_private \u63a5\u53e3\uff0c\u901a\u8fc7\u9605\u8bfb\u4ee3\u7801\u53d1\u73b0\uff0c\u8fd9\u4e00\u7ed3\u6784\u53ea\u6709\u5f53\u7a0b\u5e8f\u8c03\u7528\u4e86 rte_eth_dev_detach \u51fd\u6570\u7684\u65f6\u5019\u624d\u4f1a\u88ab\u91ca\u653e\uff0c\u6545\u800c\u8fd9\u90e8\u5206\u903b\u8f91\u4e0d\u5728 dpdk \u7a0b\u5e8f\u7684\u89e3\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f**\u7531\u5185\u6838\u56de\u6536**\u7684\u3002\\n\\n## pci \u8bbe\u5907\u7684 unmap \\n\\n\u4e0e dev_private \u7ed3\u6784\u7c7b\u4f3c\u7684\u8fd8\u6709 pci \u8bbe\u5907\u8d44\u6e90\u7684 unmap \u8fc7\u7a0b\uff0c\u6b64\u8fc7\u7a0b\u4e5f\u53ea\u5728 rte_eth_dev_detach \u51fd\u6570\u88ab\u8c03\u7528\u7684\u65f6\u5019\u624d\u4f1a\u6267\u884c\uff0c\u4e5f\u662f\u7531\u5185\u6838\u56de\u6536\u7684\u3002\\n\\n## dpdk \u7a0b\u5e8f\u5f02\u5e38\u7ec8\u6b62\u65f6\u8d44\u6e90\u4f1a\u91ca\u653e\u5417\uff1f\\n\\n\u4e0a\u6587\u4e2d\u6211\u4eec\u63cf\u8ff0\u7684\u4e00\u4e9b\u52a8\u6001\u7a7a\u95f4\u7684\u91ca\u653e\u8fc7\u7a0b\u662f\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa\u65f6\u624d\u4f1a\u6267\u884c\u7684\uff0c\u5f53\u7a0b\u5e8f\u5f02\u5e38\u7ec8\u6b62\uff0c\u5982\u6536\u5230 SIGKILL \u4fe1\u53f7\u88ab\u5185\u6838\u5f3a\u5236\u6740\u6b7b\u65f6\uff0c\u8fd9\u90e8\u5206\u903b\u8f91\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u90a3\u4e48\u5982\u4f55\u786e\u4fdd\u8fd9\u4e9b\u8d44\u6e90\u88ab\u91ca\u653e\u5462\uff1f\\n\\n\u5b9e\u9645\u4e0a\u8fd9\u4e9b\u8d44\u6e90\u662f\u7531\u5185\u6838\u56de\u6536\u7684\uff0c\u8fd9\u624d\u4fdd\u8bc1\u4e86\u7a0b\u5e8f\u5f02\u5e38\u7ec8\u6b62\u65f6\u4e0d\u81f3\u4e8e\u51fa\u73b0\u8d44\u6e90\u6cc4\u9732\uff01\\n\\nkni \u7a0b\u5e8f\u7531\u4e8e\u4f1a\u5728\u5185\u6838\u4e2d\u521b\u5efa\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u7684\u8d44\u6e90\u56de\u6536\u9700\u8981\u989d\u5916\u5904\u7406\uff0c\u8fd9\u90e8\u5206\u5de5\u4f5c\u662f\u5728 rte_kni \u6a21\u5757\u4e2d\u5b8c\u6210\u7684\u3002**\u5f53 kni \u7a0b\u5e8f\u5f02\u5e38\u7ec8\u6b62\u65f6\uff0c\u5185\u6838\u4f1a\u56de\u6536\u8fdb\u7a0b\u7684\u63cf\u8ff0\u7b26\uff0c\u8c03\u7528\u76f8\u5e94\u7684 close \u51fd\u6570\uff0c\u5bf9 /dev/kni \u6587\u4ef6\u6765\u8bf4\u5b83\u5c31\u662f kni_release \u51fd\u6570\uff0c\u6b64\u51fd\u6570\u8d1f\u8d23\u91ca\u653e\u5185\u6838\u4e2d\u521b\u5efa\u7684\u52a8\u6001\u63a5\u53e3\u5982 netdev \u7b49\u8d44\u6e90**\\n\\n\\n\\nkni \u7a0b\u5e8f\u6b63\u5e38\u7ec8\u6b62\u65f6\u4f1a\u8c03\u7528 ioctl \u5e76\u4f20\u9012 RTE_KNI_IOCTL_RELEASE \u53c2\u6570\uff0crte_kni \u6a21\u5757\u4e2d\u4f1a\u8c03\u7528 kni_ioctl_release \\n\\n\u6765\u91ca\u653e\u8d44\u6e90\uff0c\u9605\u8bfb\u4ee3\u7801\u5c31\u53ef\u4ee5**\u53d1\u73b0 kni_ioctl_release \u6267\u884c\u7684\u8fc7\u7a0b\u662f kni_release \u51fd\u6570\u7684\u4e00\u4e2a\u5b50\u96c6**\uff0c\u6bd5\u7adf\u5f53\u7a0b\u5e8f\u5f02\u5e38\u7ec8\u6b62\u65f6 ioctl \u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u5185\u6838\u4e5f\u65e0\u6cd5\u534f\u52a9\u5904\u7406\uff0c\u8fd9\u65f6\u5185\u6838\u56de\u6536 /dev/kni \u6587\u4ef6\u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u65f6\u8c03\u7528 kni_release \u5c31\u80fd\u591f\u56de\u6536\u6240\u6709\u8d44\u6e90\uff0c\u907f\u514d\u51fa\u73b0\u90e8\u5206\u8d44\u6e90\u7684\u6cc4\u9732\u95ee\u9898\uff01"},{"id":"/dpdk/dpdk-16.04 \u914d\u7f6e\u4e0e\u7f16\u8bd1\u8fc7\u7a0b\u5206\u6790","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u914d\u7f6e\u4e0e\u7f16\u8bd1\u8fc7\u7a0b\u5206\u6790","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 \u914d\u7f6e\u4e0e\u7f16\u8bd1\u8fc7\u7a0b\u5206\u6790.md","source":"@site/blog/dpdk/dpdk-16.04 \u914d\u7f6e\u4e0e\u7f16\u8bd1\u8fc7\u7a0b\u5206\u6790.md","title":"dpdk/dpdk-16.04 \u914d\u7f6e\u4e0e\u7f16\u8bd1\u8fc7\u7a0b\u5206\u6790","description":"dpdk .config \u6587\u4ef6\u7684\u751f\u6210\u8fc7\u7a0b","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":4.13,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-16.04 \u89e3\u521d\u59cb\u5316\u8fc7\u7a0b","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u89e3\u521d\u59cb\u5316\u8fc7\u7a0b"},"nextItem":{"title":"dpdk/dpdk-19.11 armv8 l2fwd \u5728\u67d0 arm \u5185\u6838\u4e0a\u65e0\u6cd5\u8fd0\u884c\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk-19.11 armv8 l2fwd \u5728\u67d0 arm \u5185\u6838\u4e0a\u65e0\u6cd5\u8fd0\u884c\u95ee\u9898"}},"content":"## dpdk .config \u6587\u4ef6\u7684\u751f\u6210\u8fc7\u7a0b\\ndpdk \u6709\u5185\u90e8\u7684 .config \u6587\u4ef6\uff0c\u7f16\u8bd1\u524d\u9700\u8981\u5148\u521b\u5efa\u4e0d\u540c\u67b6\u6784 .config \u914d\u7f6e\u6587\u4ef6\u4e0e build \u76ee\u5f55\u3002\\n\\ndpdk \u6e90\u7801\u76ee\u5f55 config \u5b50\u76ee\u5f55\u5b58\u653e\u7528\u4e8e\u751f\u6210 .config \u6587\u4ef6\u7684\u6e90\u6587\u4ef6\uff0c\u76ee\u5f55\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```c\\ncommon_base                            defconfig_i686-native-linuxapp-gcc     defconfig_x86_64-native-bsdapp-gcc\\ncommon_bsdapp                          defconfig_i686-native-linuxapp-icc     defconfig_x86_64-native-linuxapp-clang\\ncommon_linuxapp                        defconfig_ppc_64-power8-linuxapp-gcc   defconfig_x86_64-native-linuxapp-gcc\\ndefconfig_arm64-armv8a-linuxapp-gcc    defconfig_tile-tilegx-linuxapp-gcc     defconfig_x86_64-native-linuxapp-icc\\ndefconfig_arm64-thunderx-linuxapp-gcc  defconfig_x86_64-ivshmem-linuxapp-gcc  defconfig_x86_x32-native-linuxapp-gcc\\ndefconfig_arm64-xgene1-linuxapp-gcc    defconfig_x86_64-ivshmem-linuxapp-icc\\ndefconfig_arm-armv7a-linuxapp-gcc      defconfig_x86_64-native-bsdapp-clang\\n```\\n\\ncommon_base \u6587\u4ef6\u4e3a\u57fa\u672c\u914d\u7f6e\uff0ccommon_bsdapp \u4e0e common_linuxapp \u4ee3\u8868 dpdk \u652f\u6301\u7684\u4e24\u79cd\u5927\u7684\u7cfb\u7edf\uff1a\\n\\n1. bsd \u7cfb\u7edf\\n2. linux \u7cfb\u7edf\\n\\n**defconfig_xx \u914d\u7f6e\u9009\u9879\u914d\u7f6e\u7f16\u8bd1\u67b6\u6784\uff0c\u5de5\u5177\u94fe\u540d\u79f0\uff0cdefconfig_xx \u5305\u542b common_bsdapp\u3001common_lnuxapp \u7684\u914d\u7f6e\u9879\u76ee\uff0ccommon_bsdapp\u3001common_linuxapp \u5305\u542b common_base \u7684\u914d\u7f6e\u9879\u76ee\u3002**\\n\\n\\n\u4ee5 x86_64-native-linuxapp-gcc \u4e3a\u4f8b\uff0c\u8981\u751f\u6210 x86_64-native-linuxapp-gcc \u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u53ef\u4ee5\u5728 dpdk \u6e90\u7801\u8ddf\u76ee\u5f55\u4e2d\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a\\n\\n```bash\\nmake config O=./x86_64-native-linuxapp-gcc T=x86_64-native-linuxapp-gcc\\n```\\n\\n\u6267\u884c\u6210\u529f\u540e\u4f1a\u751f\u6210 x86_64-native-linuxapp-gcc \u76ee\u5f55\uff0c\u6b64\u76ee\u5f55\u7684\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```bash\\n.  ..  build  .config  .config.orig  .depdirs  include  Makefile\\n```\\n\\n1. bulid \u4e3a\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u4e2d\u95f4\u6587\u4ef6\u4fdd\u5b58\u76ee\u5f55\\n2. .config \u6587\u4ef6\u662f\u751f\u6210\u7684\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\uff0c.config.orig \u662f\u914d\u7f6e\u6587\u4ef6\u7684\u5907\u4efd\\n3. include \u76ee\u5f55\u4e2d\u4e3a\u751f\u6210\u7684 rte_config.h \u6587\u4ef6\\n4. .depdirs \u4e2d\u4e3a\u4e0d\u540c\u6a21\u5757\u7684\u4f9d\u8d56\u5173\u7cfb\\n5. Makfile \u4e3a\u6784\u5efa\u4f7f\u7528\u7684\u7f16\u8bd1\u811a\u672c\\n\\n\\n.config \u6587\u4ef6\u901a\u8fc7\u6307\u5b9a -x assembler-with-cpp \u53c2\u6570\u8c03\u7528 cc\uff08gcc\uff09 \u6765\u751f\u6210\uff0c\u793a\u4f8b\u547d\u4ee4\u5982\u4e0b\uff1a\\n\\n```bash\\n cc -E -undef -P -x assembler-with-cpp -ffreestanding -o /home/longyu/dpdk-16.04/.config /home/longyu/dpdk-16.04/config/defconfig_x86_64-native-linuxapp-gcc\\n```\\n\\n## dpdk rte_config \u6587\u4ef6\u7684\u751f\u6210\u8fc7\u7a0b\\n\\n.config \u6587\u4ef6\u7ef4\u62a4\u4e86 dpdk \u5185\u90e8\u7ec4\u4ef6\u7684\u914d\u7f6e\uff0c\u5b9e\u9645\u7f16\u8bd1\u4e2d\u4f1a\u6839\u636e .config \u5185\u5bb9\u6765\u751f\u6210 rte_config.h \u6587\u4ef6\uff0c\u5b9e\u9645\u7684\u914d\u7f6e\u901a\u8fc7\u5934\u6587\u4ef6\u4e2d\u7684\u5b8f\u5b9a\u4e49\u503c\u8fbe\u6210\u3002\\n\\n**rte_config.h \u5934\u6587\u4ef6\u901a\u8fc7\u8c03\u7528 scripts/gen-config.h.sh \u6765\u751f\u6210\uff0c\u6b64\u811a\u672c\u7684\u8f93\u51fa\u4fe1\u606f\u88ab\u91cd\u5b9a\u5411\u4e3a rte_config.h\uff0c\u811a\u672c\u5185\u5bb9\u4e3a\u51e0\u4e2a echo \u4e0e sed \u66ff\u6362\u547d\u4ee4\u3002**\\n\\n\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u5f53 .config \u6587\u4ef6\u66f4\u65b0\u540e\uff0c\u91cd\u65b0\u751f\u6210 rte_config.h \u4e4b\u524d\u4f1a\u7f16\u8bd1\u751f\u6210\u7684\u4e2d\u95f4\u6587\u4ef6\u76ee\u5f55\u3002\\n\\n.config \u4e0e rte_config.h \u6587\u4ef6\u7684\u751f\u6210\u8fc7\u7a0b\u7531 mk/rte.sdkconfig.mk \u6587\u4ef6\u63a7\u5236\uff0c\u53ef\u4ee5\u9605\u8bfb\u8fd9\u4e2a\u6587\u4ef6\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u4fe1\u606f\u3002\\n\\n## dpdk \u5b8c\u6574\u6784\u5efa\u8fc7\u7a0b\\n\\n1.\u6784\u5efa mk/rte.sdkconfig.mk \u4e2d\u7684 checkconfig \u76ee\u6807\uff0c\u68c0\u67e5\u662f\u5426\u9700\u8981\u91cd\u65b0\u751f\u6210\u914d\u7f6e\u6587\u4ef6\\n\\n2.\u6784\u5efa mk/rte.sdkconfig.mk \u4e2d\u7684 headerconfig \u76ee\u6807\uff0c\u751f\u6210 rte_config.h \\n\\n3.\u6784\u5efa depdirs \u76ee\u6807\uff0c\u5728\u7f16\u8bd1\u76ee\u6807\u76ee\u5f55\u4e2d\u751f\u6210 .depdirs \u6587\u4ef6\\n\\n4.\u6784\u5efa mk/rte.sdkbuild.mk all \u914d\u7f6e\uff0crte.sdkbuild \u4e2d\u9996\u5148\u5305\u542b .depdirs \u6587\u4ef6\uff0c\u6839\u636e\u4f9d\u8d56\u5173\u7cfb\u786e\u5b9a\u7f16\u8bd1\u7684\u4f18\u5148\u7ea7\u987a\u5e8f\\n\\n5.\u5728\u7f16\u8bd1\u524d\uff0c\u9996\u5148\u5305\u542b mk/rte.vars.mk \u6587\u4ef6\uff0c\u6b64\u6587\u4ef6\u8fdb\u800c\u5305\u542b mk/target/generic/rte.vars.mk\uff0cmk/target/generic/rte.vars.mk \u8fdb\u800c\u5305\u542b toolchain/$(RTE_TOOLCHAIN)/rte.vars.mk \u4e0b\u9762\u7684\u5934\u6587\u4ef6\u914d\u7f6e\u7f16\u8bd1\u5de5\u5177\u94fe\uff0cdpdk \u4e2d\u5de5\u5177\u94fe\u524d\u7f00\u901a\u8fc7 CROSS \u53d8\u91cf\u63a7\u5236\u3002\\n\\n6.\u6839\u636e Makefile \u5728 build \u76ee\u5f55\u4e2d\u751f\u6210 .xxx.o.d\u3001.xxx.o.cmd \u6587\u4ef6\uff0c\u521b\u5efa Makefile \u4e2d\u58f0\u660e\u7684 SYMLINK \u5934\u6587\u4ef6\uff0c\u6267\u884c\u7f16\u8bd1\u8fc7\u7a0b\uff0c\u7f16\u8bd1\u5b8c\u6210\u540e\u6267\u884c install \u5b89\u88c5\u76ee\u6807\u6587\u4ef6\\n\\ndpdk \u6784\u5efa\u7cfb\u7edf\u6709\u51e0\u4e2a\u4e0d\u540c\u7684\u7c7b\u522b\uff0c\u5982 lib\u3001module\u3001app\u3001extlib\u3001extapp \u7b49\u7b49\u51e0\u4e2a\u5bf9\u8c61\u7c7b\u522b\uff0clib \u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u7c7b\u522b\uff0c\u5176\u6e90\u7801\u4e3b\u8981\u8fc7\u7a0b\u5982\u4e0b\uff1a\\n\\n1. \u5305\u542b mk/internal/rte.xx-pre.mk \u6587\u4ef6\uff0c\u6267\u884c\u7f16\u8bd1\u524d\u7684\u8bbe\u5b9a\\n2. \u9488\u5bf9 lib \u7c7b\u522b\u7f16\u8bd1\u76ee\u6807\u81ea\u8eab\u7684\u8bbe\u5b9a\\n3. \u5305\u542b mk/intermal/rte.xx-post.mk \u6587\u4ef6\uff0c\u6267\u884c\u7f16\u8bd1\u540e\u7684\u8bbe\u5b9a\\n\\n\u5176\u5b83\u7684\u7c7b\u522b\u5bf9\u8c61\u7684\u6784\u5efa\u8fc7\u7a0b\u5927\u540c\u5c0f\u5f02\uff0c\u4e0d\u5c55\u5f00\u8bf4\u660e\uff01\\n\\ndpdk \u7684\u6784\u5efa\u8fc7\u7a0b\u6bd4\u8f83\u7075\u6d3b\uff0c\u652f\u6301\u5355\u72ec\u7f16\u8bd1\u6bcf\u4e00\u79cd\u76ee\u6807\u7c7b\u578b\uff01\u8981\u6dfb\u52a0\u81ea\u5df1\u7684\u7f16\u8bd1\u53c2\u6570\uff0c\u53ef\u4ee5\u8bbe\u5b9a EXTRA_CFLAGS \u53d8\u91cf\u3002"},{"id":"/dpdk/dpdk-19.11 armv8 l2fwd \u5728\u67d0 arm \u5185\u6838\u4e0a\u65e0\u6cd5\u8fd0\u884c\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-19.11 armv8 l2fwd \u5728\u67d0 arm \u5185\u6838\u4e0a\u65e0\u6cd5\u8fd0\u884c\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-19.11 armv8 l2fwd \u5728\u67d0 arm \u5185\u6838\u4e0a\u65e0\u6cd5\u8fd0\u884c\u95ee\u9898.md","source":"@site/blog/dpdk/dpdk-19.11 armv8 l2fwd \u5728\u67d0 arm \u5185\u6838\u4e0a\u65e0\u6cd5\u8fd0\u884c\u95ee\u9898.md","title":"dpdk/dpdk-19.11 armv8 l2fwd \u5728\u67d0 arm \u5185\u6838\u4e0a\u65e0\u6cd5\u8fd0\u884c\u95ee\u9898","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":2.91,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-16.04 \u914d\u7f6e\u4e0e\u7f16\u8bd1\u8fc7\u7a0b\u5206\u6790","permalink":"/longyu.github.io/blog/dpdk/dpdk-16.04 \u914d\u7f6e\u4e0e\u7f16\u8bd1\u8fc7\u7a0b\u5206\u6790"},"nextItem":{"title":"\u524d\u8a00","permalink":"/longyu.github.io/blog/dpdk/dpdk-19.11 \u652f\u6301\u63a5\u53e3\u914d\u7f6e\u901f\u7387\u53cc\u5de5\u7684\u65b9\u6cd5"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n\u7f16\u8bd1 dpdk-19.11 arm \u7248\u672c\u7684 l2fwd\uff0c\u5728\u6307\u5b9a\u7684 arm \u5185\u6838\u4e0a\u8fd0\u884c\uff0c\u6709\u5982\u4e0b\u62a5\u9519\u4fe1\u606f\uff1a\\n\\n```bash\\nEAL: Detected 16 lcore(s)\\nEAL: Detected 1 NUMA nodes\\nEAL: Multi-process socket /var/run/dpdk/rte/mp_socket\\nEAL: Selected IOVA mode \'PA\'\\nEAL: Probing VFIO support...\\nEAL: error allocating rte services array\\nEAL: FATAL: rte_service_init() failed\\nEAL: rte_service_init() failed\\nEAL: Error - exiting with code: 1\\n  Cause: Invalid EAL arguments\\n```\\n\u5173\u952e\u62a5\u9519\uff1a\\n\\n**EAL: error allocating rte services array**\\n\\n## \u786e\u8ba4\u95ee\u9898\\n1. hugepage \u6b63\u5e38\u914d\u7f6e\uff0chugetlbfs \u6b63\u5e38\u6302\u8f7d\\n2. dpdk-16.04 \u7684 l2fwd \u80fd\u591f\u6b63\u5e38\u8fd0\u884c\\n\\n\u67e5\u770b\u4ee3\u7801\u786e\u8ba4\u95ee\u9898\u4e3a**\u5728\u521b\u5efa rte services \u6570\u7ec4\u7684\u65f6\u5019\u7533\u8bf7\u5185\u5b58\u5931\u8d25**\uff01\\n## strace \u8ddf\u8e2a\u83b7\u53d6\u5230\u7684\u7ed3\u679c\\nstrace \u8ddf\u8e2a l2fwd \u7a0b\u5e8f\u6267\u884c\uff0c\u6458\u5f55\u5982\u4e0b\u5173\u952e\u8fc7\u7a0b\uff1a\\n\\n```strace\\nopenat(AT_FDCWD, \\"/dev/hugepages\\", O_RDONLY) = 23\\nflock(23, LOCK_EX)                      = 0\\nopenat(AT_FDCWD, \\"/dev/hugepages/rtemap_0\\", O_RDWR|O_CREAT, 0600) = 24\\nflock(24, LOCK_SH|LOCK_NB)              = 0\\nftruncate(24, 2097152)                  = 0\\nmmap(0x100200000, 2097152, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_FIXED|MAP_POPULATE, 24, 0) = 0x100200000\\nrt_sigprocmask(SIG_BLOCK, NULL, [], 8)  = 0\\nopenat(AT_FDCWD, \\"/proc/self/pagemap\\", O_RDONLY) = 25\\nlseek(25, 8392704, SEEK_SET)            = 8392704\\nread(25, \\"\\\\0\\\\0z\\\\0\\\\0\\\\0\\\\0\\\\241\\", 8)        = 8\\nclose(25)                               = 0\\nget_mempolicy(0x7fffffce24, NULL, 0, 0x100200000, MPOL_F_NODE|MPOL_F_ADDR) = -1 ENOSYS (Function not implemented)\\nmunmap(0x100200000, 2097152)            = 0\\nmmap(0x100200000, 2097152, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x100200000\\nflock(24, LOCK_EX|LOCK_NB)              = 0\\nunlinkat(AT_FDCWD, \\"/dev/hugepages/rtemap_0\\", 0) = 0\\nclose(24)                               = 0\\n```\\n\u4e0a\u8ff0\u7cfb\u7edf\u8c03\u7528\u5728\u6620\u5c04\u7b2c\u4e00\u4e2a\u5927\u9875\uff0c\u660e\u663e\u7684\u5f02\u5e38\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```strace\\nget_mempolicy(0x7fffffce24, NULL, 0, 0x100200000, MPOL_F_NODE|MPOL_F_ADDR) = -1 ENOSYS (Function not implemented)\\n```\\n\u6b64\u4fe1\u606f\u8868\u660e\u5f53\u524d\u5185\u6838\u4e0d\u652f\u6301 **get_mempolicy** \u7cfb\u7edf\u8c03\u7528\u3002\\n\\n## \u63d0\u95ee\u73af\u8282\\n1. get_mempolicy \u5728\u54ea\u91cc\u88ab\u8c03\u7528\uff1f\\n\\n\\t\u9605\u8bfb\u4ee3\u7801\u786e\u8ba4\u5728\u6620\u5c04\u5927\u9875\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u8c03\u7528 get_mempolicy\uff0c\u5f53\u5931\u8d25\u540e\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002\\n\\n2. \u662f\u5426\u6709\u914d\u7f6e\u5173\u95ed\u76f8\u5173\u903b\u8f91\uff1f\\n\\tCONFIG_RTE_EAL_NUMA_AWARE_HUGEPAGES \u80fd\u591f\u7528\u6765\u63a7\u5236\u8fd9\u90e8\u5206\u4ee3\u7801\u903b\u8f91\u3002\\n3. get_mempolicy \u8c03\u7528\u5931\u8d25\u4e3a\u4ec0\u4e48\u4e0d\u9000\u51fa\uff1f\\n\\t\u8c03\u7528\u5931\u8d25\u540e\u4f1a\u4f7f\u7528\u7f3a\u7701\u503c\uff01\\n## get_mempolicy \u662f\u5e72\u561b\u7684\uff1f\\nman get_mempolicy \u7684\u90e8\u5206\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```manual\\nGET_MEMPOLICY(2)                                   Linux Programmer\'s Manual                                   GET_MEMPOLICY(2)\\n\\nNAME\\n       get_mempolicy - retrieve NUMA memory policy for a thread\\n\\nSYNOPSIS\\n       #include <numaif.h>\\n\\n       long get_mempolicy(int *mode, unsigned long *nodemask,\\n                         unsigned long maxnode, void *addr,\\n                         unsigned long flags);\\n\\n       Link with -lnuma.\\n```\\n\\n## \u89e3\u51b3\u65b9\u6cd5\\narmv8 \u7684 .config \u6587\u4ef6\u4e2d\u5173\u95ed\u3000**CONFIG_RTE_EAL_NUMA_AWARE_HUGEPAGES** \u914d\u7f6e\u540e\u91cd\u65b0\u7f16\u8bd1\uff0c\u6d4b\u8bd5\u6b63\u5e38\u3002\\n\\n## \u5173\u95ed RTE_EAL_NUMA_AWARE_HUGEPAGES \u7684\u5408\u7406\u6027\\nNUMA_AWARE_HUGEPAGES \u7684\u4fee\u6539\u80fd\u591f\u4ece [[dpdk-dev] [PATCH v7 1/2] mem: balanced allocation of hugepages](http://mails.dpdk.org/archives/dev/2017-June/068386.html) \u4e2d\u627e\u5230\u3002\\n\\n\u6d4f\u89c8 patch \u5185\u5bb9\uff0c\u83b7\u53d6\u5230\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\n```patch\\ndiff --git a/config/defconfig_arm64-armv8a-linuxapp-gcc b/config/defconfig_arm64-armv8a-linuxapp-gcc\\nindex 9f32766..2c67cdc 100644\\n--- a/config/defconfig_arm64-armv8a-linuxapp-gcc\\n+++ b/config/defconfig_arm64-armv8a-linuxapp-gcc\\n@@ -47,6 +47,9 @@ CONFIG_RTE_TOOLCHAIN_GCC=y\\n # to address minimum DMA alignment across all arm64 implementations.\\n CONFIG_RTE_CACHE_LINE_SIZE=128\\n \\n+# Most ARMv8 systems doesn\'t support NUMA\\n+CONFIG_RTE_EAL_NUMA_AWARE_HUGEPAGES=n\\n+\\n```\\n\u5927\u90e8\u5206 ARMv8 \u7cfb\u7edf\u5e76\u4e0d\u652f\u6301 numa\uff0c\u7f3a\u7701\u914d\u7f6e\u5173\u95ed\u3002.config \u4e2d\u540c\u6b65 ARMv8 \u7684\u9ed8\u8ba4\u914d\u7f6e\u662f\u5408\u7406\u7684\uff01"},{"id":"/dpdk/dpdk-19.11 \u652f\u6301\u63a5\u53e3\u914d\u7f6e\u901f\u7387\u53cc\u5de5\u7684\u65b9\u6cd5","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-19.11 \u652f\u6301\u63a5\u53e3\u914d\u7f6e\u901f\u7387\u53cc\u5de5\u7684\u65b9\u6cd5","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-19.11 \u652f\u6301\u63a5\u53e3\u914d\u7f6e\u901f\u7387\u53cc\u5de5\u7684\u65b9\u6cd5.md","source":"@site/blog/dpdk/dpdk-19.11 \u652f\u6301\u63a5\u53e3\u914d\u7f6e\u901f\u7387\u53cc\u5de5\u7684\u65b9\u6cd5.md","title":"\u524d\u8a00","description":"\u5e38\u89c1\u7684 igb \u7535\u53e3\u7f51\u5361\u6709\u652f\u6301\u901f\u7387\u53cc\u5de5\u914d\u7f6e\u7684\u9700\u6c42\uff0c\u5728 dpdk-19.11 \u4e2d\u5374\u6ca1\u6709\u914d\u7f6e\u7f51\u5361\u901f\u7387\u53cc\u5de5\u7684\u63a5\u53e3\uff0c\u4e3a\u6b64\u9700\u8981\u8fdb\u884c\u5f00\u53d1\uff0c\u5b9e\u73b0\u65b9\u6cd5\u9700\u8981\u901a\u8fc7\u7814\u7a76\u4e0d\u540c\u7f51\u5361\u7684\u9a71\u52a8\u4ee3\u7801\u6765\u786e\u5b9a\u3002","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":4.19,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-19.11 armv8 l2fwd \u5728\u67d0 arm \u5185\u6838\u4e0a\u65e0\u6cd5\u8fd0\u884c\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk-19.11 armv8 l2fwd \u5728\u67d0 arm \u5185\u6838\u4e0a\u65e0\u6cd5\u8fd0\u884c\u95ee\u9898"},"nextItem":{"title":"dpdk/dpdk\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848","permalink":"/longyu.github.io/blog/dpdk/dpdk\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848"}},"content":"\u5e38\u89c1\u7684 igb \u7535\u53e3\u7f51\u5361\u6709\u652f\u6301\u901f\u7387\u53cc\u5de5\u914d\u7f6e\u7684\u9700\u6c42\uff0c\u5728 dpdk-19.11 \u4e2d\u5374\u6ca1\u6709\u914d\u7f6e\u7f51\u5361\u901f\u7387\u53cc\u5de5\u7684\u63a5\u53e3\uff0c\u4e3a\u6b64\u9700\u8981\u8fdb\u884c\u5f00\u53d1\uff0c\u5b9e\u73b0\u65b9\u6cd5\u9700\u8981\u901a\u8fc7\u7814\u7a76\u4e0d\u540c\u7f51\u5361\u7684\u9a71\u52a8\u4ee3\u7801\u6765\u786e\u5b9a\u3002\\n\\n\u672c\u6587\u4e2d\u4ee5 igb \u7f51\u5361\u9a71\u52a8\u4e3a\u4f8b\u8fdb\u884c\u63cf\u8ff0\u3002\\n\\n# \u7814\u7a76 igb \u7f51\u5361\u9a71\u52a8\\ndpdk-19.11 \u4e2d\u7684 igb \u7f51\u5361\u9a71\u52a8\u5728\u6267\u884c eth_igb_start up \u63a5\u53e3\u7684\u65f6\u5019\u4f1a\u914d\u7f6e\u901f\u7387\u53cc\u5de5\u3002\\n\\n\u76f8\u5173\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n1349     /* Setup link speed and duplex */\\n1350     speeds = &dev->data->dev_conf.link_speeds;\\n1351     if (*speeds == ETH_LINK_SPEED_AUTONEG) {\\n1352         hw->phy.autoneg_advertised = E1000_ALL_SPEED_DUPLEX;\\n1353         hw->mac.autoneg = 1;\\n1354     } else {\\n1355         num_speeds = 0;\\n1356         autoneg = (*speeds & ETH_LINK_SPEED_FIXED) == 0;\\n1357     \\n1358         /* Reset */\\n1359         hw->phy.autoneg_advertised = 0;\\n1360         \\n1361         if (*speeds & ~(ETH_LINK_SPEED_10M_HD | ETH_LINK_SPEED_10M |\\n1362                 ETH_LINK_SPEED_100M_HD | ETH_LINK_SPEED_100M |\\n1363                 ETH_LINK_SPEED_1G | ETH_LINK_SPEED_FIXED)) {\\n1364             num_speeds = -1;\\n1365             goto error_invalid_config;\\n1366         }\\n1367         if (*speeds & ETH_LINK_SPEED_10M_HD) {\\n1368             hw->phy.autoneg_advertised |= ADVERTISE_10_HALF;\\n1369             num_speeds++;\\n1370         }   \\n...............\\n1387         if (num_speeds == 0 || (!autoneg && (num_speeds > 1)))\\n1388             goto error_invalid_config;\\n1389 \\n1390         /* Set/reset the mac.autoneg based on the link speed,\\n1391          * fixed or not\\n1392          */\\n1393         if (!autoneg) {\\n1394             hw->mac.autoneg = 0;\\n1395             hw->mac.forced_speed_duplex =\\n1396                     hw->phy.autoneg_advertised;\\n1397         } else {\\n1398             hw->mac.autoneg = 1;\\n1399         }\\n\\n1402     e1000_setup_link(hw);\\n```\\n\u4e0a\u8ff0\u4ee3\u7801\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a\\n\\n1. \u83b7\u53d6 dev->data->dev_conf.link_speeds \u53d8\u91cf\u4e2d\u8bbe\u7f6e\u7684 link_speeds\uff0c\u83b7\u53d6\u901f\u7387\u53cc\u5de5\u914d\u7f6e\u72b6\u6001\\n2. \u6839\u636e link_speeds \u53d8\u91cf\u7684\u503c\u8bbe\u7f6e\u9a71\u52a8\u5185\u90e8\u53d8\u91cf\u5982 hw->phy.autoneg_advertised\u3001hw->mac.autoneg\u3001hw->mac.forced_speed_duplex \u7684\u503c\\n3. \u8c03\u7528 e1000_setup_link \u914d\u7f6e\u8bbe\u7f6e\u7684\u901f\u7387\u53cc\u5de5\\n\\n\u6309\u7167\u4e0a\u9762\u7684\u6d41\u7a0b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bbe\u7f6e dev->data->dev_conf.link_speeds \u7684\u503c\uff0c\u7136\u540e\u91cd\u65b0\u5c06\u63a5\u53e3 up \u8d77\u6765\u5c31\u80fd\u591f\u5b9e\u73b0\u901f\u7387\u53cc\u5de5\u914d\u7f6e\u4e86\u3002\\n\\n# \u6d4b\u8bd5\u9a8c\u8bc1\u8fc7\u7a0b\\n\u7ecf\u8fc7\u4e0a\u6587\u7684\u5206\u6790\uff0c\u5df2\u7ecf\u786e\u5b9a\u4e86 igb \u7f51\u5361\u901f\u7387\u53cc\u5de5\u914d\u7f6e\u7684\u65b9\u6cd5\uff0c\u9700\u8981\u9a8c\u8bc1\u53ef\u884c\u6027\u3002\\n\u53ef\u4ee5\u5728 e1000_setup_link \u51fd\u6570\u8c03\u7528\u524d\u6267\u884c\u5982\u4e0b\u4ee3\u7801\uff1a\\n\\n```c\\n hw->mac.autoneg = 0;\\n hw->mac.forced_speed_duplex = ADVERTISE_100_FULL;\\n```\\n\u8fd9\u4e24\u884c\u4ee3\u7801\u914d\u7f6e\u63a5\u53e3\u901f\u7387\u53cc\u5de5\u4e3a\u5f3a\u5236 100M \u5168\u53cc\u5de5\uff0c\u4fee\u6539\u4ee3\u7801\u540e\u4f7f\u7528 kni \u7a0b\u5e8f\u6d4b\u8bd5\uff0c\u5bf9\u7aef\u63a5\u53e3\u7ed1\u5b9a\u5230\u5185\u6838\u9a71\u52a8\u4e0a\uff0c\u6d4b\u8bd5\u6709\u6548\uff01\\n\\n# igb \u7f51\u5361\u9ed8\u8ba4\u7684\u901f\u7387\u53cc\u5de5\u914d\u7f6e\\n\u8bbe\u7f6e\u65b9\u6848\u786e\u5b9a\u540e\uff0c\u4e0d\u80fd\u5fd8\u4e86 igb \u7f51\u5361\u9ed8\u8ba4\u7684\u901f\u7387\u53cc\u5de5\u914d\u7f6e\u9879\u76ee\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5728 rte_eth_dev_configure \u672a\u901a\u8fc7 dev_conf \u8bbe\u5b9a link_speeds \u7684\u503c\u5219\u9ed8\u8ba4\u4e3a 0\u3002\\n\\neth_igb_dev_init \u51fd\u6570\u4e2d\u7684\u5982\u4e0b\u4ee3\u7801\u914d\u7f6e\u63a5\u53e3\u4f7f\u7528\u81ea\u534f\u5546\u6a21\u5f0f\uff0c\u5e76\u6307\u5b9a\u534f\u5546\u901f\u7387\u4e3a\u6240\u6709\u652f\u6301\u7684\u901f\u7387\u4e0e\u53cc\u5de5\u6a21\u5f0f\u3002\\n\\n```c\\n 793     hw->mac.autoneg = 1;\\n 794     hw->phy.autoneg_wait_to_complete = 0;\\n 795     hw->phy.autoneg_advertised = E1000_ALL_SPEED_DUPLEX;\\n```\\n# dpdk-19.11 \u83b7\u53d6\u63a5\u53e3\u652f\u6301\u7684\u901f\u7387\u53cc\u5de5\u914d\u7f6e\\n\u5728\u8bbe\u7f6e\u901f\u7387\u53cc\u5de5\u524d\uff0c\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u68c0\u67e5\uff0c\u68c0\u67e5\u5f85\u8bbe\u7f6e\u7684\u6a21\u5f0f\u5f53\u524d\u7f51\u5361\u662f\u5426\u652f\u6301\u3002\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 rte_eth_dev_info_get \u51fd\u6570\u6765\u83b7\u53d6 dev_info \u7ed3\u6784\u6765\u5b9e\u73b0\uff0cdev_info \u7ed3\u6784\u4e2d\u7684 speed_capa \u5b57\u6bb5\u4ee3\u8868\u4e86\u5f53\u524d\u7f51\u5361\u652f\u6301\u7684\u901f\u7387\u53cc\u5de5\u914d\u7f6e\u3002\\n\\n\u5bf9 igb \u7f51\u5361\u6765\u8bf4\uff0cspeed_capa \u5b57\u6bb5\u901a\u8fc7 eth_igb_infos_get \u51fd\u6570\u7684\u5982\u4e0b\u4ee3\u7801\u6765\u586b\u5145\uff1a\\n\\n```c\\n2286     dev_info->speed_capa = ETH_LINK_SPEED_10M_HD | ETH_LINK_SPEED_10M |\\n2287             ETH_LINK_SPEED_100M_HD | ETH_LINK_SPEED_100M |\\n2288             ETH_LINK_SPEED_1G;\\n```\\n\u83b7\u53d6\u5230\u4e86\u4e4b\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u68c0\u67e5\uff01\\n\\n# \u603b\u7ed3\\n\u672c\u6587\u4ee5 igb \u9a71\u52a8\u4e3a\u4f8b\u63cf\u8ff0\u4e86 dpdk-19.11 \u652f\u6301\u63a5\u53e3\u914d\u7f6e\u901f\u7387\u53cc\u5de5\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e00\u65b9\u6cd5\u9002\u7528\u4e8e\u591a\u4e2a\u9a71\u52a8\uff0c\u662f\u4e00\u4e2a\u76f8\u5bf9\u901a\u7528\u7684\u65b9\u6cd5\u3002\u901f\u7387\u53cc\u5de5\u914d\u7f6e\u4e5f\u662f\u7f51\u5361\u9a71\u52a8\u5e94\u5f53\u5bf9\u5916\u63d0\u4f9b\u7684\u5e38\u89c1\u529f\u80fd\uff0c\u4e0d\u8fc7\u8fd9\u91cc dpdk \u7684\u5904\u7406\u8fc7\u7a0b\u6709\u4e9b\u7279\u522b\uff0c\u5b83\u5c06\u914d\u7f6e\u96c6\u4e2d\u5230\u5bf9 dev->data->dev_conf.link_speeds \u53d8\u91cf\u7684\u8bbe\u5b9a\u4e0a\u4e86\uff01"},{"id":"/dpdk/dpdk\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848.md","source":"@site/blog/dpdk/dpdk\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848.md","title":"dpdk/dpdk\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":7.65,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u524d\u8a00","permalink":"/longyu.github.io/blog/dpdk/dpdk-19.11 \u652f\u6301\u63a5\u53e3\u914d\u7f6e\u901f\u7387\u53cc\u5de5\u7684\u65b9\u6cd5"},"nextItem":{"title":"dpdk/ethtool \u547d\u4ee4\u6307\u5b9a\u7684\u7f51\u7edc\u8bbe\u5907\u540d\u5728\u54ea\u91cc\u88ab\u4f7f\u7528\uff1f","permalink":"/longyu.github.io/blog/dpdk/ethtool \u547d\u4ee4\u6307\u5b9a\u7684\u7f51\u7edc\u8bbe\u5907\u540d\u5728\u54ea\u91cc\u88ab\u4f7f\u7528\uff1f"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n\u5728\u67d0\u4e2a\u7279\u5b9a\u7684\u573a\u666f\u4e2d\uff0c**dpdk primary** \u8fdb\u7a0b\u5728\u5bbf\u4e3b\u673a\u4e0a\u8fd0\u884c\uff0c\u5728 **dpdk primary** \u8fdb\u7a0b\u8fd0\u884c\u524d\uff0c\u5bbf\u4e3b\u673a\u4e0a\u7684**\u67d0 A \u7a0b\u5e8f**\u8d1f\u8d23\u521b\u5efa **/dev/hugepages** \u76ee\u5f55\u5e76\u6302\u8f7d **hugetlbfs** \u5230\u6b64\u76ee\u5f55\u4e2d\u3002\\n\\n\u540c\u65f6\u5728\u6b64\u5bbf\u4e3b\u673a\u4e0a\u4e5f\u4ee5**\u5bb9\u5668**\u4e3a\u57fa\u672c\u5355\u4f4d\u6307\u5b9a\u7279\u6743\u6a21\u5f0f\u8fd0\u884c\u5176\u5b83\u7684 **dpdk secondary** \u8fdb\u7a0b\uff0c**dpdk secondary** \u8fdb\u7a0b\u9700\u8981\u4e0e **primary** \u8fdb\u7a0b\u5171\u4eab\u7684\u76ee\u5f55\u901a\u8fc7**\u5bb9\u5668\u542f\u52a8\u53c2\u6570**\u6765\u6620\u5c04\u3002\\n\\n\u5bb9\u5668\u7684\u542f\u52a8\u65f6\u673a\u4e0e **A \u7a0b\u5e8f**\u521b\u5efa /dev/hugepages \u76ee\u5f55\u5e76\u6302\u8f7d\u5927\u9875\u5185\u5b58\u7684\u65f6\u5e8f\u6ca1\u6709\u4e25\u683c\u4fdd\u8bc1\u3002\\n\\n\u5728\u67d0\u6b21\u6d4b\u8bd5\u65f6\uff0c\u5bb9\u5668\u5185\u7684 dpdk secondary \u8fdb\u7a0b\u521d\u59cb\u5316\u62a5\u4e86\u5982\u4e0b\u9519\u8bef\uff1a\\n\\n```bash\\nEAL: Detected 16 lcore(s)\\nEAL: Detected 1 NUMA nodes\\nEAL: Multi-process socket /var/run/dpdk/rte/mp_socket\\nEAL: Selected IOVA mode \'PA\'\\nEAL: Probing VFIO support...\\nEAL: error allocating rte services array\\nEAL: FATAL: rte_service_init() failed\\nEAL: rte_service_init() failed\\nEAL: Error - exiting with code: 1\\n  Cause: Invalid EAL arguments\\n```\\n\u4e0a\u8ff0\u62a5\u9519\u4fe1\u606f\u8868\u9762\u4e0a\u770b\u662f\u5185\u5b58\u83b7\u53d6\u5931\u8d25\uff0c\u505a\u4e86\u5982\u4e0b\u6392\u67e5\uff1a\\n1. \u5bb9\u5668\u5185 hugetlbfs \u6302\u8f7d\u6392\u67e5 -- \u6b63\u5e38\u6302\u8f7d\\n2. \u5bb9\u5668\u5185 /dev/hugepages \u76ee\u5f55\u4e2d\u6620\u5c04\u7684\u5927\u9875\u5185\u5b58\u5185\u5bb9\u6392\u67e5 -- \u5185\u5bb9\u5747\u4e3a 0x00\\n3. \u5bbf\u4e3b\u673a\u5185 /dev/hugepages \u76ee\u5f55\u4e2d\u6620\u5c04\u7684\u5927\u9875\u5185\u5b58\u5185\u5bb9\u6392\u67e5 -- \u5185\u5bb9\u6b63\u5e38\\n\\n\u95ee\u9898\u6307\u5411\u5bb9\u5668\u6620\u5c04\u7684 **/dev/hugepages** \u76ee\u5f55**\u5b58\u5728\u5f02\u5e38**\uff0c\u8fdb\u4e00\u6b65\u5206\u6790\uff0c\u6000\u7591\u5bb9\u5668\u5728 **A \u7a0b\u5e8f**\u521b\u5efa **/dev/hugepages** \u76ee\u5f55\u524d\u5c31\u5df2\u7ecf\u542f\u52a8\u3002\u6b64\u65f6\u7531\u4e8e **/dev/hugepages** \u76ee\u5f55\u8fd8\u6ca1\u6709\u521b\u5efa\uff0c**\u5bb9\u5668\u81ea\u52a8\u521b\u5efa\u4e86\u8be5\u76ee\u5f55\u5e76\u6210\u529f\u542f\u52a8**\uff0c\u6b64\u540e A \u7a0b\u5e8f\u5728\u5bbf\u4e3b\u673a\u4e0a\u6302\u8f7d hugetlbfs \u5230 /dev/hugepages \u76ee\u5f55\u4e2d\uff0cdpdk primary \u8fdb\u7a0b\u6b63\u5e38\u8fd0\u884c\uff0c\u800c\u5bb9\u5668\u5185\u7684 **secondary** \u8fdb\u7a0b\u7531\u4e8e**\u6ca1\u6709\u6302\u8f7d hugetlbfs** \u800c\u65e0\u6cd5\u542f\u52a8\u3002\\n\\n\u90a3\u6709\u54ea\u4e9b\u8bc1\u636e\u6765\u652f\u6491\u8fd9\u4e2a\u6000\u7591\u5462\uff1f\\n\\n\u7ecf\u8fc7\u4e00\u4e9b\u601d\u8003\u4ea4\u6d41\u540e\uff0c\u786e\u8ba4\u6709\u5982\u4e0b\u4fe1\u606f\u5c31\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u8bf4\u660e\u95ee\u9898\uff1a\\n1. \u5bb9\u5668\u5185 /dev/hugepages \u6587\u4ef6\u7684\u521b\u5efa\u65f6\u95f4\\n2. \u5bb9\u5668\u7684\u542f\u52a8\u65f6\u95f4\\n3. \u5bb9\u5668\u7684\u542f\u52a8\u65f6\u95f4\u65e9\u4e8e /dev/hugepages \u6587\u4ef6\u7684\u521b\u5efa\u65f6\u95f4\\n4. \u5728\u5bbf\u4e3b\u673a\u4e0a umount \u6389 hugetlbfs \u540e\u67e5\u770b /dev/hugepages \u7684 inode \u53f7\u5e76\u4e0e\u5bb9\u5668\u5185\u7684\u5bf9\u6bd4\\n\\n\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff1a**\u8be5\u5982\u4f55\u83b7\u53d6 /dev/hugepages \u76ee\u5f55\u7684\u521b\u5efa\u65f6\u95f4\u5462\uff1f**\\nctime \u7acb\u523b\u6d8c\u51fa\u4e86\u8111\u6d77\uff0c\u53ef\u662f\u8fc7\u53bb\u7684\u7ecf\u9a8c\u544a\u8bc9\u6211 ctime \u6839\u672c\u4e0d\u4ee3\u8868\u6587\u4ef6\u7684\u521b\u5efa\u65f6\u95f4\uff0c\u5b83\u7684\u5168\u79f0\u662f **change time\uff0c\u800c\u975e create time**\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u5176\u5b9e\u538b\u6839\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u83b7\u53d6\u6587\u4ef6\u7684\u521b\u5efa\u65f6\u95f4\u3002\\n\\n## \u641c\u7d22\u4e92\u8054\u7f51\\n\u4f7f\u7528\u5173\u952e\u8bcd \u201cfind file create time on linux\u201d \u641c\u7d22\uff0c\u627e\u5230\u5982\u4e0b\u94fe\u63a5\\n\\n[https://unix.stackexchange.com/questions/20460/how-do-i-do-a-ls-and-then-sort-the-results-by-date-created](https://unix.stackexchange.com/questions/20460/how-do-i-do-a-ls-and-then-sort-the-results-by-date-created)\\n\\n\u6b64\u94fe\u63a5\u4e2d\u63cf\u8ff0\u4e86\u5728 linux \u4e2d\u83b7\u53d6\u6587\u4ef6\u521b\u5efa\u65f6\u95f4\u7684\u65b9\u6cd5\uff0cget \u5230\u4e86\u65b0\u7684\u6280\u80fd\uff0c\u540c\u65f6\u6211\u4e5f\u5b8c\u6210\u4e86\u672c\u7bc7\u6587\u7ae0\u7684\u90e8\u5206\u8349\u7a3f\u3002\\n\\n\u5728 linux 4.11 \u5185\u6838\u4e2d\uff0c\u5f15\u5165\u4e86\u4e00\u4e2a statx \u7cfb\u7edf\u8c03\u7528\uff0c\u5bf9\u4e8e\u7279\u5b9a\u7684\u6587\u4ef6\u7cfb\u7edf\u5982 ext4\u3001xfs\uff0c\u652f\u6301\u901a\u8fc7 statx \u7ed3\u6784\u7684 stx_btime \u5b57\u6bb5\u83b7\u53d6\u6587\u4ef6\u7684\u521b\u5efa\u65f6\u95f4\u3002\\n\\n\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```bash\\n[longyu@debian] ~ $ stat ./file_backup/\\n  File: ./file_backup/\\n  Size: 4096      \\tBlocks: 8          IO Block: 4096   directory\\nDevice: 10308h/66312d\\tInode: 1572919     Links: 4\\nAccess: (0755/drwxr-xr-x)  Uid: ( 1000/  longyu)   Gid: ( 1001/ UNKNOWN)\\nAccess: 2022-04-18 20:16:01.562883033 +0800\\nModify: 2021-02-10 20:37:36.536293084 +0800\\nChange: 2021-02-10 20:37:36.536293084 +0800\\n Birth: 2019-12-06 21:25:25.340826235 +0800\\n```\\n\u4e0a\u8ff0\u8f93\u51fa\u7684\u6700\u540e\u4e00\u9879 Birth \u5c31\u4ee3\u8868\u6587\u4ef6\u7684\u521b\u5efa\u65f6\u95f4\u3002\u6574\u7406\u8fd9\u7bc7\u535a\u5ba2\u7684\u65f6\u5019\u6211\u53d1\u73b0\u83b7\u53d6\u6587\u4ef6\u7684\u521b\u5efa\u65f6\u95f4\u5728\u672c\u6587\u63cf\u8ff0\u7684\u95ee\u9898\u4e2d\u6839\u672c\u4e0d\u53ef\u7528\uff0c\u5173\u952e\u7684\u95ee\u9898\u5728\u4e8e /dev/ \u6302\u8f7d\u70b9\u7684\u6587\u4ef6\u7cfb\u7edf\u4e3a devtmpfs\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7cfb\u7edf\u76ee\u524d\u538b\u6839\u4e0d\u652f\u6301\u83b7\u53d6\u6587\u4ef6\u7684\u521b\u5efa\u65f6\u95f4\\n\uff01\\n\\n## \u7075\u673a\u4e00\u52a8\\n\u5199\u7684\u8fc7\u7a0b\u4e2d\u7a81\u7136\u60f3\u5230\u5176\u5b9e\u6709\u4e00\u4e2a\u975e\u5e38\u5173\u952e\u7684\u8bc1\u636e\u80fd\u591f\u8bc1\u660e\u4e0a\u6587\u7684\u6000\u7591\u70b9\uff0c\u57fa\u4e8e\u5982\u4e0b\u51e0\u4e2a\u57fa\u7840\u7684\u8ba4\u8bc6\uff1a\\n1. \u5bb9\u5668\u5185\u7684\u6302\u8f7d\u70b9\u4fe1\u606f\u4e0e\u5bbf\u4e3b\u673a\u662f\u9694\u79bb\u7684\uff0c\u8fd9\u4e00\u70b9\u7531 namespace \u4fdd\u8bc1\\n2. \u5bb9\u5668\u5c3d\u7ba1\u53ef\u80fd\u4f1a\u521b\u5efa /dev/hugepages \u76ee\u5f55\uff0c\u4f46\u662f\u4e0d\u4f1a\u6302\u8f7d hugetlbfs \\n3. \u5bb9\u5668\u5185\u672a\u6302\u8f7d hugetlbfs\uff0c\u5219\u5728\u5bb9\u5668\u5185\u8bbf\u95ee /proc/mounts \u6587\u4ef6\uff0c\u5176\u8f93\u51fa\u4e2d\u4e00\u5b9a\u68c0\u7d22\u4e0d\u51fa\u6765 hugetlbfs \u7684\u6302\u8f7d\u70b9\\n\\n\u4e8e\u662f\u91cd\u65b0 check \u4e86\u4e0b\u5bb9\u5668\u5185 /proc/mounts \u6587\u4ef6\u5185\u5bb9\uff0c\u5374\u53d1\u73b0\u5b58\u5728 hugetlbfs \u7684\u6302\u8f7d\u70b9\uff0c\u95ee\u9898\u4eff\u4f5b\u53c8\u8d70\u5165\u4e86\u6b7b\u80e1\u540c\u3002\\n\\n\u6b64\u540e\uff0c\u6211\u4eec\u7ee7\u7eed\u786e\u8ba4\u4e86\u5982\u4e0b\u4fe1\u606f\uff1a\\n1. \u5bbf\u4e3b\u673a\u4e0a\u7684 /dev/hugepages \u76ee\u5f55\u7684 inode \u4e0e\u5bb9\u5668\u5185 /dev/hugepages \u76ee\u5f55\u4e2d\u7684 inode \u4e0d\u4e00\u81f4\\n2. \u5728\u5bbf\u4e3b\u673a\u4e0a umount \u4e00\u6b21 hugetlbfs \u540e\uff0c\u5bbf\u4e3b\u673a\u4e0e\u5bb9\u5668\u5185 /dev/hugepages inode \u53f7\u4e00\u81f4\\n\\n\u5728\u4e0a\u9762\u64cd\u4f5c\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u53d1\u73b0\u5bbf\u4e3b\u673a\u4e0a umount \u4e00\u6b21 hugetlbfs \u540e /proc/mounts \u6587\u4ef6\u4e2d\u8fd8\u662f\u6709 hugetlbfs \u7684\u6302\u8f7d\u70b9\uff0c\u4e5f\u662f\u5728 /dev/hugepages \u76ee\u5f55\u4e2d\uff0c\u53ea\u4e0d\u8fc7\u6302\u8f7d\u53c2\u6570\u4e0e\u4e4b\u524d\u7684\u6709\u4e9b\u533a\u522b\uff0c\u8fd9\u8bf4\u660e **hugetlbfs \u5728 /dev/hugepages \u76ee\u5f55\u4e0a\u88ab\u6302\u8f7d\u4e86\u4e24\u6b21**\u3002\\n\\n## \u8c01\u6302\u8f7d\u4e86 hugetlbfs\uff1f\\n\u5c06\u7cfb\u7edf\u4e2d\u7684 mount \u547d\u4ee4\u7528\u4e00\u4e2a shell \u811a\u672c\u8986\u76d6\uff0c\u5728\u811a\u672c\u4e2d\u83b7\u53d6\u7236\u8fdb\u7a0b\u7684 pid \u5e76\u901a\u8fc7\u8bbf\u95ee /proc/ \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u6765\u8bb0\u5f55\u4fe1\u606f\uff0c\u5305\u542b\u8c03\u7528\u65f6\u95f4\u3001 cmdline\u3001comm \u4fe1\u606f\uff0c\u4fee\u6539\u5b8c\u6210\u540e\u91cd\u542f\u7cfb\u7edf\uff0c\u542f\u52a8\u5b8c\u6210\u540e\u67e5\u770b\u8bb0\u5f55\u4fe1\u606f\uff0c\u53d1\u73b0\u6709\u4e24\u4e2a\u8c03\u7528\u8005\uff1a\\n1. /sbin/init\\n2. \u67d0 A \u7a0b\u5e8f\\n\\n\u8fd9\u6b21\u4ecd\u65e7\u80fd\u591f\u590d\u73b0\u95ee\u9898\uff0c\u6b64\u65f6\u67e5\u770b\u5bb9\u5668\u7684\u542f\u52a8\u65f6\u95f4\uff0c\u53d1\u73b0\u5bb9\u5668\u542f\u52a8\u65f6\u95f4\u5728**\u4e24\u6b21 hugetlbfs \u7684\u6302\u8f7d\u4e2d\u95f4**\uff0c\u800c\u5bbf\u4e3b\u673a\u4e2d dpdk primary \u8fdb\u7a0b\u7684\u542f\u52a8\u65f6\u95f4\u5728**\u7b2c\u4e8c\u6b21 hugetlbfs \u6302\u8f7d\u4e4b\u540e**\u3002\\n\\n\u4e24\u6b21 hugetlbfs \u7684\u6302\u8f7d\u5c5e\u4e8e\u5386\u53f2\u4ee3\u7801\u7ee7\u627f\uff0c\u629b\u5f00\u8fd9\u4e2a\u95ee\u9898\uff0c\u6839\u672c\u539f\u56e0\u5728\u4e0e\u5bb9\u5668\u7684\u542f\u52a8\u65f6\u5e8f\u4e0d\u6b63\u5e38\uff0c\u5b83\u5e94\u8be5\u5728\u7b2c\u4e8c\u6b21 hugetlbfs \u6302\u8f7d\u4e4b\u540e\u3001dpdk primary \u8fdb\u7a0b\u542f\u52a8\u540e\u518d\u542f\u52a8\u3002\\n\\n**\u4fee\u6539\u542f\u52a8\u65f6\u5e8f**\uff0c\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u3002\\n\\n## \u603b\u7ed3\\n\u672c\u6587\u662f\u5728\u89e3\u51b3\u95ee\u9898\u540e\u7f16\u5199\u7684\u603b\u7ed3\uff0c\u5176\u5b9e\u81ea\u5df1\u5bf9\u4e00\u4e9b\u5173\u952e\u7684\u4fe1\u606f\u5df2\u7ecf\u6709\u4e9b\u6a21\u7cca\uff0c\u8fd9\u7b97\u662f\u4e00\u79cd\u4e8b\u540e\u7684\u590d\u76d8\u4e0e\u91cd\u6f14\u3002\\n\\n\u5728\u5199\u7684\u8fc7\u7a0b\u4e2d\u6211\u53d1\u73b0\u4e86\u4e00\u4e9b\u65b0\u7684\u601d\u8def\uff0c\u867d\u7136\u4e0d\u80fd\u7528\u4e8e\u8fd9\u4e00\u6b21\u95ee\u9898\u5b9a\u4f4d\uff0c\u4f46\u662f\u901a\u8fc7\u603b\u7ed3\uff0c\u6211\u7684\u601d\u8def\u66f4\u5bbd\u9614\u4e86\u3002\\n\\n\u6700\u540e\u6211\u60f3\u63d0\u51fa\u4e00\u4e2a\u95ee\u9898\uff1a\\n\\n\u5bf9\u4e8e\u81ea\u5df1\u672a\u77e5\u7684\u5982\u4f55\u83b7\u53d6\u6587\u4ef6\u521b\u5efa\u65f6\u95f4\u7684\u77e5\u8bc6\uff0c\u771f\u7684\u6210\u4e3a\u4e86\u963b\u788d\u95ee\u9898\u63a8\u8fdb\u7684\u539f\u56e0\u5417\uff1f\\n\\n\u7b54\u6848\u663e\u800c\u6613\u89c1\uff01"},{"id":"/dpdk/ethtool \u547d\u4ee4\u6307\u5b9a\u7684\u7f51\u7edc\u8bbe\u5907\u540d\u5728\u54ea\u91cc\u88ab\u4f7f\u7528\uff1f","metadata":{"permalink":"/longyu.github.io/blog/dpdk/ethtool \u547d\u4ee4\u6307\u5b9a\u7684\u7f51\u7edc\u8bbe\u5907\u540d\u5728\u54ea\u91cc\u88ab\u4f7f\u7528\uff1f","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/ethtool \u547d\u4ee4\u6307\u5b9a\u7684\u7f51\u7edc\u8bbe\u5907\u540d\u5728\u54ea\u91cc\u88ab\u4f7f\u7528\uff1f.md","source":"@site/blog/dpdk/ethtool \u547d\u4ee4\u6307\u5b9a\u7684\u7f51\u7edc\u8bbe\u5907\u540d\u5728\u54ea\u91cc\u88ab\u4f7f\u7528\uff1f.md","title":"dpdk/ethtool \u547d\u4ee4\u6307\u5b9a\u7684\u7f51\u7edc\u8bbe\u5907\u540d\u5728\u54ea\u91cc\u88ab\u4f7f\u7528\uff1f","description":"\u4f7f\u7528 ethtool \u65f6\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u7f51\u7edc\u63a5\u53e3\u540d\u79f0\uff0c\u8fd9\u4e2a\u540d\u5b57\u7a76\u7adf\u662f\u5728\u54ea\u91cc\u88ab\u4f7f\u7528\u7684\u5462\uff1f","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":2.755,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848","permalink":"/longyu.github.io/blog/dpdk/dpdk\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848"},"nextItem":{"title":"dpdk/gcc constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u672a\u88ab\u94fe\u63a5\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/gcc constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u672a\u88ab\u94fe\u63a5\u95ee\u9898"}},"content":"\u4f7f\u7528 ethtool \u65f6\u9700\u8981\u6307\u5b9a\u4e00\u4e2a\u7f51\u7edc\u63a5\u53e3\u540d\u79f0\uff0c\u8fd9\u4e2a\u540d\u5b57\u7a76\u7adf\u662f\u5728\u54ea\u91cc\u88ab\u4f7f\u7528\u7684\u5462\uff1f\\n\\n## ethtool \u547d\u4ee4\u4e2d\u5bf9\u7f51\u7edc\u8bbe\u5907\u540d\u7684\u4f7f\u7528\\nethtool \u7a0b\u5e8f\u4f1a\u5c06\u7528\u6237\u6307\u5b9a\u7684\u7f51\u7edc\u8bbe\u5907\u540d\u62f7\u8d1d\u5230\u4e00\u4e2a ctx \u4e2d\uff0c\u8fd9\u4e2a  ctx \u88ab\u7528\u6765\u6784\u5efa ioctl \u6267\u884c\u7684\u73af\u5883\u3002\u4ece ctx.devname ----\x3e ctx.ifr.ifr_name\u3002\\n\\nctx.ifr \u6700\u7ec8\u4f5c\u4e3a ioctl \u7cfb\u7edf\u8c03\u7528\u7684\u53c2\u6570\u4f20\u9012\u7ed9\u5185\u6838\u3002\\n\\n## ifr_name \u5728\u5185\u6838\u4e2d\u7684\u4ec0\u4e48\u5730\u65b9\u88ab\u4f7f\u7528\u5462\\n\\n\u5728 dev_ioctl \u4e2d\u6709\u5982\u4e0b\u4ee3\u7801\uff1a\\n\\n```c\\n\\tcase SIOCETHTOOL:\\n\\t\\tdev_load(net, ifr->ifr_name);\\n\\t\\trtnl_lock();\\n\\t\\tret = dev_ethtool(net, ifr);\\n\\t\\trtnl_unlock();\\n\\t\\tif (colon)\\n\\t\\t\\t*colon = \':\';\\n\\t\\treturn ret;\\n```\\n\\nethtool \u8c03\u7528\u7684 ioctl \u6700\u7ec8\u662f\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u6267\u884c\u7684\u3002\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d dev_load\\n\u9996\u5148\u4f7f\u7528 ifr_name \u5728\u7f51\u7edc\u8bbe\u5907\u63a5\u53e3\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u52a0\u8f7d\u76f8\u5e94\u7684\u6a21\u5757\uff0c\u53ea\u6709\u5f53\u7528\\n\u6237\u5177\u6709\u9700\u8981\u7684\u6743\u9650\u4e4b\u540e\u624d\u80fd\u52a0\u8f7d\u6210\u529f\u3002\\n\\n\u8fd9\u4e4b\u540e ifr_name \u5728 dev_ethtool \u4e2d\u88ab\u518d\u6b21\u4f7f\u7528\u3002\u76f8\u5173\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n\\tstruct net_device *dev = __dev_get_by_name(net, ifr->ifr_name);\\n```\\n\\n\u8fd9\u91cc\u901a\u8fc7 ifr_name \u6765\u68c0\u7d22\u5230\u5bf9\u5e94\u7684 netdev \u8bbe\u5907\u3002\u6210\u529f\u5219\u4f1a\u83b7\u53d6\u5230\u4e00\u4e2a net_device \u7ed3\u6784\u3002\\n\\n## net_device \u7ed3\u6784\u4e2d\u7684 ethtool_ops \u6210\u5458\\n\u5728 net_device \u7ed3\u6784\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u7684\u6210\u5458\uff1a\\n\\n\\n```c\\n    const struct ethtool_ops *ethtool_ops;\\n```\\n\\nethtool_ops \u662f ethtool \u7c7b\u7684\u865a\u51fd\u6570\u8868\uff0cethtool \u547d\u4ee4\u6700\u7ec8\u5c31\u662f\u901a\u8fc7\u8c03\u7528\u8fd9\u4e2a\u865a\u51fd\u6570\u8868\u4e2d\u7684\u51fd\u6570\u6765\u5de5\u4f5c\u7684\u3002\\n\\n## ethtool \u4e0e\u9762\u5411\u5bf9\u8c61\\n\u8fd9\u91cc\u4e5f\u662f\u9762\u5411\u5bf9\u8c61\u601d\u60f3\u7684\u4e00\u4e2a\u5e94\u7528\u3002\\n\\nethtool \u53ef\u4ee5\u770b\u4f5c\u4e00\u4e2a\u8d85\u7c7b\uff0cethool_ops \u8fd9\u4e2a\u865a\u51fd\u6570\u8868\u4e2d\u5b9a\u4e49\u4e86\u5b50\u7c7b\u80fd\u591f\u91cd\u8f7d\u7684\u51fd\u6570\u96c6\u5408\u3002\u4e0d\u540c\u7684 netdev \u8bbe\u5907\u4f7f\u7528\u4e0d\u540c\u7684\u9a71\u52a8\uff0c\u9a71\u52a8\u4e2d\u5b9e\u73b0\u81ea\u5df1\u7684 ethtool \u76f8\u5173\u51fd\u6570\u5e76\u586b\u5145\u5230\u4e00\u4e2a\u865a\u51fd\u6570\u8868\u4e2d\u3002\u5728\u8bbe\u5907\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u901a\u8fc7 SET_ETHTOOL_OPS \u8fd9\u4e2a\u5b8f\u6765\u7ed1\u5b9a\u4e0d\u540c\u7684\u865a\u51fd\u6570\u8868\uff0c\u5b8c\u6210\u5bf9 ethtool \u5b50\u7c7b\u7684\u5b9e\u4f8b\u5316\u3002\\n\\n## net/core/ethtool.c\\n\u5185\u6838\u6e90\u7801 net/core/ethtool.c \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9002\u914d\u5c42\uff0c\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217 ethtool_xxx \u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u7edf\u4e00\u4e86 ethtool \u7684\u8c03\u7528\u65b9\u5f0f\uff0c\u5b83\u4eec\u5e76\u4e0d\u5173\u5fc3 dev->ethtool_ops \u5230\u5e95\u88ab\u8c01\u5b9e\u73b0\uff0c\u53ea\u9700\u8981\u5728\u51fd\u6570\u6307\u9488\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u8c03\u7528\u5373\u53ef\uff0c\u8fd9\u6837\u4fbf\u5c4f\u853d\u4e86\u4e0d\u540c netdev \u4e2d ethtool_ops \u7684\u533a\u522b\uff0c\u5b9e\u73b0\u4e86\u7c7b\u4f3c c++ \u4e2d\u7684\u91cd\u8f7d\u529f\u80fd\u3002"},{"id":"/dpdk/gcc constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u672a\u88ab\u94fe\u63a5\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/gcc constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u672a\u88ab\u94fe\u63a5\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/gcc constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u672a\u88ab\u94fe\u63a5\u95ee\u9898.md","source":"@site/blog/dpdk/gcc constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u672a\u88ab\u94fe\u63a5\u95ee\u9898.md","title":"dpdk/gcc constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u672a\u88ab\u94fe\u63a5\u95ee\u9898","description":"dpdk pmd \u9a71\u52a8\u7684\u521d\u59cb\u5316\u8fc7\u7a0b","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":6.345,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/ethtool \u547d\u4ee4\u6307\u5b9a\u7684\u7f51\u7edc\u8bbe\u5907\u540d\u5728\u54ea\u91cc\u88ab\u4f7f\u7528\uff1f","permalink":"/longyu.github.io/blog/dpdk/ethtool \u547d\u4ee4\u6307\u5b9a\u7684\u7f51\u7edc\u8bbe\u5907\u540d\u5728\u54ea\u91cc\u88ab\u4f7f\u7528\uff1f"},"nextItem":{"title":"dpdk/igb_uio.ko \u7684 md5sum \u4e3a\u5565\u53c8\u53d8\u5316\u4e86\uff1f","permalink":"/longyu.github.io/blog/dpdk/igb_uio.ko \u7684 md5sum \u4e3a\u5565\u53c8\u53d8\u5316\u4e86\uff1f"}},"content":"## dpdk pmd \u9a71\u52a8\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\\n\\ndpdk \u652f\u6301\u591a\u4e2a pmd \u9a71\u52a8\uff0cpmd \u9a71\u52a8\u7684\u79cd\u7c7b\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u8fd8\u5728\u4e0d\u65ad\u7684\u6269\u5c55\u3002\u4e3a\u4e86\u907f\u514d\u6dfb\u52a0\u65b0\u9a71\u52a8\u5bf9\u73b0\u6709\u6846\u67b6\u4ee3\u7801\u7684\u4fee\u6539\uff0cdpdk \u5bf9\u4e0d\u540c\u9a71\u52a8\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u8fdb\u884c\u4e86\u62bd\u8c61\uff0c\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u9a71\u52a8\u53ea\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u9a71\u52a8\u6ce8\u518c\u7684\u6784\u9020\u51fd\u6570\u5373\u53ef\u3002\\n\\ndpdk-16.04 \u4e2d\u901a\u8fc7 PMD_REGISTER_DRIVER \u5b8f\u6765\u6ce8\u518c\u9a71\u52a8\uff0c\u8fd9\u4e2a\u5b8f\u7684\u5b9e\u73b0\u5982\u4e0b\uff1a\\n\\n```c\\n#define PMD_REGISTER_DRIVER(d)\\\\\\nvoid devinitfn_ ##d(void);\\\\\\nvoid __attribute__((constructor, used)) devinitfn_ ##d(void)\\\\\\n{\\\\\\n\\trte_eal_driver_register(&d);\\\\\\n}\\n```\\n\\n\u6bcf\u4e00\u79cd\u7f51\u5361\u9a71\u52a8\u5b9e\u73b0\u4e00\u4e2a rte_driver \u7ed3\u6784\u4f53\uff0c\u901a\u8fc7 PMD_REGISTER_DRIVER \u6765\u5c06\u8fd9\u4e9b\u7ed3\u6784\u4f53\u5730\u5740\u6dfb\u52a0\u5230 dev_driver_list \u94fe\u8868\u4e2d\u5c31\u5b8c\u6210\u4e86\u9a71\u52a8\u6ce8\u518c\u7684\u8fc7\u7a0b\u3002\\n\\n\u4e00\u4e2a\u5177\u4f53\u7684\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```c\\nPMD_REGISTER_DRIVER(pmd_igb_drv);\\n```\\n\\n\u4f7f\u7528\u4e0a\u9762\u8fd9\u884c\u4ee3\u7801\u5c31\u5b8c\u6210\u4e86 igb \u9a71\u52a8\u7684\u521d\u59cb\u5316\u51fd\u6570\u6ce8\u518c\u8fc7\u7a0b\u3002\\n\\nPMD_REGISTER_DRIVER \u4e2d\u4f7f\u7528 gcc constructor \u5c5e\u6027\u6765\u4fee\u9970\u9a71\u52a8\u7684\u521d\u59cb\u5316\u51fd\u6570\uff0c\u5176\u8bed\u4e49\u4fdd\u8bc1\u521d\u59cb\u5316\u51fd\u6570\u5728 main \u51fd\u6570\u4e4b\u524d\u6267\u884c\u3002\u5176\u529f\u80fd\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u5c06\u9a71\u52a8\u7684\u521d\u59cb\u5316\u51fd\u6570\u4ece main \u51fd\u6570\u3001main \u51fd\u6570\u8c03\u7528\u7684\u5b50\u51fd\u6570\u4e2d\u79fb\u52a8\u5230 main \u51fd\u6570\u524d\u9690\u5f0f\u8c03\u7528\uff0c\u8fd9\u6837\u5c31\u907f\u514d\u4e86\u6bcf\u6dfb\u52a0\u4e00\u79cd\u65b0\u9a71\u52a8\u5c31\u5f97\u4fee\u6539 main \u51fd\u6570\u3001main \u51fd\u6570\u8c03\u7528\u7684\u5b50\u51fd\u6570\u7684\u884c\u4e3a\u3002\\n\\n## \u590d\u7528 dpdk \u9a71\u52a8\u6ce8\u518c\u65b9\u6cd5\\n\\n\u5f53\u6211\u5728\u6269\u5c55 dpdk \u7684 proc_info \u793a\u4f8b\u7a0b\u5e8f\u4ee3\u7801\u6765 dump \u4e00\u4e9b\u5173\u952e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5982\u7f51\u5361\u6536\u53d1\u961f\u5217\u3001\u63cf\u8ff0\u7b26\u4fe1\u606f\u3001\u5bc4\u5b58\u5668\u4fe1\u606f\u7b49\u5185\u5bb9\u65f6\uff0c\u7531\u4e8e\u6bcf\u4e00\u79cd\u7f51\u5361\u7684\u533a\u522b\uff0c\u6211\u4e5f\u9700\u8981\u5bf9 dump \u8fc7\u7a0b\u8fdb\u884c\u62bd\u8c61\uff0c\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u63cf\u8ff0\u6bcf\u4e00\u79cd\u7f51\u5361\u7684 dump \u8fc7\u7a0b\uff0c\u540c\u65f6\u590d\u7528 dpdk \u9a71\u52a8\u6ce8\u518c\u65b9\u6cd5\uff0c\u4f7f\u7528 constructor \u5c5e\u6027\u6765\u5b9e\u73b0\u6bcf\u4e00\u79cd\u7f51\u5361 dump \u7ed3\u6784\u4f53\u7684\u6ce8\u518c\u8fc7\u7a0b\u3002\\n\\n\u6211\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u6765\u6a21\u62df\u8fd9\u4e00\u529f\u80fd\u7684\u5b9e\u73b0\u8fc7\u7a0b\uff1a\\n\\n\u9a71\u52a8\u521d\u59cb\u5316\u6a21\u62df\u4ee3\u7801 test.c \uff1a\\n\\n```c\\n#include <stdio.h>\\n\\n#define REGISTER_DUMPOPS_DRIVER(d)\\\\\\nvoid devinitfn_ ##d(void);\\\\\\nvoid __attribute__((constructor, used)) devinitfn_ ##d(void)\\\\\\n{\\\\\\n        printf(\\"register dumpops\\\\n\\");\\\\\\n}\\n\\nREGISTER_DUMPOPS_DRIVER(igb);\\nREGISTER_DUMPOPS_DRIVER(i40e);\\n```\\n\\n\u6d4b\u8bd5\u4ee3\u7801 hello.c\uff1a\\n\\n```c\\n#include <stdio.h>\\n\\nint main(void)\\n{\\n        return 0;\\n}\\n```\\n\\n\u7f16\u8bd1\u8fc7\u7a0b\uff1a\\n\\n```bash\\n$ gcc -c test.c\\n$ ar -rc libtest.a test.o\\n$ gcc -L . -ltest hello.c\\n```\\n\\n\u6d4b\u8bd5\u8fc7\u7a0b\uff1a\\n\\n```bash\\n$ ./hello\\n$ nm ./hello | grep initfn\\n$\\n```\\n\\n\u6d4b\u8bd5\u53d1\u73b0\u6784\u9020\u51fd\u6570\u672a\u6267\u884c\uff0cnm \u67e5\u770b hello \u53ef\u6267\u884c\u6587\u4ef6\u6ca1\u6709\u94fe\u63a5\u521d\u59cb\u5316\u51fd\u6570\u3002\\n\\n## constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u7684\u7279\u70b9\\n\\n\u5728 [gcc x64 \u73af\u5883\u4e2d\u9ed8\u8ba4\u94fe\u63a5\u811a\u672c\u5206\u6790\u4e4b preinit_array\u3001constructor\u3001destructor \u76f8\u5173\u5206\u6790](https://blog.csdn.net/Longyu_wlz/article/details/109128395?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161259049716780255247950%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D&request_id=161259049716780255247950&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-109128395.pc_v1_rank_blog_v1&utm_term=constructor) \u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6211\u5bf9 constructor \u5c5e\u6027\u4fee\u9970\u51fd\u6570\u80cc\u540e\u7684\u4e00\u4e9b\u539f\u7406\u8fdb\u884c\u4e86\u63cf\u8ff0\uff0c\u8fd9\u4e9b\u6784\u9020\u51fd\u6570\u4e0e\u666e\u901a\u51fd\u6570\u7684\u533a\u522b\u5728\u4e8e\u5b83\u4e0d\u88ab\u76f4\u63a5\u5f15\u7528\uff0c\u5982\u679c\u8fd9\u4e9b\u6784\u9020\u51fd\u6570\u88ab\u7f16\u8bd1\u5230\u9759\u6001\u5e93\u4e2d\uff0c\u5c31\u4e0d\u4f1a\u88ab\u94fe\u63a5\u5230\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\\n\\n\u6309\u7167\u4e0a\u9762\u7684\u8bf4\u6cd5\uff0cdpdk \u7684\u793a\u4f8b\u7a0b\u5e8f\u5e94\u8be5\u4e5f\u4e0d\u4f1a\u94fe\u63a5\u9a71\u52a8\u521d\u59cb\u5316\u6784\u9020\u51fd\u6570\uff0c\u4f46\u4e8b\u5b9e\u662f dpdk \u80fd\u591f\u6210\u529f\u94fe\u63a5\uff0c\u6211\u6000\u7591\u53ef\u80fd\u4e0e\u67d0\u4e9b\u7f16\u8bd1\u53c2\u6570\u6709\u5173\u3002\\n\\n## dpdk \u793a\u4f8b\u7a0b\u5e8f\u80fd\u591f\u6210\u529f\u94fe\u63a5 .a \u4e2d\u9a71\u52a8\u521d\u59cb\u5316\u51fd\u6570\u7684\u539f\u56e0\uff1f\\n\\n\u7f16\u8bd1 l2fwd\uff0c\u89c2\u5bdf\u7f16\u8bd1\u53c2\u6570\u5f97\u5230\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\n```bash\\ngcc -m64 -pthread -fPIC  -march=core2 -DRTE_MACHINE_CPUFLAG_SSE -DRTE_MACHINE_CPUFLAG_SSE2 -DRTE_MACHINE_CPUFLAG_SSE3 -DRTE_MACHINE_CPUFLAG_SSSE3  -I/tmp/dpdk-16.04/examples/l2fwd/build/include -I/tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include -include /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include/rte_config.h -O3 -W -Wall -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wold-style-definition -Wpointer-arith -Wcast-align -Wnested-externs -Wcast-qual -Wformat-nonliteral -Wformat-security -Wundef -Wwrite-strings  -Wl,-Map=l2fwd.map,--cref -o l2fwd main.o -Wl,--no-as-needed -Wl,-export-dynamic -L/tmp/dpdk-16.04/examples/l2fwd/build/lib -L/tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/lib  -L/tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/lib -Wl,--whole-archive -Wl,-lrte_distributor -Wl,-lrte_reorder -Wl,-lrte_kni -Wl,-lrte_pipeline -Wl,-lrte_table -Wl,-lrte_port -Wl,-lrte_timer -Wl,-lrte_hash -Wl,-lrte_jobstats -Wl,-lrte_lpm -Wl,-lrte_power -Wl,-lrte_acl -Wl,-lrte_meter -Wl,-lrte_sched -Wl,-lrte_vhost -Wl,-lm -Wl,-lrt -Wl,--start-group -Wl,-lrte_kvargs -Wl,-lrte_mbuf -Wl,-lrte_ip_frag -Wl,-lethdev -Wl,-lrte_cryptodev -Wl,-lrte_mempool -Wl,-lrte_ring -Wl,-lrte_eal -Wl,-lrte_cmdline -Wl,-lrte_cfgfile -Wl,-lrte_pmd_bond -Wl,-lrte_pmd_vmxnet3_uio -Wl,-lrte_pmd_virtio -Wl,-lrte_pmd_cxgbe -Wl,-lrte_pmd_enic -Wl,-lrte_pmd_i40e -Wl,-lrte_pmd_ice -Wl,-lrte_pmd_fm10k -Wl,-lrte_pmd_ixgbe -Wl,-lrte_pmd_e1000 -Wl,-lrte_pmd_ena -Wl,-lrte_pmd_ngbe -Wl,-lrte_pmd_txgbe -Wl,-lrte_pmd_ring -Wl,-lrte_pmd_af_packet -Wl,-lrte_pmd_null -Wl,-lrte_pmd_null_crypto -Wl,-lrte_pmd_vhost -Wl,-ldl -Wl,--end-group -Wl,--no-whole-archive\\n```\\n\\n\u6392\u67e5\u786e\u5b9a\u76f8\u5173\u7684\u7f16\u8bd1\u53c2\u6570\u4e3a --whole-archive \u4e0e --no-whole-archive\uff0c\u4ece ld \u547d\u4ee4\u7684 manual \u4e2d\u627e\u5230\u4e86\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\n>--whole-archive    \\n>For each archive mentioned on the command line after the --whole-archive option, include every object filein the archive in the link, rather than searching the archive for the required object files. This is normally used to turn an archive file into a shared library, forcing every object to be included in the resulting shared library.This option may be used more than once.\\n>\\n>--no-whole-archive     \\n>Turn off the effect of the --whole-archive option for subsequent archive files.\\n\\n--whole-archive \u53c2\u6570\u4e4b\u540e\u7684\u5e93\u6587\u4ef6\u5176\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u90fd\u4f1a\u88ab\u94fe\u63a5\uff0c\u800c\u4e0d\u662f\u53ea\u94fe\u63a5\u90a3\u4e9b\u9700\u8981\u7684\u5185\u5bb9\u3002--no-whole-archive \u7528\u6765\u5173\u95ed --whole-archive \u529f\u80fd\u3002\\n\\n## \u89e3\u51b3\u65b9\u6cd5\\n\\n\u65e2\u7136 --whole-archive \u4f1a\u8ba9\u94fe\u63a5\u5668\u94fe\u63a5\u6b64\u53c2\u6570\u4e4b\u540e\u7684\u5e93\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\uff0c\u53ea\u9700\u8981\u5c06\u6784\u9020\u51fd\u6570\u6240\u5728\u7684\u9759\u6001\u5e93\u94fe\u63a5\u53c2\u6570\u653e\u5230 --whole-archive \u4e4b\u540e\u5373\u53ef\uff0c\u540c\u65f6\u4e3a\u4e86\u907f\u514d\u5bf9\u5176\u5b83\u94fe\u63a5\u5e93\u7684\u5f71\u54cd\uff0c\u6307\u5b9a --no-whole-archive \u6765\u5173\u95ed --no-whole-archive\u3002\\n\\n\u6d4b\u8bd5\u8fc7\u7a0b\u5982\u4e0b\uff1a\\n\\n```bash\\n$ gcc hello.c -o hello -L . -Wl,--whole-archive -ltest -Wl,--no-whole-archive\\n$ ./hello\\nregister dumpops\\nregister dumpops\\n```\\n\\n## \u4e00\u70b9\u70b9\u8054\u60f3\\n\\n\u5728 [rt-thread \u4f7f\u7528\u5fc3\u5f97](https://blog.csdn.net/Longyu_wlz/article/details/82975871?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161259392816780262580112%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D&request_id=161259392816780262580112&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-82975871.pc_v1_rank_blog_v1&utm_term=rtthread) \u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u63cf\u8ff0\u4e86\u4e00\u79cd\u7c7b\u4f3c\u7684\u5b9e\u73b0\u3002\\n\\n\u8fd9\u79cd\u5b9e\u73b0\u901a\u8fc7\u4fee\u6539\u94fe\u63a5\u811a\u672c\u5b8c\u6210\u3002\u901a\u8fc7\u5c06\u521d\u59cb\u5316\u51fd\u6570\u7684\u5730\u5740\u653e\u5230\u6307\u5b9a\u7684 section \u4e2d\uff0c\u5e76\u5728\u94fe\u63a5\u811a\u672c\u4e2d\u5728\u6b64 section \u524d\u540e\u6dfb\u52a0\u951a\u70b9\u5b9e\u73b0\u3002\\n\\n\u521d\u59cb\u5316\u7684\u65f6\u5019\u904d\u5386 section \u4e2d\u7684\u6240\u6709\u51fd\u6570\u6307\u9488\uff0c\u8c03\u7528\u4e4b\u5c31\u5b8c\u6210\u4e86\u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5e38\u89c1\u4e8e\u5d4c\u5165\u5f0f\u5b9e\u65f6\u7cfb\u7edf\u521d\u59cb\u5316\u7684\u5b9e\u73b0\u4e2d\uff0c\u5728 pc \u4e0a\u5f88\u5c11\u4f7f\u7528\u3002"},{"id":"/dpdk/igb_uio.ko \u7684 md5sum \u4e3a\u5565\u53c8\u53d8\u5316\u4e86\uff1f","metadata":{"permalink":"/longyu.github.io/blog/dpdk/igb_uio.ko \u7684 md5sum \u4e3a\u5565\u53c8\u53d8\u5316\u4e86\uff1f","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/igb_uio.ko \u7684 md5sum \u4e3a\u5565\u53c8\u53d8\u5316\u4e86\uff1f.md","source":"@site/blog/dpdk/igb_uio.ko \u7684 md5sum \u4e3a\u5565\u53c8\u53d8\u5316\u4e86\uff1f.md","title":"dpdk/igb_uio.ko \u7684 md5sum \u4e3a\u5565\u53c8\u53d8\u5316\u4e86\uff1f","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":5.82,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/gcc constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u672a\u88ab\u94fe\u63a5\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/gcc constructor \u5c5e\u6027\u4fee\u9970\u7684\u6784\u9020\u51fd\u6570\u672a\u88ab\u94fe\u63a5\u95ee\u9898"},"nextItem":{"title":"dpdk/l2fwd \u652f\u6301 x710 \u901a\u8fc7 fdir \u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587","permalink":"/longyu.github.io/blog/dpdk/l2fwd \u652f\u6301 x710 \u901a\u8fc7 fdir \u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n\u6700\u8fd1\u5728\u5408\u4ee3\u7801\u5230 kni \u6a21\u5757\u540e\uff0c\u91cd\u65b0\u7f16\u8bd1\u53d1\u5e03 dpdk\uff0c\u53d1\u73b0 **igb_uio.ko md5sum \u4e5f\u53d8\u5316\u4e86**\u3002\\n\\n\u8fd9\u4e2a\u95ee\u9898\u4e5f\u9047\u5230\u8fc7\u597d\u591a\u6b21\uff0c\u4f46\u662f\u4e00\u76f4\u6ca1\u6709\u6df1\u7a76\u8fc7\u3002\u4eca\u5929\u518d\u6b21\u9047\u5230\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u8fd9\u6b21\u5c31\u4e0d\u80fd\u653e\u8fc7\u5b83\u4e86\uff01\\n\\n## \u6ca1\u6709\u53d8\u5316\u7684\u5185\u5bb9\\n\u9488\u5bf9 igb_uio.ko md5sum \u53d8\u5316\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u6761\u4ef6\u4fdd\u6301\u4e0d\u53d8\uff1a\\n\\n1. igb_uio.c \u6e90\u7801\\n2. \u5185\u6838\u5934\u6587\u4ef6\\n3. \u7f16\u8bd1\u5668\u7248\u672c\\n\\n\u6709\u4e86\u4e0a\u9762\u8fd9\u4e09\u4e2a\u6761\u4ef6\uff0cigb_uio.ko \u8bb2\u9053\u7406\u4e0d\u5e94\u8be5\u53d8\u5316\u3002\u53ef\u662f\u5b83\u786e\u786e\u5b9e\u5b9e\u53d8\u5316\u4e86\uff0c\u90a3\u53c8\u662f\u4ec0\u4e48\u56e0\u7d20\u5f71\u54cd\u5462\uff1f\u96be\u9053\u662f ko \u4e2d\u5b58\u5728\u65f6\u95f4\u6233\u7684\u539f\u56e0\uff1f\\n\\n## \u7528\u5de5\u5177\u6269\u5927\u8f93\u5165\u4fe1\u606f\u6765\u5bf9\u6bd4\\n\u7531\u4e8e ko \u6587\u4ef6\u683c\u5f0f\u662f elf \u683c\u5f0f\uff0c\u6211\u9009\u62e9\u4f7f\u7528 objdump \u4e0e readelf \u6765\u4ece\u4e24\u4e2a md5sum \u4e0d\u540c\u7684 igb_uio.ko \u7248\u672c\u4e0a\u83b7\u53d6\u66f4\u591a\u7684\u4fe1\u606f\u3002\\n### objdump -d \u5bf9\u6bd4\\nobjdump -d \u5bf9\u6bd4\u53d1\u73b0**\u751f\u6210\u7684\u53cd\u6c47\u7f16\u6307\u4ee4\u5b8c\u5168\u4e00\u81f4**\uff01\u8fd9**\u7b26\u5408\u4ee3\u7801\u6ca1\u6709\u4fee\u6539\u8fd9\u4e00\u6761\u4ef6**\u3002\\n\\n### readelf -a \u5bf9\u6bd4\\nreadelf -a \u5bf9\u6bd4\u53d1\u73b0\u6709\u5f88\u591a\u5dee\u522b\uff0c\u800c\u5176\u4e2d\u53d8\u5316\u5f88\u591a\u7684\u5185\u5bb9\u90fd\u6307\u5411\u4e86 **debug_str** \u5b57\u6bb5\uff0c\u90a3 **ko \u4e2d\u7684\u8fd9\u4e9b\u5b57\u6bb5\u662f\u548b\u751f\u6210\u7684\u5462\uff1f**\\n\\n## CONFIG_DEBUG_INFO \u914d\u7f6e\\n\u7f51\u4e0a\u641c\u7d22\u8fd9\u4e2a **debug_str** \u83b7\u77e5\u8fd9\u4e2a\u5185\u5bb9\u4e0e\u5185\u6838\u7684 **CONFIG_DEBUG_INFO** \u914d\u7f6e\u6709\u5173\u7cfb\uff0c\u5f53\u5185\u6838\u4f7f\u80fd\u4e86\u8fd9\u4e2a\u914d\u7f6e\u540e\uff0c\u751f\u6210\u7684 ko \u4e2d\u4f1a\u5e26\u6709\u8c03\u8bd5\u4fe1\u606f\u3002\\n\\n\u9996\u5148\u786e\u8ba4\u4e86\u4e0b\u6211\u4eec\u7f16\u8bd1\u7684\u5185\u6838\u4e2d\u90fd**\u5f00\u542f\u4e86\u8fd9\u4e2a\u914d\u7f6e**\uff0c\u7b26\u5408\u9884\u671f\uff01\\n\\n## objdump -s \u83b7\u53d6\u5230\u7684\u4fe1\u606f\\n\u6709\u4e86\u4e0a\u9762\u7684\u57fa\u7840\u540e\uff0c\u6211\u901a\u8fc7\u6267\u884c **objdump -s igb_uio.ko** \u7ee7\u7eed\u6269\u5c55\u8f93\u5165\u4fe1\u606f\uff0c\u8fd9\u6b21\u6211\u6ce8\u610f\u5230\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\n```\\nContents of section .debug_line:\\n 0000 240a0000 02007407 00000101 fb0e0d00  $.....t.........\\n 0010 01010101 00000001 0000012f 686f6d65  .........../home\\n 0020 2f77616e 676c6f6e 677a6865 6e672f62  /wanglongzheng/b\\n 0030 75696c64 5f666f72 5f72656c 65617365  uild_for_release\\n 0040 2f647064 6b2d3136 2e30342d 76322d6c  /dpdk-16.04-v2-l\\n```\\n\u8fd9\u4e2a\u4fe1\u606f\u4e2d\u8fd8\u8bb0\u5f55\u4e86\u7f16\u8bd1\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u5f88\u663e\u7136\u5f53\u8fd9\u4e2a\u8def\u5f84\u4fee\u6539\u540e\uff0cko \u6587\u4ef6\u7684\u5185\u5bb9\u4f1a\u6539\u53d8\uff0cmd5sum \u4e5f\u968f\u4e4b\u6539\u53d8\u3002\\n\\n## \u662f dpdk \u6e90\u7801\u8def\u5f84\u53d8\u5316\u5bfc\u81f4 igb_uio.ko md5sum \u53d8\u5316\u5417\uff1f\\nobjdump -s \u770b\u5230\u7684\u4fe1\u606f\u80fd\u591f\u8bf4\u660e\uff0cdpdk \u6e90\u7801\u8def\u5f84\u53d8\u5316\u4f1a\u5bfc\u81f4 igb_uio.ko \u6587\u4ef6\u7684 md5sum \u53d8\u5316\u3002 \u57fa\u4e8e\u8fd9\u4e00\u4e8b\u5b9e\uff0c\u4e0d\u96be\u786e\u5b9a\u6211**\u672c\u6b21 release dpdk \u8def\u5f84\u5e94\u8be5\u4e0e\u4e0a\u4e00\u6b21\u6709\u6240\u533a\u522b**\u3002\\n\\n\u6211\u4ed4\u7ec6\u6d4f\u89c8\u63d0\u4ea4\u8bb0\u5f55\uff0c\u53d1\u73b0\u7f16\u8bd1\u8def\u5f84\u786e\u5b9e\u6709\u5dee\u522b\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u662f**\u5145\u5206\u6761\u4ef6**\uff0c\u4e5f\u8bb8\u53ea\u662f**\u5176\u4e2d\u7684\u4e00\u4e2a**\u53d8\u5316\u7f62\u4e86\uff0c\u65f6\u95f4\u6233\u8fd9\u4e9b\u4e5f\u53ef\u80fd\u5b58\u5728\u3002\\n\\n\u65e2\u7136\u6211\u5df2\u7ecf\u786e\u5b9a\u4e86\u7f16\u8bd1\u8def\u5f84\u7684\u53d8\u5316\u4f1a\u5bfc\u81f4 igb_uio.ko \u6587\u4ef6\u7684 md5sum \u53d8\u5316\uff0c\u90a3\u4e48\u53ea\u8981\u4f7f\u7528\u540c\u4e00\u4e2a\u7f16\u8bd1\u8def\u5f84\u7f16\u8bd1\u540e igb_uio.ko md5sum \u4e0e\u4ed3\u5e93\u4e2d\u7684\u7248\u672c\u4e00\u81f4\u5c31\u80fd\u591f\u8bf4\u660e\u786e\u5b9e\u53ea\u6709\u7f16\u8bd1\u8def\u5f84\u8fd9\u4e00\u4e2a\u56e0\u7d20\u7684\u5f71\u54cd\u3002\\n\\n\u4f7f\u7528\u524d\u51e0\u4e2a dpdk release \u7248\u672c\u7684\u7f16\u8bd1\u8def\u5f84\u91cd\u65b0\u7f16\u8bd1\uff0c\u679c\u7136\u7f16\u8bd1\u51fa\u4e86\u4e0e\u4ed3\u5e93\u4e2d igb_uio.ko md5sum \u76f8\u540c\u7684\u7248\u672c\u3002\\n\\n## \u5982\u4f55\u8ba9 igb_uio.ko \u6e90\u7801\u4e0d\u53d8\u5316\uff0crelease \u5185\u5bb9\u4e5f\u4e0d\u53d8\u5316\uff1f\\n\\n\u57fa\u4e8e\u4e0a\u9762\u7684\u8ba4\u8bc6\uff0c\u8981\u8ba9 igb_uio.ko \u5728**\u6e90\u7801\u4e0d\u53d8\u5316**\u7684\u60c5\u51b5\u4e0b\u4fdd\u6301 release \u5185\u5bb9\u4e0d\u53d8\uff0c\u9700\u8981\u4fdd\u8bc1\u5982\u4e0b\u51e0\u4e2a\u56e0\u7d20\u56fa\u5b9a\uff1a\\n\\n1. \u7f16\u8bd1\u5668\u7248\u672c\u4e00\u81f4\\n2. \u5185\u6838\u914d\u7f6e\u4e00\u81f4\\n3. \u5728\u5185\u6838 config \u5f00\u542f\u4e86 CONFIG_DEBUG_INFO \u65f6\uff0c\u7f16\u8bd1\u8def\u5f84\u4e00\u81f4\\n4. \u7f16\u8bd1\u73af\u5883\u4e2d\u5bf9\u7f16\u8bd1\u6709\u5f71\u54cd\u7684\u73af\u5883\u53d8\u91cf\u8bbe\u5b9a\u5185\u5bb9\u4e00\u81f4\\n\\n\u7b2c\u56db\u70b9\u662f\u6211\u989d\u5916\u6dfb\u52a0\u7684\u5185\u5bb9\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u4f7f\u7528\u81ea\u52a8\u7f16\u8bd1\u5de5\u5177\u7f16\u8bd1 dpdk\uff0c\u73af\u5883\u53d8\u91cf\u5f71\u54cd\u4e0d\u5927\uff0c\u4f46\u5b9e\u9645\u4e0a\u73af\u5883\u53d8\u91cf\u4e5f\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6761\u4ef6\uff0c\u6545\u800c\u4e5f\u5217\u4e3e\u51fa\u6765\u3002\\n## \u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u5f0f\uff1f\\n\u5176\u5b9e\u5bf9\u4e8e igb_uio \u8fd9\u79cd\u5185\u6838\u6a21\u5757\uff0c\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u5f0f\u662f\u5c06\u5b83\u5408\u5165\u5230\u7ef4\u62a4\u7684\u5185\u6838\u4ee3\u7801\u4e2d\uff0c\u8fd9\u6837\u6bcf\u6b21\u7f16\u8bd1\u5185\u6838\u7684\u65f6\u5019\u5c31\u4f1a\u81ea\u52a8 release\uff0c\u4e5f\u8bb8\u4e00\u4e2a\u66f4\u597d\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 vfio \u8fd9\u79cd\u65b9\u5f0f\uff0cvfio \u636e\u6211\u4e86\u89e3\u8981\u6bd4 igb_uio \u7684\u6743\u9650\u63a7\u5236\u66f4\u7075\u6d3b\u4e00\u4e9b\uff0c\u800c\u5176\u4ee3\u7801\u672c\u8eab\u5c31\u5728\u5185\u6838\u6e90\u7801\u6811\u4e2d\uff0c\u53ea\u9700\u8981\u5f00\u542f\u76f8\u5173\u7684\u5185\u6838\u914d\u7f6e\u5c31\u884c\u4e86\u3002\\n\\n## \u603b\u7ed3\\n\u672c\u6587\u63cf\u8ff0\u4e86 igb_uio.ko md5sum \u53d8\u5316\u7684\u95ee\u9898\uff0c\u5c3d\u7ba1\u8fd9\u4e00\u95ee\u9898\u5f97\u5230\u4e86\u89e3\u51b3\uff0c\u5374\u610f\u4e49\u4e0d\u5927\u3002\\n\\n\u4e00\u4e2a\u66f4\u52a0\u5408\u7406\u7684\u65b9\u5f0f\u5e94\u5f53\u662f\u5c06 igb_uio \u4ece dpdk \u4e2d\u5265\u79bb\u51fa\u6765\u5408\u5165\u5185\u6838\u6e90\u7801\uff0c\u6216\u8005\u4f7f\u7528 vfio \u8fd9\u79cd\u66ff\u4ee3\u65b9\u5f0f\u3002\\n\\ndpdk \u4e2d\u7684 igb_uio \u5176\u6e90\u7801\u4f9d\u8d56\u67d0\u51e0\u4e2a dpdk \u5185\u90e8\u5934\u6587\u4ef6\uff0c\u8fd9\u662f\u4e0d\u5408\u7406\u7684\u3002\u8fd9\u662f\u4e00\u79cd\u8026\u5408\u6027\uff0c\u8fd9\u4e00\u8026\u5408\u6027\u5e26\u6765\u7684\u5f71\u54cd\u662f\u6211\u4eec\u4e0d\u5f97\u4e0d\u8003\u8651 igb_uio.ko \u7684\u7248\u672c\u4e0e dpdk \u4e2d\u7684\u5934\u6587\u4ef6\u7248\u672c\u662f\u5426\u4e00\u81f4\uff0c\u589e\u52a0\u4e86\u7ef4\u62a4\u5de5\u4f5c\u7684\u6210\u672c\uff0c\u8fd9\u4e00\u70b9\u503c\u5f97\u601d\u8003\uff01"},{"id":"/dpdk/l2fwd \u652f\u6301 x710 \u901a\u8fc7 fdir \u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587","metadata":{"permalink":"/longyu.github.io/blog/dpdk/l2fwd \u652f\u6301 x710 \u901a\u8fc7 fdir \u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/l2fwd \u652f\u6301 x710 \u901a\u8fc7 fdir \u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587.md","source":"@site/blog/dpdk/l2fwd \u652f\u6301 x710 \u901a\u8fc7 fdir \u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587.md","title":"dpdk/l2fwd \u652f\u6301 x710 \u901a\u8fc7 fdir \u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":1.595,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/igb_uio.ko \u7684 md5sum \u4e3a\u5565\u53c8\u53d8\u5316\u4e86\uff1f","permalink":"/longyu.github.io/blog/dpdk/igb_uio.ko \u7684 md5sum \u4e3a\u5565\u53c8\u53d8\u5316\u4e86\uff1f"},"nextItem":{"title":"dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n\u9700\u8981\u901a\u8fc7 x710 \u7f51\u5361 fdir \u529f\u80fd\u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587\uff0c\u76f4\u63a5\u5728\u7f51\u5361\u786c\u4ef6\u4e0a\u4e22\u5f03\u3002\\n\\n## \u89e3\u51b3\u65b9\u6848\\n\u901a\u8fc7\u4fee\u6539 l2fwd \u4ee3\u7801\u6765\u9a8c\u8bc1\uff0c\u9700\u8981\u6ce8\u610f\u5f53\u5f00\u542f\u4e86 fdir \u7684\u65f6\u5019 hash \u529f\u80fd\u9700\u8981\u5173\u95ed\u3002\\n\\n### 1. port_conf \u7684\u914d\u7f6e\uff0c\u7528\u4e8e dev_configure\\n```c\\nstatic const struct rte_eth_conf port_conf = {\\n    .rxmode = {\\n        .split_hdr_size = 0,\\n        .header_split   = 0, /**< Header Split disabled */\\n        .hw_ip_checksum = 0, /**< IP checksum offload disabled */\\n        .hw_vlan_filter = 0, /**< VLAN filtering disabled */\\n        .jumbo_frame    = 0, /**< Jumbo Frame Support disabled */\\n        .hw_strip_crc   = 0, /**< CRC stripped by hardware */\\n    },\\n    .txmode = {\\n        .mq_mode = ETH_MQ_TX_NONE,\\n    },\\n    .fdir_conf = {\\n        .mode = RTE_FDIR_MODE_PERFECT,\\n        .pballoc = RTE_FDIR_PBALLOC_64K,\\n        .status = RTE_FDIR_REPORT_STATUS,\\n        .mask = {\\n            .vlan_tci_mask = 0x0,\\n            .ipv4_mask     = {\\n                .src_ip = 0xFFFFFFFF,\\n                .dst_ip = 0xFFFFFFFF,\\n            },\\n            .ipv6_mask     = {\\n                .src_ip = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},\\n                .dst_ip = {0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},\\n            },\\n            .src_port_mask = 0xFFFF,\\n            .dst_port_mask = 0xFFFF,\\n            .mac_addr_byte_mask = 0xFF,\\n            .tunnel_type_mask = 1,\\n            .tunnel_id_mask = 0xFFFFFFFF,\\n        },\\n        .drop_queue = 127,\\n    },\\n\\n};\\n```\\n\\n### 2. rte_eth_fdir_filter_info \u4e0e rte_eth_fdir_filter \u5b57\u6bb5\u586b\u5145\\n```c\\n    struct rte_eth_fdir_filter_info info;\\n\\n    memset(&info, 0, sizeof(info));\\n    info.info_type = RTE_ETH_FDIR_FILTER_INPUT_SET_SELECT;\\n    info.info.input_set_conf.flow_type = RTE_ETH_FLOW_NONFRAG_IPV4_UDP;\\n    info.info.input_set_conf.field[0] = RTE_ETH_INPUT_SET_NONE;\\n    info.info.input_set_conf.inset_size = 0;\\n    info.info.input_set_conf.op = RTE_ETH_INPUT_SET_SELECT;\\n\\n    struct rte_eth_fdir_filter arg_udpport = {\\n        .soft_id = 1,\\n        .input   = {\\n            .flow_type = RTE_ETH_FLOW_NONFRAG_IPV4_UDP,\\n        },\\n        .action  = {\\n            .rx_queue  =  0,\\n            .behavior  = RTE_ETH_FDIR_REJECT,\\n            .report_status = RTE_ETH_FDIR_REPORT_ID,\\n        },\\n    };\\n```\\n\\n### 3. \u8c03\u7528 rte_eth_dev_filter_ctrl \u5b8c\u6210\u914d\u7f6e\u8fc7\u7a0b\\n```c\\n    ret = rte_eth_dev_filter_ctrl(portid, RTE_ETH_FILTER_FDIR, RTE_ETH_FILTER_SET, &info);\\n    printf(\\"ret is %d\\\\n\\", ret);\\n    ret = rte_eth_dev_filter_ctrl(portid, RTE_ETH_FILTER_FDIR,RTE_ETH_FILTER_ADD, &arg_udpport);\\n    printf(\\"ret is %d\\\\n\\", ret);\\n```\\n\\n### 4. \u7a0b\u5e8f\u9000\u51fa\u524d\u6307\u5b9a RTE_ETH_FILTER_FLUSH \u53c2\u6570\uff0c\u8c03\u7528 rte_eth_dev_filter_ctrl \u6765\u6e05\u7a7a\u914d\u7f6e\uff01"},{"id":"/dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898.md","source":"@site/blog/dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898.md","title":"dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":9,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/l2fwd \u652f\u6301 x710 \u901a\u8fc7 fdir \u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587","permalink":"/longyu.github.io/blog/dpdk/l2fwd \u652f\u6301 x710 \u901a\u8fc7 fdir \u8fc7\u6ee4\u975e\u5206\u7247 ipv4 udp \u62a5\u6587"},"nextItem":{"title":"dpdk \u4e2d mbuf \u7684\u7ed3\u6784","permalink":"/longyu.github.io/blog/dpdk/\u4e0d\u61c2 dpdk mbuf \u7ed3\u6784\uff1f\u6b64\u7bc7\u6587\u7ae0\u5e26\u4f60\u8d85\u795e"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n\u5f53 rss_hf \u4e2d\u914d\u7f6e\u4e86 **ETH_RSS_FRAG_IPV4** \u4e0e **ETH_RSS_NONFRAG_IPV4_TCP** \u53c2\u6570\u540e\uff0c\u4e00\u4e9b\u8fde\u63a5\u7684\u5206\u7247\u62a5\u6587\u4f1a\u88ab hash \u5230\u5176\u5b83\u961f\u5217\u4e2d\uff0c**\u7531\u4e8e\u8fd9\u4e9b\u5206\u7247\u7684\u62a5\u6587\u6ca1\u6709 L4 port number**\u3002\\n\\n\u5f53\u4e0d\u914d\u7f6e **ETH_RSS_NONFRAG_IPV4_TCP** \u65f6\uff0c**ETH_RSS_FRAG_IPV4** \u54c8\u5e0c\u51fd\u6570\u4e0d\u4f1a\u5e94\u7528\u5230\u975e\u5206\u7247\u62a5\u6587\u4e0a\uff0c\u8fd9\u4e9b\u62a5\u6587\u5c06\u4f1a\u88ab\u6295\u9012\u5230\u961f\u5217 0\u3002\\n\\n## \u5f02\u5e38 hash \u914d\u7f6e \\n \u914d\u7f6e\u5185\u5bb9\u5982\u4e0b\uff1a\\n ```c\\n        #define RSS_X710_KEY_SIZE 52\\n\\n          static unsigned char tr_rss_key_x710[] = {\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a,\\n        };\\n   \\n        port_conf->rxmode.mq_mode = ETH_MQ_RX_RSS;\\n\\n        port_conf->rx_adv_conf.rss_conf.rss_key = tr_rss_key_x710;\\n        port_conf->rx_adv_conf.rss_conf.rss_hf = ETH_RSS_PROTO_MASK;\\n        port_conf->rx_adv_conf.rss_conf.rss_key_len = RSS_X710_KEY_SIZE;\\n}\\n ```\\n\u8bbe\u7f6e\u4e0a\u9762\u7684 rss_key\uff0c\u4e14 rss_hf \u914d\u7f6e **ETH_RSS_PROTO_MASK**\uff0c\u80fd hash \u5230\u591a\u961f\u5217\uff0c**\u4e0d\u5206\u7247\u62a5\u6587\u6b63\u5e38\uff0ctcp \u5206\u7247\u62a5\u6587\u5b58\u5728\u95ee\u9898**\u3002\\n\\n## \u6d41\u91cf\u914d\u6bd4\\n**tcp \u975e\u5206\u7247\u6d41\uff0c\u6e90 ip \u4e0e\u76ee\u7684 ip 100:100 \u5206\u5e03\u3002**\\n\\n## \u6d4b\u8bd5\u9a8c\u8bc1\u8fc7\u7a0b\\n\u4e0b\u9762\u7684\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u9996\u5148\u6253 **100:100 \u7684 tcp \u975e\u5206\u7247\u6d41\uff0c\u80fd\u591f hash \u5230\u591a\u961f\u5217\u540e\u4fee\u6539\u4e3a\u6709\u5206\u7247\u7684 tcp \u6d41\uff0c\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u3002**\\n\\n**1.\u4f7f\u7528\u7f51\u5361\u9ed8\u8ba4\u7684 rss_key\uff0c\u4e14\u4fee\u6539 rss_hf \u4e3a ETH_RSS_IPV4 | ETH_RSS_IPV6**\\n\\n\u6d4b\u8bd5\u7ed3\u679c\uff1a\u4e0d\u80fd hash \u5230\u591a\u961f\u5217\u3002\\n\\n**2.\u4f7f\u7528\u9ed8\u8ba4\u7684 rss_key \u5e76\u914d\u7f6e\u7f51\u5361 hash_filter\uff0c\u4ee3\u7801\u6765\u81ea google**\\n\\n\u8865\u4e01\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nstruct rte_eth_conf new_port_conf = {\\n  .rxmode = {\\n    .mq_mode = ETH_MQ_RX_RSS,\\n  },\\n  .rx_adv_conf = {\\n    .rss_conf = {\\n        .rss_hf = ETH_RSS_IP |\\n              ETH_RSS_TCP |\\n              ETH_RSS_UDP |\\n              ETH_RSS_SCTP,\\n    }\\n   },\\n};\\n\\n\\n#define UINT32_BIT (CHAR_BIT * sizeof(uint32_t))\\nint sym_hash_enable(int port_id, uint32_t ftype, enum rte_eth_hash_function function)\\n{\\n    struct rte_eth_hash_filter_info info;\\n    int ret = 0;\\n    uint32_t idx = 0;\\n    uint32_t offset = 0;\\n\\n    memset(&info, 0, sizeof(info));\\n\\n    ret = rte_eth_dev_filter_supported(port_id, RTE_ETH_FILTER_HASH);\\n    if (ret < 0) {\\n        printf(\\"RTE_ETH_FILTER_HASH not supported on port: %d\\",\\n                         port_id);\\n        return ret;\\n    }\\n\\n    info.info_type = RTE_ETH_HASH_FILTER_GLOBAL_CONFIG;\\n    info.info.global_conf.hash_func = function;\\n\\n    idx = ftype / UINT32_BIT;\\n    offset = ftype % UINT32_BIT;\\n    info.info.global_conf.valid_bit_mask[idx] |= (1ULL << offset);\\n    info.info.global_conf.sym_hash_enable_mask[idx] |=\\n                        (1ULL << offset);\\n\\n    ret = rte_eth_dev_filter_ctrl(port_id, RTE_ETH_FILTER_HASH,\\n                                  RTE_ETH_FILTER_SET, &info);\\n    if (ret < 0)\\n    {\\n        printf(\\"Cannot set global hash configurations\\"\\n                        \\"on port %u\\", port_id);\\n        return ret;\\n    }\\n\\n    return 0;\\n}\\n\\nint sym_hash_set(int port_id, int enable)\\n{\\n    int ret = 0;\\n    struct rte_eth_hash_filter_info info;\\n\\n    memset(&info, 0, sizeof(info));\\n\\n    ret = rte_eth_dev_filter_supported(port_id, RTE_ETH_FILTER_HASH);\\n    if (ret < 0) {\\n        printf(\\"RTE_ETH_FILTER_HASH not supported on port: %d\\",\\n                         port_id);\\n        return ret;\\n    }\\n\\n    info.info_type = RTE_ETH_HASH_FILTER_SYM_HASH_ENA_PER_PORT;\\n    info.info.enable = enable;\\n    ret = rte_eth_dev_filter_ctrl(port_id, RTE_ETH_FILTER_HASH,\\n                        RTE_ETH_FILTER_SET, &info);\\n\\n    if (ret < 0)\\n    {\\n        printf(\\"Cannot set symmetric hash enable per port \\"\\n                        \\"on port %u\\", port_id);\\n        return ret;\\n    }\\n\\n    return 0;\\n}\\n```\\n\\n**dev_configure** \u4f7f\u7528 **new_port_conf** \u914d\u7f6e\uff0c\u5e76\u5728 **dev_configure** \u524d\u6267\u884c\u5982\u4e0b\u4ee3\u7801\uff1a\\n\\n```c\\n                sym_hash_enable(portid, RTE_ETH_FLOW_NONFRAG_IPV4_TCP, RTE_ETH_HASH_FUNCTION_TOEPLITZ);\\n                sym_hash_enable(portid, RTE_ETH_FLOW_NONFRAG_IPV4_UDP, RTE_ETH_HASH_FUNCTION_TOEPLITZ);\\n                sym_hash_enable(portid, RTE_ETH_FLOW_FRAG_IPV4, RTE_ETH_HASH_FUNCTION_TOEPLITZ);\\n                sym_hash_enable(portid, RTE_ETH_FLOW_NONFRAG_IPV4_SCTP, RTE_ETH_HASH_FUNCTION_TOEPLITZ);\\n                sym_hash_enable(portid, RTE_ETH_FLOW_NONFRAG_IPV4_OTHER, RTE_ETH_HASH_FUNCTION_TOEPLITZ);\\n\\n                sym_hash_set(portid, 1);\\n```\\n\\n\u6d4b\u8bd5\u7ed3\u679c\uff1a**\u80fd\u591f hash \u5f00\uff0c\u4f46\u662f tcp \u5206\u7247\u62a5\u6587\u4ecd\u65e7\u6709\u95ee\u9898\u3002**\\n\\n\\n3.**\u6d4b\u8bd5\u4f7f\u7528 0x6d\u30010x5a .... \u7684 rss_key\uff0c\u4fee\u6539 rss_hf flag \u5185\u5bb9\u4e3a ETH_RSS_IPV4 | ETH_RSS_IPV6**\\n\\n\u6d4b\u8bd5\u7ed3\u679c\uff1a\u4e0d\u80fd hash \u5230\u591a\u961f\u5217\u3002\\n\\n4.**\u6d4b\u8bd5\u4f7f\u7528\u9ed8\u8ba4\u7684 rss_key\uff0c\u5e76\u5728\u6267\u884c dev_configure \u524d\u6dfb\u52a0 filter_ctrl \u7684\u8865\u4e01\u4ee3\u7801**\\n\\n\u6d4b\u8bd5\u7ed3\u679c\uff1a\u80fd\u591f hash \u5230\u591a\u961f\u5217\uff0ctcp \u5206\u7247\u62a5\u6587 hash \u5f02\u5e38\u3002\\n\\n**5.\u6d4b\u8bd5\u8bbe\u7f6e rss_hf \u4e3a ETH_RSS_IP flag**\\n\\n```c\\n        static unsigned char tr_rss_key_x710[] = {\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a,\\n        };\\n        \\n    #define RSS_X710_KEY_SIZE 52\\n\\n    port_conf->rxmode.mq_mode = ETH_MQ_RX_RSS;\\n    port_conf->rxmode.max_rx_pkt_len = ETHER_MAX_LEN;\\n    port_conf->rxmode.split_hdr_size = 0;\\n    port_conf->rxmode.header_split   = 0; /**< Header Split disabled */\\n    port_conf->rxmode.hw_ip_checksum = 0; /**< IP checksum offload enabled */\\n    port_conf->rxmode.hw_vlan_filter = 0; /**< VLAN filtering disabled */\\n    port_conf->rxmode.hw_vlan_strip  = 0;\\n    port_conf->rxmode.hw_vlan_extend = 0;\\n    port_conf->rxmode.jumbo_frame    = 0; /**< Jumbo Frame Support disabled */\\n    port_conf->rxmode.hw_strip_crc   = 0; /**< CRC stripped by hardware */\\n\\n    port_conf->txmode.mq_mode = ETH_MQ_TX_NONE;\\n\\n    port_conf->rx_adv_conf.rss_conf.rss_key = tr_rss_key_x710;\\n    port_conf->rx_adv_conf.rss_conf.rss_hf = ETH_RSS_IP;\\n    port_conf->rx_adv_conf.rss_conf.rss_key_len = RSS_X710_KEY_SIZE;\\n```\\n\u6d4b\u8bd5\u7ed3\u679c\uff1a\u4e0d\u80fd hash \u5230\u591a\u961f\u5217\u3002\\n\\n6.**\u4e0d\u8bbe\u7f6e rss_key\uff0c\u53ea\u8bbe\u7f6e rss_hf \u4e3a ETH_RSS_PROTO_MASK** \\n\\n\u6d4b\u8bd5\u7ed3\u679c\uff1a\u80fd\u591f hash \u5230\u591a\u961f\u5217\uff0ctcp \u5206\u7247\u62a5\u6587 hash \u5f02\u5e38\u3002\\n\\n**7.\u4e0d\u8bbe\u7f6e rss_key\uff0c\u53ea\u8bbe\u7f6e rss_hf \u4e3a ETH_RSS_IP** \\n\\n\u6d4b\u8bd5\u7ed3\u679c\uff1a\u4e0d\u80fd hash \u5230\u591a\u961f\u5217\u3002\\n\\n8.**\u4e0d\u8bbe\u7f6e rss_key\uff0c\u8bbe\u7f6e rss_hf \u503c\u5982\u4e0b**\uff1a\\n\\n```c\\n        ETH_RSS_NONFRAG_IPV4_TCP | \\\\\\n        ETH_RSS_NONFRAG_IPV4_UDP | \\\\\\n        ETH_RSS_NONFRAG_IPV4_SCTP | \\\\\\n        ETH_RSS_L2_PAYLOAD | \\\\\\n        ETH_RSS_IPV6_TCP_EX\\n```\\n\u6d4b\u8bd5\u7ed3\u679c\uff1a\u80fd\u591f hash \u5230\u591a\u961f\u5217\uff0ctcp \u5206\u7247\u62a5\u6587 hash \u5f02\u5e38\u3002\\n\\n**9.\u4e0d\u8bbe\u7f6e rss_key\uff0c\u8bbe\u7f6e rss_hf \u503c\u5982\u4e0b\uff1a**\\n\\n```c\\n        ETH_RSS_NONFRAG_IPV4_TCP | \\\\\\n        ETH_RSS_NONFRAG_IPV4_UDP | \\\\\\n        ETH_RSS_NONFRAG_IPV4_SCTP)\\n```\\n\u6d4b\u8bd5\u7ed3\u679c\uff1a\u80fd\u591f hash \u5230\u5bf9\u961f\u5217\uff0ctcp \u5206\u7247\u62a5\u6587 hash \u5f02\u5e38\u3002\\n\\n10. \u4e0d\u8bbe\u7f6e rss_key\uff0c\u8bbe\u7f6e rss_hf \u503c\u5982\u4e0b\uff1a \\n```c\\nETH_RSS_NONFRAG_IPV4_TCP\\n```\\n\u6d4b\u8bd5\u7ed3\u679c\uff1a\u80fd\u591f hash \u5230\u591a\u5bf9\u5217\uff0ctcp \u5206\u7247\u62a5\u6587 hash \u5f02\u5e38\u3002\\n\\n## \u6839\u636e\u6d4b\u8bd5\u9879\u76ee\u5f97\u51fa\u7684\u521d\u6b65\u7ed3\u8bba\\n\\n**\u53ea\u6253 tcp \u975e\u5206\u7247\u62a5\u6587\u7684\u60c5\u51b5\u4e0b\uff0crss_hf \u8bbe\u5b9a\u5185\u5bb9\u5fc5\u987b\u5305\u542b ETH_RSS_NONFRAG_IPV4_TCP \u624d\u80fd hash \u5230\u591a\u961f\u5217\uff01**\\n\\n## \u63d0\u95ee\u73af\u8282\\n1.\u771f\u7684\u7406\u89e3\u4e86\u95ee\u9898\u5417\uff1f\\n\\n\u80fd\u591f\u6e05\u6670\u63cf\u8ff0\u95ee\u9898\uff0c\u6ca1\u6709\u504f\u5dee\u3002\\n\\n2.\u6536\u96c6\u5230\u7684\u4fe1\u606f\u4e2d\u6709\u54ea\u4e9b\u53ef\u53c2\u7167\u5185\u5bb9\uff1f\\n\\n**82599 \u4f7f\u7528\u5bf9\u79f0 rss_key \u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e0d\u9700\u8981\u989d\u5916\u914d\u7f6e\uff0c\u95ee\u9898\u6307\u5411 XL710 \u7f51\u5361\u7684\u7279\u6027\u3002**\\n\\n3.\u7f51\u4e0a\u6709\u6ca1\u6709\u76f8\u5173\u4fe1\u606f\uff1f\\n\\n**XL710 \u7684 rss hash \u5b58\u5728\u95ee\u9898\uff0c\u9700\u8981\u914d\u7f6e filter_ctrl \u6765\u4f7f\u80fd\u4e00\u4e9b\u5bc4\u5b58\u5668**\uff0c\u7f51\u4e0a\u627e\u5230\u7684\u4ee3\u7801\u6d4b\u8bd5\u4e0d\u80fd\u89e3\u51b3\u95ee\u9898\uff0c**\u53ef\u80fd\u5b58\u5728\u4ee3\u7801\u672c\u8eab\u95ee\u9898\u53ca\u4f7f\u7528\u95ee\u9898\u4e0a\uff0c\u9700\u8981\u60f3\u65b9\u6cd5\u786e\u8ba4\u3002**\\n\\n4.\u662f\u5426\u80fd\u591f\u4ece\u624b\u518c\u4e2d\u627e\u5230\u4e00\u4e9b\u86db\u4e1d\u9a6c\u8ff9\uff1f\\n\\n\u4f7f\u7528\u624b\u518c\u4e2d\u7684 rss_key \u4ecd\u65e7\u6709\u95ee\u9898\u3002\\n\\n5.\u624b\u518c\u4e2d\u63d0\u5230\u7684 hash key \u7684\u6709\u6548\u6027\u9700\u8981\u786e\u8ba4\\n\\n**\u5f85\u786e\u8ba4**\\n\\n6.\u4ece\u7f51\u4e0a\u8fd8\u80fd\u5426\u6536\u96c6\u5230\u66f4\u591a\u7684\u4fe1\u606f\uff1f\\n\\n\u8fdb\u4e00\u6b65\u641c\u7d22\uff0c\u627e\u5230 [[dpdk-dev] Symmetry for TCP packets on X710 Intel ](https://dev.dpdk.narkive.com/AIj6ALhm/dpdk-dev-symmetry-for-tcp-packets-on-x710-intel) \u8fd9\u4e2a\u94fe\u63a5\u3002\\n\\n## \u4fe1\u606f\u6269\u5145\u73af\u8282\\n\\ndpdk \u5b98\u65b9 bugzilla \u68c0\u7d22\uff1a\\n\\n\u7ed3\u679c\uff1a\u65e0\u76f8\u5173\u5185\u5bb9\\n\\n\\n## \u9488\u5bf9\u5206\u7247\u62a5\u6587 hash \u5b57\u6bb5\u8bbe\u5b9a hash_filter \u6d4b\u8bd5\u9879\u76ee\\n\\n\u4ed4\u7ec6\u9605\u8bfb [[dpdk-dev] Symmetry for TCP packets on X710 Intel ](https://dev.dpdk.narkive.com/AIj6ALhm/dpdk-dev-symmetry-for-tcp-packets-on-x710-intel) \u53d1\u73b0\u4e0e\u6211\u4eec\u9047\u5230\u7684\u95ee\u9898\u975e\u5e38\u543b\u5408\u3002\\n\\n\u518d\u6b21\u56de\u5230\u95ee\u9898\u63cf\u8ff0\u4e0a\uff1a\\n\\n>\u5f53\u914d\u7f6e\u4e86 ETH_RSS_FRAG_IPV4 \u4e0e ETH_RSS_NONFRAG_IPV4_TCP \u53c2\u6570\u540e\uff0c\u4e00\u4e9b\u8fde\u63a5\u7684\u5206\u7247\u62a5\u6587\u4f1a\u88ab hash \u5230\u5176\u5b83\u961f\u5217\u4e2d\uff0c**\u7531\u4e8e\u8fd9\u4e9b\u5206\u7247\u7684\u62a5\u6587\u6ca1\u6709 L4 port number**\u3002\\n\\n>\u5f53\u4f60\u4e0d\u914d\u7f6e ETH_RSS_NONFRAG_IPV4_TCP \u65f6\uff0cETH_RSS_FRAG_IPV4 \u54c8\u5e0c\u51fd\u6570\u4e0d\u4f1a\u5e94\u7528\u5230\u975e\u5206\u7247\u62a5\u6587\u4e0a\uff0c\u8fd9\u4e9b\u62a5\u6587\u5c06\u4f1a\u88ab\u6295\u9012\u5230\u961f\u5217 0\u3002\\n\\n\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u5206\u7247 tcp \u62a5\u6587\uff0c\u53ef\u4ee5\u8bbe\u5b9a\u975e\u5206\u7247 tcp \u62a5\u6587\u53ea\u4f7f\u7528\u6e90\u4e0e\u76ee\u7684 ip \u8fdb\u884c hash\uff0c\u601d\u8def\u6e05\u6670\u660e\u4e86\uff01\\n\\n\u4ece [[dpdk-dev] Symmetry for TCP packets on X710 Intel ](https://dev.dpdk.narkive.com/AIj6ALhm/dpdk-dev-symmetry-for-tcp-packets-on-x710-intel)  \u4e2d\u6458\u5f55\u5e76\u4fee\u6539\u4ee3\u7801\u4e3a\u5982\u4e0b\u5185\u5bb9\uff1a\\n\\n```c\\n        #define UINT64_BIT (CHAR_BIT * sizeof(uint64_t))\\n        #define RSS_X710_KEY_SIZE 52\\n\\n        static unsigned char tr_rss_key_x710[] = {\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a, 0x6d, 0x5a,\\n            0x6d, 0x5a, 0x6d, 0x5a,\\n        };\\n        \\n        \\n        port_conf->rxmode.mq_mode = ETH_MQ_RX_RSS;\\n        port_conf->rx_adv_conf.rss_conf.rss_key = tr_rss_key_x710;\\n        port_conf->rx_adv_conf.rss_conf.rss_key_len = RSS_X710_KEY_SIZE;\\n        port_conf.rx_adv_conf.rss_conf.rss_hf = ETH_RSS_IPV4 \\t| \\t\\t\\t\\tETH_RSS_FRAG_IPV4\\n| ETH_RSS_NONFRAG_IPV4_TCP | ETH_RSS_NONFRAG_IPV4_UDP |\\nETH_RSS_NONFRAG_IPV4_SCTP | ETH_RSS_NONFRAG_IPV4_OTHER | ETH_RSS_IPV6 |\\nETH_RSS_FRAG_IPV6 | ETH_RSS_NONFRAG_IPV6_TCP | ETH_RSS_NONFRAG_IPV6_UDP\\n| ETH_RSS_NONFRAG_IPV6_SCTP | ETH_RSS_NONFRAG_IPV6_OTHER;\\n        \\n        struct rte_eth_hash_filter_info hinfo;\\n        uint32_t idx = 0;\\n        uint32_t offset = 0;\\n        uint32_t ftype;\\n\\n        // specific commands for X710\\n        // select per ipv4 tcp - src ipv4\\n        memset(&hinfo, 0, sizeof (hinfo));\\n        hinfo.info_type = RTE_ETH_HASH_FILTER_INPUT_SET_SELECT;\\n        hinfo.info.input_set_conf.flow_type = RTE_ETH_FLOW_NONFRAG_IPV4_TCP;\\n        hinfo.info.input_set_conf.field[0] = RTE_ETH_INPUT_SET_L3_SRC_IP4;\\n        hinfo.info.input_set_conf.inset_size = 1;\\n        hinfo.info.input_set_conf.op = RTE_ETH_INPUT_SET_SELECT;\\n        ret = rte_eth_dev_filter_ctrl(portid, RTE_ETH_FILTER_HASH,\\n                                RTE_ETH_FILTER_SET, &hinfo);\\n        if (ret < 0)\\n        {\\n                printf(\\"Failure: set select ipv4 tcp (src ipv4) for port %hhu\\\\n\\", portid);\\n        }\\n\\n        // add per ipv4 tcp - dst ipv4\\n        memset(&hinfo, 0, sizeof (hinfo));\\n        hinfo.info_type = RTE_ETH_HASH_FILTER_INPUT_SET_SELECT;\\n        hinfo.info.input_set_conf.flow_type = RTE_ETH_FLOW_NONFRAG_IPV4_TCP;\\n        hinfo.info.input_set_conf.field[0] = RTE_ETH_INPUT_SET_L3_DST_IP4;\\n        hinfo.info.input_set_conf.inset_size = 1;\\n        hinfo.info.input_set_conf.op = RTE_ETH_INPUT_SET_ADD;\\n        ret = rte_eth_dev_filter_ctrl(portid, RTE_ETH_FILTER_HASH,\\n                    RTE_ETH_FILTER_SET, &hinfo);\\n        if (ret < 0)\\n        {\\n            printf(\\"Failure: set add ipv4 tcp (dst ipv4) for port %hhu\\\\n\\", portid);\\n        }\\n\\n        // hash global config ipv4 tcp\\n        memset(&hinfo, 0, sizeof (hinfo));\\n        hinfo.info_type = RTE_ETH_HASH_FILTER_GLOBAL_CONFIG;\\n        hinfo.info.global_conf.hash_func = RTE_ETH_HASH_FUNCTION_DEFAULT;\\n        ftype = RTE_ETH_FLOW_NONFRAG_IPV4_TCP;\\n        idx = ftype / UINT64_BIT;\\n        offset = ftype % UINT64_BIT;\\n        hinfo.info.global_conf.valid_bit_mask[idx] |= (1ULL << offset);\\n        hinfo.info.global_conf.sym_hash_enable_mask[idx] |= (1ULL << offset);\\n        ret = rte_eth_dev_filter_ctrl(portid, RTE_ETH_FILTER_HASH,\\n                RTE_ETH_FILTER_SET, &hinfo);\\n        if (ret < 0)\\n        {\\n            printf(\\"Cannot set global hash configurations for port %hhu protoipv4 tcp\\\\n\\", portid);\\n        }\\n```\\n\\n\u4e0a\u8ff0\u4ee3\u7801\u4e2d filter_ctrl \u8bbe\u5b9a\u4ee3\u7801\u653e\u5230 tx \u4e0e rx queue setup \u4e4b\u540e\u6267\u884c\uff0c**\u6d4b\u8bd5\u786e\u8ba4 ipv4 tcp \u5206\u7247\u62a5\u6587\u6b63\u5e38 hash!**\\n\\n\u5bf9\u4e8e ipv6 tcp \u5206\u7247\u62a5\u6587 hash\uff0c\u53ef\u4ee5\u53c2\u7167\u4e0a\u8ff0\u8fc7\u7a0b\u914d\u7f6e RTE_ETH_FLOW_NONFRAG_IPV6_TCP flow type\uff0c\u5b9e\u6d4b\u6709\u6548\uff01"},{"id":"/dpdk/\u4e0d\u61c2 dpdk mbuf \u7ed3\u6784\uff1f\u6b64\u7bc7\u6587\u7ae0\u5e26\u4f60\u8d85\u795e","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u4e0d\u61c2 dpdk mbuf \u7ed3\u6784\uff1f\u6b64\u7bc7\u6587\u7ae0\u5e26\u4f60\u8d85\u795e","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u4e0d\u61c2 dpdk mbuf \u7ed3\u6784\uff1f\u6b64\u7bc7\u6587\u7ae0\u5e26\u4f60\u8d85\u795e.md","source":"@site/blog/dpdk/\u4e0d\u61c2 dpdk mbuf \u7ed3\u6784\uff1f\u6b64\u7bc7\u6587\u7ae0\u5e26\u4f60\u8d85\u795e.md","title":"dpdk \u4e2d mbuf \u7684\u7ed3\u6784","description":"https://doc.dpdk.org/guides/progguide/mbuflib.html","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":18.795,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/x710 hash \u5206\u7247\u4e0e\u975e\u5206\u7247 tcp \u62a5\u6587\u5f02\u5e38\u95ee\u9898"},"nextItem":{"title":"dpdk/\u4ee5 ixgbe pmd \u9a71\u52a8\u4e3a\u4f8b\u7814\u7a76 dpdk pmd \u9a71\u52a8\u4e2d\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u5e76\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b","permalink":"/longyu.github.io/blog/dpdk/\u4ee5 ixgbe pmd \u9a71\u52a8\u4e3a\u4f8b\u7814\u7a76 dpdk pmd \u9a71\u52a8\u4e2d\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u5e76\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b"}},"content":"![https://doc.dpdk.org/guides/prog_guide/mbuf_lib.html](https://img-blog.csdnimg.cn/2021061518410674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\\n\u56fe\u7247\u6458\u81ea [Mbuf Library](https://doc.dpdk.org/guides/prog_guide/mbuf_lib.html)\u3002\\n\\ndpdk \u4e2d\u7684 mbuf \u662f\u7f51\u7edc\u62a5\u6587\u7684\u62bd\u8c61\u7ed3\u6784\uff0c\u4ece\u4e0a\u56fe\u4e2d\u80fd\u591f\u770b\u51fa\u5b83\u53ef\u4ee5\u5206\u4e3a\u56db\u90e8\u5206\uff1a\\n\\n1. mbuf \u7ed3\u6784\u4f53\\n2. headroom\\n3. dataroom\\n4. tailroom\\n\\n\u8fd9\u56db\u90e8\u5206\u4e2d\u7b2c\u4e00\u90e8\u5206\u7528\u4e8e\u5b58\u50a8 mbuf \u5185\u90e8\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7b2c\u4e8c\u90e8\u5206\u4e0e\u7b2c\u56db\u90e8\u5206\u7684\u4f7f\u7528\u7531\u7528\u6237\u63a7\u5236\uff0c\u7b2c\u4e09\u90e8\u5206\u7528\u4e8e\u5b58\u50a8\u62a5\u6587\u5185\u5bb9\u3002\\n\\n# mbuf \u7684\u65e5\u5e38\u64cd\u4f5c\\nmbuf \u7684\u65e5\u5e38\u64cd\u4f5c\u4e3b\u8981\u6709\u5982\u4e0b\u51e0\u7c7b\uff1a\\n\\n1. \u8bfb\u53d6\u3001\u5199\u5165 mbuf \u7ed3\u6784\u4e2d\u7684\u4e0d\u540c\u5b57\u6bb5\\n2. \u4ece pktmbuf pool \u4e2d alloc  mbuf\\n3. \u91ca\u653e mbuf \u5230 pktmbuf pool \u4e2d\\n4. \u83b7\u53d6 mbuf \u7684 dataroom \u7684\u7269\u7406\u5730\u5740\\n5. \u83b7\u53d6 mbuf \u7684 headroom \u4f4d\u7f6e\\n6. \u83b7\u53d6 mbuf \u7684 tailroom \u7684\u4f4d\u7f6e\\n7. \u4f7f\u7528 mbuf \u7684 headroom \u5728 dataroom \u524d\u63d2\u5165\u6307\u5b9a\u957f\u5ea6\u6570\u636e\\n8. \u4f7f\u7528 mbuf \u7684 tailroom \u5728 dataroom \u540e\u63d2\u5165\u6307\u5b9a\u957f\u5ea6\u6570\u636e\\n9. \u4f7f\u7528\u5df2\u6709\u7684 mbuf \u514b\u9686\u4e00\u4e2a\u65b0\u7684 mbuf \\n\\n\u4f7f\u7528\u8f83\u4e3a\u9891\u7e41\u7684\u51fd\u6570\u63a5\u53e3\u4e3a\u7533\u8bf7 mbuf\u3001\u91ca\u653e mbuf \u7b49\u3002\\n\\n# dpdk \u7a0b\u5e8f\u4e2d mbuf \u7684\u6d41\u52a8\\nmbuf \u5728\u521b\u5efa pktmbuf pool \u7684\u65f6\u5019\u88ab\u653e\u5230\u4ee5 ring \u4e3a\u4ee3\u8868\u7684\u961f\u5217\u4e2d\uff0c\u5728\u5f00\u542f\u7f51\u5361\u6536\u5305\u7684\u65f6\u5019\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u63a5\u6536\u63cf\u8ff0\u7b26\u7533\u8bf7\u4e00\u4e2a mbuf\uff0c\u5e76\u5c06 mbuf \u4e2d dataroom \u533a\u57df\u7684\u603b\u7ebf\u5730\u5740\u5199\u5165\u5230\u63cf\u8ff0\u7b26\u7684\u76f8\u5173\u5b57\u6bb5\u4e2d\uff0c\u7528**\u4ee5 dma \u5904\u7406\u65f6\u7f51\u5361\u586b\u5145\u62a5\u6587\u5230\u4e3b\u673a\u5185\u5b58**\u3002\\n\\n**\u7f51\u5361\u6536\u5305\u65f6 mbuf \u7684\u6d41\u52a8\uff1a**\\n\\n\u63a5\u53e3 up \u7684\u65f6\u5019 dpdk \u4f1a\u4e3a\u6bcf\u4e2a\u6536\u5305\u961f\u5217\u4e0a\u7684\u63cf\u8ff0\u7b26\u7533\u8bf7 mbuf \u5e76\u5bf9 dataroom \u7684\u603b\u7ebf\u5730\u5740\u505a dma \u6620\u5c04\uff0c**\u7531\u4e8e\u63cf\u8ff0\u7b26\u7684\u57fa\u5730\u5740\u4e0e\u957f\u5ea6\u5199\u5165\u4e86\u7f51\u5361\u5bc4\u5b58\u5668\uff0c\u786c\u4ef6\u80fd\u591f\u64cd\u4f5c\u63cf\u8ff0\u7b26\u3002**\\n\\n\u786c\u4ef6\u6536\u5230\u4e00\u4e2a**\u6b63\u5e38\u7684\u5305**\u540e\u4f1a\u5c06\u5305**\u62f7\u8d1d\u5230\u4e00\u4e2a\u53ef\u7528\u7684\u63cf\u8ff0\u7b26\u4e2d\u914d\u7f6e\u7684 dma \u5730\u5740\u4e2d**\uff0c\u540c\u65f6**\u56de\u5199\u63cf\u8ff0\u7b26\u4e2d\u7684\u4e0d\u540c\u5b57\u6bb5**\u3002\\n\\n**\u8f6f\u4ef6\u6536\u5305**\u65f6\uff0c\u9996\u5148**\u5224\u65ad\u662f\u5426\u6709\u63cf\u8ff0\u7b26\u4e0a\u7ed1\u5b9a\u7684 dma \u5730\u5740\u586b\u5145\u4e86\u62a5\u6587**\uff0c\u5bf9 **intel** \u7684\u7f51\u5361\u6765\u8bf4\uff0c\u4e00\u822c\u901a\u8fc7\u68c0\u67e5\u63cf\u8ff0\u7b26\u7684 **dd** \u4f4d\u662f\u5426\u4e3a 1 \u6765\u5224\u65ad\u3002\\n\\n\u5f53\u5b58\u5728\u4e00\u4e2a\u53ef\u7528\u7684\u63cf\u8ff0\u7b26\u65f6\uff0c**\u6536\u5305\u51fd\u6570\u4f1a\u89e3\u6790\u63cf\u8ff0\u7b26\u5185\u5bb9**\uff0c\u540c\u65f6\u83b7\u53d6\u5230\u6b64\u63cf\u8ff0\u7b26\u7ed1\u5b9a\u7684 mbuf\uff0c\u5e76\u7528\u63cf\u8ff0\u7b26\u4e2d\u7684\u4e0d\u540c\u5b57\u6bb5\u586b\u5145 mbuf \u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\uff0c**\u4fdd\u7559\u89e3\u6790\u63cf\u8ff0\u7b26\u7684\u7ed3\u679c**\u3002\\n\\n\u6b64\u540e\u8f6f\u4ef6\u5728\u5c06\u8fd9\u4e2a mbuf \u8fd4\u56de\u4e0a\u5c42\u524d\uff0c\u9700\u8981**\u91cd\u65b0\u5206\u914d\u4e00\u4e2a\u65b0\u7684 mbuf**\uff0c\u5e76\u5c06\u5176 dataroom **\u8d77\u59cb\u5730\u5740\u7684\u603b\u7ebf\u5730\u5740**\u586b\u5145\u5230**\u63cf\u8ff0\u7b26**\u4e2d\uff0c\u8fd9\u91cc\u7684\u903b\u8f91\u7c7b\u4f3c\\"\u72f8\u732b\u6362\u592a\u5b50\\"\uff0c\u4e0d\u8fc7\u5bf9\u8c61\u6362\u6210\u4e86\u7a7a\u7684 mbuf \u4e0e\u5df2\u7ecf\u586b\u5145\u4e86\u62a5\u6587\u7684 mbuf\u3002\\n\\n\u5f53 mbuf \u7533\u8bf7\u5931\u8d25\u65f6\uff0c\u6ca1\u6709\u65b0\u7684 mbuf \u8865\u5145\uff0c\u6536\u5305\u4f1a\u7ec8\u6b62\uff0cdpdk \u5185\u90e8\u6709\u4e00\u4e2a mbuf \u7533\u8bf7\u5931\u8d25\u7684\u5b57\u6bb5\uff0c\u6b64\u5b57\u6bb5\u4f1a\u52a0 1\uff0c\u5f53\u63a5\u53e3**\u4e0d\u6536\u5305**\u65f6\u53ef\u4ee5\u89c2\u6d4b\u6b64\u5b57\u6bb5\u786e\u8ba4\u662f\u5426\u7531\u4e8e **mbuf \u6cc4\u9732**\u5bfc\u81f4\u7533\u8bf7 mbuf \u5931\u8d25\u8fdb\u800c\u5bfc\u81f4\u63a5\u53e3\u4e0d\u6536\u5305\u3002\\n\\n**\u7f51\u5361\u53d1\u5305\u65f6 mbuf \u7684\u6d41\u52a8:**\\n\\n\u7f51\u5361\u53d1\u5305\u65f6\uff0c\u4e0a\u5c42\u5c06\u5f85\u53d1\u9001\u7684 mbuf \u7684\u6307\u9488\u6570\u7ec4\u4f20\u9012\u5230\u53d1\u5305\u51fd\u6570\u4e2d\u3002\u5728\u53d1\u5305\u51fd\u6570\u4e2d\u4e3a**\u6bcf\u4e00\u4e2a\u5f85\u53d1\u9001\u7684\u5305\u5206\u914d\u4e00\u4e2a\u7a7a\u95f2\u7684\u53d1\u9001\u63cf\u8ff0\u7b26**\uff0c\u540c\u6837\uff0cmbuf \u7684 dataroom \u8d77\u59cb\u5730\u5740\u7684\u603b\u7ebf\u5730\u5740\u4f1a\u586b\u5145\u5230\u63cf\u8ff0\u7b26\u4e2d\uff0c\u6b64\u5916 mbuf \u4e2d\u7684\u4e00\u4e9b\u5b57\u6bb5\u4e5f\u4f1a\u7528\u4e8e\u53d1\u5305\u63cf\u8ff0\u7b26\u586b\u5145\u3002\\n\\n\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff1a\u53d1\u5305\u65f6\u6211\u4eec\u586b\u5145 mbuf \u7684 dataroom \u8d77\u59cb\u5730\u5740\u7684\u603b\u7ebf\u5730\u5740\u5230\u63cf\u8ff0\u7b26\u4e2d\u540e\uff0c\u5e76**\u4e0d\u4f1a\u7b49\u5f85\u786c\u4ef6\u53d1\u9001\u5b8c\u6210**\u540e\u91ca\u653e mbuf\uff0c\u90a3 **mbuf \u662f\u5728\u54ea\u91cc\u91ca\u653e\u7684**\uff1f**\u96be\u9053\u6ca1\u6709\u91ca\u653e\u5417\uff1f**\\n\\n\u5728\u53d1\u5305\u51fd\u6570\u91cc\u9762**\u5373\u65f6\u5224\u65ad\u62a5\u6587\u662f\u5426\u53d1\u9001\u5b8c\u6210**\u7136\u540e\u91ca\u653e mbuf \u662f\u53ef\u884c\u7684\uff0c\u4f46\u662f\u8fd9\u989d\u5916\u7684\u7b49\u5f85\u5e26\u6765\u7684\u662f**\u6027\u80fd\u7684\u635f\u8017**\u3002\\n\\nintel \u7f51\u5361\u7684\u53d1\u5305\u51fd\u6570\u4e2d\u8fdb\u884c\u4e86\u5982\u4e0b\u4f18\u5316\uff1a\\n\\n\u5728\u83b7\u53d6\u5230\u4e00\u4e2a\u7a7a\u95f2\u7684\u53d1\u5305\u63cf\u8ff0\u7b26\u65f6\u5224\u65ad**\u6b64\u63cf\u8ff0\u7b26\u4e0a\u662f\u5426\u5df2\u7ecf\u7ed1\u5b9a\u4e86 mbuf**\uff0c\u5982\u679c\u5df2\u7ecf\u7ed1\u5b9a\u4e86\u8868\u660e\u8fd9\u4e2a\u5305\u5df2\u7ecf\u53d1\u9001\u5b8c\u6210\uff0c\u5c31**\u91ca\u653e mbuf**\u3002\u6545\u800c\u4e0a\u4e00\u6b21\u7ed1\u5b9a\u5230\u63cf\u8ff0\u7b26\u4e0a\u7684 mbuf\uff0c\u4f1a\u5728**\u4e0b\u4e00\u6b21\u8fd9\u4e2a\u63cf\u8ff0\u7b26\u72b6\u6001\u7a7a\u95f2\u5e76\u88ab\u8f6f\u4ef6\u518d\u6b21\u5206\u914d\u4f7f\u7528\u7684\u65f6\u5019\u91ca\u653e**\uff0c\u8fd9\u6837\u65e2\u4e0d\u5f71\u54cd\u529f\u80fd\uff0c\u4e5f\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\\n\\n\u4e00\u4e9b\u9a71\u52a8\u4e2d\u540c\u65f6\u4f7f\u7528 tx_free_thresh \u95e8\u9650\uff0c\u5f53\u7a7a\u95f2\u7684\u63cf\u8ff0\u7b26\u4e2a\u6570\u5c0f\u4e8e\u6b64\u95e8\u9650\u503c\u65f6\uff0c\u9a71\u52a8\u4f1a\u91cd\u65b0\u626b\u63cf\u63cf\u8ff0\u7b26\u627e\u5230\u5176\u5b83\u7a7a\u95f2\u7684\u63cf\u8ff0\u7b26\u3002\\n\\n**\u591a\u4e2a\u7a0b\u5e8f\u4e2d mbuf \u7684\u6d41\u52a8\uff1a**\\n\\n\u57fa\u4e8e dpdk \u5f00\u53d1\u7684\u6570\u901a\u5f15\u64ce\u53ef\u4ee5\u4e3b\u52a8\u7533\u8bf7 mbuf \u5e76\u586b\u5145\u62a5\u6587\uff0c\u7136\u540e\u8c03\u7528\u53d1\u5305\u51fd\u6570\u53d1\u9001\u51fa\u53bb\u3002\u5728\u6536\u5230\u5305\u65f6\u53ef\u4ee5\u5c06\u62a5\u6587\u4e22\u5230 ring \u4e2d\uff0c**\u901a\u8fc7 ring \u6765\u5c06\u62a5\u6587\u4f20\u9001\u5230\u6307\u5b9a\u4f4d\u7f6e**\uff0c\u5b9e\u73b0\u4e0e**\u8bf8\u5982\u5b89\u5168\u5f15\u64ce\u7b49\u7684\u8054\u52a8**\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u662f\u76f8\u4e92\u7684\uff0c\u76f8\u4e92\u6027\u610f\u5473\u7740\u5b89\u5168\u5f15\u64ce\u4e5f\u5b58\u5728\u5c06\u5904\u7406\u8fc7\u540e\u7684 mbuf \u62a5\u6587\u901a\u8fc7 ring \u4f20\u9001\u56de\u6570\u901a\u5f15\u64ce\u7684\u60c5\u51b5\u3002\\n\\n\u8fd9\u91cc\u7684 ring \u53ea\u662f\u4e00\u79cd\u5b9e\u73b0\u65b9\u6848\uff0cdpdk \u7684\u65e0\u9501 ring \u9488\u5bf9\u7684\u662f\u5355\u4e2a\u751f\u4ea7\u8005\u4e0e\u5355\u4e2a\u6d88\u8d39\u8005\u7684\u60c5\u51b5\uff0c\u5728 dpdk \u591a\u8fdb\u7a0b\u65b9\u6848\u8bbe\u8ba1\u65f6\uff0c\u4e3a\u4e86\u907f\u514d\u5bf9 ring \u8fdb\u884c\u4e92\u65a5\u4fdd\u62a4\uff0c\u53ef\u4ee5\u4e3a\u6bcf\u4e2a mbuf \u4f20\u9012\u65b9\u5411\u90fd\u521b\u5efa\u72ec\u7acb\u7684 ring\u3002\\n\\n**kni \u7a0b\u5e8f\u4e2d mbuf \u7684\u6d41\u52a8\uff1a**\\n\\nkni \u7a0b\u5e8f\u5b9e\u73b0\u4e86\u4e00\u5957\u9ad8\u6548\u7684\u4e0e\u5185\u6838\u4e4b\u95f4\u4f20\u9012\u62a5\u6587\u7684 fifo \u673a\u5236\uff0cmbuf \u7684\u6d41\u52a8\u8fc7\u7a0b\u89c1\u4e0b\u56fe\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210420203804299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e24\u70b9\u95ee\u9898\uff1a\\n\\n1. \u5185\u6838\u4e2d\u4f7f\u7528\u7684\u62a5\u6587\u8f7d\u4f53\u4e3a **sk_buff**\uff0cdpdk \u4e2d\u4f7f\u7528\u7684\u662f **mbuf**\uff0c\u8fd9\u4e24\u8005\u9700\u8981\u8f6c\u5316\uff0c\u8fd9\u91cc\u5b58\u5728**\u62a5\u6587\u62f7\u8d1d**\\n2. mbuf \u5730\u5740\u4e3a**\u865a\u62df\u5730\u5740**\uff0cdpdk \u7a0b\u5e8f\u4e2d\u901a\u8fc7\u5c06\u865a\u62df\u5730\u5740\u8f6c\u5316\u4e3a\u7269\u7406\u5730\u5740\u6765\u5c06\u6570\u636e\u6295\u9012\u5230\u5185\u6838\uff0c\u5185\u6838\u4e2d\u518d\u6b21\u5c06\u7269\u7406\u5730\u5740\u8f6c\u5316\u4e3a\u5185\u6838\u7684\u865a\u62df\u5730\u5740\uff0c\u7136\u540e\u8fdb\u884c\u8bbf\u95ee\\n\\n**\u7269\u7406\u5730\u5740\u5bf9\u5185\u6838\u4e0e\u7528\u6237\u6001\u8fdb\u7a0b\u6765\u8bf4\u662f\u552f\u4e00\u7684**\uff0c\u4f46\u662f\u5185\u6838\u4e0e\u7528\u6237\u6001\u8fdb\u7a0b\u90fd**\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u7269\u7406\u5730\u5740**\uff0c\u9700\u8981\u518d\u6b21\u8fdb\u884c**\u5730\u5740\u8f6c\u5316**\uff0c\u6620\u5c04\u4e3a\u76f8\u5e94\u7684\u865a\u62df\u5730\u5740\u8bbf\u95ee\u3002\\n\\n\u5907\u6ce8\uff1a**sk_buff \u901a\u8fc7 netif_rx \u51fd\u6570\u5c06\u62a5\u6587\u6ce8\u5165\u5185\u6838\u534f\u8bae\u6808\u4e2d\u3002**\\n\\n# mbuf \u4e0e\u6027\u80fd\\n## 1. mbuf \u7684\u7ed3\u6784\u4e0e\u6027\u80fd\\nmbuf \u4f5c\u4e3a dpdk \u4e2d\u62a5\u6587\u7684\u8f7d\u4f53\uff0c\u5b83\u7684\u5185\u5bb9\u4f1a\u88ab**\u9891\u7e41\u8bbf\u95ee**\uff0c\u5176**\u7ed3\u6784**\u5bf9 dpdk \u7a0b\u5e8f\u7684**\u6027\u80fd**\u6709\u5f71\u54cd\u3002\\n\\n### 1.1 mbuf \u7ed3\u6784\u4e0e cpu cache\\n\u5982\u679c\u4f60\u4ed4\u7ec6\u89c2\u5bdf\u8fc7 mbuf \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\uff0c\u4f60\u4f1a\u53d1\u73b0\u6709\u8bb8\u591a**\u975e\u5e38\u89c4\u7684\u65b9\u5f0f**\uff0c\u65e0\u8bba\u662f **cache \u884c\u5bf9\u9f50**\u8fd8\u662f\u6bcf\u4e2a **cache \u7684\u53d8\u91cf\u6807\u53f7**\uff0c\u8fd9\u90fd\u662f dpdk \u9488\u5bf9 mbuf \u7684\u4f18\u5316\u3002\\n\\nmbuf \u7ed3\u6784\u662f cache \u884c\u5bf9\u9f50\u7684\uff0c\u8fd9\u6837\u5b83\u80fd\u591f\u88ab\u52a0\u8f7d\u5230\u8fde\u7eed\u7684 cache \u884c\u4e2d\u5e26\u6765\u66f4\u597d\u7684\u6027\u80fd\u3002\u540c\u65f6\u5728 burst \u6a21\u5f0f\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 cache \u9884\u53d6\u8bed\u53e5\u9884\u5148\u5c06\u5373\u5c06\u5904\u7406\u7684 mbuf \u7684\u5185\u5bb9\u4f7f\u7528\u6307\u5b9a cache \u884c\u6807\u53f7 load \u5230 cache \u4e2d\u3002\\n\\n### 1.2 mbuf \u7ed3\u6784\u4e0e\u5411\u91cf\u6307\u4ee4\\n\u73b0\u4ee3\u7684\u5904\u7406\u5668\u4e00\u822c\u90fd\u652f\u6301**\u5411\u91cf\u6307\u4ee4**\uff0c\u4f8b\u5982 intel \u5904\u7406\u5668\u652f\u6301\u7684 **sse\u3001avx2\u3001avx512** \u6307\u4ee4\uff0c**arm** \u67b6\u6784\u5904\u7406\u5668\u652f\u6301\u7684 **none** \u6307\u4ee4\uff0cdpdk \u4f5c\u4e3a\u5404\u79cd\u6027\u80fd\u4f18\u5316\u65b9\u6cd5\u7684\u96c6\u5927\u6210\u8005\uff0c\u4e5f\u4e0d\u53ef\u6216\u7f3a\u7684\u4f7f\u7528\u5230\u4e86\u8fd9\u4e9b\u9ad8\u7ea7\u5411\u91cf\u6307\u4ee4\u3002\\n\\ndpdk \u6536\u5305\u903b\u8f91\u4e2d\uff0c\u6838\u5fc3\u8fc7\u7a0b\u662f**\u89e3\u6790\u6536\u5305\u63cf\u8ff0\u7b26\u4e2d\u7684\u5b57\u6bb5\u5e76\u586b\u5145\u5230 mbuf \u4e2d**\uff0c\u57fa\u4e8e **burst** \u7684\u6536\u5305\u6a21\u5f0f\u4e00\u822c\u6bcf\u6b21\u4f1a\u6536\u591a\u4e2a\u5305\uff08\u4e00\u822c\u9884\u671f\u662f 32 \u4e2a)\uff0c\u5728\u8fd9\u79cd\u573a\u666f\u4e2d\u89e3\u6790\u63cf\u8ff0\u7b26\u5e76\u586b\u5145\u5230 mbuf \u7684\u64cd\u4f5c\u5b58\u5728**\u6279\u91cf\u5316\u7684\u53ef\u80fd**\u3002\\n\\n\u5f15\u5165\u5411\u91cf\u6307\u4ee4\uff0c\u53ef\u4ee5\u4e00\u6b21\u5904\u7406**\u591a\u4e2a**\u63cf\u8ff0\u7b26\uff0c\u52a0\u4e4b\u5411\u91cf\u6307\u4ee4\u7684\u6267\u884c\u65f6\u95f4\u4e0e\u666e\u901a\u6307\u4ee4\u6267\u884c\u65f6\u95f4\u51e0\u4e4e\u4e00\u81f4\uff08\u9700\u8981\u8003\u8bc1\uff09\uff0c\u8fd9\u6837\u5c31\u52a0\u901f\u4e86\u6536\u5305\u5904\u7406\u8fc7\u7a0b\u3002\\n\\n\u4f7f\u7528\u5411\u91cf\u6536\u5305\u51fd\u6570\u5e26\u6765\u7684\u6027\u80fd\u63d0\u9ad8\u5728\u5c0f\u5305\u573a\u666f\u662f\u975e\u5e38\u663e\u8457\u7684\u3002\u4e0b\u56fe\u6458\u81ea [DPDK Intel NIC Performance Report Release 20.11](http://fast.dpdk.org/doc/perf/DPDK_20_11_Intel_NIC_performance_report.pdf)\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/95f6c97541fb41c5b59ad8461af0def7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\\n\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u76f8\u540c\u7684\u6d4b\u8bd5\u73af\u5883\u4e0b\uff0c\u4f7f\u7528 avx512 \u6536\u53d1\u5305\u51fd\u6570\u76f8\u8f83 avx2 \u6536\u53d1\u5305\u51fd\u6570\u5e26\u6765\u4e86 **32.81% \u7684\u6027\u80fd\u63d0\u5347**\uff0c\u968f\u7740**\u5305\u5927\u5c0f\u7684\u63d0\u9ad8**\uff0c**pps \u663e\u8457\u4e0b\u964d**\uff0c\u4f7f\u7528 avx512 \u5e26\u6765\u7684\u6027\u80fd\u63d0\u5347\u6548\u679c\u4e5f**\u9010\u6e10\u4e0b\u964d**\u3002\\n\\n\u5c3d\u7ba1\u5bf9\u4e8e\u5927\u5305\u6765\u8bf4\uff0c\u4f7f\u7528\u66f4\u9ad8\u7ea7\u7684\u5411\u91cf\u6536\u53d1\u5305\u6307\u4ee4\u5e76\u4e0d\u80fd\u5e26\u6765\u6027\u80fd\u4e0a\u592a\u5927\u7684\u63d0\u5347\uff0c\u4f46\u662f\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u6211\u53d1\u73b0\u5b83\u80fd\u591f**\u964d\u4f4e cpu \u7684\u5229\u7528\u7387**\uff0c\u8fd9\u5728\u67d0\u4e9b\u60c5\u666f\u4e2d\u4e5f\u6709\u91cd\u8981\u7684\u4f5c\u7528\u3002\\n\\n**mbuf \u7ed3\u6784\u5bf9\u5411\u91cf\u6536\u53d1\u5305\u51fd\u6570\u5b9e\u73b0\u7684\u5f71\u54cd\uff1a**\\n\\n\u5411\u91cf\u6307\u4ee4\u9488\u5bf9 128-bit\u3001256-bit \u7b49\u6570\u636e\u5355\u5143\u64cd\u4f5c\uff0c\u5c06\u591a\u4e2a\u63cf\u8ff0\u7b26\u5408\u5e76\u5230\u4e00\u8d77\u7684\u8fc7\u7a0b\u662f\u9ad8\u6548\u7684\uff0c\u4f46\u662f\u6700\u7ec8\u8fd9\u4e9b\u5b57\u6bb5\u9700\u8981**\u62c6\u5206\u5e76\u4f9d\u6b21\u586b\u5145\u5230 mbuf \u4e2d\u7684\u5b57\u6bb5\u4e2d**\u3002\\n\\n\u6b64\u65f6 mbuf \u4e2d\u5b57\u6bb5\u7684\u7ed3\u6784\u5c31\u663e\u5f97\u975e\u5e38\u91cd\u8981\u4e86\u3002\\n\\ndpdk-16.04 \u4e2d mbuf \u7ed3\u6784\u7684 rearm_data \u6807\u53f7\u6807\u8bc6\u4e00\u4e2a\u8fde\u7eed 6 \u5b57\u8282\u957f\u5ea6\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u76f8\u5173\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\n\\t/* next 6 bytes are initialised on RX descriptor rearm */                                                                                                         \\t\\n\\tMARKER8 rearm_data;\\n    uint16_t data_off;\\n\\n    /**  \\n     * 16-bit Reference counter.                                                                                                                                             \\n     * It should only be accessed using the following functions:\\n     * rte_mbuf_refcnt_update(), rte_mbuf_refcnt_read(), and\\n     * rte_mbuf_refcnt_set(). The functionality of these functions (atomic,\\n     * or non-atomic) is controlled by the CONFIG_RTE_MBUF_REFCNT_ATOMIC\\n     * config option.\\n     */\\n    union {\\n        rte_atomic16_t refcnt_atomic; /**< Atomically accessed refcnt */\\n        uint16_t refcnt;              /**< Non-atomically accessed refcnt */\\n    };   \\n    uint8_t nb_segs;          /**< Number of segments. */\\n    uint8_t port;             /**< Input port. */\\n\\n    uint64_t ol_flags;        /**< Offload features. */\\n```\\ndpdk-20.11 \u4e2d rearm_data \u6807\u8bc6 8 \u4e2a\u5b57\u8282\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u76f8\u5173\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\n496     /* next 8 bytes are initialised on RX descriptor rearm */\\n497     MARKER64 rearm_data;\\n498     uint16_t data_off;\\n499 \\n500     /**\\n501      * Reference counter. Its size should at least equal to the size\\n502      * of port field (16 bits), to support zero-copy broadcast.\\n503      * It should only be accessed using the following functions:\\n504      * rte_mbuf_refcnt_update(), rte_mbuf_refcnt_read(), and\\n505      * rte_mbuf_refcnt_set(). The functionality of these functions (atomic,\\n506      * or non-atomic) is controlled by the CONFIG_RTE_MBUF_REFCNT_ATOMIC\\n507      * config option.\\n508      */\\n509     RTE_STD_C11\\n510     union {\\n511         rte_atomic16_t refcnt_atomic; /**< Atomically accessed refcnt */\\n512         /** Non-atomically accessed refcnt */\\n513         uint16_t refcnt;\\n514     };\\n515     uint16_t nb_segs;         /**< Number of segments. */\\n516 \\n517     /** Input port (16 bits to support more than 256 virtual ports).\\n518      * The event eth Tx adapter uses this field to specify the output port.\\n519      */\\n520     uint16_t port;\\n521 \\n522     uint64_t ol_flags;        /**< Offload features. */\\n```\\ndpdk-20.11 mbuf \u7ed3\u6784\u4e2d port \u4e0e nb_segs \u7684\u5927\u5c0f\u53d8\u4e3a\u4e86 **2 \u4e2a\u5b57\u8282**\uff0c\u5e26\u6765\u7684\u5f71\u54cd\u662f rearm_data \u6807\u8bc6\u6307\u5411\u4e00\u4e2a **8-byte** \u957f\u5ea6\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u800c 16.04 \u4e3a **6-byte**\u3002\\n\\n\u5411\u91cf\u6307\u4ee4\u64cd\u4f5c\u7684\u5355\u5143\u57fa\u4e8e 128-bit\u3001256-bit\uff0c8-byte \u4e3a 64-bit \u4f7f\u7528\u5411\u91cf\u6307\u4ee4\u5b58\u50a8\u65f6\u903b\u8f91\u7b80\u5355\uff0c6-byte \u4e3a 48-bit\uff0c\u9700\u8981\u6267\u884c\u989d\u5916\u7684\u62c6\u5206\u903b\u8f91\uff0c\u8fd9\u5c31\u662f\u6027\u80fd\u5dee\u5f02\u7684\u4e00\u4e2a\u70b9\uff0c\u540c\u65f6\u8fd9\u79cd\u62c6\u5206\u4e5f\u63d0\u9ad8\u4e86\u6536\u53d1\u5305\u51fd\u6570\u7684\u8bbe\u8ba1\u590d\u6742\u5ea6\u3002\\n\\n## 2. mbuf \u7684\u5730\u5740\u4e0e\u6027\u80fd\\ndpdk \u7a0b\u5e8f\u4e00\u822c\u4f1a\u521b\u5efa pktmbuf_pool \u5185\u5b58\u6c60\u6765\u5b58\u50a8 mbuf\uff0c\u5728\u771f\u5b9e\u7684\u4e1a\u52a1\u573a\u666f\u4e2d\uff0c\u6536\u53d1\u5305\u8fc7\u7a0b\u4f7f\u7528\u7684 mbuf \u7684**\u5730\u5740\u79bb\u6563\u65f6\u5c06\u4f1a\u5e26\u6765\u8f83\u5dee\u7684\u6027\u80fd**\u3002\\n\\n\u53ef\u4ee5\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\u8fdb\u884c\u4f18\u5316\uff0c\u4f7f\u7528\u67d0\u4e2a\u7ebf\u7a0b**\u52a8\u6001\u7684\u63a7\u5236 pktmbuf_pool \u4e2d\u7684 mbuf \u6570\u91cf**\u6765\u95f4\u63a5\u7684**\u63a7\u5236\u63a5\u53e3\u6536\u53d1\u5305\u5206\u914d\u7684 mbuf \u5730\u5740\u7684\u5206\u5e03**\uff0c\u4f7f\u7528\u66f4\u63a5\u8fd1**\u8fde\u7eed\u7684**\u5206\u5e03\u6765\u63d0\u9ad8\u6027\u80fd\u3002\\n\\n## 3. pktmbuf pool cache \u4e0e\u6027\u80fd\\ndpdk \u7a0b\u5e8f\u8fd0\u884c\u4e2d\u9700\u8981\u9891\u7e41\u7684\u7533\u8bf7\u4e0e\u91ca\u653e mbuf\uff0c\u8fd9\u4e9b\u8fc7\u7a0b\u6bcf\u6b21\u90fd\u76f4\u63a5\u64cd\u4f5c pktmbuf _pool \u65e0\u7591\u4f1a\u964d\u4f4e\u6027\u80fd\u3002\\n\\n\u4e3a\u6b64 dpdk \u5728 pktmbuf_pool \u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86**\u57fa\u4e8e\u6bcf\u4e2a\u903b\u8f91\u6838\u7684 mbuf cache \u529f\u80fd**\uff0c\u4f7f\u80fd\u4e86 cache \u5e76\u914d\u7f6e\u4e86\u5927\u5c0f\u7684 pktmbuf_pool\uff0c\u5728\u7533\u8bf7\u4e0e\u91ca\u653e\u7684\u65f6\u5019\u4f1a**\u4f18\u5148\u4f7f\u7528 cache**\uff0c\u907f\u514d\u76f4\u63a5\u64cd\u4f5c pktmbuf_pool \u4e2d\u7684\u66f4\u5e95\u5c42\u7684\u6570\u636e\u7ed3\u6784\u5e26\u6765\u7684\u6027\u80fd\u635f\u8017\u3002\\n\\n\u8fd9\u91cc\u63d0\u5230\u6bcf\u4e2a\u903b\u8f91\u6838\u7684 mbuf cache \u529f\u80fd\uff0c\u5c06\u7c92\u5ea6**\u6269\u5c55\u5230\u6bcf\u4e2a\u903b\u8f91\u6838**\u4e5f\u662f\u63d0\u9ad8\u6027\u80fd\u7684\u624b\u6bb5\uff0c\u7c7b\u4f3c\u4e8e**\u903b\u8f91\u6838\u672c\u5730\u6570\u636e**\u7684\u65b9\u6cd5\u3002\\n\\n\u4e0d\u8fc7\u5728\u590d\u6742\u7684\u4f7f\u7528\u573a\u666f\u4e2d\uff0c\u6211\u5c31\u9047\u5230\u8fc7\u6570\u901a\u5f15\u64ce\u4e2d**\u591a\u4e2a\u7ebf\u7a0b\u7ed1\u5b9a\u5230\u540c\u4e00\u4e2a\u903b\u8f91\u6838\u4e2d**\uff0c\u5e76\u4e14\u5171**\u4eab\u4e86\u540c\u4e00\u4e2a mempool** \u7684\u60c5\u51b5\u3002\\n\\n\u5728\u8fd9\u79cd\u573a\u666f\u4e2d\uff0cmempool \u4e2d\u9488\u5bf9\u6b64\u903b\u8f91\u6838\u7684 cache \u88ab\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\uff0c\u5f53\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u65f6\u5c31\u4f1a\u51fa\u73b0**\u4e0d\u4e00\u81f4**\u7684\u60c5\u51b5\uff0cdpdk \u5185\u90e8\u5e76\u6ca1\u6709\u9488\u5bf9\u8fd9\u4e2a cache \u505a**\u4e92\u65a5\u5904\u7406**\uff0c\u5e38\u5e38\u9047\u5230\u7684\u60c5\u51b5\u662f\u6570\u901a\u5f15\u64ce\u83ab\u540d\u5176\u5999\u6bb5\u9519\u8bef\uff0c**\u67e5\u770b\u4f4d\u7f6e\u53d1\u73b0\u4e0e mbuf \u5185\u5bb9\u76f8\u5173\uff0c\u4f46\u662f\u770b\u903b\u8f91\u5374\u89e3\u91ca\u4e0d\u4e86 mbuf \u7684\u53d8\u5316**\u3002\\n\\n\u5bf9\u4e8e\u8fd9\u79cd\u573a\u666f\uff0c\u53ef\u4ee5\u9488\u5bf9\u6027\u521b\u5efa cache_size \u4e3a 0 \u7684 pktmbuf_pool \u89e3\u51b3\u4e4b\u3002\\n\\n# mbuf \u4e0e\u5730\u5740\u8f6c\u6362\\ndpdk-19.11 \u4e2d\u6709\u5982\u4e0b\u4ee3\u7801\uff1a\\n\\n```c\\n    m->buf_iova = rte_mempool_virt2iova(m) + mbuf_size;  \\n```\\n**rte_mempool_virt2iova** \u51fd\u6570\u7528\u4e8e\u5c06 mbuf \u7684\u5730\u5740\u8f6c\u5316\u4e3a\u7269\u7406\u5730\u5740\uff0c\u5c06\u7269\u7406\u5730\u5740\u52a0\u4e0a **mbuf_size** \u6267\u884c **mbuf** \u4e2d **headroom** \u8d77\u59cb\u4f4d\u7f6e\u7684\u7269\u7406\u5730\u5740\uff0c\u53ef\u4ee5\u4ece\u672c\u6587\u5f00\u7bc7\u51fa\u7684\u90a3\u5f20\u56fe\u4e0a\u770b\u51fa\u6765\u3002\\n\\n\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u9605\u8bfb\u4e0b **rte_mempool_virt2iova** \u51fd\u6570\u7684\u4ee3\u7801\uff0c\u770b\u770b **dpdk** \u5982\u4f55\u5b9e\u73b0\u5c06**\u865a\u62df\u5730\u5740\u8f6c\u5316\u4e3a\u7269\u7406\u5730\u5740**\u3002\\n\\n# \u4f7f\u7528 mbuf \u4e2d\u7684 headroom \u4e0e tailroom\\n\u57fa\u4e8e dpdk \u5f00\u53d1\u7684\u6570\u901a\u5f15\u64ce\u5728\u6536\u5230\u62a5\u6587\u540e\u9700\u8981\u5bf9\u62a5\u6587\u8fdb\u884c\u89e3\u6790\uff0c\u8fd9\u4e2a\u89e3\u6790\u8fc7\u7a0b\u4e00\u822c\u662f\u4e00\u6b21\u6027\u7684\uff0c\u6b64\u540e\u62a5\u6587\u7ee7\u7eed\u6d41\u52a8\uff0c\u5728\u5176\u5b83\u6a21\u5757\u3001\u8fdb\u7a0b\u4e2d\u5b58\u5728\u4f7f\u7528\u9884\u5148\u89e3\u6790\u5185\u5bb9\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5982\u679c\u91cd\u65b0\u89e3\u6790\u62a5\u6587\u52bf\u5fc5\u9020\u6210\u91cd\u590d\u5904\u7406\u3002\\n\\n\u90a3\u4e48\u5982\u4f55\u6d88\u9664\u91cd\u590d\u5904\u7406\u7684\u60c5\u51b5\u5462\uff1f\\n\\n\u6b64\u65f6 mbuf \u7684 headroom \u4e0e tailroom \u5c31\u6d3e\u4e0a\u4e86\u7528\u573a\u3002\u6bcf\u4e2a mbuf \u4e2d headroom \u7684\u5927\u5c0f\u4e0e tailroom \u7684\u5927\u5c0f\u5728\u521b\u5efa\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u786e\u5b9a\uff0c\u6570\u901a\u5f15\u64ce\u4e2d\u53ef\u4ee5\u5c06\u89e3\u6790\u62a5\u6587\u5f97\u5230\u7684\u4f1a\u88ab\u5176\u5b83\u6a21\u5757\u7ee7\u7eed\u4f7f\u7528\u7684\u5b57\u6bb5\u5b58\u50a8\u5230 mbuf \u7684 headroom\u3001tailroom \u4e2d\uff0c\u5176\u5b83\u6a21\u5757\u3001\u8fdb\u7a0b\u5728\u83b7\u53d6\u5230 mbuf \u540e\uff0c\u901a\u8fc7\u589e\u52a0\u76f8\u5e94\u7684\u504f\u79fb\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5df2\u7ecf\u89e3\u6790\u8fc7\u7a0b\u5b57\u6bb5\u503c\u3002\\n\\n## headroom \u5927\u5c0f\u7684\u95ee\u9898\\n\u66fe\u7ecf\u5728\u9002\u914d\u67d0 nxp dpaa2 \u7f51\u5361\u65f6\uff0c\u9047\u5230 **headroom \u5927\u5c0f\u9650\u5236**\u7684\u95ee\u9898\u3002\u9a71\u52a8\u3001\u786c\u4ef6\u4e2d\u9650\u5236\u4e86 headroom \u7684\u5927\u5c0f\u4e0d\u80fd\u8d85\u8fc7 512\uff0c\u4e00\u65e6\u8d85\u8fc7\u5c31\u4f1a\u6536\u5305\u5f02\u5e38\uff0c\u6536\u5230\u7684\u62a5\u6587\u90fd\u4e3a 0\u3002\\n\\n\u6211\u4eec\u7684 dpdk \u4e2d\u914d\u7f6e\u7684 headroom \u5927\u5c0f\u8d85\u8fc7\u4e86 512\uff0c\u8fd9\u4e2a\u5927\u5c0f\u662f\u6839\u636e\u6570\u901a\u5f15\u64ce\u4e2d\u89e3\u6790\u62a5\u6587\u5b57\u6bb5\u7684\u9700\u6c42\u8bbe\u7f6e\u7684\uff0c**\u4e0d\u80fd\u88c1\u526a**\u3002\\n\\n**\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff1a\u5982\u4f55\u89e3\u51b3 headroom \u5927\u5c0f\u7684\u95ee\u9898\u5462\uff1f\u53ea\u80fd\u88c1\u526a\u6570\u901a\u5f15\u64ce\u4e2d\u7684\u76f8\u5173\u7ed3\u6784\u5b9a\u4e49\u5417\uff1f**\\n\\n\u7ecf\u8fc7\u4e0e\u540c\u4e8b\u7684\u4ea4\u6d41\u4e0e\u601d\u8003\uff0c\u6700\u7ec8\u60f3\u5230\u4e86\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\uff1a\\n\\n\u5c06 headroom \u7684\u4f4d\u7f6e\u79fb\u52a8\u5230 tailroom \u4e2d\uff0c**\u51cf\u5c11 headroom \u7684\u5927\u5c0f\uff0c\u589e\u52a0 tailroom \u7684\u5927\u5c0f**\u4ee5\u540c\u65f6\u6ee1\u8db3\u7f51\u5361\u7684\u786c\u4ef6\u9650\u5236 headroom \u4e0d\u80fd\u8d85\u8fc7 512 \u7684\u95ee\u9898\u53ca\u6570\u901a\u5f15\u64ce\u9700\u8981\u4f7f\u7528\u8d85\u8fc7 512 \u5927\u5c0f\u7684\u7a7a\u95f4\u5b58\u50a8\u89e3\u6790 mbuf \u5f97\u5230\u7684\u5b57\u6bb5\u7684\u95ee\u9898\u3002\\n\\n\u4fee\u6539\u540e\u6d4b\u8bd5\u786e\u8ba4\u95ee\u9898\u5f97\u5230\u89e3\u51b3\u3002\\n\\n# \u603b\u7ed3\\n\u672c\u7bc7\u6587\u7ae0\u63cf\u8ff0\u4e86 dpdk mbuf \u7ed3\u6784\u7684\u4e00\u4e9b\u7279\u70b9\u53ca\u5176\u5728 dpdk \u7a0b\u5e8f\u4e2d\u7684\u90e8\u5206\u6d41\u52a8\u8fc7\u7a0b\uff0c\u8df3\u8fc7\u4e86\u4e00\u4e9b\u76f8\u5bf9\u4f7f\u7528\u7387\u8f83\u5c11\u7684\u529f\u80fd\u63cf\u8ff0\uff0c\u672c\u6587\u7684\u63cf\u8ff0\u4e0d\u4ee3\u8868 mbuf \u63d0\u4f9b\u7684\u5b8c\u6574\u529f\u80fd\uff0c\u8fd9\u4e00\u70b9\u9700\u8981\u6ce8\u610f\u3002"},{"id":"/dpdk/\u4ee5 ixgbe pmd \u9a71\u52a8\u4e3a\u4f8b\u7814\u7a76 dpdk pmd \u9a71\u52a8\u4e2d\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u5e76\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u4ee5 ixgbe pmd \u9a71\u52a8\u4e3a\u4f8b\u7814\u7a76 dpdk pmd \u9a71\u52a8\u4e2d\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u5e76\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u4ee5 ixgbe pmd \u9a71\u52a8\u4e3a\u4f8b\u7814\u7a76 dpdk pmd \u9a71\u52a8\u4e2d\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u5e76\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b.md","source":"@site/blog/dpdk/\u4ee5 ixgbe pmd \u9a71\u52a8\u4e3a\u4f8b\u7814\u7a76 dpdk pmd \u9a71\u52a8\u4e2d\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u5e76\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b.md","title":"dpdk/\u4ee5 ixgbe pmd \u9a71\u52a8\u4e3a\u4f8b\u7814\u7a76 dpdk pmd \u9a71\u52a8\u4e2d\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u5e76\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b","description":"dpdk pmd \u4e2d\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u5e76\u4f7f\u80fd\u4e2d\u65ad","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":8.06,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk \u4e2d mbuf \u7684\u7ed3\u6784","permalink":"/longyu.github.io/blog/dpdk/\u4e0d\u61c2 dpdk mbuf \u7ed3\u6784\uff1f\u6b64\u7bc7\u6587\u7ae0\u5e26\u4f60\u8d85\u795e"},"nextItem":{"title":"dpdk mempool_ops","permalink":"/longyu.github.io/blog/dpdk/\u4ee5 rte_mempool_ops_table \u4e3a\u4f8b\u63cf\u8ff0 dpdk \u7a0b\u5e8f\u5e93\u94fe\u63a5\u987a\u5e8f\u5bf9\u7a0b\u5e8f\u6267\u884c\u7684\u5f71\u54cd"}},"content":"## dpdk pmd \u4e2d\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u5e76\u4f7f\u80fd\u4e2d\u65ad\\neth_ixgbe_dev_init \u662f ixgbe \u7f51\u5361\u7684\u521d\u59cb\u5316\u51fd\u6570\uff0c\u5728\u8fd9\u4e2a\u51fd\u6570\u7684\u6700\u540e\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u5e76\u4f7f\u80fd\u4e2d\u65ad\u3002\\n\\n\u5728\u914d\u7f6e\u4e86\u6536\u53d1\u961f\u5217\u7b49\u7b49\u6b65\u9aa4\u540e\uff0c\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\uff0c\u8c03\u7528\u5982\u4e0b\u4ee3\u7801\u6ce8\u518c\uff1a\\n\\n```c\\n\\trte_intr_callback_register(&pci_dev->intr_handle,\\n\\t\\t\\t\\t   ixgbe_dev_interrupt_handler,\\n\\t\\t\\t\\t   (void *)eth_dev);\\n```\\n\u4f7f\u80fd uio\u3001vfio \u4e2d\u65ad\u3001\u4e8b\u4ef6\u63cf\u8ff0\u7b26\u6620\u5c04\u901a\u8fc7\u5982\u4e0b\u4ee3\u7801\u6765\u5b8c\u6210\uff1a\\n\\n```c\\n\\t/* enable uio/vfio intr/eventfd mapping */\\n\\trte_intr_enable(&pci_dev->intr_handle);\\n```\\n\\nrte_intr_enable \u51fd\u6570\u4f1a\u6839\u636e\u4e0d\u540c\u7684\u4e2d\u65ad\u5904\u7406\u7c7b\u578b\u5206\u53d1\u5230\u4e0d\u540c\u7684\u51fd\u6570\u4e0a\uff0c\u5728 rte_intr_handle_type \u4e2d\u5b9a\u4e49\u4e0d\u540c\u7684\u4e2d\u65ad\u7684\u7c7b\u578b\uff0c\u5b9a\u4e49\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```c\\nenum rte_intr_handle_type {\\n\\tRTE_INTR_HANDLE_UNKNOWN = 0,\\n\\tRTE_INTR_HANDLE_UIO,          /**< uio device handle */\\n\\tRTE_INTR_HANDLE_UIO_INTX,     /**< uio generic handle */\\n\\tRTE_INTR_HANDLE_VFIO_LEGACY,  /**< vfio device handle (legacy) */\\n\\tRTE_INTR_HANDLE_VFIO_MSI,     /**< vfio device handle (MSI) */\\n\\tRTE_INTR_HANDLE_VFIO_MSIX,    /**< vfio device handle (MSIX) */\\n\\tRTE_INTR_HANDLE_ALARM,    /**< alarm handle */\\n\\tRTE_INTR_HANDLE_EXT, /**< external handler */\\n\\tRTE_INTR_HANDLE_MAX\\n};\\n```\\nret_intr_enable \u51fd\u6570\u7684\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a\\n\\n```c\\nint\\nrte_intr_enable(struct rte_intr_handle *intr_handle)\\n{\\n\\tif (!intr_handle || intr_handle->fd < 0 || intr_handle->uio_cfg_fd < 0)\\n\\t\\treturn -1;\\n\\n\\tswitch (intr_handle->type){\\n\\t/* write to the uio fd to enable the interrupt */\\n\\tcase RTE_INTR_HANDLE_UIO:\\n\\t\\tif (uio_intr_enable(intr_handle))\\n\\t\\t\\treturn -1;\\n\\t\\tbreak;\\n\\tcase RTE_INTR_HANDLE_UIO_INTX:\\n\\t\\tif (uio_intx_intr_enable(intr_handle))\\n\\t\\t\\treturn -1;\\n\\t\\tbreak;\\n\\t/* not used at this moment */\\n\\tcase RTE_INTR_HANDLE_ALARM:\\n\\t\\treturn -1;\\n#ifdef VFIO_PRESENT\\n\\tcase RTE_INTR_HANDLE_VFIO_MSIX:\\n\\t\\tif (vfio_enable_msix(intr_handle))\\n\\t\\t\\treturn -1;\\n\\t\\tbreak;\\n\\tcase RTE_INTR_HANDLE_VFIO_MSI:\\n\\t\\tif (vfio_enable_msi(intr_handle))\\n\\t\\t\\treturn -1;\\n\\t\\tbreak;\\n\\tcase RTE_INTR_HANDLE_VFIO_LEGACY:\\n\\t\\tif (vfio_enable_intx(intr_handle))\\n\\t\\t\\treturn -1;\\n\\t\\tbreak;\\n#endif\\n\\t/* unknown handle type */\\n\\tdefault:\\n\\t\\tRTE_LOG(ERR, EAL,\\n\\t\\t\\t\\"Unknown handle type of fd %d\\\\n\\",\\n\\t\\t\\t\\t\\tintr_handle->fd);\\n\\t\\treturn -1;\\n\\t}\\n\\n\\treturn 0;\\n}\\n```\\n\u53ef\u4ee5\u770b\u5230\u5b83\u6839\u636e intr_handle->type \u8fd9\u4e2a\u4e2d\u65ad\u63a7\u5236\u7c7b\u578b\u5206\u53d1\u5230\u4e0d\u540c\u7684\u5b50\u51fd\u6570\u4e0a\uff0c\u8fd9\u91cc\u6211\u7740\u91cd\u7814\u7a76\u4e0b\u6807\u51c6\u7684 UIO \u8bbe\u5907\u63a7\u5236\u4e2d\u65ad\u7684\u65b9\u5f0f\u3002\\n\\n## \u6807\u51c6 UIO \u8bbe\u5907\u63a7\u5236\u4e2d\u65ad\\n\u5bf9\u4e8e\u6807\u51c6\u7684 uio \u8bbe\u5907\uff0c\u901a\u8fc7**\u5411\u8bbe\u5907\u6587\u4ef6\u4e2d\u5199\u5165 1** \u6765**\u4f7f\u80fd**\u4e2d\u65ad\uff0c\u4e0e\u4e4b\u7c7b\u4f3c**\u5173\u95ed\u4e2d\u65ad**\u7684\u8fc7\u7a0b\u662f**\u5411\u8bbe\u5907\u6587\u4ef6\u4e2d\u5199\u5165 0**\u3002\\n\\nuio_intr_enable \u51fd\u6570\u7684\u4ee3\u7801\u6458\u5f55\u5982\u4e0b\uff1a\\n```c\\nstatic int\\nuio_intr_enable(struct rte_intr_handle *intr_handle)\\n{\\n\\tconst int value = 1;\\n\\n\\tif (write(intr_handle->fd, &value, sizeof(value)) < 0) {\\n\\t\\tRTE_LOG(ERR, EAL,\\n\\t\\t\\t\\"Error enabling interrupts for fd %d (%s)\\\\n\\",\\n\\t\\t\\tintr_handle->fd, strerror(errno));\\n\\t\\treturn -1;\\n\\t}\\n\\treturn 0;\\n}\\n```\\n\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u5199 1 \u5230 uio \u8bbe\u5907\u6587\u4ef6\u4e2d\u6765\u5b8c\u6210\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b\u3002\\n\\n## \u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u4ee3\u8868\u600e\u6837\u7684\u884c\u4e3a\uff1f\\nuio \u53ef\u4ee5\u770b\u505a\u662f\u4e00\u79cd**\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8**\uff0c\u5728\u6b64\u9a71\u52a8\u4e2d\u6ce8\u518c\u4e86**\u5355\u72ec\u7684 file_operations \u51fd\u6570\u8868**\uff0c\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u79cd**\u72ec\u7acb**\u7684\u8bbe\u5907\u7c7b\u578b\u3002\\n\\nfile_operations \u51fd\u6570\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```c\\nstatic const struct file_operations uio_fops = {\\n\\t.owner\\t\\t= THIS_MODULE,\\n\\t.open\\t\\t= uio_open,\\n\\t.release\\t= uio_release,\\n\\t.read\\t\\t= uio_read,\\n\\t.write\\t\\t= uio_write,\\n\\t.mmap\\t\\t= uio_mmap,\\n\\t.poll\\t\\t= uio_poll,\\n\\t.fasync\\t\\t= uio_fasync,\\n\\t.llseek\\t\\t= noop_llseek,\\n};\\n```\\n\\n\u8be5\u51fd\u6811\u8868\u5728 uio_major_init \u4e2d\u521d\u59cb\u5316 cdev \u7ed3\u6784\u4f53\u65f6\u4f7f\u7528\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n    cdev->owner = THIS_MODULE;\\n\\tcdev->ops = &uio_fops;\\n\\tkobject_set_name(&cdev->kobj, \\"%s\\", name);\\n\\n\\tresult = cdev_add(cdev, uio_dev, UIO_MAX_DEVICES);\\n```\\n## uio_write \u51fd\u6570\\nuio_write \u662f\u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u65f6\u5185\u6838\u4e2d\u6700\u7ec8\u8c03\u7528\u5230\u7684\u5199\u5165\u51fd\u6570\uff0c\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nstatic ssize_t uio_write(struct file *filep, const char __user *buf,\\n\\t\\t\\tsize_t count, loff_t *ppos)\\n{\\t\\n\\tstruct uio_listener *listener = filep->private_data;\\n\\tstruct uio_device *idev = listener->dev;\\n\\tssize_t retval;\\n\\ts32 irq_on;\\n\\n\\tif (count != sizeof(s32))\\n\\t\\treturn -EINVAL;\\n\\n\\tif (copy_from_user(&irq_on, buf, count))\\n\\t\\treturn -EFAULT;\\n\\n\\tmutex_lock(&idev->info_lock);\\n\\tif (!idev->info) {\\n\\t\\tretval = -EINVAL;\\n\\t\\tgoto out;\\n\\t}\\n\\n\\tif (!idev->info || !idev->info->irq) {\\n\\t\\tretval = -EIO;\\n\\t\\tgoto out;\\n\\t}\\n\\n\\tif (!idev->info->irqcontrol) {\\n\\t\\tretval = -ENOSYS;\\n\\t\\tgoto out;\\n\\t}\\n\\n\\tretval = idev->info->irqcontrol(idev->info, irq_on);\\n\\nout:\\n\\tmutex_unlock(&idev->info_lock);\\n\\treturn retval ? retval : sizeof(s32);\\n}\\n```\\n\\n\u53ef\u4ee5\u770b\u5230\u5b83**\u4ece\u7528\u6237\u6001\u83b7\u53d6**\u5230 **irq_on** \u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u4e3a 1 \u5bf9\u5e94\u8981\u4f7f\u80fd\u4e2d\u65ad\uff0c\u4e3a 0 \u5219\u8868\u793a\u5173\u95ed\u4e2d\u65ad\uff0c\u5728\u83b7\u53d6\u4e86\u8fd9\u4e2a\u53c2\u6570\u540e\uff0c\u5b83\u9996\u5148**\u5360\u7528\u4e92\u65a5\u9501**\uff0c\u7136\u540e\u8c03\u7528 **info** \u7ed3\u6784\u4f53\u4e2d\u5b9e\u4f8b\u5316\u7684 **irqcontrol \u5b50\u51fd\u6570**\u6765\u5b8c\u6210\u5de5\u4f5c\u3002\\n\\n## uio_info \u7ed3\u6784\u4f53\u53ca\u5176\u5b9e\u4f8b\u5316\u8fc7\u7a0b\\nuio_write \u51fd\u6570\u4e2d\u7684 idev \u53d8\u91cf\u662f\u4e00\u4e2a**\u6307\u5411 struct uio_device \u7684\u6307\u9488**\uff0c**struct uio_device** \u4e2d\u53c8\u5305\u542b \u4e00\u4e2a**\u6307\u5411 struct uio_info \u7684\u6307\u9488**\uff0c**struct uio_info** \u7ed3\u6784\u4f53\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```c\\nstruct uio_info {\\n\\tstruct uio_device\\t*uio_dev;\\n\\tconst char\\t\\t*name;\\n\\tconst char\\t\\t*version;\\n\\tstruct uio_mem\\t\\tmem[MAX_UIO_MAPS];\\n\\tstruct uio_port\\t\\tport[MAX_UIO_PORT_REGIONS];\\n\\tlong\\t\\t\\tirq;\\n\\tunsigned long\\t\\tirq_flags;\\n\\tvoid\\t\\t\\t*priv;\\n\\tirqreturn_t (*handler)(int irq, struct uio_info *dev_info);\\n\\tint (*mmap)(struct uio_info *info, struct vm_area_struct *vma);\\n\\tint (*open)(struct uio_info *info, struct inode *inode);\\n\\tint (*release)(struct uio_info *info, struct inode *inode);\\n\\tint (*irqcontrol)(struct uio_info *info, s32 irq_on);\\n};\\n```\\n\\n\u6bcf\u4e00\u4e2a uio \u8bbe\u5907\u90fd\u4f1a**\u5b9e\u4f8b\u5316**\u4e00\u4e2a **uio_info \u7ed3\u6784\u4f53**\uff0cuio \u9a71\u52a8\u81ea\u8eab**\u4e0d\u4f1a**\u5b9e\u4f8b\u5316 uio_info \u7ed3\u6784\u4f53\uff0c\u5b83\u53ea**\u63d0\u4f9b\u4e00\u4e2a\u6846\u67b6**\uff0c\u53ef\u4ee5\u5728\u5176\u5b83\u6a21\u5757\u4e2d\u8c03\u7528 **uio_register_device** \u6765\u5b9e\u4f8b\u5316 uio_info \u7ed3\u6784\u4f53\uff0c\u5728 dpdk \u4e2d\uff0c\u5e38\u89c1\u65b9\u5f0f\u662f**\u5728\u9a71\u52a8\u7ed1\u5b9a igb_uio \u7684\u65f6\u5019\u8c03\u7528 uio_register_device \u8fdb\u884c\u5b9e\u4f8b\u5316\u3002**\\n\\n## igb_uio.c \u4e2d\u7684\u76f8\u5173\u4ee3\u7801\\n\u53ef\u4ee5\u5728 igb_uio.c \u7684 probe \u51fd\u6570 **igbuio_pci_probe** \u4e2d\u627e\u5230\u5b9e\u4f8b\u5316\u7684\u76f8\u5173\u4ee3\u7801\uff0c\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n```c\\n\\t/* fill uio infos */\\n\\tudev->info.name = \\"igb_uio\\";\\n\\tudev->info.version = \\"0.1\\";\\n\\tudev->info.handler = igbuio_pci_irqhandler;\\n\\tudev->info.irqcontrol = igbuio_pci_irqcontrol;\\n#ifdef CONFIG_XEN_DOM0\\n\\t/* check if the driver run on Xen Dom0 */\\n\\tif (xen_initial_domain())\\n\\t\\tudev->info.mmap = igbuio_dom0_pci_mmap;\\n#endif\\n\\tudev->info.priv = udev;\\n\\tudev->pdev = dev;\\n\\t\\n...........................................................\\n\\n\\t/* register uio driver */\\n\\terr = uio_register_device(&dev->dev, &udev->info);\\n\\tif (err != 0)\\n\\t\\tgoto fail_remove_group;\\n```\\n\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u5bf9 udev->info \u4e2d\u7684\u5b57\u6bb5\u8fdb\u884c\u4e86**\u586b\u5145**\uff0c\u540c\u65f6**\u8bbe\u7f6e**\u4e86 **handler** \u4e0e **irqcontrol \u56de\u8c03\u51fd\u6570\u7b49\u5b57\u6bb5\u7684\u503c**\uff0c\u6700\u540e\u901a\u8fc7 **uio_register_device** **\u5b9e\u4f8b\u5316**\u4e00\u4e2a uio \u8bbe\u5907\u3002\\n\\n## write \u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u7684\u5b8c\u6574\u8fc7\u7a0b\\n\u4e0a\u6587\u4e2d\u6211\u5df2\u7ecf\u63d0\u5230\u8fc7\u4f7f\u7528 write \u7cfb\u7edf\u8c03\u7528\u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u6700\u7ec8\u5c06\u4f1a\u8c03\u7528\u5230\\n\\ninfo \u7ed3\u6784\u4f53\u4e2d\u5b9e\u4f8b\u5316\u7684 irqcontrol \u5b50\u51fd\u6570\u6765\u5b8c\u6210\u5de5\u4f5c\uff0c\u8fd9\u91cc igb_uio \u5c31\u5b8c\u6210\u4e86\u8fd9\u6837\u7684\u8fc7\u7a0b\u3002\\n\\n**\u4e5f\u5c31\u662f\u8bf4\u5728\u7ed1\u5b9a\u7f51\u5361\u5230 igb_uio \u65f6\uff0c\u5199\u5165\u63a5\u53e3\u5bf9\u5e94\u7684 uio \u8bbe\u5907\u6587\u4ef6\u65f6\u5c06\u4f1a\u8c03\u7528 igb_uio \u4e2d\u5b9e\u4f8b\u5316\u7684 info->irqcontrol \u51fd\u6570\u6765\u63a7\u5236\u4e2d\u65ad\u72b6\u6001\u3002**\\n\\n\u8fd9\u91cc\u63d0\u5230\u7684 irqcontrol \u7684\u5b9e\u4f8b\u5316\u51fd\u6570\uff0c\u5728 igb_uio \u4e2d\u5bf9\u5e94\u7684\u5c31\u662f igbuio_pci_irqcontrol \u51fd\u6570\u3002\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nstatic int\\nigbuio_pci_irqcontrol(struct uio_info *info, s32 irq_state)\\n{\\n\\tstruct rte_uio_pci_dev *udev = info->priv;\\n\\tstruct pci_dev *pdev = udev->pdev;\\n\\n\\tpci_cfg_access_lock(pdev);\\n\\tif (udev->mode == RTE_INTR_MODE_LEGACY)\\n\\t\\tpci_intx(pdev, !!irq_state);\\n\\n\\telse if (udev->mode == RTE_INTR_MODE_MSIX) {\\n\\t\\tstruct msi_desc *desc;\\n\\n#if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 3, 0))\\n\\t\\tlist_for_each_entry(desc, &pdev->msi_list, list)\\n\\t\\t\\tigbuio_msix_mask_irq(desc, irq_state);\\n#else\\n\\t\\tlist_for_each_entry(desc, &pdev->dev.msi_list, list)\\n\\t\\t\\tigbuio_msix_mask_irq(desc, irq_state);\\n#endif\\n\\t}\\n\\tpci_cfg_access_unlock(pdev);\\n\\n\\treturn 0;\\n}\\n```\\n\u8fd9\u91cc\u9700\u8981\u8bbf\u95ee pci \u914d\u7f6e\u7a7a\u95f4\uff0c\u6839\u636e\u4e0d\u540c\u7684\u4e2d\u65ad\u7c7b\u578b\u6765\u63a7\u5236\u4e2d\u65ad\u72b6\u6001\uff0c\u8fd9\u5c31\u5b8c\u6210\u4e86\u6240\u6709\u7684\u8fc7\u7a0b\u3002\\n\\n## \u5b8c\u6574\u7684\u8fc7\u7a0b\u8349\u56fe\\n\\nwrite uio -> uio_write -> idev->info->irqcontrol -> igbuio_pci_irqcontrol\\n\\n## \u8bbe\u5b9a\u7f51\u5361\u4e2d\u65ad\u5bc4\u5b58\u5668\\n\u5b8c\u6210\u4e86\u4e0a\u9762\u63cf\u8ff0\u7684\u4f7f\u80fd uio\u3001vfio \u4e2d\u65ad\u3001\u4e8b\u4ef6\u63cf\u8ff0\u7b26\u6620\u5c04\u7684\u8fc7\u7a0b\u540e\uff0c\u7f51\u5361\u521d\u59cb\u5316\u51fd\u6570\u4f1a\u8bbe\u5b9a\u7f51\u5361\u81ea\u8eab\u7684\u786c\u4ef6\u4e2d\u65ad\u5bc4\u5b58\u5668\u6765\u4f7f\u80fd\u786c\u4ef6\u4e2d\u65ad\u3002\\n\\n\u5bf9\u5e94 ixgbe \u9a71\u52a8\u4e2d\u4f7f\u80fd\u7f51\u5361\u786c\u4ef6\u4e2d\u65ad\u7684\u51fd\u6570\u8c03\u7528\u5982\u4e0b\uff1a\\n\\n```c\\n\\t/* enable support intr */\\n\\tixgbe_enable_intr(eth_dev);\\n```\\n\\nixgbe_enable_intr \u51fd\u6570\u901a\u8fc7\u5199\u5165 EIMS \u6765\u4f7f\u80fd\u9700\u8981\u7684\u4e2d\u65ad\u6e90\uff0c\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nstatic inline void\\nixgbe_enable_intr(struct rte_eth_dev *dev)\\n{\\n\\tstruct ixgbe_interrupt *intr =\\n\\t\\tIXGBE_DEV_PRIVATE_TO_INTR(dev->data->dev_private);\\n\\tstruct ixgbe_hw *hw =\\n\\t\\tIXGBE_DEV_PRIVATE_TO_HW(dev->data->dev_private);\\n\\n\\tIXGBE_WRITE_REG(hw, IXGBE_EIMS, intr->mask);\\n\\tIXGBE_WRITE_FLUSH(hw);\\n}\\n```\\n\u4ece 82599 \u7684\u624b\u518c\u4e2d\u627e\u5230\u4e86\u5982\u4e0b\u5185\u5bb9\uff1a\\n\\n>Software enables the required interrupt causes by setting the EIMS register.\\n\\n\u4e0e\u8fd9\u91cc\u8bbe\u5b9a EIMS \u5bc4\u5b58\u5668\u7684\u884c\u4e3a\u4e00\u81f4\uff0c\u81f3\u6b64\u5c31\u5b8c\u6210\u4e86\u6240\u6709\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002"},{"id":"/dpdk/\u4ee5 rte_mempool_ops_table \u4e3a\u4f8b\u63cf\u8ff0 dpdk \u7a0b\u5e8f\u5e93\u94fe\u63a5\u987a\u5e8f\u5bf9\u7a0b\u5e8f\u6267\u884c\u7684\u5f71\u54cd","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u4ee5 rte_mempool_ops_table \u4e3a\u4f8b\u63cf\u8ff0 dpdk \u7a0b\u5e8f\u5e93\u94fe\u63a5\u987a\u5e8f\u5bf9\u7a0b\u5e8f\u6267\u884c\u7684\u5f71\u54cd","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u4ee5 rte_mempool_ops_table \u4e3a\u4f8b\u63cf\u8ff0 dpdk \u7a0b\u5e8f\u5e93\u94fe\u63a5\u987a\u5e8f\u5bf9\u7a0b\u5e8f\u6267\u884c\u7684\u5f71\u54cd.md","source":"@site/blog/dpdk/\u4ee5 rte_mempool_ops_table \u4e3a\u4f8b\u63cf\u8ff0 dpdk \u7a0b\u5e8f\u5e93\u94fe\u63a5\u987a\u5e8f\u5bf9\u7a0b\u5e8f\u6267\u884c\u7684\u5f71\u54cd.md","title":"dpdk mempool_ops","description":"dpdk mempool_ops \u662f\u5bf9\u65e7\u7248 mempool \u4ee3\u7801\u7684\u62bd\u8c61\uff0c\u5728 dpdk-16.07 \u4e2d\u88ab\u5f15\u5165\u3002","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":12.455,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/\u4ee5 ixgbe pmd \u9a71\u52a8\u4e3a\u4f8b\u7814\u7a76 dpdk pmd \u9a71\u52a8\u4e2d\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u5e76\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b","permalink":"/longyu.github.io/blog/dpdk/\u4ee5 ixgbe pmd \u9a71\u52a8\u4e3a\u4f8b\u7814\u7a76 dpdk pmd \u9a71\u52a8\u4e2d\u6ce8\u518c\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u5e76\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b"},"nextItem":{"title":"\u73af\u5883\u4ecb\u7ecd","permalink":"/longyu.github.io/blog/dpdk/\u4f7f\u7528\u5185\u6838\u9a71\u52a8\u4e0a\u624b x710 flow directory \u529f\u80fd"}},"content":"dpdk mempool_ops \u662f\u5bf9\u65e7\u7248 mempool \u4ee3\u7801\u7684\u62bd\u8c61\uff0c\u5728 **dpdk-16.07** \u4e2d\u88ab\u5f15\u5165\u3002\\n\\n\u8001\u7248\u672c\u5728\u521b\u5efa mempool \u65f6\u4f1a\u521b\u5efa\u4e00\u4e2a\u5185\u90e8\u7684 **ring** \u6765\u5b8c\u6210**\u5165\u961f\u4e0e\u51fa\u961f\u7684\u64cd\u4f5c**\uff0c\u5e95\u5c42\u533a\u5206\u4e86**\u591a\u751f\u4ea7\u8005\u3001\u591a\u6d88\u8d39\u8005\uff0c\u5355\u751f\u4ea7\u8005\u3001\u5355\u6d88\u8d39\u8005**\u6a21\u578b\u3002\\n\\n\u8001\u7248\u672c mempool \u521b\u5efa\u65f6\u4f1a**\u5c06\u6240\u6709\u7684\u5143\u7d20\u9884\u5148 enqueue \u5230 ring \u4e2d**\uff0c\u5e76\u5bf9**\u6bcf\u4e2a**\u5143\u7d20\u6267\u884c**\u521d\u59cb\u5316**\u64cd\u4f5c\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u9690\u542b\u5728 mempool \u7684\u5185\u90e8\u5b9e\u73b0\u4e2d\u3002\u7528\u6237\u4ece mempool \u4e2d\u7533\u8bf7\u3001\u91ca\u653e mem\uff0c\u6700\u5e95\u5c42\u662f\u901a\u8fc7 **dequeue\u3001enqueue ring** \u6765\u5b9e\u73b0\u7684\u3002\\n\\n\u968f\u7740 dpdk \u652f\u6301\u573a\u666f\u7684\u62d3\u5bbd\uff0c\u5728 mempool \u5e95\u5c42\u4f7f\u7528 **ring** \u8fd9\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u6765\u63a7\u5236 mem \u7684\u7533\u8bf7\u4e0e\u91ca\u653e**\u4e0d\u80fd\u6ee1\u8db3\u6240\u6709\u573a\u666f\u7684\u4f7f\u7528\u9700\u6c42**\u3002\\n\\n\u5728\u4e00\u4e9b\u573a\u666f\u4e0b\uff0c\u4e00\u4e9b\u5916\u90e8\u7684\u5185\u5b58\u5b50\u7cfb\u7edf\u5728\u4f7f\u7528 DPDK \u65f6\u9700\u8981\u5bf9 mempool \u5e95\u5c42\u7684\u5165\u961f\u4e0e\u51fa\u961f\u7684\u884c\u4e3a\u8fdb\u884c\u5b9a\u5236\u5316\u5f00\u53d1\uff0c\u8fd9\u610f\u5473\u7740\u5e95\u5c42\u7684\u8fd9\u90e8\u5206\u529f\u80fd\u9700\u8981\u5411\u5916\u90e8\u5f00\u653e\uff0c\u5fc5\u987b\u80fd\u591f\u8ba9\u7a0b\u5e8f\u6ce8\u518c\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5165\u961f\u3001\u51fa\u961f\u65b9\u6cd5\u53ca\u5173\u8054\u6570\u636e\u7ed3\u6784\uff0crte_mempool_ops \u5c31\u662f\u8fd9\u79cd\u529f\u80fd\u7684\u5177\u4f53\u5b9e\u73b0\u3002\\n\\n# rte_mempool_ops \u7684\u62bd\u8c61\\n16.07 \u4e2d rte_mempool_ops \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\nstruct rte_mempool_ops {\\n       char name[RTE_MEMPOOL_OPS_NAMESIZE]; /**< Name of mempool ops struct. */\\n       rte_mempool_alloc_t alloc;       /**< Allocate private data. */\\n       rte_mempool_free_t free;         /**< Free the external pool. */\\n       rte_mempool_enqueue_t enqueue;   /**< Enqueue an object. */\\n       rte_mempool_dequeue_t dequeue;   /**< Dequeue an object. */\\n       rte_mempool_get_count get_count; /**< Get qty of available objs. */\\n} __rte_cache_aligned;\\n```\\nname \u7528\u4e8e**\u552f\u4e00\u6807\u8bc6**\u6bcf\u4e2a mempool_ops\uff0calloc \u7528\u4e8e mempool_ops **\u5185\u90e8\u6570\u636e\u7ed3\u6784\u7684\u521b\u5efa**\uff0cfree \u7528\u4e8e mempool_ops **\u5185\u90e8\u6570\u636e\u7ed3\u6784\u7684\u9500\u6bc1**\uff0cenqueue \u8d1f\u8d23\u5165\u961f\u5217\uff0cdequeue \u8d1f\u8d23\u51fa\u961f\u5217\uff0cget_count \u7528\u4ee5\u83b7\u53d6\u5f53\u524d\u53ef\u7528\u7684\u5bf9\u8c61\u6570\u91cf\u3002\\n\\n\u603b\u7ed3\u8d77\u6765\u6709\u5982\u4e0b\u4e09\u90e8\u5206\u529f\u80fd\uff1a\\n\\n1. mempool_ops \u5185\u90e8\u6570\u636e\u7ed3\u6784\u7684\u521b\u5efa\u4e0e\u91ca\u653e\u529f\u80fd\\n2. mempool_ops \u5bf9\u8c61\u7684\u5165\u961f\u4e0e\u51fa\u961f\u529f\u80fd\\n3. mempool_ops \u5e95\u5c42\u53ef\u7528\u5bf9\u8c61\u6570\u91cf\u7684\u67e5\u8be2\u529f\u80fd\\n\\n\\n# \u4ee5 ring \u63cf\u8ff0\u5728 mempool_ops \u6846\u67b6\u4e0b mempool_ops \u7684\u4f7f\u7528\u8fc7\u7a0b\\n\u6bcf\u4e00\u4e2a mempool_ops \u9700\u8981\u5b9e\u4f8b\u5316\u4e00\u4e2a rte_mempool_ops \u7ed3\u6784\u5e76\u5c06\u6b64\u7ed3\u6784\u6ce8\u518c\u5230\u7cfb\u7edf\u4e2d\uff0c\u5bf9\u5355\u751f\u4ea7\u8005\u4e0e\u5355\u6d88\u8d39\u8005\u8fd9\u79cd\u57fa\u4e8e ring \u7684\u6a21\u578b\u800c\u8a00\u5b83\u5b9e\u4f8b\u5316\u7684 rte_mempool_ops \u5b9a\u4e49\u5982\u4e0b\uff1b\\n\\n```c\\nstatic const struct rte_mempool_ops ops_sp_sc = {\\n       .name = \\"ring_sp_sc\\",\\n       .alloc = common_ring_alloc,\\n       .free = common_ring_free,\\n       .enqueue = common_ring_sp_enqueue,\\n       .dequeue = common_ring_sc_dequeue,\\n       .get_count = common_ring_get_count,\\n};\\n```\\n\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6ce8\u518c\uff1a\\n\\n```c\\nMEMPOOL_REGISTER_OPS(ops_sp_sc);\\n```\\nMEMPOOL_REGISTER_OPS \u901a\u8fc7 gcc \u7684\u6784\u9020\u51fd\u6570\u58f0\u660e\uff0c\u8c03\u7528 rte_mempool_register_ops \u51fd\u6570\u5c06 ops_sp_sc mempool_ops \u6ce8\u518c\u5230\u7cfb\u7edf\u4e2d\u3002\\n\\nrte_mempool_register_ops \u5728\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u5185\u5bb9\u68c0\u67e5\u540e\uff0c\u5c06 ops_sp_sc \u6ce8\u518c\u5230 rte_mempool_ops_table \u8868\u4e2d\uff08**\u5728\u83b7\u53d6\u5230\u4e92\u65a5\u9501\u7684\u524d\u63d0\u4e0b\uff0c\u4fdd\u8bc1\u5bf9 rte_mempool_ops_table \u7684\u4e92\u65a5\u8bbf\u95ee**\uff09\u3002\\n\\n\u6210\u529f\u540e\uff0c\u4f1a\u83b7\u53d6\u5230 **ops_index** \uff08**ops \u5728 rte_mempool_ops_table \u4e2d\u7684\u4e0b\u6807**\uff09\uff0c\u8fd9\u4e2a\u4e0b\u6807\u4f1a\u88ab\u4fdd\u5b58\u5230 **mempool** \u7ed3\u6784\u7684 **ops_index** \u5b57\u6bb5\u4e2d\uff08**\u901a\u8fc7\u8c03\u7528 rte_mempool_set_ops_byname \u51fd\u6570\u8bbe\u7f6e**\uff09\u3002\\n\\n\u5176\u529f\u80fd\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\n       /**\\n        * Index into rte_mempool_ops_table array of mempool ops\\n        * structs, which contain callback function pointers.\\n        * We\'re using an index here rather than pointers to the callbacks\\n        * to facilitate any secondary processes that may want to use\\n        * this mempool.\\n        */\\n       int32_t ops_index;\\n```\\n# mempool_ops \u88ab\u8c03\u7528\u7684\u5730\u65b9\\n\u4f7f\u7528 mempool_ops \u65f6\uff0c\u901a\u8fc7 rte_mempool_get \u51fd\u6570\u51fa\u961f\u5217\u8fc7\u7a0b\u51fd\u6570\u8c03\u7528\u56fe\u793a\u5982\u4e0b\uff1a\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210615153814667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\\n\u5f53 cache \u4e2d\u6ca1\u6709\u7f13\u5b58\u65f6\uff0c\u5c31\u8c03\u7528\u5e95\u5c42 ops \u4e2d\u6ce8\u518c\u7684 dequeue \u63a5\u53e3\u6765\u5b8c\u6210\u3002\\n\\n# dpdk-16.07 \u4e2d\u76f8\u5173 git commit\\n\u76f8\u5173\u7684 commit \u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```c\\ncommit 449c49b93a6b87506c7bb07468e82b539efddca3\\nAuthor: David Hunt <david.hunt@intel.com>\\nDate:   Wed Jun 22 10:27:27 2016 +0100\\n\\n    mempool: support handler operations\\n    \\n    Until now, the objects stored in a mempool were internally stored in a\\n    ring. This patch introduces the possibility to register external handlers\\n    replacing the ring.\\n    \\n    The default behavior remains unchanged, but calling the new function\\n    rte_mempool_set_ops_byname() right after rte_mempool_create_empty() allows\\n    the user to change the handler that will be used when populating\\n    the mempool.\\n    \\n    This patch also adds a set of default ops (function callbacks) based\\n    on rte_ring.\\n    \\n    Signed-off-by: David Hunt <david.hunt@intel.com>\\n    Signed-off-by: Olivier Matz <olivier.matz@6wind.com>\\n    Acked-by: Shreyansh Jain <shreyansh.jain@nxp.com>\\n    Acked-by: Olivier Matz <olivier.matz@6wind.com>\\n```\\n\u6b64\u63a5\u53e3\u5728\u540e\u9762\u7684\u7248\u672c\u6709\u4e00\u4e9b\u4f18\u5316\uff0c\u4f46\u662f\u4e3b\u4f53\u6846\u67b6\u6ca1\u6709\u5927\u7684\u53d8\u52a8\u3002\u6ce8\u518c\u4e00\u4e2a\u81ea\u5df1\u7684 mempool_ops \u7684\u5b9e\u4f8b**\u53ef\u4ee5\u53c2\u7167 vpp  dpdk_plugins \u4e2d\u7684\u5b9e\u73b0\u4ee3\u7801**\u3002\\n\\n# 19.11 \u4e2d dpdk \u7a0b\u5e8f\u521d\u59cb\u5316\u540e rte_mempool_ops_table \u7684\u5e03\u5c40\u60c5\u51b5\\n\\ndpdk-19.11 \u4e2d dpdk \u7a0b\u5e8f\u521d\u59cb\u5316\u540e rte_mempool_ops_table \u7ed3\u6784\u793a\u4f8b\u5982\u4e0b\u56fe\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210615103819679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\\n\u4e0a\u56fe\u4e2d\uff0crte_mempool_ops_table \u7684\u4e0d\u540c\u8868\u9879\u6307\u5411\u4e0d\u540c\u7684 mempool_ops \u5b9e\u4f8b\u3002\\n\\n\u4f7f\u7528\u9759\u6001\u5e93\u65f6\uff0c\u94fe\u63a5\u4e0d\u540c **mempool_ops** \u6240\u5728\u5e93\u7684**\u987a\u5e8f\u51b3\u5b9a\u4e86** **rte_mempool_ops_table** \u4e2d\u4e0d\u540c **mempool_ops** \u7684**\u5e03\u5c40**\u3002\u5982\u679c dpdk primary \u8fdb\u7a0b\u4e0e secondary \u8fdb\u7a0b**\u94fe\u63a5**\u4e0d\u540c mempool_ops \u6784\u9020\u51fd\u6570\u6240\u5728**\u5e93\u7684\u987a\u5e8f\u4e0d\u540c**\uff0c\u5219\u4f1a\u6709**\u4e0d\u540c\u7684** rte_mempool_ops_table **\u5e03\u5c40**\uff0c\u5f53 mempool \u9700\u8981\u5728 primary \u4e0e secondary \u4e2d\u5171\u4eab\u65f6\uff0c\u4e0d\u540c\u7684 rte_mempool_ops_table \u5e03\u5c40\u5c31\u4f1a\u5e26\u6765\u4e25\u91cd\u7684\u95ee\u9898\uff01\\n\\n\\n## \u7b2c\u4e00\u79cd\u5e03\u5c40\u65b9\u5f0f\u2014\u2014dpdk \u5185\u90e8\u793a\u4f8b\u7a0b\u5e8f\u7684\u5e03\u5c40\\n\u8fd9\u91cc\u4ee5 dpdk-pdump \u4e3a\u4ee3\u8868\uff0c\u5176\u94fe\u63a5\u53c2\u6570\u53ef\u4ee5\u67e5\u770b\u5982\u4e0b\u6587\u4ef6\uff1a\\n\\n```bash\\nx86_64-native-linuxapp-gcc/build/app/pdump/.dpdk-pdump.cmd\\n```\\n\u6b64\u79cd\u65b9\u5f0f\u4e0b rte_mempool_ops_table \u7684\u524d 4 \u4e2a\u5143\u7d20\u5e03\u5c40\u60c5\u51b5\u89c1\u4e0b\u56fe\uff1a![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210615110317285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\\n\u53ef\u4ee5\u770b\u5230\uff0cmp_mc \u8fd9\u79cd\u57fa\u4e8e ring \u7684\u591a\u751f\u4ea7\u8005\u4e0e\u591a\u6d88\u8d39\u8005\u5360\u636e rte_mempool_ops_table \u8868\u4e2d ops \u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u8868\u9879\uff0cexamples \u76ee\u5f55\u4e0b\u7684 dpdk primary \u7a0b\u5e8f\u4e2d rte_mempool_ops_table \u8868\u7684\u5e03\u5c40\u4e0e app \u4e0b\u7684\u7a0b\u5e8f\u5e03\u5c40\u4e00\u81f4\u3002\\n\\n## \u4f7f\u7528 libdpdk.a \u94fe\u63a5\u5916\u90e8\u7a0b\u5e8f\u65f6\u7684\u5e03\u5c40\u60c5\u51b5\\nlibdpdk.a \u4e2d mempool \u76f8\u5173\u9759\u6001\u5e93\u7684\u94fe\u63a5\u987a\u5e8f\u5982\u4e0b\uff1a\\n\\n```bash\\ncat ./x86_64-native-linux-gcc/lib/libdpdk.a\\nGROUP (...librte_mempool_bucket.a librte_mempool_dpaa2.a librte_mempool_octeontx.a librte_mempool_octeontx2.a librte_mempool_ring.a librte_mempool_stack.a ...)\\n```\\n\u6b64\u65f6\u7a0b\u5e8f\u8fd0\u884c\u540e\uff0crte_mempool_ops_table \u8868\u4e2d mempool_ops \u7684\u5e03\u5c40\u60c5\u51b5\u89c1\u4e0b\u56fe\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20210615111522370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\\n\u53ef\u4ee5\u770b\u5230\uff0c\u6b64\u65f6 mempool_bucket_ops \u5360\u636e rte_mempool_ops_table \u4e2d ops \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e0e\u7b2c\u4e00\u79cd\u60c5\u51b5\u662f\u4e0d\u540c\u7684\u3002\\n\\n# \u95ee\u9898\u63cf\u8ff0\\nprimary \u8fdb\u7a0b\u4f7f\u7528 libdpdk.a \u4e2d\u7684\u94fe\u63a5\u987a\u5e8f\uff0c\u4f7f\u7528\u7b2c\u4e8c\u79cd rte_mempool_ops_table \u5e03\u5c40\u65b9\u5f0f\uff0csecondary \u8fdb\u7a0b\u4f7f\u7528 dpdk-pdump\uff0c\u4f7f\u7528\u6b64\u7a0b\u5e8f\u6765\u6293\u53d6\u62a5\u6587\u3002\\n\\n\u95ee\u9898\u73b0\u8c61\uff1a\\n\\n**\u6253\u6d41\u60c5\u51b5\u4e0b\uff0cdpdk-pdump \u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\u540e\u4f1a\u5bfc\u81f4 primary \u8fdb\u7a0b\u6bb5\u9519\u8bef\u3002**\\n\\n# dpdk-pdump dump \u62a5\u6587\u7684\u539f\u7406\u6d45\u6790\\n**dpdk-pdump** \u9996\u5148\u521b\u5efa **pdump_tuples** \u4e2d\u4f7f\u80fd\u8868\u9879\u7684\u4e0d\u540c\u5b57\u6bb5\uff0c\u4e00\u4e2a **pdump_tuples \u8868\u9879** \u80fd\u591f**\u5b8c\u6574**\u7684\u63cf\u8ff0\u4e00\u4e2a\u5f85 dump \u7684\u76ee\u6807\u63a5\u53e3\u3002\\n\\n**dpdk-pdump** \u4f1a\u4e3a\u6bcf\u4e00\u4e2a pdump_tuples \u521b\u5efa**\u5355\u72ec\u7684 pktmbuf_pool** \u5e76\u4f7f\u7528 **mp_mc_ops** \u8fd9\u79cd **mempool_ops**\uff0c\u540c\u65f6\u4f1a\u6839\u636e\u914d\u7f6e\u7684\u529f\u80fd\uff0c\u6765\u521b\u5efa\u76f8\u5e94\u7684 **ring**\u3002\\n\\n**pdump_tuples \u53ca vdev \u63a5\u53e3\u521d\u59cb\u5316\u5b8c\u6210\u540e**\uff0c**dpdk-pdump** \u4f1a\u8c03\u3000**rte_pdump_enable_by_deviceid** \u6765\u4f7f\u80fd dump \u6307\u5b9a\u63a5\u53e3\u6307\u5b9a\u961f\u5217\u4e0a\u6307\u5b9a\u6536\u3001\u65b9\u5411\u62a5\u6587\u7684\u529f\u80fd\u3002\\n\\n**rte_pdump_enable_by_deviceid** \u4f1a\u4f7f\u7528 **pdump_tuples** \u4e2d\u914d\u7f6e\u8868\u9879\u7684\u5185\u5bb9\u4f5c\u4e3a\u53c2\u6570\uff0c\u6784\u9020\u4e00\u6761**\u8bf7\u6c42**\uff0c\u7136\u540e\u5c06\u8fd9\u6761\u8bf7\u6c42\u901a\u8fc7**\u672c\u5730\u5957\u63a5\u5b57**\u53d1\u9001\u7ed9 **primary** \u8fdb\u7a0b\u3002\\n\\n**primary** \u8fdb\u7a0b\u6536\u5230\u8fd9\u6761\u6d88\u606f\u540e\uff0c\u8fdb\u884c\u89e3\u6790\u5e76\u8c03\u7528 **pdump_server** \u51fd\u6570\uff0c**pdump_server** \u8c03\u7528 **set_pdump_rxtx_cbs** \u6765\u5411\u8bf7\u6c42\u7684 port \u4e0e queue \u7684 rx\u3001tx \u65b9\u5411\u6ce8\u518c\u56de\u8c03\u51fd\u6570\uff0crx \u8fd9\u65b9\u4e3a **pdump_rx**\uff0ctx \u8fd9\u65b9\u4e3a **pdump_tx**\u3002\\n\\n\u5b8c\u6210\u4e86\u4e0a\u8ff0\u64cd\u4f5c\u540e\uff0c**pdump_server** \u4f1a\u5411\u5bf9\u65b9\u53d1\u9001\u4e00\u4e2a **reply**\uff0c\u8868\u660e\u914d\u7f6e\u72b6\u6001\u3002\\n\\n\u5f53\u7a0b\u5e8f\u8c03\u7528 **rte_eth_rx_burst** \u65f6\uff0c**\u6210\u529f\u6536\u5230\u62a5\u6587\u540e**\uff0c\u4f1a**\u904d\u5386\u63a5\u6536\u56de\u8c03\u51fd\u6570\u5e76\u6267\u884c**\uff0c\u5728\u8fd9\u91cc\u5c31\u8c03\u7528\u5230\u4e86 **pdump_rx** \u51fd\u6570\u3002\\n\\n**pdump_r**x \u51fd\u6570\u4f7f\u7528 **dpdk-pdump** \u53d1\u9001\u8bf7\u6c42\u4e2d\u6307\u5b9a\u7684 **mempool** \u6765\u7533\u8bf7 **mbuf**\uff0c\u7136\u540e\u62f7\u8d1d\u62a5\u6587\u5230 **mbuf** \u4e2d\uff0c\u6210\u529f\u540e\u5c31\u5c1d\u8bd5\u5c06\u62a5\u6587\u6295\u9012\u5230 dpdk-pdump \u53d1\u9001\u8bf7\u6c42\u4e2d\u6307\u5b9a\u7684 ring \u4e2d\uff0c\u5931\u8d25\u5219\u76f4\u63a5\u91ca\u653e\u62a5\u6587\u3002\\n\\n\u7531\u4e8e dpdk \u7a0b\u5e8f\u5728\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u5df2\u7ecf\u6267\u884c\u4e86\u4e00\u4e9b**\u5185\u5b58\u7684\u5171\u4eab\u64cd\u4f5c**\uff0cprimary \u8fdb\u7a0b\u80fd\u591f**\u76f4\u63a5\u4f7f\u7528 secondary \u8fdb\u7a0b\u4e2d\u7684\u4e00\u4e9b\u865a\u62df\u5730\u5740**\uff0c\u8fd9\u91cc\u7684 mempool \u7684\u5730\u5740\u5c31\u662f\u4e00\u4e2a\u5b9e\u4f8b\u3002\\n\\n\u95ee\u9898\u5c31\u51fa\u5728\u8fd9\u91cc\uff01\u5f53 primary \u8fdb\u7a0b\u6536\u5230\u5305\u540e\uff0c\u8c03\u7528\u5230 pdump_rx \u51fd\u6570\u65f6\uff0c\u5728\u4ece mempool \u4e2d\u7533\u8bf7 mbuf \u7684\u65f6\u5019\uff0c\u7531\u4e8e **dpdk-pdump \u4e0e primary \u8fdb\u7a0b\u7684 rte_mempool_ops_table \u8868\u4e2d mempool_ops \u7684\u5e03\u5c40\u4e0d\u540c**\uff0c\u5728 dpdk-pdump \u5bf9\u5e94 **ops_mp_mc** \u8fd9\u4e2a **mempool_ops** \u7684\u8868\u9879\u5904\uff0c\u5728 primary \u8fdb\u7a0b\u4e2d\u5b9e\u9645\u5bf9\u5e94\u7684\u662f **bucket** \u7684 **mempool_ops**\uff0c\u5c31\u9020\u6210\u4e86 primary \u8fdb\u7a0b**\u6bb5\u9519\u8bef**\uff01\\n\\n# \u89e3\u51b3\u65b9\u6848\\n\u8c03\u6574 libdpdk.a \u4e2d mempool_ops \u6240\u5728\u5e93\u7684\u94fe\u63a5\u987a\u5e8f\uff0c\u4e0e dpdk-pdump \u4fdd\u6301\u4e00\u81f4\uff0c\u91cd\u65b0\u7f16\u8bd1 primary \u7a0b\u5e8f\u3002\\n\\n# \u603b\u7ed3\\n\u672c\u6587\u4ece rte_mempool_ops \u7740\u624b\u63cf\u8ff0\uff0c\u76ee\u7684\u5728\u4e8e\u8bf4\u660e\u7531\u4e8e\u5e93\u94fe\u63a5\u987a\u5e8f\u7684\u533a\u522b\u5bfc\u81f4 dpdk primary \u8fdb\u7a0b\u4e0e secondary \u8fdb\u7a0b\u4e2d mempool_ops \u5728 rte_mempool_ops_table \u5360\u636e\u4e0d\u540c\u7684\u8868\u9879\uff0c\u8fdb\u4e00\u6b65\u9020\u6210\u7a0b\u5e8f\u6bb5\u9519\u8bef\u7684\u95ee\u9898\u3002\\n\\n\u4f7f\u7528 gcc \u7684 constructor \u4fee\u9970\u7b26\u6765\u58f0\u660e\u6784\u9020\u51fd\u6570\uff0c\u5728\u4f7f\u7528\u9759\u6001\u5e93\u7684\u60c5\u51b5\u4e0b\uff0c**\u94fe\u63a5\u987a\u5e8f\u5c31\u51b3\u5b9a\u4e86\u521d\u59cb\u5316\u7684\u987a\u5e8f\uff0c\u8fdb\u800c\u5f71\u54cd\u5230\u4e86\u5728\u4e0d\u540c\u7a0b\u5e8f\u4e2d\u8868\u5355\u7684\u5e03\u5c40**\uff0c\u8fd9\u4e00\u5e03\u5c40\u53c8\u968f\u7740\u591a\u4e2a\u7a0b\u5e8f\u4e4b\u95f4\u7684\u4ea4\u4e92\u88ab\u8bef\u7528\uff0c\u6700\u7ec8\u9020\u6210\u4e86\u4e25\u91cd\u7684\u95ee\u9898\u3002\\n\\n\u4f7f\u7528 constructor \u4fee\u9970\u7b26**\u8ba9 mempool_ops \u7684\u52a8\u6001\u6dfb\u52a0**\u53d8\u5f97\u975e\u5e38\u7b80\u5355\uff0c\u907f\u514d\u4e86\u786c\u7f16\u7801\u3002\u4f46\u662f\u4f7f\u7528\u4e86 **constructor** \u7684\u540c\u65f6\u4e5f\u7ee7\u627f\u4e86 **constructor** \u6f5c\u5728\u7684\u95ee\u9898\uff0c\u5373\u94fe\u63a5\u7684\u987a\u5e8f\u51b3\u5b9a\u4e86\u521d\u59cb\u5316\u7684\u987a\u5e8f\uff0c\u8fd9\u7b97\u662f\u79cd\u9690\u5f0f\u7684\u4f9d\u8d56\uff0c\u4e0d\u592a\u5bb9\u6613\u53d1\u73b0\uff01\\n\\n\u6b63\u5982\u4e00\u4ef6\u4e8b\u7269\u6709\u597d\u6709\u574f\uff0c\u4e00\u4e2a\u6280\u672f\u4e5f\u6709\u597d\u6709\u574f\uff0c\u66f4\u51c6\u786e\u70b9\u8bf4\u5e94\u8be5\u662f**\u6709\u4f18\u52bf\u4e5f\u6709\u9650\u5236\u6761\u4ef6**\u3002\u6211\u4eec\u5e94\u5f53\u505a\u5230\u65e2\u6e05\u695a\u5b83\u7684\u4f18\u52bf\u4e5f\u6e05\u695a\u5b83\u7684\u9650\u5236\u6761\u4ef6\uff0c\u6b63\u5982\u6211\u4eec\u9700\u8981\u660e\u609f\u81ea\u5df1\u7684\u957f\u77ed\u4e00\u822c\uff0c\u5e76\u4e0d\u662f\u90a3\u4e48\u5bb9\u6613\uff01\\n\\n\u672c\u7bc7\u6587\u7ae0\u7b97\u662f\u4f7f\u7528 **groff** \u7ed8\u56fe\u7684\u4e00\u4e2a\u5f00\u7aef\uff0c\u7ed8\u51fa\u7684\u56fe\u8ba9\u4eba\u633a\u6ee1\u610f\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5f00\u7aef\uff0c\u4e5f\u662f\u4e00\u4e2a\u6539\u53d8\u7684\u70b9\u3002\\n\\n\u6700\u540e\u5c06 **mempool_ops** \u4e2d\u67d0\u5f20\u56fe\u7247\u7684 pic \u4ee3\u7801\u8d34\u5230\u4e0b\u9762\uff0c\u4ec5\u4f9b\u53c2\u8003\uff01\\n\\n\\n```pic\\n.PS\\n\\ndefine rte_mempool_ops { \\n\\tbox \\"..........\\";\\n\\tbox $1 fill 0.4;\\n\\tbox $2 fill 0.6;\\n }\\n\\nboxht=0.4;\\nboxwid=2.5;\\n\\nA:box \\"sl\\";\\ndown;\\nbox \\"num_ops\\" with .nw at A.sw;\\nB:box \\"ops[0]\\" fill 0.5;\\nC:box \\"ops[1]\\" fill 0.5;\\nD: box \\"ops[2]\\" fill 0.5;\\nE: box \\"ops[3]\\" fill 0.5;\\nF:box \\"ops[...]\\" fill 0.5;\\n\\nboxwid=1.8;\\n\\nH:box \\"octeontx\\" with .nw at A.se + (2, -4) fill 0.2;\\nrte_mempool_ops(\\"otx2_npa_enq\\", \\"otx2_npa_deq\\");\\n\\nI:box \\"dpaa\\" with .nw at A.e + (2, 0.5) fill 0.2;\\nrte_mempool_ops(\\"dpaa_mbuf_free_bulk\\", \\"dpaa_mbuf_alloc_bulk\\");\\n\\nJ:box \\"bucket\\" with .nw at A.se + (2, 3) fill 0.2;\\nrte_mempool_ops(\\"bucket_enqueue\\", \\"bucket_dequeue\\");\\n\\nK:box \\"dpaa2\\" with .nw at A.se + (2, -1.5) fill 0.2;\\nrte_mempool_ops(\\"irte_hw_mbuf_free_bulk\\", \\"rte_dpaa2_mbuf_alloc_bulk\\");\\n\\n\\"\\\\fBrte_mempool_ops_table\\\\fR\\" textwid 2 with .nw at A.c + (0, 0.4);\\n\\"\\\\fB  mempool_octeontx_ops\\\\fR\\" textwid 2 with .nw at H.c + (0, 0.4);\\n\\"\\\\fB  mempool_dpaa_ops\\\\fR\\" textwid 2 with .nw at I.c + (0, 0.4);\\n\\"\\\\fB  mempool_bucket_ops\\\\fR\\" textwid 2 with .nw at J.c + (0, 0.4);\\n\\"\\\\fB  mempool_dpaa2_ops\\\\fR\\" textwid 2 with .nw at K.c + (0, 0.4);\\n\\n\\n\\nline chop 0 chop 0 from B.e to J.w ->;\\nline chop 0 chop 0 from C.e to I.w ->;\\nline chop 0 chop 0 from D.e to K.w ->;\\nline chop 0 chop 0 from E.e to H.w ->;\\n```"},{"id":"/dpdk/\u4f7f\u7528\u5185\u6838\u9a71\u52a8\u4e0a\u624b x710 flow directory \u529f\u80fd","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u4f7f\u7528\u5185\u6838\u9a71\u52a8\u4e0a\u624b x710 flow directory \u529f\u80fd","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u4f7f\u7528\u5185\u6838\u9a71\u52a8\u4e0a\u624b x710 flow directory \u529f\u80fd.md","source":"@site/blog/dpdk/\u4f7f\u7528\u5185\u6838\u9a71\u52a8\u4e0a\u624b x710 flow directory \u529f\u80fd.md","title":"\u73af\u5883\u4ecb\u7ecd","description":"i40e \u9a71\u52a8\u7248\u672c\u4e3a 5.0 \u5185\u6838\u4e3b\u7ebf\u7248\u672c\uff0c\u7f51\u5361\u4e3a x710 \u7f51\u5361\u3002\u9700\u8981\u6d4b\u8bd5 flow directory \u529f\u80fd\u80fd\u5426\u6b63\u5e38\u4f7f\u7528\u3002","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":16.465,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk mempool_ops","permalink":"/longyu.github.io/blog/dpdk/\u4ee5 rte_mempool_ops_table \u4e3a\u4f8b\u63cf\u8ff0 dpdk \u7a0b\u5e8f\u5e93\u94fe\u63a5\u987a\u5e8f\u5bf9\u7a0b\u5e8f\u6267\u884c\u7684\u5f71\u54cd"},"nextItem":{"title":"dpdk/\u5173\u95ed stdout \u5f15\u53d1\u7684\u707e\u96be","permalink":"/longyu.github.io/blog/dpdk/\u5173\u95ed stdout \u5f15\u53d1\u7684\u707e\u96be"}},"content":"i40e \u9a71\u52a8\u7248\u672c\u4e3a 5.0 \u5185\u6838\u4e3b\u7ebf\u7248\u672c\uff0c\u7f51\u5361\u4e3a x710 \u7f51\u5361\u3002\u9700\u8981\u6d4b\u8bd5 flow directory \u529f\u80fd\u80fd\u5426\u6b63\u5e38\u4f7f\u7528\u3002\\n\\n# \u7b2c\u4e00\u4e2a\u95ee\u9898\uff1a\u4e0d\u652f\u6301 flow-type \u4e3a ether\\n\\n\u4f7f\u7528\u4e0b\u9762\u8fd9\u6761\u547d\u4ee4\uff0c\u8bbe\u5b9a\u4e00\u4e2a flow-type \u4e3a ether \u7c7b\u578b\u7684\u8fc7\u6ee4\u6761\u4ef6\u65f6\u62a5\u4e86 NOTSUPP \u7684\u9519\u8bef\u3002\\n\\n```bash\\nethtool -U enp11s0f0  flow-type ether  ....\\n```\\n## \u5206\u6790 flow-type \u4e3a ether \u65f6\u7684\u6267\u884c\u8fc7\u7a0b\\n### ethtool \u4e2d\u7684\u6d41\u7a0b\u5206\u6790\\n\\nethtool \u4e2d\u89e3\u6790\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nelse if (!strcmp(argp[0], \\"ether\\"))\\n\\t\\tflow_type = ETHER_FLOW;\\n\\n\\tfsp->flow_type = flow_type;\\n```\\n\u5f53 ethtool \u547d\u4ee4\u884c\u4e2d\u8bbe\u5b9a\u4e86 flow-type \u4e3a ether \u65f6\uff0cethtool \u4f1a\u5c06 flow_type \u8bbe\u5b9a\u4e3a **ETHER_FLOW**\u3002\\n\\n\u7136\u540e\u7acb\u523b\u5224\u65ad **flow_type**\uff0c\u5206\u53d1\u5230\u4e0d\u540c\u7684 **options** \u4e2d\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n\\tcase ETHER_FLOW:\\n\\t\\toptions = rule_nfc_ether;\\n\\t\\tn_opts = ARRAY_SIZE(rule_nfc_ether);\\n\\t\\tbreak;\\n```\\n\\noptions \u8868\u793a\u89e3\u6790\u53c2\u6570\u7684\u89c4\u5219\uff0crule_nfc_ether \u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\nstatic const struct rule_opts rule_nfc_ether[] = {\\n\\t{ \\"src\\", OPT_MAC, NFC_FLAG_SADDR,\\n\\t  offsetof(struct ethtool_rx_flow_spec, h_u.ether_spec.h_source),\\n\\t  offsetof(struct ethtool_rx_flow_spec, m_u.ether_spec.h_source) },\\n\\t{ \\"dst\\", OPT_MAC, NFC_FLAG_DADDR,\\n\\t  offsetof(struct ethtool_rx_flow_spec, h_u.ether_spec.h_dest),\\n\\t  offsetof(struct ethtool_rx_flow_spec, m_u.ether_spec.h_dest) },\\n\\t{ \\"proto\\", OPT_BE16, NFC_FLAG_PROTO,\\n\\t  offsetof(struct ethtool_rx_flow_spec, h_u.ether_spec.h_proto),\\n\\t  offsetof(struct ethtool_rx_flow_spec, m_u.ether_spec.h_proto) },\\n\\t{ \\"action\\", OPT_U64, NFC_FLAG_RING,\\n\\t  offsetof(struct ethtool_rx_flow_spec, ring_cookie), -1 },\\n\\t{ \\"vf\\", OPT_RING_VF, NFC_FLAG_RING_VF,\\n\\t  offsetof(struct ethtool_rx_flow_spec, ring_cookie), -1 },\\n\\t{ \\"queue\\", OPT_RING_QUEUE, NFC_FLAG_RING_QUEUE,\\n\\t  offsetof(struct ethtool_rx_flow_spec, ring_cookie), -1 },\\n\\t{ \\"loc\\", OPT_U32, NFC_FLAG_LOC,\\n\\t  offsetof(struct ethtool_rx_flow_spec, location), -1 },\\n\\t{ \\"vlan-etype\\", OPT_BE16, NTUPLE_FLAG_VETH,\\n\\t  offsetof(struct ethtool_rx_flow_spec, h_ext.vlan_etype),\\n\\t  offsetof(struct ethtool_rx_flow_spec, m_ext.vlan_etype) },\\n\\t{ \\"vlan\\", OPT_BE16, NTUPLE_FLAG_VLAN,\\n\\t  offsetof(struct ethtool_rx_flow_spec, h_ext.vlan_tci),\\n\\t  offsetof(struct ethtool_rx_flow_spec, m_ext.vlan_tci) },\\n\\t{ \\"user-def\\", OPT_BE64, NTUPLE_FLAG_UDEF,\\n\\t  offsetof(struct ethtool_rx_flow_spec, h_ext.data),\\n\\t  offsetof(struct ethtool_rx_flow_spec, m_ext.data) },\\n};\\n```\\n\u89e3\u6790\u5b8c\u6240\u6709\u7684\u53c2\u6570\u540c\u65f6\u914d\u7f6e\u597d **struct ethtool_rx_flow_spec** \u7ed3\u6784\u4f53\uff0c\u7136\u540e\u8c03\u7528 **ioctl** \u6765\u4e0b\u53d1\u914d\u7f6e\u5230\u7f51\u5361\u3002\\n\\n\u914d\u7f6e\u65b9\u5f0f\u6709\u4e24\u79cd\u7c7b\u578b\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n\\t\\t/* attempt to add rule via N-tuple specifier */\\n\\t\\terr = do_srxntuple(ctx, &rx_rule_fs);\\n\\t\\tif (!err)\\n\\t\\t\\treturn 0;\\n\\n\\t\\t/* attempt to add rule via network flow classifier */\\n\\t\\terr = rxclass_rule_ins(ctx, &rx_rule_fs, rss_context);\\n\\t\\tif (err < 0) {\\n\\t\\t\\tfprintf(stderr, \\"Cannot insert\\"\\n\\t\\t\\t\\t\\" classification rule\\\\n\\");\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n```\\n\u7b2c\u4e00\u79cd\u914d\u7f6e\u65b9\u5f0f\u662f ntuple\uff0c\u7b2c\u4e8c\u79cd\u662f classifier\uff0c\u8fd9\u4e24\u79cd\u4e0d\u540c\u65b9\u5f0f**\u4f20\u9012\u7ed9 ioctl \u7684 ethtool \u5b50\u547d\u4ee4\u5b58\u5728\u533a\u522b**\u3002\\n\\n**\u5f53\u9a71\u52a8\u4e0d\u652f\u6301 ntuple \u65b9\u5f0f\u914d\u7f6e\u65f6\uff08\u8fd4\u56de\u503c\u4e3a EOPNOTSUPP \u65f6\uff09\uff0c\u4e0d\u4f1a\u6253\u5370\u5931\u8d25\u4fe1\u606f\uff0c\u7ee7\u7eed\u5c1d\u8bd5 classifier \u65b9\u5f0f**\u3002\\n\\n\u5f53\u4e24\u79cd\u65b9\u5f0f\u90fd\u5931\u8d25\u540e\uff0c\u8f6f\u4ef6\u6267\u884c\u5982\u4e0b\u4ee3\u7801\u6253\u5370\u9519\u8bef\u4fe1\u606f\uff1a\\n\\n```c\\n\\t\\t\\tfprintf(stderr, \\"Cannot insert\\"\\n\\t\\t\\t\\t\\" classification rule\\\\n\\");\\n```\\n#### ntuple \u65b9\u5f0f ioctl \u7684\u53c2\u6570\\n```c\\n\\t/* send rule via N-tuple */\\n\\tntuplecmd.cmd = ETHTOOL_SRXNTUPLE;\\n\\terr = send_ioctl(ctx, &ntuplecmd);\\n```\\n#### classifier \u65b9\u5f0f ioctl \u7684\u53c2\u6570\\n```c\\n\\t/* notify netdev of new rule */\\n\\tnfccmd.cmd = ETHTOOL_SRXCLSRLINS;\\n\\tnfccmd.rss_context = rss_context;\\n\\tnfccmd.fs = *fsp;\\n\\terr = send_ioctl(ctx, &nfccmd);\\n```\\n#### i40e \u5185\u6838\u9a71\u52a8\u652f\u6301\u54ea\u4e00\u79cd\u7c7b\u578b?\\n5.0 \u5185\u6838\u4e2d\uff0cethtool \u6846\u67b6\u4e0d\u652f\u6301 ntuple \u65b9\u5f0f\u3002\\n\\n### ioctl \u7684\u5185\u6838\u6d41\u7a0b\\nethool \u8c03\u7528 ioctl \u6700\u7ec8\u4f1a\u8d70\u5230 **dev_ethtool** \u51fd\u6570\u4e2d\uff0c\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d ETHTOOL_SRXCLSRLINS \u88ab\u5206\u53d1\u5230 ethtool_set_rxnfc \u51fd\u6570\u4e2d\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n2705     case ETHTOOL_SRXFH:\\n2706     case ETHTOOL_SRXCLSRLDEL:\\n2707     case ETHTOOL_SRXCLSRLINS:\\n2708         rc = ethtool_set_rxnfc(dev, ethcmd, useraddr);\\n2709         break;\\n```\\n\\nethtool_set_rxnfc \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\nrc = dev->ethtool_ops->set_rxnfc(dev, &info);\\n```\\n\u53ef\u4ee5\u770b\u5230\u5b83\u8c03\u7528\u4e86 **ethtool_ops** \u4e2d\u7684 **set_rxnfc** \u51fd\u6570\u6307\u9488\uff0c\u6b64\u51fd\u6570\u6307\u9488\u5728 **i40e_ethtool.c** \u4e2d\u5b9e\u73b0\uff0c**i40e_ethtool.c** \u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n4308 static int i40e_set_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd)\\n4309 {\\n4310     struct i40e_netdev_priv *np = netdev_priv(netdev);\\n4311     struct i40e_vsi *vsi = np->vsi;\\n4312     struct i40e_pf *pf = vsi->back;\\n4313     int ret = -EOPNOTSUPP;\\n4314 \\n4315     switch (cmd->cmd) {\\n4316     case ETHTOOL_SRXFH:\\n4317         ret = i40e_set_rss_hash_opt(pf, cmd);\\n4318         break;\\n4319     case ETHTOOL_SRXCLSRLINS:\\n4320         ret = i40e_add_fdir_ethtool(vsi, cmd);\\n4321         break;\\n4322     case ETHTOOL_SRXCLSRLDEL:\\n4323         ret = i40e_del_fdir_entry(vsi, cmd);\\n4324         break;\\n4325     default:\\n4326         break;\\n4327     }\\n4328 \\n4329     return ret;\\n4330 }\\n```\\n\\n**i40e_add_fdir_ethtool** \u5728\u771f\u6b63\u8bbe\u5b9a\u5230\u7f51\u5361\u524d\u505a\u4e86\u8bb8\u591a\u68c0\u67e5\uff0c\u5176\u4e2d\u6709 **i40e_check_fdir_input_set** \u8fd9\u4e2a\u5bf9 input_set \u7684\u68c0\u67e5\u3002\\n\\n**i40e_check_fdir_input_set** \u4e2d\u5224\u65ad **flow_type**\uff0c\u5f53\u8fd9\u4e2a\u5b57\u6bb5\u8bbe\u5b9a\u4e3a **ETHER_FLOW** \u6b64\u51fd\u6570\u5c06\u4f1a\u8fd4\u56de -EOPNOTSUPP\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n3801     switch (fsp->flow_type & ~FLOW_EXT) {\\n3802     case SCTP_V4_FLOW:\\n3803         index = I40E_FILTER_PCTYPE_NONF_IPV4_SCTP;\\n3804         fdir_filter_count = &pf->fd_sctp4_filter_cnt;\\n3805         break;\\n3806     case TCP_V4_FLOW:\\n3807         index = I40E_FILTER_PCTYPE_NONF_IPV4_TCP;\\n3808         fdir_filter_count = &pf->fd_tcp4_filter_cnt;\\n3809         break;\\n3810     case UDP_V4_FLOW:\\n3811         index = I40E_FILTER_PCTYPE_NONF_IPV4_UDP;\\n3812         fdir_filter_count = &pf->fd_udp4_filter_cnt;\\n3813         break;\\n3814     case IP_USER_FLOW:\\n3815         index = I40E_FILTER_PCTYPE_NONF_IPV4_OTHER;\\n3816         fdir_filter_count = &pf->fd_ip4_filter_cnt;\\n3817         flex_l3 = true;\\n3818         break;\\n3819     default:\\n3820         return -EOPNOTSUPP;\\n3821     }\\n```\\n\u53ef\u4ee5\u786e\u5b9a\u5bf9\u4e8e\u6267\u884c **ethtool -U devname ether xxx** \u7684\u8bbe\u5b9a linux 5.0 \u7684 i40e \u9a71\u52a8\u5e76\u4e0d\u652f\u6301\uff01\\n\\n# \u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u4e22\u6389\u6240\u6709\u7684 ipv4 udp \u62a5\u6587?\\n\u5728\u6d4b\u8bd5\u524d\u6211\u9996\u5148\u6267\u884c **ifconfig enp11s0f0 -promisc** \u547d\u4ee4\u6253\u5f00\u6df7\u6dc6\u6a21\u5f0f\u3002\\n\\n\u6784\u9020 udp \u62a5\u6587\u5f00\u59cb\u6253\u6d41\uff0c\u7136\u540e\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u80fd\u591f\u4e22\u6389\u6240\u6709\u7684 ipv4 udp \u62a5\u6587\uff1a\\n\\n```bash\\nethtool -U enp11s0f0  flow-type udp4  action -1\\n```\\n\u8bbe\u5b9a\u5b8c\u6210\u53ef\u4ee5\u901a\u8fc7 **ethtool -u enp11s0f0** \u6765\u67e5\u770b\u914d\u7f6e\u5185\u5bb9\uff0c\u540c\u65f6\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u67e5\u770b **fdir_match** \u8ba1\u6570\u786e\u5b9a\u914d\u7f6e\u751f\u6548\uff1a\\n\\n```bash\\nethtool -S enp11s0f0 | grep fdir\\n```\\n\\n\u8bbe\u5b9a\u540e\u4f1a\u5f97\u5230\u4e00\u4e2a id\uff0c\u6211\u6d4b\u8bd5\u65f6 id \u662f 7679\uff0c\u53ef\u4ee5\u4f7f\u7528 **ethtool -U enp11s0f0  delete 7679** \u6765\u79fb\u9664\u8fd9\u4e00\u6761\u914d\u7f6e\u3002\\n\\n# \u7b2c\u4e09\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u4f7f\u7528 flex filter \u529f\u80fd\uff1f\\nlinux \u5185\u6838\u6e90\u7801\u6811 networking/device_drivers/intel/i40e.rst \u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 user-def \u5b57\u6bb5\u6765\u5339\u914d\u534f\u8bae\u7684 payload \u4e2d\u7684\u5b57\u6bb5\u5185\u5bb9\u3002\\n\\nmanual \u8bf4\u660e\u8d34\u5230\u4e0b\u9762\uff1a\\n\\n```manual\\nThe driver also supports matching user-defined data within the packet payload.\\nThis flexible data is specified using the \\"user-def\\" field of the ethtool\\ncommand in the following way:\\n\\n+----------------------------+--------------------------+\\n| 31    28    24    20    16 | 15    12    8    4    0  |\\n+----------------------------+--------------------------+\\n| offset into packet payload | 2 bytes of flexible data |\\n+----------------------------+--------------------------+\\n\\nFor example,\\n\\n::\\n\\n  ... user-def 0x4FFFF ...\\n\\ntells the filter to look 4 bytes into the payload and match that value against\\n0xFFFF. The offset is based on the beginning of the payload, and not the \\nbeginning of the packet. Thus\\n\\n::\\n\\n  flow-type tcp4 ... user-def 0x8BEAF ...\\n\\nwould match TCP/IPv4 packets which have the value 0xBEAF 8 bytes into the \\nTCP/IPv4 payload.\\n```\\n\u4e0a\u8ff0\u8bf4\u660e\u4fe1\u606f\u8bb2\u4e86\u4e0b\u9762\u8fd9\u51e0\u4e2a\u5185\u5bb9\uff1a\\n\\n1. user-def \u53ea\u80fd\u4ece payload \u5f00\u59cb\u5339\u914d\\n2. user-def \u7531 4 \u5b57\u8282\u7ec4\u6210\uff0c\u9ad8 16 \u4f4d\u7684\u4e24\u4e2a\u5b57\u8282\u4ee3\u8868\u76f8\u5bf9 payload \u7684\u504f\u79fb\u91cf\uff0c\u4f4e 16 \u4f4d\u4e3a\u5339\u914d\u7684\u5185\u5bb9\\n\\n\u7531\u4e8e flexible data \u7684\u5355\u4f4d\u662f\u4e24\u4e2a\u5b57\u8282\uff0coffset \u53ea\u652f\u6301\u5076\u6570\uff0c\u4e0d\u80fd\u4f7f\u7528\u5947\u6570\u3002\u5b9e\u9645\u6d4b\u8bd5\u65f6\uff0c\u6211\u53d1\u73b0\u6309\u7167\u4e0a\u9762\u7684\u63cf\u8ff0\u914d\u7f6e\u80fd\u591f\u6b63\u5e38\u914d\u7f6e\uff0c\u4f46\u662f\u8fc7\u6ee4\u529f\u80fd\u5e76\u4e0d\u751f\u6548\u3002\\n\\n\\n\u552f\u4e00\u4e00\u6b21\u751f\u6548\u7684\u547d\u4ee4\u5982\u4e0b\uff1a\\n\\n```bash\\nethtool -U enp11s0f0 flow-type udp4 user-def 0x0 action -1\\nAdded rule with ID 7679\\n```\\n\u6d4b\u8bd5\u4eea\u53d1\u9001\u7684 udp \u62a5\u6587\uff0c\u5176 payload \u7684\u524d\u4e24\u4e2a\u5b57\u8282\u90fd\u662f 0\uff0cdmesg \u6709\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\n```c\\n[165763.336866] i40e 0000:0b:00.0 enp11s0f0: Input set change requested for udp4 flows:\\n[165763.336871] i40e 0000:0b:00.0 enp11s0f0:   Current input set: 2000\\n[165763.336874] i40e 0000:0b:00.0 enp11s0f0: Requested input set: 2000\\n[165763.336877] i40e 0000:0b:00.0 enp11s0f0: FLEX index 0: Offset -> 0\\n```\\n\u6839\u636e\u4e0a\u9762\u7684\u63cf\u8ff0\uff0c\u5f53\u9488\u5bf9 UDPv4 \u8bbe\u7f6e flex \u7684\u65f6\u5019\uff0cpayload \u7684\u8d77\u59cb\u4f4d\u7f6e\u6307\u5411\u7684\u662f UDPv4 \u62a5\u6587\u7684 data \u533a\u57df\u8d77\u59cb\u4f4d\u7f6e\u3002\\n\\n\u6211\u6784\u9020\u5982\u4e0b udp payload \u5185\u5bb9\u8fdb\u884c\u6d4b\u8bd5\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20201205111937571.png)\\n\u6d4b\u8bd5\u547d\u4ee4\u5982\u4e0b\uff1a\\n\\n```bash\\nethtool -U enp11s0f0 flow-type udp4 user-def 0x9013 action -1\\n```\\n\\ndmesg \u7684\u6253\u5370\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```dmesg\\n[163317.273795] i40e 0000:0b:00.0 enp11s0f0: Input set change requested for udp4 flows:\\n[163317.273801] i40e 0000:0b:00.0 enp11s0f0:   Current input set: 2000\\n[163317.273805] i40e 0000:0b:00.0 enp11s0f0: Requested input set: 2000\\n[163317.273808] i40e 0000:0b:00.0 enp11s0f0: FLEX index 0: Offset -> \uff10\\n````\\n\\n\u53ef\u4ee5\u786e\u5b9a\u8bbe\u7f6e\u6210\u529f\u4e86\uff0c\u4f46\u662f\u6ca1\u6709\u751f\u6548\uff0c\u6000\u7591\u5927\u5c0f\u7aef\u3001\u504f\u79fb\u91cf\u7684\u5f71\u54cd\u5e76\u90fd\u8fdb\u884c\u4e86\u6392\u67e5\uff0c\u6ca1\u6709\u627e\u5230\u95ee\u9898\u3002\\n\\n## \u5bf9 flex filter \u7684\u8ba4\u8bc6\\nflex filter \u662f\u9488\u5bf9\u62a5\u6587\u7684 **payload** \u8fdb\u884c filter\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u65e0\u6cd5\u9488\u5bf9\u62a5\u6587\u7684 header \u8fdb\u884c\u8fc7\u6ee4\uff0c\u4f46\u662f\u5728\u7f51\u7edc\u62a5\u6587\u5c01\u88c5\u4e2d\uff0c**\u4e0a\u5c42\u7684\u534f\u8bae\u5e27\u53ef\u4ee5\u770b\u505a\u662f\u4e0b\u5c42\u534f\u8bae\u5e27\u7684 payload**\uff0e\\n\\n\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u8981\u8fc7\u6ee4\u4e00\u4e2a 96 \u5b57\u8282\u7684 udp \u62a5\u6587\uff0c\u90a3\u4e48\u8981\u8bbe\u5b9a\u8fc7\u6ee4\u4e00\u4e2a ip \u62a5\u6587\u7684\u547d\u4ee4\uff0c\u56e0\u4e3a\u5728\u8fc7\u6ee4 ip \u62a5\u6587\u7684\u65f6\u5019 udp \u7684\u5934\u662f\u53ef\u89c1\u7684\uff0c\u6709\u4e86\u8fd9\u4e2a\u77e5\u8bc6\uff0c\u7136\u540e\u8ba1\u7b97\u51fa 96 \u5b57\u8282\u652f\u6301\u7684 udp \u5305\u7684\u5927\u5c0f\uff0c\u7f16\u5199\u547d\u4ee4\u3002\\n\\n\u540c\u65f6\u9700\u8981\u4e86\u89e3\u7684\u662f**\u63a5\u53e3\u7684\u6df7\u6dc6\u6a21\u5f0f\u53ef\u80fd\u5bf9\u8fc7\u6ee4\u6761\u4ef6\u6709\u5f71\u54cd**\uff0c\u6839\u636e\u6d4b\u8bd5\u60c5\u51b5\u770b\uff0c\u5728**\u5f00\u6df7\u6dc6\u6a21\u5f0f\u540e\u8fc7\u6ee4\u529f\u80fd\u4ecd\u7136\u80fd\u591f\u751f\u6548**\u3002\\n\\n\u6709\u4e86\u4e0a\u9762\u7684\u7406\u89e3\uff0c\u6211\u7ee7\u7eed\u5c1d\u8bd5\u8fc7\u6ee4 udp \u62a5\u6587\u7684 payload \u5b57\u6bb5\uff0c\u7ed3\u679c\u90fd\u5931\u8d25\u4e86\uff0c\u7f51\u4e0a\u641c\u7d22\u4e86\u4e0b\u53d1\u73b0\u76f8\u5173\u7684\u5185\u5bb9\u975e\u5e38\u5c11\uff0c\u770b\u6765\u53ea\u6709\u603c\u4ee3\u7801\u4e86\uff01\\n\\n## \u5c1d\u8bd5\u5206\u6790\u4ee3\u7801\u4ee5\u627e\u5230 flex filter \u4e0d\u80fd\u751f\u6548\u7684\u539f\u56e0\\n\u7814\u7a76\u4ee3\u7801\uff0c\u53d1\u73b0\u8bbe\u5b9a\u4e00\u4e2a flow directory \u89c4\u5219\u7684\u6d41\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a\\n\\n1. \u9009\u62e9 input set \\n2. \u83b7\u53d6 fdir \u5bf9\u5e94\u7684 ring\\n3. \u6839\u636e flow-type \u7b49\u53c2\u6570\u8bbe\u5b9a\u4e00\u4e2a i40e_filter_program_desc \u63cf\u8ff0\u7b26\u5185\u5bb9\\n4. \u6784\u9020\u4e00\u4e2a\u62a5\u6587\uff0c\u6b64\u62a5\u6587\u6839\u636e flow-type \u7b49\u53c2\u6570\u6765\u8bbe\u5b9a\uff0c\u5b83\u4e5f\u9700\u8981\u5360\u4e00\u4e2a\u63cf\u8ff0\u7b26\\n5. \u5199\u5165 tail \u8ba9\u7f51\u5361\u5904\u7406\u8fd9\u4e24\u4e2a\u63cf\u8ff0\u7b26\\n6. \u68c0\u67e5\u8bbe\u5b9a\u662f\u5426\u751f\u6548\\n\\ni40e_fdir \u51fd\u6570\u8d1f\u8d23\u586b\u5145 i40e_filter_program_desc \u63cf\u8ff0\u7b26\uff0c\u8fd9\u4e2a\u63cf\u8ff0\u7b26\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\nstruct i40e_filter_program_desc {\\n\\t__le32 qindex_flex_ptype_vsi;\\n\\t__le32 rsvd;\\n\\t__le32 dtype_cmd_cntindex;\\n\\t__le32 fd_id;\\n};\\n```\\ni40e_fdir \u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\nstatic void i40e_fdir(struct i40e_ring *tx_ring,\\n\\t\\t      struct i40e_fdir_filter *fdata, bool add)\\n{\\n\\tstruct i40e_filter_program_desc *fdir_desc;\\n\\tstruct i40e_pf *pf = tx_ring->vsi->back;\\n\\tu32 flex_ptype, dtype_cmd;\\n\\tu16 i;\\n\\n\\t/* grab the next descriptor */\\n\\ti = tx_ring->next_to_use;\\n\\tfdir_desc = I40E_TX_FDIRDESC(tx_ring, i);\\n\\n\\ti++;\\n\\ttx_ring->next_to_use = (i < tx_ring->count) ? i : 0;\\n\\n\\tflex_ptype = I40E_TXD_FLTR_QW0_QINDEX_MASK &\\n\\t\\t     (fdata->q_index << I40E_TXD_FLTR_QW0_QINDEX_SHIFT);\\n\\n\\tflex_ptype |= I40E_TXD_FLTR_QW0_PCTYPE_MASK &\\n\\t\\t      (fdata->pctype << I40E_TXD_FLTR_QW0_PCTYPE_SHIFT);\\n\\n\\tflex_ptype |= I40E_TXD_FLTR_QW0_PCTYPE_MASK &\\n\\t\\t      (fdata->flex_offset << I40E_TXD_FLTR_QW0_FLEXOFF_SHIFT);\\n\\n\\t/* Use LAN VSI Id if not programmed by user */\\n\\tflex_ptype |= I40E_TXD_FLTR_QW0_DEST_VSI_MASK &\\n\\t\\t      ((u32)(fdata->dest_vsi ? : pf->vsi[pf->lan_vsi]->id) <<\\n\\t\\t       I40E_TXD_FLTR_QW0_DEST_VSI_SHIFT);\\n\\n\\tdtype_cmd = I40E_TX_DESC_DTYPE_FILTER_PROG;\\n\\n\\tdtype_cmd |= add ?\\n\\t\\t     I40E_FILTER_PROGRAM_DESC_PCMD_ADD_UPDATE <<\\n\\t\\t     I40E_TXD_FLTR_QW1_PCMD_SHIFT :\\n\\t\\t     I40E_FILTER_PROGRAM_DESC_PCMD_REMOVE <<\\n\\t\\t     I40E_TXD_FLTR_QW1_PCMD_SHIFT;\\n\\n\\tdtype_cmd |= I40E_TXD_FLTR_QW1_DEST_MASK &\\n\\t\\t     (fdata->dest_ctl << I40E_TXD_FLTR_QW1_DEST_SHIFT);\\n\\n\\tdtype_cmd |= I40E_TXD_FLTR_QW1_FD_STATUS_MASK &\\n\\t\\t     (fdata->fd_status << I40E_TXD_FLTR_QW1_FD_STATUS_SHIFT);\\n\\n\\tif (fdata->cnt_index) {\\n\\t\\tdtype_cmd |= I40E_TXD_FLTR_QW1_CNT_ENA_MASK;\\n\\t\\tdtype_cmd |= I40E_TXD_FLTR_QW1_CNTINDEX_MASK &\\n\\t\\t\\t     ((u32)fdata->cnt_index <<\\n\\t\\t\\t      I40E_TXD_FLTR_QW1_CNTINDEX_SHIFT);\\n\\t}\\n\\n\\tfdir_desc->qindex_flex_ptype_vsi = cpu_to_le32(flex_ptype);\\n\\tfdir_desc->rsvd = cpu_to_le32(0);\\n\\tfdir_desc->dtype_cmd_cntindex = cpu_to_le32(dtype_cmd);\\n\\tfdir_desc->fd_id = cpu_to_le32(fdata->fd_id);\\n}\\n```\\n\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c**dtype_cmd** \u662f\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5b57\u6bb5\uff0c\u5b83\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u5224\u65ad\u8bbe\u5b9a\u5176\u503c\u3002\\n\\ni40e_fdir \u4e2d\u8bbe\u5b9a\u63cf\u8ff0\u7b26\u5b57\u6bb5\u5185\u5bb9\u5b8c\u6210\u540e\uff0c\u5c06 **tx_ring->next_to_use** \u5411\u540e\u62e8\u4e00\u4e2a\u5355\u4f4d\uff0c\u8868\u793a**\u5360\u7528\u4e86\u4e00\u4e2a\u63cf\u8ff0\u7b26**\u3002\\n\\ni40e_fdir \u586b\u5145\u5b8c\u6210\u540e\uff0c\u7ee7\u7eed**\u586b\u5145 raw_packet\uff0c\u5360\u636e\u4e0b\u4e00\u4e2a\u63cf\u8ff0\u7b26**\uff0c\u5e76\u8bbe\u5b9a\u76f8\u5173\u7684\u5b57\u6bb5\u3002\\n\\n\u8fc7\u6ee4 udp \u62a5\u6587\u65f6\u6784\u9020 raw_packet \u62a5\u6587\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n\\tstatic char packet[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x08, 0,\\n\\t\\t0x45, 0, 0, 0x1c, 0, 0, 0x40, 0, 0x40, 0x11, 0, 0, 0, 0, 0, 0,\\n\\t\\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\\n\\n\\traw_packet = kzalloc(I40E_FDIR_MAX_RAW_PACKET_SIZE, GFP_KERNEL);\\n\\tif (!raw_packet)\\n\\t\\treturn -ENOMEM;\\n\\tmemcpy(raw_packet, packet, I40E_UDPIP_DUMMY_PACKET_LEN);\\n\\n\\tip = (struct iphdr *)(raw_packet + IP_HEADER_OFFSET);\\n\\tudp = (struct udphdr *)(raw_packet + IP_HEADER_OFFSET\\n\\t      + sizeof(struct iphdr));\\n\\n\\tip->daddr = fd_data->dst_ip;\\n\\tudp->dest = fd_data->dst_port;\\n\\tip->saddr = fd_data->src_ip;\\n\\tudp->source = fd_data->src_port;\\n\\n\\tif (fd_data->flex_filter) {\\n\\t\\tu8 *payload = raw_packet + I40E_UDPIP_DUMMY_PACKET_LEN;\\n\\t\\t__be16 pattern = fd_data->flex_word;\\n\\t\\tu16 off = fd_data->flex_offset;\\n\\n\\t\\t*((__force __be16 *)(payload + off)) = pattern;\\n\\t}\\n\\n\\tfd_data->pctype = I40E_FILTER_PCTYPE_NONF_IPV4_UDP;\\n```\\n\u4f7f\u7528\u4e86 ethtool \u8bbe\u5b9a user-def \u7684\u65f6\u5019 fd_data->flex_filter \u4e3a true\uff0c\u8fd9\u65f6\u53ef\u4ee5\u770b\u5230\u5bf9 udp \u62a5\u6587\u7684 payload + off \u5b57\u6bb5\u7684\u586b\u5145\u903b\u8f91\u3002\\n\\n**I40E_UDPIP_DUMMY_PACKET_LEN** \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\n#define I40E_UDPIP_DUMMY_PACKET_LEN\\t42\\n```\\n\u4e0a\u8ff0\u4ee3\u7801\u8ba1\u7b97\u7684 payload \u7684\u8d77\u59cb\u4f4d\u7f6e\u6b63\u662f udp \u62a5\u6587\u7684 data \u5b57\u6bb5\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\\n\\n\u4e0e\u6b64\u7c7b\u4f3c\uff0c\u8fc7\u6ee4 tcpv4 \u62a5\u6587\u65f6\u586b\u5145 payload \u5b57\u6bb5\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\n\\tif (fd_data->flex_filter) {\\n\\t\\tu8 *payload = raw_packet + I40E_TCPIP_DUMMY_PACKET_LEN;\\n\\t\\t__be16 pattern = fd_data->flex_word;\\n\\t\\tu16 off = fd_data->flex_offset;\\n\\n\\t\\t*((__force __be16 *)(payload + off)) = pattern;\\n\\t}\\n```\\n**I40E_TCPIP_DUMMY_PACKET_LEN** \u5b8f\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\n#define I40E_TCPIP_DUMMY_PACKET_LEN\\t54\\n```\\n\u53ef\u4ee5\u786e\u5b9a **tcpv4 flex payload** \u4ece\u62a5\u6587\u7684\u7b2c 54 \u5b57\u8282\u5f00\u59cb\uff0c\u540c\u7406 **ipv4 flex payload** \u4ece\u62a5\u6587\u7684\u7b2c **34** \u5b57\u8282\u5f00\u59cb\uff0c**sctp flex payload** \u4ece\u62a5\u6587\u7684\u7b2c **46** \u5b57\u8282\u5f00\u59cb\u3002\\n\\n\u6784\u9020\u5b8c\u6210\u4e00\u4e2a raw_packet \u540e\u540c\u6837\u9700\u8981\u586b\u5145\u63cf\u8ff0\u7b26\uff0ctx_ring->next_to_use \u518d\u6b21\u5411\u540e\u62e8\u52a8\u4e00\u4e2a\u5355\u4f4d\u3002\u5b8c\u6210\u4e0a\u8ff0\u8fc7\u7a0b\u540e\uff0c\u6700\u7ec8\u5c06 **tx_ring->next_to_use** \u5199\u5165\u5230 **tx_ring->tail** \u4ee5\u901a\u77e5\u7f51\u5361\u5904\u7406\uff0c t**x_ring->tail** \u662f\u7f51\u5361\u4e2d\u6620\u5c04\u7684\u4e00\u4e2a**\u7269\u7406\u5730\u5740**\u3002\\n\\n## \u4fee\u6539\u4ee3\u7801\uff0c\u6253\u5370\u586b\u5145\u7684 raw_packet \u62a5\u6587\u5185\u5bb9\\n\u7ecf\u8fc7\u4e0a\u9762\u5bf9 flex filter \u8bbe\u5b9a\u8fc7\u7a0b\u7684\u7814\u7a76\uff0c\u6211\u89c9\u5f97\u53ef\u80fd\u662f\u586b\u5145\u7684 raw_packet \u62a5\u6587\u7684\u5185\u5bb9\u5b58\u5728\u95ee\u9898\uff0c\u6545\u800c\u5728\u9a71\u52a8\u4e2d\u6dfb\u52a0\u4e86\u6253\u5370\u62a5\u6587\u5185\u5bb9\u7684\u64cd\u4f5c\u91cd\u8bd5\u3002\\n\\n\u6d4b\u8bd5\u8fc7\u7a0b\u8bb0\u5f55\u5982\u4e0b\uff1a\\n\\n```bash\\n[root] # dmesg -c >/dev/null ; ethtool -U enp11s0f0 flow-type udp4 user-def 0x212da action -1; dmesg | grep -A 10 \'packet\\\\[42\\\\]\'\\nAdded rule with ID 7679\\n[165607.394687] packet[42] is 0\\n[165607.394688] packet[43] is 0\\n[165607.394689] packet[44] is 12\\n[165607.394691] packet[45] is da\\n[165607.394692] packet[46] is 0\\n[165607.394693] packet[47] is 0\\n[165607.394694] packet[48] is 0\\n[165607.394696] packet[49] is 0\\n[165607.394697] packet[50] is 0\\n[165607.394698] packet[51] is 0\\n[165607.394700] packet[52] is 0\\n```\\n\u6839\u636e\u6253\u51fa\u7684\u62a5\u6587\u5185\u5bb9\u770b\uff0c\u8bbe\u5b9a\u662f\u6b63\u786e\u7684\uff01\u4f46\u662f\u4ecd\u65e7\u6ca1\u6709\u771f\u6b63\u751f\u6548\uff0c\u770b\u6765\u8fd8\u662f\u54ea\u91cc\u6ca1\u6709\u6574\u5bf9\u3002\\n\\n## \u552f\u4e00\u4e00\u6b21\u6210\u529f\u7684 use-def \u914d\u7f6e\u65f6\u7684 raw_packet \u5185\u5bb9\\n\u4e00\u756a\u6298\u817e\u540e\uff0c\u6211\u60f3\u5230\u4e5f\u8bb8\u53ef\u4ee5\u628a\u90a3\u552f\u4e00\u4e00\u6b21\u751f\u6548\u7684 raw_packet \u5185\u5bb9\u6253\u51fa\u6765\uff0c\u770b\u770b\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u7ed3\u679c\u4e5f\u6ca1\u6709\u627e\u5230\u6000\u7591\u70b9\uff0c\u6d4b\u8bd5\u8fc7\u7a0b\u8fd8\u662f\u8bb0\u5f55\u5230\u4e0b\u9762\u3002\\n \\n```bash\\n[root] # dmesg -c >/dev/null ; ethtool -U enp11s0f0 flow-type udp4 user-def 0x0 action -1; dmesg | grep -A 10 \'packet\\\\[42\\\\]\'\\nAdded rule with ID 7679\\n\\n[165763.336866] i40e 0000:0b:00.0 enp11s0f0: Input set change requested for udp4 flows:\\n[165763.336871] i40e 0000:0b:00.0 enp11s0f0:   Current input set: 2000\\n[165763.336874] i40e 0000:0b:00.0 enp11s0f0: Requested input set: 2000\\n[165763.336877] i40e 0000:0b:00.0 enp11s0f0: FLEX index 0: Offset -> 0\\n[165763.337433] packet[0] is 0\\n[165763.337435] packet[1] is 0\\n[165763.337436] packet[2] is 0\\n[165763.337437] packet[3] is 0\\n[165763.337439] packet[4] is e6\\n[165763.337440] packet[5] is ff\\n[165763.337442] packet[6] is ff\\n[165763.337443] packet[7] is ff\\n[165763.337444] packet[8] is 0\\n[165763.337446] packet[9] is 0\\n[165763.337447] packet[10] is 0\\n[165763.337448] packet[11] is 0\\n[165763.337450] packet[12] is 8\\n[165763.337451] packet[13] is 0\\n[165763.337452] packet[14] is 45\\n[165763.337454] packet[15] is 0\\n[165763.337455] packet[16] is 0\\n[165763.337456] packet[17] is 1c\\n[165763.337458] packet[18] is 0\\n[165763.337459] packet[19] is 0\\n[165763.337460] packet[20] is 40\\n[165763.337462] packet[21] is 0\\n[165763.337463] packet[22] is 40\\n[165763.337464] packet[23] is 11\\n```\\n## \u603b\u7ed3\\nx710 flow directory \u662f\u4e2a\u633a\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u4f46\u662f\u6211\u4eec\u7684\u4e1a\u52a1\u573a\u666f\u4e2d\u4ece\u6765\u6ca1\u6709\u4f7f\u7528\u8fc7\uff0c\u6ca1\u6709\u76f8\u5e94\u7684\u6280\u672f\u79ef\u7d2f\uff0c\u8fd9\u6b21\u641e\u8d77\u6765\u5c31\u663e\u5f97\u56f0\u96be\u91cd\u91cd\u3002\\n\\nflex filter \u529f\u80fd\u6ca1\u6709\u7528\u8d77\u6765\uff0c\u4f46\u662f\u4e94\u5143\u7ec4\u8fc7\u6ee4\u7b97\u662f\u4e0a\u624b\u4e86\uff0c\u8fd9\u4e2a\u529f\u80fd\u521a\u597d\u80fd\u591f\u89e3\u51b3\u6211\u4eec\u9047\u5230\u7684\u95ee\u9898\uff0c\u4e0d\u8fc7\u5f53\u573a\u666f\u5207\u6362\u5230 dpdk \u4e2d\u65f6\uff0c\u5373\u4fbf\u4e00\u4e2a\u7b80\u5355\u7684\u8fc7\u6ee4 udp \u62a5\u6587\u7684\u529f\u80fd\u4e5f\u7814\u7a76\u4e86\u597d\u51e0\u5929\uff0c\u671f\u95f4\u4e00\u5ea6\u60f3\u653e\u5f03\uff0c\u88ab\u641e\u5230\u60f3\u54ed\uff0c\u6700\u7ec8\u641e\u5b9a\u4e86\u540e\u53c8\u6fc0\u52a8\u5230\u60f3\u54ed\u3002\\n\\n\u73b0\u5728\u60f3\u60f3\u5728\u67d0\u5929 21:00 \u7684\u65f6\u5019\uff0c\u6211\u5fc3\u6000\u5fd0\u5fd1\u7684\u51c6\u5907\u6d4b\u8bd5\u770b dpdk \u4e2d\u7684 flow directory \u529f\u80fd\u662f\u5426\u751f\u6548\uff0c\u4e4b\u524d\u5df2\u7ecf\u5931\u8d25\u4e86\u597d\u591a\u6b21\u4e86\uff0c\u4ed4\u7ec6 check\uff0c\u6700\u7ec8\u786e\u5b9a\u6210\u529f\u4e86\u540e\uff0c\u6211\u771f\u7684\u6fc0\u52a8\u5230\u773c\u6cea\u5feb\u6389\u4e0b\u6765\uff01\\n\\n\u8fd9\u5e76\u4e0d\u53ea\u662f\u6280\u672f\u4e0a\u7684\u7a81\u7834\uff0c\u8fd9\u66f4\u662f\u7a81\u7834\u81ea\u6211\u5c40\u9650\u7684\u4e00\u6b21\u6210\u529f\u6848\u4f8b\uff0c\u6211\u7684\u6210\u5c31\u611f\u53c8\u56de\u6765\u4e86\uff01"},{"id":"/dpdk/\u5173\u95ed stdout \u5f15\u53d1\u7684\u707e\u96be","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u5173\u95ed stdout \u5f15\u53d1\u7684\u707e\u96be","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u5173\u95ed stdout \u5f15\u53d1\u7684\u707e\u96be.md","source":"@site/blog/dpdk/\u5173\u95ed stdout \u5f15\u53d1\u7684\u707e\u96be.md","title":"dpdk/\u5173\u95ed stdout \u5f15\u53d1\u7684\u707e\u96be","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":13.295,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"\u73af\u5883\u4ecb\u7ecd","permalink":"/longyu.github.io/blog/dpdk/\u4f7f\u7528\u5185\u6838\u9a71\u52a8\u4e0a\u624b x710 flow directory \u529f\u80fd"},"nextItem":{"title":"dpdk/\u6740\u6389\u6570\u901a\u5f15\u64ce\u5bfc\u81f4\u865a\u62df\u673a\u91cd\u542f\u95ee\u9898\u5b9a\u4f4d","permalink":"/longyu.github.io/blog/dpdk/\u6740\u6389\u6570\u901a\u5f15\u64ce\u5bfc\u81f4\u865a\u62df\u673a\u91cd\u542f\u95ee\u9898\u5b9a\u4f4d"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n2021 \u5e74\u524d\u7684 dpdk \u7248\u672c\u4e2d\u9ed8\u8ba4\u7684 log \u4e3a **stdout**\uff0c\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\u53d1\u73b0\u5728**\u8c03\u7528 rte_eal_init \u4e4b\u524d\u5173\u95ed stdout \u65f6**\uff0cdpdk \u7a0b\u5e8f**\u8fd0\u884c\u5f02\u5e38**\u3002\\n\\n\u8868\u9762\u4e0a\u770b\u6709\u70b9\u532a\u5937\u6240\u601d\uff0c\u771f\u6b63\u7814\u7a76\u8d77\u6765\u7adf\u7136\u53d1\u73b0\u5728 dpdk \u7684\u6846\u67b6\u4e2d\u8fd9\u4e2a\u95ee\u9898\u7b97\u662f\u4e00\u4e2a\u6b63\u5e38\u7684\u73b0\u8c61\uff0c\u8ba9\u4eba\u5fcd\u4e0d\u4f4f\u53f9\u4e86\u53f9\u6c14~\\n\\n\u5728\u672c\u6587\u4e2d\u6211\u5c06\u63a2\u8ba8\u4e0b\u8fd9\u4e2a\u6b63\u5e38\u7684\u5f02\u5e38\u73b0\u8c61\uff0c\u540c\u65f6\u4e5f\u5f15\u7533\u63cf\u8ff0\u4e00\u4e2a\u771f\u5b9e\u573a\u666f\u4e2d\u7684\u95ee\u9898\u3002\\n## \u95ee\u9898\u6a21\u62df\\n\u4fee\u6539 dpdk-19.11.1 \u7248\u672c l2fwd \u793a\u4f8b\u7a0b\u5e8f\u4ee3\u7801\uff0c\u4ee3\u7801\u4fee\u6539\u5982\u4e0b\uff1a\\n\\n```c\\nIndex: examples/l2fwd/main.c\\n===================================================================\\n--- examples/l2fwd/main.c\\n+++ examples/l2fwd/main.c\\n@@ -530,6 +530,8 @@\\n        unsigned int nb_lcores = 0;\\n        unsigned int nb_mbufs;\\n\\n+       close(1);\\n```\\n\u8fd0\u884c l2fwd \u540e\u53d1\u73b0\u7a0b\u5e8f\u5361\u4f4f\uff0c\u5361\u4f4f\u7684\u4f4d\u7f6e\u4e0e\u53cd\u6c47\u7f16\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```c\\nThread 1 (Thread 0x7f84b9150440 (LWP 33746) \\"l2fwd\\"):\\n#0  0x0000000000654d59 in rte_eal_memzone_init ()\\n#1  0x00000000006463a5 in rte_eal_init ()\\n#2  0x000000000049255c in main ()\\n(gdb) disass\\nDump of assembler code for function rte_eal_memzone_init:\\n   0x0000000000654d30 <+0>:     push   %rbx\\n   0x0000000000654d31 <+1>:     sub    $0x10,%rsp\\n   0x0000000000654d35 <+5>:     call   0x645340 <rte_eal_get_configuration>\\n   0x0000000000654d3a <+10>:    mov    $0xffffffff,%ecx\\n   0x0000000000654d3f <+15>:    mov    0x438(%rax),%rbx\\n   0x0000000000654d46 <+22>:    lea    0x10(%rbx),%rdx\\n   0x0000000000654d4a <+26>:    mov    (%rdx),%eax\\n   0x0000000000654d4c <+28>:    test   %eax,%eax\\n   0x0000000000654d4e <+30>:    mov    %eax,(%rsp)\\n   0x0000000000654d51 <+33>:    je     0x654d5e <rte_eal_memzone_init+46>\\n   0x0000000000654d53 <+35>:    pause\\n   0x0000000000654d55 <+37>:    mov    (%rdx),%eax\\n   0x0000000000654d57 <+39>:    test   %eax,%eax\\n=> 0x0000000000654d59 <+41>:    mov    %eax,(%rsp)\\n   0x0000000000654d5c <+44>:    jne    0x654d53 <rte_eal_memzone_init+35>\\n   0x0000000000654d5e <+46>:    mov    (%rsp),%eax\\n   0x0000000000654d61 <+49>:    lock cmpxchg %ecx,(%rdx)\\n   0x0000000000654d65 <+53>:    jne    0x654da8 <rte_eal_memzone_init+120>\\n   0x0000000000654d67 <+55>:    call   0x646910 <rte_eal_process_type>\\n   0x0000000000654d6c <+60>:    test   %eax,%eax\\n```\\n\u5c06\u53cd\u6c47\u7f16\u7684\u7ed3\u679c\u4e0e\u6e90\u4ee3\u7801\u6bd4\u5bf9\uff0c\u786e\u8ba4\u5361\u5728\u5982\u4e0b\u4ee3\u7801\u5904\uff1a\\n```c\\n\\trte_rwlock_write_lock(&mcfg->mlock);\\n```\\n\u6b64\u65f6 ps \u68c0\u7d22\u5230 l2fwd \u7a0b\u5e8f\u7684 pid \u4e3a 33746\uff0c\u67e5\u770b /proc/33746/fd \u76ee\u5f55\u5185\u5bb9\uff0c\u6536\u96c6\u5230\u5982\u4e0b\u5173\u952e\u4fe1\u606f\uff1a\\n```c\\nroot@debian:/home/longyu/# ls -lh /proc/33746/fd/\\ntotal 0\\nlrwx------ 1 root root 64 Apr 20 04:39 0 -> /dev/pts/0\\nlrwx------ 1 root root 64 Apr 20 04:40 1 -> /run/dpdk/rte/config\\nlrwx------ 1 root root 64 Apr 20 04:40 2 -> /dev/pts/0\\nlr-x------ 1 root root 64 Apr 20 04:40 3 -> \'pipe:[173766]\'\\nl-wx------ 1 root root 64 Apr 20 04:40 4 -> \'pipe:[173766]\'\\nlrwx------ 1 root root 64 Apr 20 04:40 5 -> \'anon_inode:[timerfd]\'\\nlrwx------ 1 root root 64 Apr 20 04:40 6 -> \'socket:[173775]\'\\nlrwx------ 1 root root 64 Apr 20 04:40 7 -> \'socket:[173770]\'\\nlrwx------ 1 root root 64 Apr 20 04:40 8 -> \'anon_inode:[eventpoll]\'\\nlr-x------ 1 root root 64 Apr 20 04:40 9 -> /dev/hugepages**\\n```\\n\u53ef\u4ee5\u770b\u5230 **/run/dpdk/rte/config** \u6587\u4ef6\u7684 fd \u4e3a 1\uff0c\u6070\u597d\u5bf9\u5e94\u5173\u95ed\u7684 stdout \u63cf\u8ff0\u7b26\u3002\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u4f7f\u7528 od -c \u67e5\u770b **/run/dpdk/rte/config** \u6587\u4ef6\u4fe1\u606f\u5982\u4e0b\uff1a\\n```c\\nroot@debian:/home/longyu/# od -c /run/dpdk/rte/config\\n0000000   E   A   L   :       P   r   o   b   i   n   g       V   F   I\\n0000020   O       s   u   p   p   o   r   t   .   .   .  \\\\n  \\\\0  \\\\0  \\\\0\\n0000040  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0\\n*\\n0040300  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0 260 377 276 376   ?  \\\\0  \\\\0\\n0040320  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0  \\\\0\\n*\\n0040400\\n```\\n\u53ef\u4ee5\u770b\u5230 **rte_config** \u6587\u4ef6\u6700\u5f00\u59cb\u7684\u5185\u5bb9\u53d8\u4e3a\u4e86 **EAL:Probing VFIO support...**\uff0c\u7ed3\u5408\u4e0a\u6587\u4e2d\u63cf\u8ff0\u7684 l2fwd \u5361\u5728 **rte_rwlock_write_lock** \u7684\u73b0\u8c61\uff0c\u53ef\u4ee5\u660e\u786e\u5361\u4f4f\u7684\u539f\u56e0\u662f\u83b7\u53d6\u4e0d\u5230 **mlock** \u7684\u5199\u9501\u3002\\n\\n**rte_config** \u6587\u4ef6\u5728 dpdk \u4e2d\u88ab\u6620\u5c04\u4e3a\u4e00\u4e2a **rte_mem_config** \u7ed3\u6784\uff0c\u6b64\u7ed3\u6784\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\\n```c\\nstruct rte_mem_config {\\n\\tvolatile uint32_t magic;   /**< Magic number - sanity check. */\\n\\tuint32_t version;\\n\\t/**< Prevent secondary processes using different DPDK versions. */\\n\\n\\t/* memory topology */\\n\\tuint32_t nchannel;    /**< Number of channels (0 if unknown). */\\n\\tuint32_t nrank;       /**< Number of ranks (0 if unknown). */\\n\\n\\t/**\\n\\t * current lock nest order\\n\\t *  - qlock->mlock (ring/hash/lpm)\\n\\t *  - mplock->qlock->mlock (mempool)\\n\\t * Notice:\\n\\t *  *ALWAYS* obtain qlock first if having to obtain both qlock and mlock\\n\\t */\\n\\trte_rwlock_t mlock;   /**< used by memzones for thread safety. */\\n```\\n\u4e00\u4e2a rte_rwlock_t \u7684\u5927\u5c0f\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5b83\u7531\u4e00\u4e2a CNT \u53d8\u91cf\u7ec4\u6210\u3002\u5728[\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848\u4e4b dpdk \u8fdb\u7a0b\u6b7b\u9501](https://blog.csdn.net/Longyu_wlz/article/details/124261738?spm=1001.2014.3001.5501) \u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u63cf\u8ff0\u8fc7 dpdk \u5185\u90e8\u5b9e\u73b0\u7684\u8bfb\u5199\u9501\u673a\u5236\u5982\u4e0b\uff1a\\n   1. \u4e00\u628a\u9501\u7531\u4e00\u4e2a\u5b9a\u4e49\u4e3a volatile \u7684 32 \u4f4d\u8ba1\u6570\u503c\u63cf\u8ff0\uff0c\u5b9a\u4e49\u4e3a volatile \u9650\u5b9a\u6bcf\u6b21\u90fd\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u6b64\u8ba1\u6570\u503c\\n   2. \u8ba1\u6570\u503c\u4e3a 0 \u8868\u660e\u6ca1\u6709\u4eba\u5360\u6709\u9501\uff0c\u8ba1\u6570\u503c\u5927\u4e8e 0 \u8868\u660e\u6709\u8bfb\u8005\u5360\u7528\uff0c\u8ba1\u6570\u503c\u5c0f\u4e8e 0 \u8868\u660e\u6709\u5199\u8005\u5360\u7528\\n   3. \u83b7\u53d6\u8bfb\u9501\u901a\u8fc7\u539f\u5b50\u64cd\u4f5c\u7ed9\u8ba1\u6570\u503c\u52a0 1\uff0c\u83b7\u53d6\u5199\u9501\u901a\u8fc7\u539f\u5b50\u64cd\u4f5c\u7ed9\u8ba1\u6570\u503c\u51cf 1\\n   4. \u83b7\u53d6\u5199\u9501\u7684\u65f6\u5019\u4e0d\u80fd\u6709\u4eba\u8bfb\u3001\u5199\uff0c\u83b7\u53d6\u8bfb\u9501\u7684\u65f6\u5019\u4e0d\u80fd\u6709\u4eba\u5199\uff0c\u6761\u4ef6\u4e0d\u6210\u7acb\u5219\u4e00\u76f4\u91cd\u8bd5\\n\\n\u6839\u636e\u6b64\u65f6 **rte_config \u6587\u4ef6\u7684\u5185\u5bb9\u4e0e mlock \u5728 rte_mem_config \u4e2d\u7684\u504f\u79fb**\uff0c\u53ef\u4ee5\u786e\u5b9a\u6b64\u65f6 mlock \u4e2d cnt \u7684\u503c\u4e3a **\\" sup\\"**\uff0c\u6b64\u503c**\u4e0d\u4e3a 0** \u8868\u660e\u6709\u4eba\u5360\u4e86\u9501\uff0c\u4ece\u800c\u5bfc\u81f4\u83b7\u53d6\u5199\u9501\u5931\u8d25\uff0cl2fwd \u7a0b\u5e8f\u6b7b\u9501\u3002\\n\\n### \u5173\u95ed stdout \u5f71\u54cd\u5230\u4e86\u4ec0\u4e48\uff1f\\n\u5728\u4e0a\u6587\u4e2d\uff0c\u6211\u901a\u8fc7\u8bbf\u95ee **/proc** \u76ee\u5f55\u67e5\u770b\u5230\u4e86 l2fwd \u8fd0\u884c\u65f6 **rte_config** \u6587\u4ef6\u7684 fd \u4e3a 1\uff0c\u800c stdout \u5bf9\u5e94\u7684\u63cf\u8ff0\u7b26\u4e5f\u662f 1\u3002\\n\\n\u540c\u65f6\u6211\u5728 dpdk \u4ee3\u7801\u4e2d\u641c\u7d22 **\\"Probing VFIO support\\"**\uff0c\u641c\u7d22\u5230\u5982\u4e0b\u4ee3\u7801\uff1a\\n```c\\nRTE_LOG(INFO, EAL, \\"Probing VFIO support...\\\\n\\");\\n```\\n\u8fdb\u4e00\u6b65\u9605\u8bfb\u4ee3\u7801\u786e\u8ba4\u4e0a\u8ff0\u4fe1\u606f\u5c06\u4f1a\u8f93\u51fa\u5230 stdout \u4e2d\uff0c\u800c\u6b64\u65f6\u7531\u4e8e stdout \u5bf9\u5e94\u7684 fd 1 \u5bf9\u5e94\u7684\u662f rte_config \u6587\u4ef6\uff0c\u5219 **stdout \u7684\u8f93\u51fa\u5185\u5bb9\u4f1a\u8f93\u51fa\u5230 rte_config \u6587\u4ef6\u4e2d**\uff0c\u8fdb\u800c\u8986\u76d6 **dpdk** \u5185\u90e8 **rte_mem_config** \u7ed3\u6784\u7684\u5185\u5bb9\uff0c\u5bfc\u81f4 mlock \u5b57\u6bb5\u7684\u503c\u88ab\u5f02\u5e38\u8986\u76d6\uff0c\u5bfc\u81f4 dpdk \u8fdb\u7a0b\u6b7b\u9501\u3002\\n\\n\u8fd9\u4e00\u5207\u7684\u89e6\u53d1\u56e0\u7d20\u4ec5\u4ec5\u662f\u5728\u8c03\u7528 rte_eal_init \u524d\u5173\u95ed\u4e86 stdout \u63cf\u8ff0\u7b26\uff0c\u800c dpdk \u4e5f\u5e76\u6ca1\u6709\u660e\u786e\u9650\u5b9a\u4e0d\u80fd\u5173\u95ed\uff0c\u96be\u9053\u8fd9\u662f\u4e00\u79cd\u6f5c\u89c4\u5219\uff1f\u90a3\u4e3a\u4f55\u4f1a\u6709\u8fd9\u6837\u7684\u8868\u73b0\u5462\uff1f\\n\\n\u8fd9\u4e2a\u95ee\u9898\u7684\u8868\u9762\u539f\u56e0\u662f dpdk \u7684\u5185\u90e8 log \u8f93\u51fa\u5230 stdout\uff0c\u67e5\u9605 dpdk git log\uff0c\u53d1\u73b0\u9488\u5bf9\u9ed8\u8ba4\u7684 log \u6709\u5982\u4e0b commit\uff1a\\n```\\ncommit 5988725d0efeb7021670986aafeb3ff3d87839e1\\nAuthor: Ferruh Yigit <ferruh.yigit@intel.com>\\nDate:   Tue Feb 9 15:06:20 2021 +0000\\n\\n    log/linux: make default output stderr\\n    \\n    In Linux by default DPDK log goes to stdout, as well as syslog.\\n    \\n    It is possible for an application to change the library output stream\\n    via \'rte_openlog_stream()\' API, to set it to stderr, it can be used as:\\n    rte_openlog_stream(stderr);\\n    \\n    But still updating the default log output to \'stderr\'.\\n    \\n    Bugzilla ID: 8\\n    Fixes: af75078fece3 (\\"first public release\\")\\n    Cc: stable@dpdk.org\\n    \\n    Reported-by: Alexandre Ferrieux <alexandre.ferrieux@orange.com>\\n    Signed-off-by: Ferruh Yigit <ferruh.yigit@intel.com>\\n```\\n\u6b64 commit \u5c06 dpdk \u9ed8\u8ba4 log \u8bbe\u7f6e\u4e3a stderr\uff0c\u6b64\u65f6\u8981\u590d\u73b0\u76f8\u540c\u7684\u95ee\u9898\uff0c\u53ea\u9700\u8981\u5c06 close \u7684\u63cf\u8ff0\u7b26\u6539\u4e3a stderr \u5373\u53ef\uff01\\n\\n## \u4e3a\u4ec0\u4e48\u5173\u95ed stdout \u4f1a\u5e26\u6765\u5982\u6b64\u5927\u7684\u5f71\u54cd\u5462\uff1f\\n\u5728 [\u7a0b\u5e8f\u542f\u52a8\u987a\u5e8f\u5f15\u53d1\u7684\u8840\u6848\u4e4b dpdk \u8fdb\u7a0b\u6b7b\u9501](https://blog.csdn.net/Longyu_wlz/article/details/124261738?spm=1001.2014.3001.5501) \u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u63cf\u8ff0\u4e86 dpdk \u5185\u90e8\u591a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6838\u5fc3\u7684\u7ed3\u6784\u56fe\u5982\u4e0b\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/271474e9e9b54b6cbf480f19fa445641.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbG9uZ3l1X3dseg==,size_20,color_FFFFFF,t_70,g_se,x_16)rte_config \u7ed3\u6784\u5728\u591a\u4e2a dpdk \u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\uff0c\u5176\u6838\u5fc3\u601d\u60f3\u662f\u591a\u4e2a\u8fdb\u7a0b mmap \u76f8\u540c\u7684\u6587\u4ef6\u5230\u7279\u5b9a\u7684\u5730\u5740\u6765\u5171\u4eab\u5185\u5b58\u3002\\n\\n\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b\uff1a\\n```c\\n 305     const char *pathname = eal_runtime_config_path();\\n.........\\n 310     if (mem_cfg_fd < 0){\\n 311         mem_cfg_fd = open(pathname, O_RDWR);\\n.........\\n 278     mapped_mem_cfg_addr = mmap(rte_mem_cfg_addr,\\n 279             cfg_len_aligned, PROT_READ | PROT_WRITE,\\n 280             MAP_SHARED | MAP_FIXED, mem_cfg_fd, 0);\\n```\\n\u4ee3\u7801\u7ec6\u8282\u4e0d\u7528\u8d58\u8ff0\u3002\u5f53\u5728\u6267\u884c rte_eal_init \u51fd\u6570\u524d\u5173\u95ed stdout \u65f6\uff0c\u5185\u6838\u56de\u6536 1 \u53f7\u63cf\u8ff0\u7b26\uff0c\u6b64\u65f6\u53ef\u7528\u7684\u6700\u5c0f\u7684 fd \u5c31\u662f 1\u3002\\n\\ndpdk \u5728\u6253\u5f00 rte_config \u6587\u4ef6\u65f6\u5206\u914d\u5230\u7684 fd \u4e3a 1\uff0c\u800c stdout \u5bf9\u5e94\u7684\u4e5f\u662f 1\u3002\u6b64\u540e dpdk \u7ee7\u7eed\u521d\u59cb\u5316\uff0c**\u5185\u90e8 log \u4fe1\u606f\u8f93\u51fa\u5230 stdout \u4e2d\u7684\u6548\u679c\u5c31\u662f\u5199\u5165\u5230 rte_config \u6587\u4ef6\u4e2d**\uff0c\u5bfc\u81f4 dpdk \u5185\u90e8 **rte_mem_config** \u7684\u5185\u5bb9\u88ab\u7834\u574f\uff0c\u8fdb\u7a0b\u5f02\u5e38\uff01\\n\\n\u4e00\u4e2a\u975e\u5e38\u660e\u663e\u7684\u65b9\u6848\u662f\u5728 rte_config_init \u540e close \u6389 rte_config \u6587\u4ef6\uff0c\u53ef\u662f\u771f\u7684\u53ef\u884c\u5417\uff1f\\n\\n## \u4e3a\u4ec0\u4e48 dpdk primary \u8fdb\u7a0b\u672a\u5173\u95ed rte_config \u6587\u4ef6?\\ndpdk primary \u8fdb\u7a0b\u521b\u5efa rte_config \u6587\u4ef6\u7528\u4e8e\u591a\u8fdb\u7a0b\u95f4\u5171\u4eab rte_mem_config \u7ed3\u6784\u7684\u4e3b\u8981\u8fc7\u7a0b\u5982\u4e0b\u56fe\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/9da9f2241bed4db487bbf4f222de94b2.png#pic_center)\u5728\u4e0a\u8ff0\u7684\u6d41\u7a0b\u4e2d\uff0cdpdk primary \u8fdb\u7a0b\u4f1a\u4e3a rte_config \u6587\u4ef6\u6620\u5c04\u5230\u7684 rte_mem_config \u7ed3\u6784\u4e2d\u7684 memsegs \u5b57\u6bb5\u83b7\u53d6\u5199\u6587\u4ef6\u9501\uff0c\u8fd9\u628a\u9501dpdk  \u7528\u4e8e\u81ea\u52a8\u68c0\u6d4b\u8fdb\u7a0b\u5c5e\u4e8e secondary \u8fdb\u7a0b\u8fd8\u662f primary \u8fdb\u7a0b\u3002\u53ea\u6709 primary \u8fdb\u7a0b\u624d\u80fd\u6210\u529f\u83b7\u53d6\u5230\u9501\uff0c\u540c\u65f6 primary \u8fdb\u7a0b\u4fdd\u8bc1\u5728\u8fd0\u884c\u671f\u95f4\u4e0d\u4f1a\u5173\u95ed rte_config \u6587\u4ef6\u3002\\n\\ndpdk \u81ea\u52a8\u68c0\u6d4b\u8fdb\u7a0b\u7c7b\u578b\u7684\u51fd\u6570\u5b9e\u73b0\u5982\u4e0b\uff1a\\n\\n```c\\n/* Detect if we are a primary or a secondary process */\\nenum rte_proc_type_t\\neal_proc_type_detect(void)\\n{\\n        enum rte_proc_type_t ptype = RTE_PROC_PRIMARY;\\n        const char *pathname = eal_runtime_config_path();\\n\\n        /* if there no shared config, there can be no secondary processes */\\n        if (!internal_config.no_shconf) {\\n                /* if we can open the file but not get a write-lock we are a\\n                 * secondary process. NOTE: if we get a file handle back, we\\n                 * keep that open and don\'t close it to prevent a race condition\\n                 * between multiple opens.\\n                 */\\n                if (((mem_cfg_fd = open(pathname, O_RDWR)) >= 0) &&\\n                                (fcntl(mem_cfg_fd, F_SETLK, &wr_lock) < 0))\\n                        ptype = RTE_PROC_SECONDARY;\\n        }\\n\\n        RTE_LOG(INFO, EAL, \\"Auto-detected process type: %s\\\\n\\",\\n                        ptype == RTE_PROC_PRIMARY ? \\"PRIMARY\\" : \\"SECONDARY\\");\\n\\n        return ptype;\\n}\\n```\\n\u6838\u5fc3\u903b\u8f91\u4e3a\u6253\u5f00 rte_config \u6587\u4ef6\u540e\u5c1d\u8bd5\u83b7\u53d6 wr_lock \u4e2d\u8bbe\u5b9a\u7684 memsegs \u5b57\u6bb5\u7684\u5199\u9501\uff0c\u6210\u529f\u83b7\u53d6\u5219\u4e3a primary \u8fdb\u7a0b\uff0c\u83b7\u53d6\u5931\u8d25\u5219\u4e3a secondary \u8fdb\u7a0b\u3002\\n\\n\u8fd9\u5c31\u662f dpdk primary \u8fdb\u7a0b\u672a\u5173\u95ed rte_config \u6587\u4ef6\u7684\u539f\u56e0 \uff0cclose \u4e86\u8fd9\u4e2a\u6587\u4ef6\u540e\uff0cprimary \u8fdb\u7a0b\u5728\u5176\u4e0a\u83b7\u53d6\u7684\u6587\u4ef6\u9501\u4f1a\u91ca\u653e\uff0c\u8fd9\u6837\u5c31\u4e0d\u80fd\u81ea\u52a8\u68c0\u6d4b dpdk \u8fdb\u7a0b\u7684\u7c7b\u578b\u4e86\uff01\\n\\n\u8981\u5b9e\u73b0\u5173\u95ed rte_config \u7684\u529f\u80fd\u9700\u8981\u63d0\u4f9b\u53e6\u5916\u4e00\u79cd\u4e0d\u4f9d\u8d56\u6587\u4ef6\u52a0\u9501\u7684\u63a2\u6d4b dpdk \u7a0b\u5e8f\u7c7b\u578b\u7684\u673a\u5236\u3002\\n\\n## \u771f\u5b9e\u73af\u5883\u4e2d\u7684\u95ee\u9898\\n\u4e0a\u6587\u4e2d\u901a\u8fc7 l2fwd \u6a21\u62df\u8fd9\u4e2a\u95ee\u9898\u770b\u4e0a\u53bb\u633a\u8f7b\u677e\uff0c\u4f46\u8fd9\u4e2a\u95ee\u9898\u5728\u771f\u5b9e\u73af\u5883\u4e2d\u51fa\u73b0\u7684\u65f6\u5019\u6211\u4eec\u53ea\u89c2\u6d4b\u5230 strace \u4e2d\u6709 close stdout \u7684\u64cd\u4f5c\uff0c\u4f46\u662f\u7531\u4e8e\u4ee3\u7801\u8fc7\u4e8e\u590d\u6742\uff0c\u4ed4\u7ec6\u627e\u4e86\u4e0b\u5374\u6ca1\u6709\u627e\u5230\u8fd9\u4e2a\u903b\u8f91\u662f\u5728\u54ea\u91cc\u88ab\u8c03\u7528\u7684\u3002\\n\\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u60f3\u5230\u4e86\u4e00\u79cd\u601d\u8def\uff1a\\n1. hook c \u5e93 close \u51fd\u6570\\n2. \u5728 hook \u51fd\u6570\u4e2d\u5224\u65ad\u5173\u95ed\u7684 fd \u662f\u5426\u4e3a 1\uff0c\u4e3a 1 \u5219\u56de\u6eaf\u51fd\u6570\u8c03\u7528\u6808\u5e27\u4fe1\u606f\uff0c\u6839\u636e\u6808\u5e27\u4fe1\u606f\u786e\u8ba4\u51fa\u73b0\u95ee\u9898\u7684\u5730\u65b9\\n3. \u6307\u5b9a LD_PRELOAD \u52a0\u8f7d hook close \u51fd\u6570\u7684 so \u6765\u590d\u73b0\u95ee\u9898\\n\\nhook close \u51fd\u6570\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n#define _GNU_SOURCE\\n#include <stdio.h>\\n#include <unistd.h>\\n#include <dlfcn.h>\\n#include <unistd.h>\\n#include <fcntl.h>           /* Definition of AT_* constants */\\n#include <execinfo.h>\\n#include <stdlib.h>\\n\\n#define BACKTRACE_SIZE 256\\n/* dump the stack of the calling core */\\nvoid dump_stack(void)\\n{\\n        void *func[BACKTRACE_SIZE];\\n        char **symb = NULL;\\n        int size;\\n\\n        size = backtrace(func, BACKTRACE_SIZE);\\n        symb = backtrace_symbols(func, size);\\n\\n        if (symb == NULL)\\n                return;\\n\\n        while (size > 0) {\\n                printf(\\"%d: [%s]\\\\n\\", size, symb[size - 1]);\\n                size --;\\n        }\\n\\n        free(symb);\\n}\\n\\n#define BUFFER_SIZE 1024\\ntypedef (*close_t) (int fd);\\n\\nint close(int fd)\\n{\\n        close_t old_close;\\n\\n        if (fd == 1) {\\n                dump_stack();\\n        }\\n\\n        old_close = dlsym(RTLD_NEXT, \\"close\\");\\n        return old_close(fd);\\n}\\n```\\n\\n\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u7f16\u8bd1\uff1a\\n\\n```jsx\\ngcc -fPIC -shared hook_close.c -o close.so -ldl\\n```\\n\\n\u590d\u73b0\u95ee\u9898\u540e\uff0c\u6392\u67e5\u53d1\u73b0\u95ee\u9898\u6307\u5411\u7684\u51fd\u6570\u4e2d\u6ca1\u6709\u76f8\u5173\u7684\u4ee3\u7801\uff0c\u4f46\u4f4d\u7f6e\u5927\u81f4\u660e\u786e\u3002\u6709\u4e86\u8fd9\u4e2a\u4fe1\u606f\u540e\uff0c\u4ed4\u7ec6\u5206\u6790\u4ee3\u7801\u786e\u8ba4\u95ee\u9898\u51fa\u5728\u4e00\u4e2a\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u8c03\u7528\u4e2d\uff0c\u95ee\u9898\u5f97\u5230\u89e3\u51b3\uff01\\n\\n## \u603b\u7ed3\\n\u6709\u4e9b\u95ee\u9898\u7684\u8868\u8c61\u7b80\u5355\u5374\u4e0d\u5bb9\u6613\u5b9a\u4f4d\uff0c\u5bf9\u4e8e\u8fd9\u4e9b\u95ee\u9898\u53ef\u80fd\u5f97\u7ed3\u5408\u4e00\u4e9b\u5176\u5b83\u7684\u6280\u672f\u6765\u52a0\u901f\u3002\u5728\u4e0a\u6587\u63cf\u8ff0\u7684\u8981\u627e\u5230\u5173\u95ed stdout \u7684\u4f4d\u7f6e\u65f6\uff0c\u7531\u4e8e\u5df2\u7ecf\u786e\u5b9a\u4e86\u8fdb\u7a0b\u4e00\u5b9a\u4f1a\u5173\u95ed stdout\uff0c\u5219\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5173\u952e\u8def\u5f84\u4e0a\u4e0b\u529f\u592b\uff0chook close c \u5e93\u51fd\u6570\u5c31\u662f\u4e00\u6b21\u8fd9\u6837\u7684\u5b9e\u8df5\uff01\\n\\n\u540c\u65f6\u4e5f\u9700\u8981\u6ce8\u610f\u7684\u662f\u7279\u5b9a\u7684\u6846\u67b6\u8bbe\u8ba1\uff0c\u53ef\u80fd\u5b58\u5728\u4e00\u4e9b\u9650\u5b9a\u56e0\u7d20\uff0c\u6709\u65f6\u5019\u8fd9\u4e9b\u56e0\u7d20\u5e76\u4e0d\u90a3\u4e48\u660e\u663e\uff0c\u9700\u8981\u5bf9\u6846\u67b6\u7684\u5b9e\u73b0\u7ec6\u8282\u4ed4\u7ec6\u5206\u6790\uff0c\u6709\u8fd9\u6837\u7684\u8fc7\u7a0b\u5c31\u80fd\u591f\u6709\u6240\u63d0\u5347\uff01"},{"id":"/dpdk/\u6740\u6389\u6570\u901a\u5f15\u64ce\u5bfc\u81f4\u865a\u62df\u673a\u91cd\u542f\u95ee\u9898\u5b9a\u4f4d","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u6740\u6389\u6570\u901a\u5f15\u64ce\u5bfc\u81f4\u865a\u62df\u673a\u91cd\u542f\u95ee\u9898\u5b9a\u4f4d","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u6740\u6389\u6570\u901a\u5f15\u64ce\u5bfc\u81f4\u865a\u62df\u673a\u91cd\u542f\u95ee\u9898\u5b9a\u4f4d.md","source":"@site/blog/dpdk/\u6740\u6389\u6570\u901a\u5f15\u64ce\u5bfc\u81f4\u865a\u62df\u673a\u91cd\u542f\u95ee\u9898\u5b9a\u4f4d.md","title":"dpdk/\u6740\u6389\u6570\u901a\u5f15\u64ce\u5bfc\u81f4\u865a\u62df\u673a\u91cd\u542f\u95ee\u9898\u5b9a\u4f4d","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":5.975,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/\u5173\u95ed stdout \u5f15\u53d1\u7684\u707e\u96be","permalink":"/longyu.github.io/blog/dpdk/\u5173\u95ed stdout \u5f15\u53d1\u7684\u707e\u96be"},"nextItem":{"title":"dpdk/\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u9a71\u52a8\u53ca\u5176\u4f7f\u7528\u7684 bind\u3001unbind\u3001new_id \u7b49 sys \u6587\u4ef6","permalink":"/longyu.github.io/blog/dpdk/\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u9a71\u52a8\u53ca\u5176\u4f7f\u7528\u7684 bind\u3001unbind\u3001new_id \u7b49 sys \u6587\u4ef6"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n\\n**\u5728\u865a\u62df\u673a\u5185\u91cd\u542f\u6570\u901a\u5f15\u64ce\u4f1a\u5bfc\u81f4\u865a\u673a\u91cd\u542f**\\n\\n## \u73af\u5883\u4fe1\u606f\\n\\n**arm \u865a\u62df\u673a**\\n\\n## \u95ee\u9898\u5b9a\u4f4d\u8fc7\u7a0b\\n\\n### 1. \u8c03\u5927 printk \u7ea7\u522b\u540e kill \u6570\u901a\u5f15\u64ce\u67e5\u770b\u4e32\u53e3\u8f93\u51fa\\n\\n\u4e32\u53e3\u8f93\u51fa\u4e2d**\u672a\u89c1\u660e\u663e\u5f02\u5e38\u4fe1\u606f**\u3002\\n\\n### 2. \u91cd\u547d\u540d\u8d1f\u8d23\u7ed1\u5b9a\u7f51\u5361\u63a5\u53e3\u5230 igb_uio \u7684\u7a0b\u5e8f\u6d4b\u8bd5\\n\u6839\u636e\u8fc7\u53bb\u7684\u7ecf\u9a8c\uff0c\u5728 dpdk \u6570\u901a\u5f15\u64ce\u8fd0\u884c\u7684\u65f6\u5019\u5982\u679c\u53bb\u89e3\u7ed1\u4e1a\u52a1\u53e3\uff0c\u4e5f\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7cfb\u7edf\u91cd\u542f\u3002\u9700\u8981\u6392\u9664\u8d1f\u8d23\u7ed1\u5b9a\u7f51\u5361\u63a5\u53e3\u7a0b\u5e8f\u7684\u5f71\u54cd\u3002\\n\\n\u91cd\u547d\u540d\u5e76\u6740\u6389\u76f8\u5173\u7a0b\u5e8f\u540e\uff0c**kill \u5f15\u64ce\u540e\u865a\u673a\u4ecd\u65e7\u91cd\u542f**\u3002\\n\\n## 3. \u8fd0\u884c l2fwd \u7a0b\u5e8f\u5e76 kill \u89c2\u5bdf\u662f\u5426\u91cd\u542f\\n\\nl2fwd \u4ee3\u8868\u6570\u901a\u5f15\u64ce\u7684\u6781\u7b80\u539f\u578b\uff0c\u5173\u8054\u5927\u7684\u5185\u5bb9\u662f igb_uio.ko\u3002\u4f7f\u7528 l2fwd \u6d4b\u8bd5\u662f\u6000\u7591 igb_uio.ko \u7684\u5f71\u54cd\u5bfc\u81f4\u865a\u673a\u91cd\u542f\u3002\\n\\n**\u6d4b\u8bd5\u786e\u8ba4\u4e0d\u4f1a\u91cd\u542f\u3002**\\n\\n### 4. \u8fd0\u884c kni \u7a0b\u5e8f\u5e76 kill \u89c2\u5bdf\u662f\u5426\u91cd\u542f\\n\\nkni \u4e0e\u6570\u901a\u5f15\u64ce\u4e00\u6837\u90fd\u4f7f\u7528\u4e86 rte_kni.ko \u6a21\u5757\uff0c\u4e00\u65e6\u51fa\u73b0\u95ee\u9898\u53ef\u80fd\u5bfc\u81f4\u7cfb\u7edf\u5f02\u5e38\u3002\u4f7f\u7528 kni \u7a0b\u5e8f\u505a\u76f8\u540c\u7684\u6d4b\u8bd5\uff0c\u4ee5\u6392\u9664 rte_kni.ko \u7684\u5acc\u7591\u3002\\n\\n**\u6d4b\u8bd5\u786e\u8ba4\u4e0d\u4f1a\u91cd\u542f\u3002**\\n\\n### 5. \u79fb\u52a8\u6570\u901a\u5f15\u64ce\u4f7f\u7528\u7684\u4e00\u4e9b\u5185\u6838 ko\uff0c\u4ecd\u65e7\u4f1a\u91cd\u542f\\n\u865a\u62df\u673a\u4e2d\u7684\u6570\u901a\u5f15\u64ce\u5728\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u52a0\u8f7d\u4e00\u4e9b\u5185\u90e8\u529f\u80fd\u7528\u5230\u7684\u4e00\u4e9b\u5185\u6838 ko\uff0c\u6000\u7591\u53ef\u80fd\u662f\u8fd9\u90e8\u5206 ko \u7684\u5f71\u54cd\u3002\\n\\n\u91cd\u547d\u540d ko \u6240\u5728\u7684\u76ee\u5f55\u540e\uff0c\u91cd\u65b0\u6d4b\u8bd5\uff0c**\u786e\u8ba4\u865a\u673a\u8fd8\u662f\u4f1a\u91cd\u542f**\u3002\u2018\\n\\n### 6. \u91cd\u547d\u540d reboot\u3001shutdown \u547d\u4ee4\uff0c\u6740\u6389\u6570\u901a\u5f15\u64ce\u540e\u4ecd\u65e7\u91cd\u542f\\n\\n\u6000\u7591\u53ef\u80fd\u662f\u4e3b\u52a8\u8c03\u7528 reboot\u3001shutdown \u547d\u4ee4\u91cd\u542f\u4e86\u865a\u62df\u673a\u3002\u91cd\u547d\u540d\u8fd9\u4e9b\u7a0b\u5e8f\u540e\uff0c\u6d4b\u8bd5\u786e\u8ba4**\u865a\u673a\u4ecd\u65e7\u4f1a\u91cd\u542f\u3002**\\n\\n## \u521d\u6b65\u7ed3\u8bba\u4e0e\u95ee\u9898\\n\\n\u521d\u6b65\u7ed3\u8bba\uff1a**\u95ee\u9898\u51fa\u5728\u73af\u5883\u4e0a\u3001\u5916\u90e8\u3002**\\n\\n\u95ee\u9898 1\uff1a\u5728\u865a\u62df\u673a\u5185\u90e8\u6ca1\u6709\u770b\u5230\u4efb\u4f55\u76f8\u5173\u7684\u5f02\u5e38\u4fe1\u606f\uff0c\u505a\u7684\u6392\u67e5\u4e5f\u6ca1\u6709\u627e\u5230\u95ee\u9898\uff0c\u95ee\u9898\u662f\u5426\u5728\u5916\u90e8\uff1f\\n\\n\u95ee\u9898 2\uff1a\u5982\u679c\u662f\u4e3b\u52a8\u91cd\u542f\uff0cdmesg \u4e2d\u4f1a\u6709\u4e00\u4e9b\u76f8\u5173\u65e5\u5fd7\u7684\u8f93\u51fa\uff0c\u7136\u800c\u68c0\u67e5\u65e5\u5fd7\u53d1\u73b0\u6ca1\u6709\u76f8\u5173\u5185\u5bb9\uff0c\u662f\u5426\u6709\u5176\u5b83\u5f71\u54cd\u8f93\u51fa\u7684\u529f\u80fd\uff1f\\n\\n## \u662f\u5426\u5bbf\u4e3b\u673a\u4e0a\u6709\u4eba\u6740\u4e86\u865a\u62df\u673a\\n\\n\u7ecf\u8fc7\u4e0a\u6587\u4e2d\u4e00\u901a\u6392\u67e5\u540e\uff0c\u6000\u7591\u70b9\u6e10\u6e10\u5411\u5916\u524d\u8fdb\u3002ps \u67e5\u770b\u5230 kvm \u7a0b\u5e8f\u7684 pid \u7b49\u4fe1\u606f\uff0c\u6000\u7591\u5bbf\u4e3b\u673a\u4e0a\u6709\u4eba\u53ef\u80fd\u4f1a\u6740 kvm \u7a0b\u5e8f\u5bfc\u81f4\u865a\u673a\u91cd\u542f\u3002\\n\\n\u7531\u4e8e\u5bbf\u4e3b\u673a\u4e0a**\u7f3a\u5c11 gdb\u3001strace**\uff0c\u8003\u8651\u5230\u8fd8\u6709\u5176\u5b83\u865a\u673a\u5728\u8dd1\uff0c**\u4e0d\u80fd\u6267\u884c\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u6392\u9664\u95ee\u9898\uff0c\u76f4\u63a5\u653e\u5f03\u3002**\\n\\n## \u95ee\u9898\u5bf9\u79f0\u8fc7\u7a0b\\n\\n**\u76ee\u6807\uff1a**\\n\\n\u4f7f\u7528**\u8001\u955c\u50cf\u8dd1\u65b0\u7684\u6570\u901a\u5f15\u64ce**\\n\\n**\u73b0\u72b6\uff1a**\\n\\n\u4f7f\u7528**\u65b0\u7684\u955c\u50cf\u5728\u8dd1\u65b0\u6570\u901a\u5f15\u64ce**\\n\\n**\u5206\u6790\u5efa\u8bae\uff1a\u6362\u4e3a\u8001\u955c\u50cf\uff0c\u5feb\u901f\u9a8c\u8bc1\u662f\u5426\u6709\u76f8\u540c\u7684\u95ee\u9898\uff0c\u6709\u95ee\u9898\u518d\u5904\u7406**\\n\\n## \u51e0\u5341\u5206\u949f\u540e\u786e\u8ba4\u5230\u7684\u771f\u6b63\u7684\u95ee\u9898\\n\\n\u51e0\u5341\u5206\u949f\u540e\uff0c\u4ea7\u54c1\u53cd\u9988\u95ee\u9898\u4e0d\u5728\u865a\u62df\u673a\u5185\u90e8\uff0c\u662f\u5bbf\u4e3b\u673a\u4e0a\u542f\u52a8\u7684\u4e00\u4e2a\u670d\u52a1\u91cc\u9762**\u68c0\u6d4b\u5230\u865a\u62df\u673a\u4e0d\u8f6c\u53d1\u62a5\u6587**\u5c31**\u91cd\u542f\u955c\u50cf**\\n\\n## \u89e3\u51b3\u65b9\u6848\\n\\n\u5728**\u5bbf\u4e3b\u673a**\u4e0a\u5173\u6389\u4e86\u76f8\u5173\u670d\u52a1\uff0c\u91cd\u542f\u6570\u901a\u5f15\u64ce\u4e4b\u540e\u8bbe\u5907\u5c31\u6ca1\u6709\u91cd\u542f\u4e86\u3002\\n\\n## \u95ee\u9898\u4e0e\u601d\u8003\\n\\n1. **\u5728\u865a\u62df\u673a\u4e2d\u91cd\u542f\u7cfb\u7edf\u65f6\uff0c\u5bbf\u4e3b\u673a\u4e0a\u7684 kvm \u8fdb\u7a0b\u4f1a\u7ec8\u6b62\u5e76\u91cd\u65b0\u521b\u5efa\u5417\uff1f**\\n\\n   1. **\u5728\u865a\u62df\u673a\u4e2d\u91cd\u542f\u7cfb\u7edf\uff0ckvm \u8fdb\u7a0b\u4e0d\u4f1a\u7ec8\u6b62\uff0cpid \u4e0d\u4f1a\u53d8\u5316\uff0c\u89c2\u6d4b kvm \u8fdb\u7a0b\u7684 pid \u5c31\u80fd\u591f\u6392\u67e5\u95ee\u9898**\\n   2. **\u865a\u62df\u673a\u5185\u6838 crash \u81ea\u52a8\u91cd\u542f\u65f6 kvm \u8fdb\u7a0b\u7684 pid \u4e5f\u4e0d\u4f1a\u53d8\u5316\uff08\u76ee\u524d\u6682\u65f6\u6ca1\u6709\u6761\u4ef6\u9a8c\u8bc1\uff09**\\n\\n2. \u6740\u6389\u6570\u901a\u5f15\u64ce\u6240\u5e26\u6765\u7684\u76f4\u63a5\u4e0e\u95f4\u63a5\u7684\u5f71\u54cd\u80fd\u5426\u68b3\u7406\u51fa\u6765\uff1f\u4e3a\u4ec0\u4e48\u5ffd\u7565\u4e86\u6740\u6570\u901a\u5f15\u64ce\u5e26\u6765\u7684\u62a5\u6587\u8f6c\u53d1\u7ec8\u6b62\u7684\u7279\u70b9\u5462\uff1fl2fwd \u4e5f\u5b58\u5728\u62a5\u6587\u8f6c\u53d1\u7ec8\u6b62\u95ee\u9898\u4f46\u662f\u4e3a\u4ec0\u4e48\u6ca1\u6709\u76f8\u540c\u7684\u95ee\u9898\uff1f\u662f\u68c0\u6d4b\u6709\u7279\u5b9a\u7684\u8981\u6c42\uff1f\\n\\n   \u76f4\u63a5\u624e\u8fdb\u95ee\u9898\u6bd4\u8f83**\u5bb9\u6613\u5173\u6ce8\u773c\u524d\u7684\u73b0\u8c61\u800c\u5ffd\u7565\u7a0d\u8fdc\u8ddd\u79bb\u7684\u73b0\u8c61\u3002\u6ca1\u6709\u68b3\u7406\u51fa\u6765\u6740\u6389\u6570\u901a\u5f15\u64ce\u5e26\u6765\u7684\u4e00\u4e9b\u95f4\u63a5\u7684\u5f71\u54cd\u3002**\\n\\n3. kvm \u865a\u673a\u7684\u8fdb\u7a0b\u5728\u54ea\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u53d8\u5316\uff1f\\n\\n   **\u5728\u5bbf\u4e3b\u673a\u4e0a\u9500\u6bc1\u865a\u62df\u673a\u3001stop\u3001start \u865a\u62df\u673a\u3001\u6740\u6389\u865a\u673a\u7684 kvm \u8fdb\u7a0b\uff0c\u4f1a\u5bfc\u81f4\u865a\u673a\u7684 kvm \u8fdb\u7a0b\u7684 pid \u53d8\u5316\u3002**\\n\\n## \u95ee\u9898\u5b9a\u4f4d\u8fc7\u7a0b\u7684\u91cd\u6574\\n\\n1. \u8c03\u5927\u865a\u673a\u7684\u5185\u6838\u6253\u5370\u7ea7\u522b\uff0c\u590d\u73b0\u95ee\u9898\uff0c\u67e5\u770b dmesg \u4fe1\u606f\\n2. \u786e\u8ba4 dmesg \u4fe1\u606f\u6ca1\u6709\u4efb\u4f55\u5f02\u5e38\u540e\uff0c\u7ee7\u7eed\u590d\u73b0\u95ee\u9898\uff0c\u5728\u5bbf\u4e3b\u673a\u4e0a\u89c2\u5bdf\u865a\u62df\u673a\u5bf9\u5e94\u7684 kvm \u7a0b\u5e8f\u7684 pid \u662f\u5426\u53d8\u5316\\n3. \u5f53\u865a\u673a\u5bf9\u5e94\u7684 kvm \u7a0b\u5e8f\u7684 pid \u53d8\u5316\u65f6\u5728\u5bbf\u4e3b\u673a\u4e0a\u627e\u95ee\u9898\uff0c\u6ca1\u53d8\u5316\u65f6\u7ee7\u7eed\u5728\u865a\u673a\u4e2d\u627e\u95ee\u9898"},{"id":"/dpdk/\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u9a71\u52a8\u53ca\u5176\u4f7f\u7528\u7684 bind\u3001unbind\u3001new_id \u7b49 sys \u6587\u4ef6","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u9a71\u52a8\u53ca\u5176\u4f7f\u7528\u7684 bind\u3001unbind\u3001new_id \u7b49 sys \u6587\u4ef6","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u9a71\u52a8\u53ca\u5176\u4f7f\u7528\u7684 bind\u3001unbind\u3001new_id \u7b49 sys \u6587\u4ef6.md","source":"@site/blog/dpdk/\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u9a71\u52a8\u53ca\u5176\u4f7f\u7528\u7684 bind\u3001unbind\u3001new_id \u7b49 sys \u6587\u4ef6.md","title":"dpdk/\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u9a71\u52a8\u53ca\u5176\u4f7f\u7528\u7684 bind\u3001unbind\u3001new_id \u7b49 sys \u6587\u4ef6","description":"\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u9a71\u52a8","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":11.33,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/\u6740\u6389\u6570\u901a\u5f15\u64ce\u5bfc\u81f4\u865a\u62df\u673a\u91cd\u542f\u95ee\u9898\u5b9a\u4f4d","permalink":"/longyu.github.io/blog/dpdk/\u6740\u6389\u6570\u901a\u5f15\u64ce\u5bfc\u81f4\u865a\u62df\u673a\u91cd\u542f\u95ee\u9898\u5b9a\u4f4d"},"nextItem":{"title":"dpdk/\u8bd5\u73a9 dpdk ebfp \u529f\u80fd","permalink":"/longyu.github.io/blog/dpdk/\u8bd5\u73a9 dpdk ebfp \u529f\u80fd"}},"content":"## \u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u9a71\u52a8\\n\\n\u5728\u6211\u7684\u865a\u62df\u673a\u4e2d\uff0c\u6709\u5982\u4e0b\u7f51\u7edc\u63a5\u53e3\uff1a\\n\\n```bash\\nlongyu@virt-debian10:~$ lspci | grep \'Eth\'\\n01:00.0 Ethernet controller: Red Hat, Inc Virtio network device (rev 01)\\n04:00.0 Ethernet controller: Intel Corporation 82574L Gigabit Network Connection\\n08:00.0 Ethernet controller: Intel Corporation 82574L Gigabit Network Connection\\n09:00.0 Ethernet controller: Intel Corporation 82574L Gigabit Network Connection\\n```\\n\u8fd9\u91cc\u7b2c\u4e00\u4e2a\u7f51\u7edc\u63a5\u53e3\u4e3a virtio\uff0c\u540e\u4e09\u4e2a\u90fd\u662f e1000e \u865a\u62df\u7f51\u5361 82574L\u3002\\n\\n\u5728dpdk \u7684\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u6211\u4eec\u5e38\u5e38\u9700\u8981\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u4e0d\u540c\u7684\u9a71\u52a8\u4e0a\uff0c\u8fd9\u4e00\u822c\u662f\u901a\u8fc7 dpdk_nic_bind.py \u811a\u672c\u6765\u5b8c\u6210\u7684\uff0c\u8fd9\u4e2a\u811a\u672c\u5177\u4f53\u7684\u7528\u6cd5\u6211\u4e0d\u5728\u8fd9\u91cc\u8d58\u8ff0\uff0c\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u7814\u7a76\u7814\u7a76\u3002\\n\\n\u6ce8\u610f\u8fd9\u91cc\u7684 01:00.0\u300104:00.0\u300108:00.0\u300109:00.0 \u8868\u793a\u7684\u662f\u7f51\u7edc\u63a5\u53e3\u5bf9\u5e94\u7684 pci \u53f7\uff0c**\u8fd9\u4e9b pci \u53f7\u552f\u4e00\u8868\u793a\u4e00\u4e2a\u63a5\u53e3\uff0c\u5728\u7ed1\u5b9a\u9a71\u52a8\u4e0e\u89e3\u7ed1\u9a71\u52a8\u65f6\u4f1a\u4f7f\u7528\u5230\u3002**\\n\\n## \u7ed1\u5b9a\u7f51\u5361\u63a5\u53e3\u9a71\u52a8\u7684\u5177\u4f53\u8fc7\u7a0b\\n\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u4e3b\u8981\u4e0e bind \u4e0e new_id \u4e24\u4e2a\u7279\u6b8a\u7684\u6587\u4ef6\u6709\u5173\u3002\u5728\u6211\u7684\u7cfb\u7edf\u4e0a\uff0c\u6211\u641c\u7d22 /sys \u4e0b\u7684\u540d\u4e3a bind \u7684\u6587\u4ef6\uff0c\u641c\u7d22\u5230\u4e86\u4e0d\u540c\u9a71\u52a8\u7684 bind \u6587\u4ef6\uff0c\u622a\u53d6\u90e8\u5206\u4fe1\u606f\u5982\u4e0b\uff1a\\n```bash\\nlongyu@virt-debian10:~$ sudo find /sys -name \'bind\'\\n/sys/devices/virtual/vtconsole/vtcon0/bind\\n/sys/devices/virtual/vtconsole/vtcon1/bind\\n/sys/bus/serio/drivers/serio_raw/bind\\n/sys/bus/serio/drivers/atkbd/bind\\n/sys/bus/pci/drivers/shpchp/bind\\n/sys/bus/pci/drivers/agpgart-sis/bind\\n/sys/bus/pci/drivers/e1000e/bind\\n```\\n\u8fd9\u91cc\u6211\u4ee5 e1000e \u9a71\u52a8\u4e3a\u4f8b\uff0c\u770b\u770b /sys/bus/pci/dirvers \u76ee\u5f55\u4e0b\u6709\u90a3\u4e9b\u4e1c\u4e1c\u3002\\n\\n\u6267\u884c ls \u547d\u4ee4\u67e5\u770b /sys/bus/pci/drivers \u76ee\u5f55\u7684\u5185\u5bb9\uff0c\u8f93\u51fa\u5982\u4e0b\uff1a\\n\\n```bash\\nlongyu@virt-debian10:~$ ls /sys/bus/pci/drivers/e1000e\\n0000:04:00.0  0000:08:00.0  0000:09:00.0  bind  module  new_id  remove_id  uevent  unbind\\n```\\n\u8fd9\u91cc\u7684 0000:04:00.0\u30010000:08:00.0\u30010000:09:00.0 \u8868\u793a\u7ed1\u5b9a\u5230 e1000e \u9a71\u52a8\u4e0a\u7684 pci \u63a5\u53e3\u7684 pci \u53f7\u3002\\n\\nbind \u4e0e new_id \u662f\u7ed1\u5b9a\u9a71\u52a8\u8fc7\u7a0b\u4e2d\u4f1a\u4f7f\u7528\u5230\u7684\u6587\u4ef6\uff0cunbind \u662f\u89e3\u7ed1\u9a71\u52a8\u8fc7\u7a0b\u4e2d\u4f1a\u4f7f\u7528\u5230\u7684\u6587\u4ef6\u3002**\u5177\u4f53\u7684\u7ed1\u5b9a\u4e0e\u89e3\u7ed1\u7684\u8fc7\u7a0b\u5c31\u662f\u5411\u8fd9\u51e0\u4e2a\u6587\u4ef6\u4e2d\u5199\u5165\u89c4\u5b9a\u683c\u5f0f\u7684\u6570\u636e\u5b8c\u6210\u7684\u3002**\\n\\nlinux kernel \u6e90\u7801\u76ee\u5f55\u4e2d\u7684 ABI/testing/sysfs-bus-pci \u5bf9\u8fd9\u51e0\u4e2a\u6587\u4ef6\u7684\u63cf\u8ff0\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n#### 1. /sys/bus/pci/drivers/.../bind\\n\\n```\\n\\t\\tWriting a device location to this file will cause\\n\\t\\tthe driver to attempt to bind to the device found at\\n\\t\\tthis location.\\tThis is useful for overriding default\\n\\t\\tbindings.  The format for the location is: DDDD:BB:DD.F.\\n\\t\\tThat is Domain:Bus:Device.Function and is the same as\\n\\t\\tfound in /sys/bus/pci/devices/.  For example:\\n\\t\\t# echo 0000:00:19.0 > /sys/bus/pci/drivers/foo/bind\\n\\t\\t(Note: kernels before 2.6.28 may require echo -n).\\n```\\n\u8fd9\u91cc\u5199\u5165\u7684 0000:00:19.0 \u5c31\u662f\u4e0a\u9762\u6211\u4eec\u63d0\u5230\u8fc7\u7684 pci \u53f7\u3002**\u5bf9 bind \u6587\u4ef6\u5199\u5165\u6bcf\u4e00\u4e2a\u63a5\u53e3\u7684 pci \u53f7\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a\u7f51\u5361\u4e0a\u7684\u4e0d\u540c\u53e3\u7ed1\u5b9a\u5230\u4e0d\u540c\u7684\u9a71\u52a8\u4e0a\u3002**\\n\\n#### 2. /sys/bus/pci/drivers/.../unbind\\n```\\n\\t\\tWriting a device location to this file will cause the\\n\\t\\tdriver to attempt to unbind from the device found at\\n\\t\\tthis location.\\tThis may be useful when overriding default\\n\\t\\tbindings.  The format for the location is: DDDD:BB:DD.F.\\n\\t\\tThat is Domain:Bus:Device.Function and is the same as\\n\\t\\tfound in /sys/bus/pci/devices/. For example:\\n\\t\\t# echo 0000:00:19.0 > /sys/bus/pci/drivers/foo/unbind\\n\\t\\t(Note: kernels before 2.6.28 may require echo -n).\\n```\\n\u8fd9\u91cc\u5411 unbind \u6587\u4ef6\u5199\u5165\u63a5\u53e3\u7684 pci \u53f7\u5c31\u4f1a\u89e3\u9664\u5f53\u524d\u7ed1\u5b9a\u7684\u9a71\u52a8\u3002\u4e00\u4e2a\u63a5\u53e3\u53ef\u4ee5\u4e0d\u7ed1\u5b9a\u5230\u4efb\u4f55\u9a71\u52a8\u4e0a\u9762\uff0c\u4e0d\u8fc7\u6211\u4eec\u5e38\u5e38\u4e0d\u4f1a\u8fd9\u6837\u53bb\u505a\u3002\\n\\n#### 3. /sys/bus/pci/drivers/.../new_id\\n```\\n\\t\\tWriting a device ID to this file will attempt to\\n\\t\\tdynamically add a new device ID to a PCI device driver.\\n\\t\\tThis may allow the driver to support more hardware than\\n\\t\\twas included in the driver\'s static device ID support\\n\\t\\ttable at compile time.  The format for the device ID is:\\n\\t\\tVVVV DDDD SVVV SDDD CCCC MMMM PPPP.  That is Vendor ID,\\n\\t\\tDevice ID, Subsystem Vendor ID, Subsystem Device ID,\\n\\t\\tClass, Class Mask, and Private Driver Data.  The Vendor ID\\n\\t\\tand Device ID fields are required, the rest are optional.\\n\\t\\tUpon successfully adding an ID, the driver will probe\\n\\t\\tfor the device and attempt to bind to it.  For example:\\n\\t\\t# echo \\"8086 10f5\\" > /sys/bus/pci/drivers/foo/new_id\\n```\\n\u5411 new_id \u4e2d\u5199\u5165\u8bbe\u5907 id\uff0c\u5c06\u4f1a\u52a8\u6001\u7684\u5728 pci \u8bbe\u5907\u9a71\u52a8\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8bbe\u5907 id\u3002\u8fd9\u79cd\u529f\u80fd\u5141\u8bb8\u9a71\u52a8\u6dfb\u52a0\u66f4\u591a\u7684\u786c\u4ef6\u800c\u975e\u4ec5\u6709\u5728\u7f16\u8bd1\u65f6\u5305\u542b\u5230\u9a71\u52a8\u4e2d\u7684\u9759\u6001\u652f\u6301\u8bbe\u5907 ID \u5217\u8868\u4e2d\u7684\u786c\u4ef6\u3002\\n\\n**\u5199\u5165\u8fd9\u4e2a\u6587\u4ef6\u7684\u683c\u5f0f\u4e2d\uff0cVendor Id \u4e0e Device Id \u5b57\u6bb5\u662f\u5fc5\u987b\u7684\uff0c\u5176\u5b83\u7684\u5b57\u6bb5\u53ef\u4ee5\u4e0d\u6307\u5b9a\u3002**\\n\\n\u6210\u529f\u6dfb\u52a0\u4e00\u4e2a\u8bbe\u5907 ID \u65f6\uff0c\u9a71\u52a8\u4f1a\u5c1d\u8bd5 probe \u7cfb\u7edf\u4e2d\u5339\u914d\u5230\u7684\u8bbe\u5907\u5e76\u5c1d\u8bd5\u7ed1\u5b9a\u5230\u5b83\u4e4b\u4e0a\u3002\\n\\n#### 4. /sys/bus/pci/drivers/.../remove_id\\n```\\n\\t\\tWriting a device ID to this file will remove an ID\\n\\t\\tthat was dynamically added via the new_id sysfs entry.\\n\\t\\tThe format for the device ID is:\\n\\t\\tVVVV DDDD SVVV SDDD CCCC MMMM.\\tThat is Vendor ID, Device\\n\\t\\tID, Subsystem Vendor ID, Subsystem Device ID, Class,\\n\\t\\tand Class Mask.  The Vendor ID and Device ID fields are\\n\\t\\trequired, the rest are optional.  After successfully\\n\\t\\tremoving an ID, the driver will no longer support the\\n\\t\\tdevice.  This is useful to ensure auto probing won\'t\\n\\t\\tmatch the driver to the device.  For example:\\n\\t\\t# echo \\"8086 10f5\\" > /sys/bus/pci/drivers/foo/remove_id\\n```\\nremove_id \u4e2d\u5199\u5165\u7684\u683c\u5f0f\u4e0e new_id \u7684\u5199\u5165\u683c\u5f0f\u76f8\u540c\u3002\u5199\u5165 remove_id \u53ef\u4ee5\u7528\u6765\u786e\u4fdd\u5185\u6838\u4e0d\u4f1a\u81ea\u52a8 probe \u5339\u914d\u5230\u8fd9\u4e2a\u9a71\u52a8\u7684\u8bbe\u5907\u3002\\n\\n## dpdk \u7ed1\u5b9a\u3001\u89e3\u7ed1\u7f51\u5361\u63a5\u53e3\u65f6\u7684\u4e00\u4e9b\u95ee\u9898\\ndpdk \u4e2d\u6700\u5e38\u4f7f\u7528\u7684\u9a71\u52a8\u662f igb_uio\uff0c\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u5c06\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u5230 igb_uio \u4e0a\u3002\u6211\u4eec\u5fc5\u987b\u4e86\u89e3\u7684\u662f igb_uio \u9a71\u52a8\u5e76\u6ca1\u6709\u6dfb\u52a0\u4efb\u4f55\u7684\u9759\u6001\u8bbe\u5907 id \u5217\u8868\uff0c\u8fd9\u8868\u660e\u521d\u59cb\u72b6\u6001\u5b83\u662f\u4e0d\u652f\u6301\u4efb\u4f55\u8bbe\u5907\u7684\u3002\\n\\nigb_uio \u9a71\u52a8\u4e0e pci \u9a71\u52a8\u7c7b\u4f3c\uff0c\u5728\u5176\u6e90\u7801\u4e2d\u53ef\u4ee5\u627e\u5230\u5982\u4e0b pci_driver \u7ed3\u6784\u4f53\u3002\\n\\n```c\\n608 static struct pci_driver igbuio_pci_driver = {\\n609     .name = \\"igb_uio\\",\\n610     .id_table = NULL,\\n611     .probe = igbuio_pci_probe,\\n612     .remove = igbuio_pci_remove,\\n613 };\\n```\\n\u8fd9\u91cc id_table \u8bbe\u7f6e\u4e3a NULL \u8868\u793a\u9a71\u52a8\u4e2d\u6ca1\u6709\u9759\u6001\u6dfb\u52a0\u4efb\u4f55\u652f\u6301\u7684\u8bbe\u5907 id \u5217\u8868\uff0c\u8fd9\u610f\u5473\u7740\u52a0\u8f7d\u4e86 igb_uio \u9a71\u52a8\u540e\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5199\u5165 bind \u6587\u4ef6\u7ed1\u5b9a\u9a71\u52a8\u3002\\n\\n\u4e3a\u4e86\u66f4\u6e05\u695a\u7684\u8bf4\u660e\u8fd9\u4e2a id_table\uff0c\u6211\u662f\u7528 e1000e \u9a71\u52a8\u4e2d\u7684\u76f8\u5173\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u5bf9\u6bd4\u3002\\n\\n\u4e0b\u9762\u662f e1000e \u9a71\u52a8\u4e2d netdev.c \u4e2d\u5b9a\u4e49\u7684 pci_driver \u7ed3\u6784\u4f53\u7684\u5185\u5bb9\uff1a\\n\\n```c\\n7556 /* PCI Device API Driver */\\n7557 static struct pci_driver e1000_driver = {\\n7558     .name     = e1000e_driver_name,\\n7559     .id_table = e1000_pci_tbl,\\n7560     .probe    = e1000_probe,\\n7561     .remove   = e1000_remove,\\n7562     .driver   = {\\n7563         .pm = &e1000_pm_ops,\\n7564     },\\n7565     .shutdown = e1000_shutdown,\\n7566     .err_handler = &e1000_err_handler\\n7567 };\\n```\\n\u8fd9\u91cc\u7684 id_table \u4e0e igb_uio \u4e0d\u540c\uff0c\u5b83\u6307\u5411\u4e86 e1000_pci_tbl \u8fd9\u4e2a\u6570\u7ec4\u3002e1000_pci_tbl \u6570\u7ec4\u7684\u90e8\u5206\u5185\u5bb9\u622a\u53d6\u5982\u4e0b\uff1a\\n\\n```c\\nstatic const struct pci_device_id e1000_pci_tbl[] = {\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82571EB_COPPER), board_82571 },\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82571EB_FIBER), board_82571 },\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82571EB_QUAD_COPPER), board_82571 },\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82571EB_QUAD_COPPER_LP),\\n\\t  board_82571 },\\n\\t........\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82572EI), board_82572 },\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82572EI_COPPER), board_82572 },\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82572EI_FIBER), board_82572 },\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82572EI_SERDES), board_82572 },\\n\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82573E), board_82573 },\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82573E_IAMT), board_82573 },\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82573L), board_82573 },\\n\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_82574L), board_82574 },\\n```\\n\u6211\u4eec\u770b\u5230\u5728 e1000_pci_tbl \u4e2d\u6709\u5f88\u591a\u578b\u53f7\u7684\u7f51\u5361\u8bbe\u5907\u300282574L \u4e5f\u662f\u5176\u4e2d\u7684\u4e00\u6b3e\u300282574L \u7f51\u5361\u5bf9\u5e94\u7684 Vendor Id \u4e0e Device Id \u5728\u4e0a\u8ff0\u5217\u8868\u4e2d\uff0c\u5728\u9a71\u52a8\u521d\u59cb\u5316\u7684\u65f6\u5019\u6dfb\u52a0\u5230\u4e86\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7ed1\u5b9a 82574L \u7f51\u5361\u5230 e1000e \u9a71\u52a8\u4e0a\u3002\\n### \u5148\u5199\u5165\u6570\u636e\u5230 new_id \u6dfb\u52a0\u8bbe\u5907 id \u7136\u540e\u8fdb\u884c\u7ed1\u5b9a\\n\u4e3a\u4e86\u6210\u529f\u7ed1\u5b9a\u63a5\u53e3\u5230 igb_uio \u4e0a\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u5728 igb_uio \u4e2d\u6dfb\u52a0\u652f\u6301\u7684\u8bbe\u5907\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u5199\u5165\u6570\u636e\u5230 new_id \u6dfb\u52a0\u8bbe\u5907 id \u540e\u5199\u5165 bind \u6587\u4ef6\u6765\u5b8c\u6210\u3002**\u6ce8\u610f\u540c\u4e00\u4e2a\u8bbe\u5907 id \u53ef\u4ee5\u5199\u5165\u591a\u6b21\u5230 new_id \u4e2d\uff0c\u8981\u79fb\u9664\u4e5f\u9700\u8981\u5199\u5165\u76f8\u540c\u7684\u6b21\u6570\u5230 remove_id \u4e2d\u3002\u6ce8\u610f\u5199\u5165\u5230 remove_id \u5e76\u4e0d\u4f1a\u89e3\u9664\u7ed1\u5b9a\u3002**\\n\\ndpdk-17.04 \u4e2d dpdk-devbind.py \u811a\u672c\u4e2d\u76f8\u5173\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```bash\\n    if driver in dpdk_drivers:\\n        filename = \\"/sys/bus/pci/drivers/%s/new_id\\" % driver\\n        try:\\n            f = open(filename, \\"w\\")\\n        except:\\n            print(\\"Error: bind failed for %s - Cannot open %s\\"\\n                  % (dev_id, filename))\\n            return\\n        try:\\n            f.write(\\"%04x %04x\\" % (dev[\\"Vendor\\"], dev[\\"Device\\"]))\\n            f.close()\\n        except:\\n            print(\\"Error: bind failed for %s - Cannot write new PCI ID to \\"\\n                  \\"driver %s\\" % (dev_id, driver))\\n            return\\n\\n    # do the bind by writing to /sys\\n    filename = \\"/sys/bus/pci/drivers/%s/bind\\" % driver\\n    try:\\n        f = open(filename, \\"a\\")\\n    except:\\n        print(\\"Error: bind failed for %s - Cannot open %s\\"\\n              % (dev_id, filename))\\n        if saved_driver is not None:  # restore any previous driver\\n            bind_one(dev_id, saved_driver, force)\\n        return\\n    try:\\n        f.write(dev_id)\\n        f.close()\\n\\n```\\n\u4e0a\u8ff0\u4ee3\u7801\u9996\u5148\u5199\u5165 new_id \u4e2d\u6dfb\u52a0\u8bbe\u5907 id \u5230 dpdk drivers\uff08\u4f8b\u5982 igb_uio\uff09\u4e2d\uff0c\u7136\u540e\u5199\u5165 bind \u6587\u4ef6\u3002\\n\\n\u8fd9\u6837\u786e\u4fdd\u4e86\u9996\u5148\u6709\u6ce8\u518c\u7684\u8bbe\u5907 id\uff0c\u6709\u4e86\u8fd9\u4e2a\u8bbe\u5907 id \u603b\u7ebf\u624d\u80fd\u591f match \u5230\u9a71\u52a8\u6267\u884c probe \u64cd\u4f5c\u3002\u6ca1\u6709\u6ce8\u518c\u7684\u8bbe\u5907 id\uff0cpci \u603b\u7ebf\u4e0d\u4f1a\u5339\u914d\u5230\u6307\u5b9a\u7684\u9a71\u52a8\uff0c\u4e5f\u65e0\u6cd5\u5c06\u8bbe\u5907\u7ed1\u5b9a\u5230\u76f8\u5e94\u7684\u9a71\u52a8\u4e0a\u3002\\n\\necho \\"Vendor id device id\\" > new_id \u7684\u65f6\u5019\u4f1a scan\uff0c\u7528 new_id \u4e2d\u7684\u8bbe\u5907 id \u5339\u914d\u7cfb\u7edf\u4e2d\u7684\u63a5\u53e3\uff0c\u5c06\u672a\u7ed1\u5b9a\u5230\u4efb\u4f55\u9a71\u52a8\u4e0a\u7684\u63a5\u53e3\u7ed1\u5b9a\u5230\u5bf9\u5e94\u7684\u9a71\u52a8\u4e0a\u3002\\n\\n**new_id \u7684\u5199\u5165\u7684\u53c2\u6570\u4e2d\u6ca1\u6709 pci \u53f7\uff0c\u56e0\u6b64\u4e0d\u80fd\u6307\u5b9a\u53ea\u7ed1\u5b9a\u76f8\u540c\u578b\u53f7\u7f51\u5361\u7684\u5355\u4e2a\u53e3\u5230\u9a71\u52a8\u4e2d\u3002\u9664\u975e\u5176\u5b83\u53e3\u5df2\u7ecf\u7ed1\u5b9a\u5230\u4e86\u5176\u5b83\u9a71\u52a8\uff0c\u4e0d\u7136\u8fd9\u4e9b\u53e3\u90fd\u4f1a\u88ab\u7ed1\u5b9a\u3002**\\n\\n## \u7ed1\u5b9a\u5931\u8d25\u7684\u60c5\u51b5\\n1. new_id \u6ca1\u6709\u6dfb\u52a0\uff0c\u4e0d\u4f1a match \u5230\u6307\u5b9a\u7684\u9a71\u52a8\\n2. probe \u8fc7\u7a0b\u5f02\u5e38\uff0c\u7ed1\u5b9a\u5931\u8d25\\n\u8fd9\u79cd\u60c5\u51b5\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b dmesg \u4fe1\u606f\u6765\u5206\u6790\u5b9a\u4f4d\u3002\\n\\n## \u5199\u5165 new_id \u8bbe\u5907 id \u89e6\u53d1\u603b\u7ebf\u5339\u914d\u9a71\u52a8\u81ea\u52a8 probe \u95ee\u9898\\n\u4e0a\u6587\u4e2d\u63d0\u5230\u8fc7\u5f53\u5199\u5165\u8bbe\u5907 id \u5230 new_id \u6587\u4ef6\u4e2d\u4f1a\u51fa\u89e6\u53d1\u603b\u7ebf\u5339\u914d\u7cfb\u7edf\u4e2d\u7684\u63a5\u53e3\uff0c\u5c5e\u4e8e\u5199\u5165\u7684\u8bbe\u5907 id \u7684\u8bbe\u5907\u5e76\u4e14\u6ca1\u6709\u7ed1\u5b9a\u5230\u4efb\u4f55\u9a71\u52a8\u4e0a\u7684\u63a5\u53e3\u5c06\u4f1a\u5168\u90e8\u4f1a\u88ab\u7ed1\u5b9a\u5230 new_id \u6240\u5c5e\u7684\u9a71\u52a8\u3002\\n\\n\u4f8b\u5982\u7cfb\u7edf\u4e2d\u6709\u4e24\u4e2a 82574L \u7f51\u5361\u63a5\u53e3\uff0c\u90fd\u6ca1\u6709\u7ed1\u5b9a\u9a71\u52a8\uff0c\u8fd9\u65f6\u6211\u4eec\u5199\u5165 82574L \u7684\u8bbe\u5907 id \u5230 igb_uio \u9a71\u52a8\u5bf9\u5e94\u7684 new_id \u6587\u4ef6\u4e2d\uff0c\u4f1a\u5bfc\u81f4\u8fd9\u4e24\u4e2a\u53e3\u90fd\u7ed1\u5b9a\u5230 igb_uio \u4e0a\u3002\\n\\n\u5982\u679c\u8fd9\u79cd\u884c\u4e3a\u5bf9\u529f\u80fd\u6709\u6240\u5f71\u54cd\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u7ed1\u5b9a\u5230 igb_uio \u4e4b\u524d\u5148\u5c06\u63a5\u53e3\u7ed1\u5b9a\u5230\u5176\u5b83\u9a71\u52a8\u4e0a\uff08\u4e00\u822c\u662f\u5b98\u65b9\u9a71\u52a8\uff09\uff0c\u8fd9\u6837\u5728\u5199\u5165 new_id \u6587\u4ef6\u65f6\uff0c\u5df2\u7ecf\u7ed1\u5b9a\u5230\u5176\u5b83\u9a71\u52a8\u7684\u63a5\u53e3\u5c31\u4f1a\u88ab skip\u3002"},{"id":"/dpdk/\u8bd5\u73a9 dpdk ebfp \u529f\u80fd","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u8bd5\u73a9 dpdk ebfp \u529f\u80fd","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u8bd5\u73a9 dpdk ebfp \u529f\u80fd.md","source":"@site/blog/dpdk/\u8bd5\u73a9 dpdk ebfp \u529f\u80fd.md","title":"dpdk/\u8bd5\u73a9 dpdk ebfp \u529f\u80fd","description":"ebpf \u662f\u4ec0\u4e48\uff1f","date":"2022-06-21T00:32:49.000Z","formattedDate":"2022\u5e746\u670821\u65e5","tags":[],"readingTime":4.395,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u9a71\u52a8\u53ca\u5176\u4f7f\u7528\u7684 bind\u3001unbind\u3001new_id \u7b49 sys \u6587\u4ef6","permalink":"/longyu.github.io/blog/dpdk/\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u9a71\u52a8\u53ca\u5176\u4f7f\u7528\u7684 bind\u3001unbind\u3001new_id \u7b49 sys \u6587\u4ef6"},"nextItem":{"title":"dpdk/dpdk kni \u53e3 ifconfig up down \u7684\u6267\u884c\u6d41\u7a0b","permalink":"/longyu.github.io/blog/dpdk/dpdk kni \u53e3 ifconfig up down \u7684\u6267\u884c\u6d41\u7a0b"}},"content":"## ebpf \u662f\u4ec0\u4e48\uff1f\\n\\neBPF \u662f\u4e00\u4e2a\u5728\u5185\u6838\u4e2d\u8fd0\u884c\u7684\u865a\u62df\u673a\uff0c\u652f\u6301\u901a\u8fc7 C \u7b49\u9ad8\u7ea7\u8bed\u8a00\u7f16\u7801\u751f\u6210eBPF \u6307\u4ee4\u7801\u3002eBPF \u6307\u4ee4\u7801\u4ece\u7528\u6237\u6001\u52a0\u8f7d\u5230\u5185\u6838\u540e\u4ee5\u672c\u5730\u4ee3\u7801\u7684\u5f62\u5f0f\u548c\u901f\u5ea6\u53bb\u6267\u884c\uff0c\u73b0\u5df2\u652f\u6301\u5185\u6838\u591a\u4e2a\u5b50\u7cfb\u7edf\u7684\u89c2\u6d4b\u70b9\uff0c\u63d0\u4f9b\u4e86\u51e0\u4e4e\u65e0\u9650\u7684\u53ef\u89c2\u6d4b\u6027\u3002\\n\\nebpf \u4e3b\u8981\u5de5\u4f5c\u6d41\u7a0b\u5982\u4e0b\u56fe\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/91f3ab72c26942a5860d38b9db93f52b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbG9uZ3l1X3dseg==,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center)\\n## dpdk \u5bf9 ebpf \u7684\u652f\u6301\\ndpdk 18.0 \u5f15\u5165 ebpf\uff0c\u5b9e\u73b0\u4e3a librte_bpf \u5e93\u3002\u652f\u6301\u7684\u7279\u6027\uff1a\\n1. \u652f\u6301 ebpf \u67b6\u6784\uff08\u4e0d\u652f\u6301 tail-pointer\uff09\\n2. x86_64 \u4e0e arm64 \u67b6\u6784\u652f\u6301\u4f7f\u7528 JIT\u5c06 ebpf \u4ee3\u7801\u7f16\u8bd1\u4e3a native code\\n3. \u652f\u6301 ebpf \u4ee3\u7801\u6821\u9a8c\u652f\u6301\u7528\u6237\u5b9a\u4e49\u7684\u8f85\u52a9\u51fd\u6570\\n4. \u652f\u6301 rx/tx \u5305\u8fc7\u6ee4\\n5. \u652f\u6301 ebpf \u4ee3\u7801\u8bbf\u95ee mbuf \u7ed3\u6784\\n\\n\u4e0d\u652f\u6301\u7684\u7279\u6027\uff1a\\n1. cbpf\\n2. maps\\n3. stail-pointer calls\\n\\n## dpdk ebpf \u7684\u4f7f\u7528\u8fc7\u7a0b\\n\u901a\u8fc7\u6ce8\u518c rx\u3001tx \u51fd\u6570\u5185\u7684 callback \u6765\u5b9e\u73b0\u8fc7\u6ee4\u529f\u80fd\uff0c\u6700\u7ec8\u63a7\u5236\u7684\u662f**\u8fd4\u56de\u7ed9\u4e0a\u5c42\u3001\u4f20\u8f93\u7ed9\u4e0b\u5c42\u7684\u7279\u5b9a\u8fc7\u6ee4\u683c\u5f0f\u7684 mbuf**\u3002\\n\\n\u8fc7\u6ee4\u529f\u80fd\u7684\u5b9e\u73b0\u901a\u8fc7 epbf \u6307\u4ee4\u6765\u5b8c\u6210\uff0c\u652f\u6301\u865a\u62df\u673a\u6a21\u62df\u4e0e jit \u4e24\u79cd\u65b9\u5f0f\u3002jit \u4f1a\u5c06 bpf \u6307\u4ee4\u8f6c\u5316\u4e3a x86 \u6307\u4ee4\u6765\u8fd0\u884c\u3002\\n\\n\u76ee\u524d\u7684\u7f16\u7a0b\u65b9\u5f0f\uff1a\u7528 c \u7b49\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199 ebpf \u8fc7\u6ee4\u64cd\u4f5c\uff0c\u7136\u540e\u7f16\u8bd1\u4e3a bpf \u6307\u4ee4\u7801\u6765\u52a0\u8f7d\u3002\\n\\n## dpdk \u4e2d\u4e0a\u624b ebpf \u7684\u4e00\u4e9b\u524d\u7f6e\u6761\u4ef6\\n\\n1. config \u914d\u7f6e\u6587\u4ef6\u4e2d\u4f7f\u80fd\u5982\u4e0b\u914d\u7f6e\uff1a\\n   \\n    RTE_LIBRTE_GRO\\n    \\n    RTE_LIBRTE_GSO\\n    \\n    RTE_LIBRTE_BPF\\n    \\n    RTE_LIBRTE_BPF_ELF\\n    RTE_TEST_PMD\\n    \\n    RTE_ETHDEV_RXTX_CALLBACKS\\n    \\n2. \u4f7f\u7528 clang \u7f16\u8bd1 examples/bpf/ \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u4e3a bpf \u6307\u4ee4\u7801\\n3. \u8fd0\u884c testpmd\uff0c\u901a\u8fc7 bpf-load \u547d\u4ee4\u52a0\u8f7d\u7b2c\u4e8c\u6b65\u751f\u6210\u7684\u6307\u4ee4\u7801\\n\\n## \u4f7f\u7528 dpdk \u793a\u4f8b\u4ee3\u7801\u4e0a\u624b dpdk ebpf\\n\\nebpf \u8fc7\u6ee4 c \u7a0b\u5e8f\u6e90\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n#include <stdint.h>\\n#include <net/ethernet.h>\\n#include <netinet/ip.h>\\n#include <netinet/udp.h>\\n#include <arpa/inet.h>\\n\\nuint64_t\\nentry(void *pkt)\\n{\\n        struct ether_header *ether_header = (void *)pkt;\\n\\n        if (ether_header->ether_type != htons(0x0800))\\n                return 0;\\n\\n        struct iphdr *iphdr = (void *)(ether_header + 1);\\n        if (iphdr->protocol != 17 || (iphdr->frag_off & 0x1ffff) != 0 ||\\n                        iphdr->daddr != htonl(0x1020304))\\n                return 0;\\n\\n        int hlen = iphdr->ihl * 4;\\n        struct udphdr *udphdr = (void *)iphdr + hlen;\\n\\n        if (udphdr->dest != htons(5000))\\n                return 0;\\n\\n        return 1;\\n}\\n```\\n\\n\u4e0a\u8ff0\u4ee3\u7801\u5b9e\u73b0\u7c7b\u4f3c **tcpdump -s 1 -d \'dst 1.2.3.4 && udp && dst port 5000**\u2019 \u547d\u4ee4\u884c\u7684\u529f\u80fd\uff0c\u8fc7\u6ee4\u51fa\u76ee\u7684 ip \u4e3a 1.2.3.4 \u4e14\u76ee\u7684\u7aef\u53e3\u4e3a 5000 \u7684 udp \u62a5\u6587\u3002\\n\\n\u4e0a\u8ff0\u6e90\u7801\u6458\u81ea **dpdk** \u5de5\u7a0b\u4e2d\u7684 **examples/bpf/t1.c**\uff0c\u7f16\u8bd1\u547d\u4ee4\u5982\u4e0b\uff1a\\n\\n```c\\nclang -O2 -U __GNUC__ -target bpf -c t1.c\\n```\\n\\n\u7f16\u8bd1\u6210\u529f\u540e\uff0c\u8fd0\u884c **testpmd** \u7a0b\u5e8f\uff0c\u6267\u884c **bpf-load** \u547d\u4ee4\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```c\\ntestpmd> bpf-load rx 0 0 J ./examples/bpf/t1.o\\nrte_bpf_elf_load(fname=\\"./examples/bpf/t1.o\\", sname=\\".text\\") successfully creates 0x7f4f2d9dc000(jit={.func=0x7f4f2d9b0000,.sz=93});\\n0:Success\\n```\\n\\n\u6267\u884c **bpf-unload** \u547d\u4ee4\u5373\u53ef\u5378\u8f7d ebpf \u89c4\u5219\u3002\\n\\n## dpdk ebpf  \u7684\u5b89\u5168\u6027\\ndpdk ebpf \u5b9e\u73b0\u505a\u4e86\u5982\u4e0b\u5b89\u5168\u6027\u4fdd\u969c\uff1a\\n1. \u53c2\u6570\u5408\u6cd5\u6027\u6821\u9a8c\\n2. ebpf \u6307\u4ee4\u5408\u6cd5\u6027\uff08\u6b63\u786e\u7684\u683c\u5f0f\u3001\u6709\u6548\u5b57\u6bb5\u503c\u7b49\uff09\u6821\u9a8c\\n3. \u6821\u9a8c\u662f\u5426\u5b58\u5728\u4e0d\u53ef\u8fbe\u7684\u6307\u4ee4\u6216\u5faa\u73af\\n4. \u52a0\u8f7d\u524d\u6a21\u62df\u6267\u884c\u6240\u6709\u53ef\u80fd\u5b58\u5728\u7684\u5206\u652f\u4e2d\u7684 ebpf \u6307\u4ee4\\n\u6821\u9a8c\u5931\u8d25\u5219\u7ec8\u6b62\u52a0\u8f7d\\n\u5176\u5b83\u7684\u5b89\u5168\u4fdd\u969c\uff1a\\n1. ebpf jit \u7ffb\u8bd1\u5b8c\u6210\u540e\u5c06 rte_bpf \u6240\u5728\u7684\u9875\u8bbe\u7f6e\u4e3a READ ONLY\\n2. ebpf jit \u7ffb\u8bd1\u540e\u751f\u6210\u7684 native code \u5b58\u50a8\u7684\u9875\u8bbe\u7f6e\u4e3a\u8bfb\u4e0e\u53ef\u6267\u884c\\n\\n## dpdk ebpf \u6846\u67b6\u7684\u6027\u80fd\u8d1f\u8f7d\\n\u6d4b\u8bd5\u65b9\u6cd5\uff1a\\n1. \u57fa\u4e8e dpdk-19.11 testpmd \u6d4b\u8bd5\\n2. \u7f16\u5199\u4e00\u4e2a\u76f4\u63a5\u8fd4\u56de 1 \u7684 ebpf \u7a7a\u89c4\u5219\\n3. \u4f7f\u7528 testpmd \u52a0\u8f7d\u7b2c\u4e8c\u6b65\u751f\u6210\u7684 dpdk \u89c4\u5219\\n4. \u6301\u7eed\u6253\u6d41 100% \u5e26\u5bbd\u89c2\u6d4b\u6027\u80fd\u6570\u636e\\n\\n\u5728\u98de\u817e D2000 \u4e0a\u4f7f\u7528\u4e00\u4e2a\u4e24\u4e07\u5146\u7f51\u5361\u6d4b\u8bd5\uff0c\u6d4b\u8bd5\u786e\u5b9a\u5bf9 512\u30011518 \u5b57\u8282\u6027\u80fd\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd\uff0c64 \u5b57\u8282\u4e0b\u964d\u4e86\u4e0d\u5230 3%\u3002\\n\\n## \u53c2\u8003\u94fe\u63a5\\n\\n[https://blog.csdn.net/force_eagle/article/details/117365557](https://blog.csdn.net/force_eagle/article/details/117365557)\\n\\n[https://doc.dpdk.org/guides/testpmd_app_ug/testpmd_funcs.html#bpf-functions](https://doc.dpdk.org/guides/testpmd_app_ug/testpmd_funcs.html#bpf-functions)"},{"id":"/dpdk/dpdk kni \u53e3 ifconfig up down \u7684\u6267\u884c\u6d41\u7a0b","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk kni \u53e3 ifconfig up down \u7684\u6267\u884c\u6d41\u7a0b","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk kni \u53e3 ifconfig up down \u7684\u6267\u884c\u6d41\u7a0b.md","source":"@site/blog/dpdk/dpdk kni \u53e3 ifconfig up down \u7684\u6267\u884c\u6d41\u7a0b.md","title":"dpdk/dpdk kni \u53e3 ifconfig up down \u7684\u6267\u884c\u6d41\u7a0b","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-20T23:48:14.000Z","formattedDate":"2022\u5e746\u670820\u65e5","tags":[],"readingTime":4.465,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/\u8bd5\u73a9 dpdk ebfp \u529f\u80fd","permalink":"/longyu.github.io/blog/dpdk/\u8bd5\u73a9 dpdk ebfp \u529f\u80fd"},"nextItem":{"title":"dpdk/dpdk \u4e2d rte_config.h \u914d\u7f6e\u6587\u4ef6\u751f\u6210\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk \u4e2d rte_config.h \u914d\u7f6e\u6587\u4ef6\u751f\u6210\u7684\u95ee\u9898"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n\u7528\u6237\u6267\u884c ifconfig netcard down\u3001up \u65f6 rte_kni \u6a21\u5757\u4e2d\u7684\u54ea\u90e8\u5206\u8d77\u4f5c\u7528\uff1f\\n\\n## ifconfig up down \u63a5\u53e3\u7684\u6b63\u5e38\u6d41\u7a0b\\nifconfig \u662f\u901a\u8fc7\u8c03\u7528 ioctl \u6765\u5b8c\u6210\u5de5\u4f5c\u7684\u3002\u671f\u95f4\u7ecf\u8fc7\u4e86\u4e00\u7cfb\u5217\u7684\u51fd\u6570\uff0c\u6700\u7ec8\u8c03\u7528\u5230\u7684\u662f\u5728\u7f51\u5361\u9a71\u52a8\u5728 netdev \u4e2d\u6ce8\u518c\u7684 netdev_ops \u865a\u51fd\u6570\u8868\u4e2d\u7684\u51fd\u6570\u6307\u9488\u3002\\n\\nnetdev_ops \u865a\u51fd\u6570\u8868\u4e2d\u4e0e up \u3001down \u76f8\u5173\u7684\u865a\u51fd\u6570\u5982\u4e0b\uff1a\\n\\n\\tndo_open\\n\\tndo_close\\n\\n## dpdk \u4e2d kni \u53e3 ifconfig up down \u7684\u4e0d\u540c\u6d41\u7a0b\\ndpdk kni \u4e2d\u5e76\u4e0d\u4f1a\u8c03\u7528 ndo_open\u3001ndo_start \u865a\u51fd\u6570\u63a5\u53e3\uff0c\u5b83\u4f1a\u53d1\u9001\u4e00\u4e2a\u63a7\u5236\u547d\u4ee4\u5230\u7528\u6237\u6001\u7a0b\u5e8f\u4e2d\uff0c\u7528\u6237\u6001\u7a0b\u5e8f\u63a5\u6536\u5230\u8fd9\u4e2a\u63a7\u5236\u547d\u4ee4\u540e\uff0c\u5224\u65ad\u547d\u4ee4\u7684\u7c7b\u578b\uff0c\u7136\u540e\u8c03\u7528 pmd \u4e2d\u5b9e\u73b0\u7684 start \u4e0e stop \u51fd\u6570\u6765\u5b8c\u6210 up\u3001down\u3002\\n\\n## dpdk \u4e2d kni \u6a21\u5757 ifconfig up down \u7684\u5177\u4f53\u6d41\u7a0b\\nkni \u6a21\u5757\u4e2d\u5173\u8054\u7684\u51fd\u6570\u662f kni_net_open \u4e0e kni_net_close\uff0c\u8fd9\u4e24\u4e2a\u51fd\u6570\u5728 kni_net.c \u4e2d\u88ab\u5b9a\u4e49\u3002\\n\\n\u8fdb\u4e00\u6b65\u7684\u5206\u6790\u4e0a\u9762\u63d0\u5230\u7684\u4e24\u4e2a\u51fd\u6570\u53d1\u73b0\u5b83\u4eec\u4f1a\u8c03\u7528 **kni_net_process_request** \u6765\u901a\u8fc7\u5171\u4eab\u961f\u5217\u7684\u65b9\u5f0f\u5411 dpdk \u7684\u7528\u6237\u6001\u7a0b\u5e8f\u53d1\u9001\u547d\u4ee4\uff0c\u771f\u6b63\u7684 up\u3001down \u5b9e\u9645\u662f\u5728\u7528\u6237\u6001\u7a0b\u5e8f\u4e2d\u5b8c\u6210\u7684\u3002\\n\\n## dpdk \u7528\u6237\u6001\u7a0b\u5e8f\u6ce8\u518c\u7684 rte_kni_ops \u7ed3\u6784\\ndpdk \u7528\u6237\u6001\u7a0b\u5e8f\u9700\u8981\u9884\u5148\u6ce8\u518c\u4e00\u4e2a rte_kni_ops \u7ed3\u6784\uff0c\u76f8\u5173\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n  \\tops.config_network_if = kni_config_network_interface;\\n    ops.set_ethtools_cmd = kni_set_ethtool;\\n    .........\\n```\\n\u8fd9\u4e2a ops \u4f5c\u4e3a rte_kni_alloc \u51fd\u6570\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u4f20\u5165\u5230 dpdk \u4e2d\u3002\\n\\n\u8fd9\u91cc\u9700\u8981\u5173\u6ce8\u7684\u662f **kni_config_network_interface** \u8fd9\u4e2a\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u4e2d\u4f1a\u5b8c\u6210\u7f51\u7edc\u8bbe\u5907\u7684 up \u4e0e down\u3002\\n\\ndpdk-19.11 examples \u4e2d\u7684 kni \u4ee3\u7801\u4e2d\u5c31\u662f kni_config_network_interface \u7684\u6807\u51c6\u5b9e\u73b0\u3002\\n\\n\u5176\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n/* Callback for request of configuring network interface up/down */\\nstatic int\\nkni_config_network_interface(uint16_t port_id, uint8_t if_up)\\n{\\n    int ret = 0; \\n\\n    if (!rte_eth_dev_is_valid_port(port_id)) {\\n        RTE_LOG(ERR, APP, \\"Invalid port id %d\\\\n\\", port_id);\\n        return -EINVAL;\\n    }    \\n\\n    RTE_LOG(INFO, APP, \\"Configure network interface of %d %s\\\\n\\",\\n                    port_id, if_up ? \\"up\\" : \\"down\\");\\n\\n    rte_atomic32_inc(&kni_pause);\\n\\n    if (if_up != 0) { /* Configure network interface up */\\n        rte_eth_dev_stop(port_id);\\n        ret = rte_eth_dev_start(port_id);\\n    } else /* Configure network interface down */\\n        rte_eth_dev_stop(port_id);\\n\\n    rte_atomic32_dec(&kni_pause);\\n\\n    if (ret < 0) \\n        RTE_LOG(ERR, APP, \\"Failed to start port %d\\\\n\\", port_id);\\n\\n    return ret; \\n}\\n```\\n\u53ef\u4ee5\u770b\u5230\u5b83\u5b9e\u9645\u662f\u8c03\u7528 **rte_eth_dev_stop\u3001rte_eth_dev_start** \u6765\u5b8c\u6210\u63a5\u53e3\u7684 up\u3001down\u3002\\n## rte_kni_handle_request\\n\u4e0a\u6587\u4e2d\u6211\u63d0\u5230 kni \u4f1a\u901a\u8fc7\u5171\u4eab\u961f\u5217\u53d1\u9001\u4e00\u4e2a\u63a7\u5236\u6d88\u606f\u5230\u7528\u6237\u6001\uff0c\u5728 dpdk \u7528\u6237\u6001\u7a0b\u5e8f\u4e2d\u9700\u8981\u8f6e\u8be2\u83b7\u53d6 kni \u5171\u4eab\u961f\u5217\u4e2d\u7684\u6d88\u606f\uff0c\u8fd9\u4e00\u822c\u662f\u5728\u6536\u53d1\u5305\u95f4\u9699\u6216\u8005\u5355\u72ec\u521b\u5efa\u7684\u4e00\u4e2a\u7ba1\u7406\u7ebf\u7a0b\u4e2d\u6267\u884c\u7684\u3002\\n\\n\u5176\u6838\u5fc3\u903b\u8f91\u662f\u8c03\u7528 **rte_kni_handle_request** \u51fd\u6570\u8fdb\u884c\u5904\u7406\u3002dpdk-19.11 \u4e2d\u8be5\u51fd\u6570\u7684\u5b9e\u73b0\u90e8\u5206\u5185\u5bb9\u622a\u53d6\u5982\u4e0b\uff1a\\n\\n```c\\nint\\nrte_kni_handle_request(struct rte_kni *kni)\\n{\\n    unsigned int ret;\\n    struct rte_kni_request *req = NULL;\\n\\n    if (kni == NULL)\\n        return -1; \\n\\n    /* Get request mbuf */\\n    ret = kni_fifo_get(kni->req_q, (void **)&req, 1); \\n    if (ret != 1)\\n        return 0; /* It is OK of can not getting the request mbuf */\\n\\n    if (req != kni->sync_addr) {\\n        RTE_LOG(ERR, KNI, \\"Wrong req pointer %p\\\\n\\", req);\\n        return -1; \\n    }   \\n\\n    /* Analyze the request and call the relevant actions for it */\\n    switch (req->req_id) {\\n    case RTE_KNI_REQ_CHANGE_MTU: /* Change MTU */\\n        if (kni->ops.change_mtu)\\n            req->result = kni->ops.change_mtu(kni->ops.port_id,\\n                            req->new_mtu);\\n        break;\\n    case RTE_KNI_REQ_CFG_NETWORK_IF: /* Set network interface up/down */\\n        if (kni->ops.config_network_if)\\n            req->result = kni->ops.config_network_if(kni->ops.port_id,\\n                                 req->if_up);\\n        break;\\n```\\n\u4e0a\u8ff0\u4ee3\u7801\u4e2d **kni_fifo_get** \u8d1f\u8d23\u4ece\u5171\u4eab\u961f\u5217\u4e2d\u83b7\u53d6\u6d88\u606f\uff0c\u83b7\u53d6\u6210\u529f\u540e\u6821\u9a8c\u6d88\u606f\u662f\u5426\u5408\u6cd5\uff0c\u5408\u6cd5\u7684\u6d88\u606f\u5219\u6839\u636e req_id \u8fdb\u884c\u5206\u53d1\uff0c```RTE_KNI_REQ_CFG_NETWORK_IF```\u7c7b\u578b\u7684\u6d88\u606f\u4f1a\u8c03\u7528 kni \u521d\u59cb\u5316\u4e2d\u6ce8\u518c\u7684 ops \u4e2d\u7684 config_network_if \u63a5\u53e3\u6765\u5904\u7406\u3002\\n\\n## \u603b\u7ed3\\n\u5bf9 dpdk kni \u53e3\u6267\u884c ifconfig up down \u64cd\u4f5c\u4f1a\u6d89\u53ca\u5185\u6838\u4e0e\u7528\u6237\u6001\u7684\u901a\u4fe1\uff0ckni \u5171\u4eab\u961f\u5217\u5b9e\u73b0\u4e86\u5185\u6838\u4e0e\u7528\u6237\u6001\u7684\u4e00\u79cd\u9ad8\u6548\u7684\u901a\u4fe1\u65b9\u5f0f\u3002\u53ef\u4ee5\u770b\u5230\u5bf9 dpdk kni \u53e3\u6267\u884c up\u3001down \u5176\u6d41\u7a0b\u4e0e\u666e\u901a\u7684\u7f51\u5361\u9a71\u52a8\u5904\u7406\u65b9\u5f0f\u4e0d\u540c\uff0c\u5b9e\u9645\u662f\u8c03\u7528\u7528\u6237\u6001\u7684 pmd \u9a71\u52a8\u6765\u5b8c\u6210\u7684\u3002"},{"id":"/dpdk/dpdk \u4e2d rte_config.h \u914d\u7f6e\u6587\u4ef6\u751f\u6210\u7684\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u4e2d rte_config.h \u914d\u7f6e\u6587\u4ef6\u751f\u6210\u7684\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u4e2d rte_config.h \u914d\u7f6e\u6587\u4ef6\u751f\u6210\u7684\u95ee\u9898.md","source":"@site/blog/dpdk/dpdk \u4e2d rte_config.h \u914d\u7f6e\u6587\u4ef6\u751f\u6210\u7684\u95ee\u9898.md","title":"dpdk/dpdk \u4e2d rte_config.h \u914d\u7f6e\u6587\u4ef6\u751f\u6210\u7684\u95ee\u9898","description":"\u4e3a\u4ec0\u4e48\u8981\u751f\u6210 rte_config.h \u5934\u6587\u4ef6","date":"2022-06-20T23:48:14.000Z","formattedDate":"2022\u5e746\u670820\u65e5","tags":[],"readingTime":7.54,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk kni \u53e3 ifconfig up down \u7684\u6267\u884c\u6d41\u7a0b","permalink":"/longyu.github.io/blog/dpdk/dpdk kni \u53e3 ifconfig up down \u7684\u6267\u884c\u6d41\u7a0b"},"nextItem":{"title":"dpdk/dpdk \u4e2d rte_eth_link_get_wait\u3001nowait \u51fd\u6570\u7814\u7a76","permalink":"/longyu.github.io/blog/dpdk/dpdk \u4e2d rte_eth_link_get_wait\u3001nowait \u51fd\u6570\u7814\u7a76"}},"content":"## \u4e3a\u4ec0\u4e48\u8981\u751f\u6210 rte_config.h \u5934\u6587\u4ef6\\ndpdk \u6709\u5355\u72ec\u7684\u4e00\u5957 config \u914d\u7f6e\u6587\u4ef6\uff0c\u5728 RTE_TARGET \u53d8\u91cf\u6307\u5b9a\u7684\u76ee\u6807\u76ee\u5f55\u4e0b\u9700\u8981\u751f\u6210\u4e00\u4e2a .config \u6587\u4ef6\uff0c\u8fd9\u4e2a .config \u6587\u4ef6\u7528\u6765\u914d\u7f6e dpdk \u4e2d\u4e0d\u540c\u7ec4\u4ef6\u7684\u529f\u80fd\u3002\\n\\ndpdk \u5927\u90e8\u5206\u4ee3\u7801\u90fd\u662f\u7528 C \u8bed\u8a00\u7f16\u5199\u7684\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u4f7f\u7528 .config \u6587\u4ef6\u3002\u5728 dpdk \u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u4f1a\u6839\u636e RTE_TARGET \u53d8\u91cf\u6307\u5b9a\u7684\u76ee\u6807\u76ee\u5f55\u4e2d\u7684 .config \u6587\u4ef6\u751f\u6210 rte_config.h \u6587\u4ef6\uff0cdpdk \u5185\u90e8\u5b9e\u9645\u662f\u4f7f\u7528 rte_config.h \u6587\u4ef6\u5de5\u4f5c\u7684\u3002\\n\\n## dpdk \u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u751f\u6210 RTE_TARGET \u76ee\u5f55\u4e2d\u7684 include \u76ee\u5f55\\ndpdk \u7f16\u8bd1\u65f6\u9996\u5148\u4f1a\u5728 include \u76ee\u5f55\u4e2d\u751f\u6210\u9700\u8981\u4f7f\u7528\u7684\u5934\u6587\u4ef6\uff0c\u4e00\u4e2a\u6807\u51c6\u7684\u76ee\u5f55\u5185\u5bb9\u5982\u4e0b\uff1a\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/20200805105306287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70)\u4ece\u4e0a\u56fe\u4e2d\u53ef\u4ee5\u53d1\u73b0 rte_config.h \u6587\u4ef6\u7684\u989c\u8272\u4e0e\u5176\u4ed6\u6587\u4ef6\u3001\u76ee\u5f55\u7684\u989c\u8272\u4e0d\u540c\uff0c\u8fd9\u91cc ls \u7528\u4e0d\u540c\u7684\u989c\u8272\u6807\u6ce8\u4e86\u4e0d\u540c\u7684\u6587\u4ef6\u7c7b\u578b\u3002\\n\\nrte_config.h \u662f\u4e2a**\u666e\u901a\u6587\u4ef6**\uff0c\u5176\u4ed6\u7684\u5934\u6587\u4ef6\u90fd\u662f**\u94fe\u63a5\u6587\u4ef6**\uff0c\u8fd9\u662f rte_config.h \u7684\u7279\u522b\u4e4b\u5904\u3002\\n\\nls -l \u67e5\u770b rte_config.h \u4e0e\u4efb\u610f\u4e00\u4e2a\u5176\u5b83\u7684\u5934\u6587\u4ef6\u4fe1\u606f\uff0c\u8f93\u51fa\u5982\u4e0b\uff1a\\n```\\n[localhost include]$ ls -lh rte_eal.h\\nlrwxrwxrwx 1 xx xx 45 Aug  4 19:15 rte_eal.h -> ../../lib/librte_eal/common/include/rte_eal.h\\n[localhost include]$ ls -lh ./rte_config.h\\n-rw-rw-r-- 1 xx xx 11K Aug  4 15:55 ./rte_config.h\\n```\\n\u53ef\u4ee5\u770b\u5230 rte_eal.h \u662f\u4e00\u4e2a\u94fe\u63a5\u6587\u4ef6\uff0c\u6307\u5411 dpdk \u6e90\u7801\u76ee\u5f55\u4e2d\u7684\u5934\u6587\u4ef6\uff1brte_config.h \u5219\u662f\u4e00\u4e2a\u666e\u901a\u6587\u4ef6\u3002\\n\\n### rte_config.h \u6587\u4ef6\u7684\u751f\u6210\u8fc7\u7a0b\\n\u4e0a\u6587\u4e2d\u5df2\u7ecf\u63d0\u5230\u8fc7 rte_config.h \u6587\u4ef6\u662f\u4f7f\u7528 .config \u6587\u4ef6\u751f\u6210\u7684\uff0c\u8fd9\u91cc\u5206\u6790\u4e0b\u5177\u4f53\u7684\u751f\u6210\u8fc7\u7a0b\u3002\\n\\ndpdk \u6e90\u7801\u76ee\u5f55\u4e0b mk \u5b50\u76ee\u5f55\u4e2d\u7684  rte.sdkconfig.mk Makefile \u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86 rte_config.h \u7684\u751f\u6210\u8fc7\u7a0b\u3002\\n\\n\u76f8\u5173\u7684 Makefile \u811a\u672c\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```Makefile\\n$(RTE_OUTPUT)/include/rte_config.h: $(RTE_OUTPUT)/.config\\n        $(Q)rm -rf $(RTE_OUTPUT)/include $(RTE_OUTPUT)/app \\\\\\n                $(RTE_OUTPUT)/hostapp $(RTE_OUTPUT)/lib \\\\\\n                $(RTE_OUTPUT)/hostlib $(RTE_OUTPUT)/kmod $(RTE_OUTPUT)/build\\n        $(Q)mkdir -p $(RTE_OUTPUT)/include\\n        $(Q)$(RTE_SDK)/scripts/gen-config-h.sh $(RTE_OUTPUT)/.config \\\\\\n                > $(RTE_OUTPUT)/include/rte_config.h\\n```\\n\u4e0a\u9762\u7684\u683c\u5f0f\u662f Makefile \u6587\u4ef6\u7684\u5199\u6cd5\u3002\u53ef\u4ee5\u770b\u5230\u76ee\u6807 rte_config.h \u6587\u4ef6\u4f9d\u8d56 .config \u6587\u4ef6\u6765\u751f\u6210\u3002\\n\u9700\u8981\u66f4\u65b0 rte_config.h \u6587\u4ef6\u65f6\uff0c\u4f1a\u6267\u884c\u5982\u4e0b\u6b65\u9aa4\uff1a\\n\\n1. \u5220\u9664 RTE_TARGET \u76ee\u5f55\u4e2d\u7684 include app lib hostlib kmod \u7b49\u4e2d\u95f4\u751f\u6210\u7684\u76ee\u5f55\\n2. \u91cd\u65b0\u521b\u5efa RTE_TARGET include \u76ee\u5f55\\n3. \u8c03\u7528 gen-config-h.sh \u6587\u4ef6\u751f\u6210 rte_config.h\uff0c\u91cd\u5b9a\u5411\u4f1a\u6e05\u7a7a\u5df2\u7ecf\u5b58\u5728\u7684 rte_config.h \u6587\u4ef6\u5185\u5bb9\\n\\ngen-config-h.sh \u811a\u672c\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n```shell\\n#!/bin/sh\\necho \\"#ifndef __RTE_CONFIG_H\\"\\necho \\"#define __RTE_CONFIG_H\\"\\ngrep CONFIG_ $1 |\\ngrep -v \'^[ \\\\t]*#\' |\\nsed \'s,CONFIG_\\\\(.*\\\\)=y.*$,#undef \\\\1\\\\\\n#define \\\\1 1,\' |\\nsed \'s,CONFIG_\\\\(.*\\\\)=n.*$,#undef \\\\1,\' |\\nsed \'s,CONFIG_\\\\(.*\\\\)=\\\\(.*\\\\)$,#undef \\\\1\\\\\\n#define \\\\1 \\\\2,\' |\\nsed \'s,\\\\# CONFIG_\\\\(.*\\\\) is not set$,#undef \\\\1,\'\\necho \\"#endif /* __RTE_CONFIG_H */\\"\\n```\\n\u4e0a\u8ff0\u811a\u672c\u4e2d\u7684 $1 \u5c31\u662f .config \u6587\u4ef6\u7684\u8def\u5f84\uff0c\u8fd9\u4e2a\u811a\u672c\u7528\u6765\u751f\u6210 rte_config.h \u6587\u4ef6\u3002\\n\\n### \u4ec0\u4e48\u65f6\u5019\u9700\u8981\u751f\u6210 rte_config.h \u6587\u4ef6\uff1f\\n\u6309\u7167 Makefile \u7684\u89c4\u5219\uff0c\u76ee\u6807\u6587\u4ef6\u5e76\u4e0d\u662f\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u4f1a\u66f4\u65b0\u3002\u53ea\u6709\u5728\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u4e0b rte_config.h \u6587\u4ef6\u4f1a\u66f4\u65b0\uff1a\\n\\n1. \u76ee\u6807\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\\n2. \u76ee\u6807\u6587\u4ef6\u5b58\u5728\u4e14\u65f6\u95f4\u6233\u843d\u540e\u4e8e\u4f9d\u8d56\u6587\u4ef6\u65f6\\n\\n\u5f53 rte_config.h \u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\uff0cdpdk \u5728\u7f16\u8bd1\u65f6\u9700\u8981\u9996\u5148\u6839\u636e rte_config.h \u6587\u4ef6\u751f\u6210\uff0c\u8fd9\u6837\u7684\u903b\u8f91\u6ca1\u6709\u95ee\u9898\u3002\\n\\n\u5f53 rte_config.h \u6587\u4ef6\u5b58\u5728\u65f6\uff0cdpdk \u5728\u7f16\u8bd1\u65f6\u9700\u8981\u68c0\u67e5\u65f6\u95f4\u6233\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u91cd\u65b0\u751f\u6210\uff0c\u8fd9\u91cc\u5c31\u4f1a\u5224\u65ad .config \u6587\u4ef6\u4e0e rte_config.h \u6587\u4ef6\u7684\u65f6\u95f4\u6233\uff0c\u53ea\u6709\u5f53 rte_config.h \u65f6\u95f4\u6233\u6bd4 .config \u6587\u4ef6\u65e9\u65f6\uff08\u843d\u540e\u4e8e\u4f9d\u8d56\u6587\u4ef6\u65f6\uff09\u624d\u4f1a\u91cd\u65b0\u751f\u6210\u3002\\n\\n\u8fd9\u91cc\u5c31\u6709\u4e00\u4e2a\u6f5c\u5728\u7684\u95ee\u9898\u3002\\n\\n### svn \u5e93\u4e2d RTE_TARGET \u76ee\u6807\u76ee\u5f55\u4e2d include \u76ee\u5f55\u5b58\u5728 rte_config.h \u7684\u60c5\u51b5\\n\u4e0a\u9762\u6211\u5df2\u7ecf\u8bf4\u660e\u4e86 rte_config.h \u6587\u4ef6\u66f4\u65b0\u7684\u65f6\u673a\uff0c\u5728\u6211\u4eec\u7ef4\u62a4\u7684 dpdk \u7248\u672c\u4e2d RTE_TARGET \u76ee\u6807\u76ee\u5f55\u4e2d include \u5b58\u5728 rte_config\uff0c\u56e0\u6b64\u53ea\u6709\u5f53 rte_config.h \u65f6\u95f4\u6233\u6bd4 .config \u6587\u4ef6\u65e9\u7684\u65f6\u5019\uff0crte_config.h \u6587\u4ef6\u624d\u4f1a\u91cd\u65b0\u751f\u6210\uff0c\u5426\u5219\u5b83\u4f1a\u4f7f\u7528 svn \u5e93\u4e2d\u5b58\u5728\u7684\u7248\u672c\u3002\\n\\n\u6211\u91cd\u65b0\u62c9\u53d6\u4e00\u4e2a dpdk \u7248\u672c\uff0c\u7136\u540e\u67e5\u770b .config \u6587\u4ef6\u4e0e rte_config.h \u6587\u4ef6\u7684\u65f6\u95f4\u6233\uff0c\u8f93\u51fa\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```\\nls -l --full-time .config ./include/rte_config.h\\n-rw-rw-r-- 1 xx xx 15969 2020-08-05 11:37:11.780409454 +0800 .config\\n-rw-rw-r-- 1 xx xx 10695 2020-08-05 11:37:11.781409454 +0800 ./include/rte_config.h\\n```\\n\u53ef\u4ee5\u770b\u5230 rte_config.h \u7684\u65f6\u95f4\u6233\u8981\u6bd4 .config \u665a\uff0c\u6240\u4ee5\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b rte_config.h \u6587\u4ef6\u4e0d\u4f1a\u66f4\u65b0\u3002\\n\\n\u76ee\u6807\u76ee\u5f55\u4e2d\u6267\u884c make V=1 \u6253\u5370\u8be6\u7ec6\u4fe1\u606f\uff0c\u6709\u5982\u4e0b\u8f93\u51fa\\n```\\n[localhost x86_64-native-linuxapp-gcc]$ make V=1\\nmake -f /tmp/dpdk-16.04/mk/rte.sdkconfig.mk checkconfig\\nmake -f /tmp/dpdk-16.04/mk/rte.sdkconfig.mk \\\\\\n        headerconfig NODOTCONF=1\\nmake -s depdirs\\nmake -f /tmp/dpdk-16.04/mk/rte.sdkbuild.mk all\\n== Build lib\\nmake S=lib -f /tmp/dpdk-16.04/lib/Makefile -C /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/build/lib all\\n== Build lib/librte_compat\\n  SYMLINK-FILE include/rte_compat.h\\nln -nsf `/tmp/dpdk-16.04/scripts/relpath.sh /tmp/dpdk-16.04/lib/librte_compat/rte_compat.h /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include` /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include\\n```\\n\u4e0a\u8ff0\u8f93\u51fa\u4e2d\u6ca1\u6709\u6267\u884c\u751f\u6210 rte_config.h \u7684\u64cd\u4f5c\u3002\\n\\n\u8fd9\u65f6\u6211\u4eec\u4fee\u6539 .config \u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u4f8b\u5982\u4fee\u6539 MAX_ETHPORTS \u4e3a 128\uff0c\u76f8\u5173\u4fee\u6539\u5982\u4e0b\uff1a\\n\\n```\\nIndex: .config\\n===================================================================\\n--- .config     (revision 19876)\\n+++ .config     (working copy)\\n@@ -129,7 +129,7 @@\\n # Compile generic ethernet library\\n CONFIG_RTE_LIBRTE_ETHER=y\\n CONFIG_RTE_LIBRTE_ETHDEV_DEBUG=n\\n-CONFIG_RTE_MAX_ETHPORTS=64\\n+CONFIG_RTE_MAX_ETHPORTS=128\\n CONFIG_RTE_MAX_QUEUES_PER_PORT=1024\\n CONFIG_RTE_LIBRTE_IEEE1588=n\\n CONFIG_RTE_ETHDEV_QUEUE_STAT_CNTRS=16\\n ```\\n \u4fee\u6539\u5b8c\u6210\u540e\uff0c\u91cd\u65b0\u6267\u884c make V=1 \u6709\u5982\u4e0b\u8f93\u51fa\uff1a\\n```\\nmake -f /tmp/dpdk-16.04/mk/rte.sdkconfig.mk checkconfig\\nmake -f /tmp/dpdk-16.04/mk/rte.sdkconfig.mk \\\\\\n        headerconfig NODOTCONF=1\\nrm -rf /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/app \\\\\\n        /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/hostapp /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/lib \\\\\\n        /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/hostlib /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/kmod /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/build\\nmkdir -p /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include\\n/tmp/dpdk-16.04/scripts/gen-config-h.sh /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/.config \\\\\\n        > /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include/rte_config.h\\n```\\n\u53ef\u4ee5\u770b\u5230\u8fd9\u6b21 rte_config.h \u6587\u4ef6\u786e\u5b9e\u66f4\u65b0\u4e86\u3002\\n\\n## \u9700\u8981\u63d0\u4ea4 rte_config.h \u6587\u4ef6\u7684\u4fee\u6539\u5417\uff1f\\n\u4e0a\u9762\u7684\u64cd\u4f5c\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff0c\u5728\u8fd9\u4e2a\u57fa\u7840\u4e0a\u8fdb\u884c release \u4e5f\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\\n\\n**\u4f46\u662f\u6211\u4eec\u5728\u63d0\u4ea4\u5bf9 .config \u6587\u4ef6\u7684\u4fee\u6539\u65f6\uff0c\u5f88\u5c11\u6709\u4eba\u4f1a\u540c\u6b65\u4fee\u6539 svn \u4e2d\u7684 rte_config.h \u6587\u4ef6\uff0c\u8fd9\u6837\u5c31\u5b58\u5728\u4e86\u4e00\u4e2a\u9690\u60a3\u3002**\\n\\n\u5f53\u5176\u4ed6\u4eba**\u91cd\u65b0\u62c9\u53d6 dpdk svn \u7f16\u8bd1\u65f6**\uff0c\u7531\u4e8e svn \u4e2d**\u5b58\u5728 rte_config.h \u4e14 rte_config.h \u6587\u4ef6\u7684\u65f6\u95f4\u6233\u6bd4 .config \u6587\u4ef6\u665a**\uff0c\u8fd9\u6b21\u7f16\u8bd1\u5c06**\u4e0d\u4f1a\u91cd\u65b0\u6210 rte_config.h \u6587\u4ef6**\uff0c\u8fd9\u6837**\u4e00\u76f4\u4f7f\u7528\u7684\u5c31\u662f svn \u5e93\u4e2d\u5b58\u5728\u7684 rte_config.h \u6587\u4ef6**\uff0c\u8fd9\u5c31\u53ef\u80fd**\u9020\u6210\u95ee\u9898**\u3002\\n\\n## \u6700\u7ec8\u7684\u89e3\u51b3\u65b9\u6848\\n\u540c\u6b65\u4fee\u6539 svn \u5e93\u4e2d\u7684 rte_config.h \u6587\u4ef6\u80fd\u591f\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u4e0d\u662f\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\\n\\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u5728 svn \u7684\u6e90\u7801\u8def\u5f84\u4e2d\u7ba1\u7406\u8fd9\u4e9b\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u4f1a**\u81ea\u52a8\u751f\u6210\u7684\u6587\u4ef6**\uff0c\u8fd9\u6837\u4e00\u65b9\u9762\u53ef\u80fd**\u5e72\u6270\u5230\u6b63\u5e38\u7684\u7f16\u8bd1\u8fc7\u7a0b**\uff0c\u53e6\u4e00\u65b9\u9762\u4e5f\u53ef\u80fd\u5728\u6211\u4eec\u63d0\u4ea4\u4fee\u6539\u65f6\u51fa\u73b0\u9057\u6f0f\u4ece\u800c\u57cb\u4e0b\u4e00\u4e2a\u9690\u60a3\u3002\\n\\n\u6545\u800c\u9488\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0c\u9009\u62e9\u76f4\u63a5\u5220\u9664 dpdk svn \u5e93\u4e2d\u7684 include \u76ee\u5f55\u5373\u53ef\uff0c\u8fd9\u6837\u6bcf\u6b21 rte_config.h \u6587\u4ef6\u90fd\u80fd\u6839\u636e .config \u6587\u4ef6\u6765\u66f4\u65b0\uff0c\u4e0d\u4f1a\u4ea7\u751f .config \u6587\u4ef6\u4e0d\u751f\u6548\u7684\u95ee\u9898\u3002"},{"id":"/dpdk/dpdk \u4e2d rte_eth_link_get_wait\u3001nowait \u51fd\u6570\u7814\u7a76","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u4e2d rte_eth_link_get_wait\u3001nowait \u51fd\u6570\u7814\u7a76","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u4e2d rte_eth_link_get_wait\u3001nowait \u51fd\u6570\u7814\u7a76.md","source":"@site/blog/dpdk/dpdk \u4e2d rte_eth_link_get_wait\u3001nowait \u51fd\u6570\u7814\u7a76.md","title":"dpdk/dpdk \u4e2d rte_eth_link_get_wait\u3001nowait \u51fd\u6570\u7814\u7a76","description":"\u5bf9 rteethlinkgetwait\\\\nowait \u51fd\u6570\u7684\u7814\u7a76","date":"2022-06-20T23:48:14.000Z","formattedDate":"2022\u5e746\u670820\u65e5","tags":[],"readingTime":4.11,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u4e2d rte_config.h \u914d\u7f6e\u6587\u4ef6\u751f\u6210\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk \u4e2d rte_config.h \u914d\u7f6e\u6587\u4ef6\u751f\u6210\u7684\u95ee\u9898"},"nextItem":{"title":"uio \u8bbe\u5907\u6587\u4ef6\u521b\u5efa\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk \u5e38\u89c1\u95ee\u9898\uff1auio \u8bbe\u5907\u6587\u4ef6\u521b\u5efa\u4ee5\u53ca iommu \u5bfc\u81f4 x710 \u7f51\u5361\u521d\u59cb\u5316\u5931\u8d25\u95ee\u9898"}},"content":"## \u5bf9 rte_eth_link_get_wait\\\\nowait \u51fd\u6570\u7684\u7814\u7a76\\n\\n\u4e0e rte_eth_link_get_nowait \u51fd\u6570\u529f\u80fd\u7c7b\u4f3c\u7684\u51fd\u6570\u662f rte_eth_link_get \u51fd\u6570\u3002 \u8fd9\u4e24\u4e2a\u51fd\u6570\u7684\u4e3b\u8981\u903b\u8f91\u5982\u4e0b\uff1a\\n\\n```c\\n{\\n        struct rte_eth_dev *dev;\\n\\n        RTE_ETH_VALID_PORTID_OR_RET(port_id);\\n        dev = &rte_eth_devices[port_id];\\n\\n        if (dev->data->dev_conf.intr_conf.lsc != 0)\\n                rte_eth_dev_atomic_read_link_status(dev, eth_link);\\n        else {\\n                RTE_FUNC_PTR_OR_RET(*dev->dev_ops->link_update);\\n                (*dev->dev_ops->link_update)(dev, 1); /* 1 => wait\uff0c0 => no wait */\\n                *eth_link = dev->data->dev_link;\\n        }\\n}\\n```\\n\\n## \u4f7f\u80fd lsc \u4e2d\u65ad\u7684\u60c5\u51b5 \\n\u5982\u679c\u4f7f\u80fd\u4e86 lsc\u2014\u2014link status change \u4e2d\u65ad\uff0c\u5219\u76f4\u63a5\u539f\u5b50\u8bfb\u53d6 dev \u4e2d\u7684 data->dev_link \u6210\u5458\uff0c\u6839\u636e\u8bfb\u53d6\u5230\u7684\u7ed3\u679c\u6765\u5224\u65ad\u94fe\u63a5\u72b6\u6001\u662f\u5426\u6539\u53d8\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u6ce8\u518c\u4e00\u4e2a lsc \u4e2d\u65ad\u7684\u56de\u8c03\u51fd\u6570\uff0c\u53ef\u4ee5\u53c2\u8003 examples/link_status_interrupt\u3002\\n\\n\u5728 link_status_interrupt \u7684 demo \u4e2d\uff0c\u6ce8\u518c lsc \u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u7684\u8bed\u53e5\u5982\u4e0b\uff1a\\n\\n```c\\nrte_eth_dev_callback_register(portid,\\n                        RTE_ETH_EVENT_INTR_LSC, lsi_event_callback, NULL);\\n```\\n\u5728 lsi_event_callback \u51fd\u6570\u7684\u6838\u5fc3\u662f\u8c03\u7528 rte_eth_link_get_nowait \u6765\u83b7\u53d6\u94fe\u8def \u72b6\u6001\u3002\\n\\n## \u672a\u4f7f\u80fd lsc \u4e2d\u65ad\u7684\u60c5\u51b5\\n\u5982\u679c\u6ca1\u6709\u4f7f\u7528 lsc \u4e2d\u65ad\uff0c\u5219\u8c03\u7528 pmd \u9a71\u52a8\u4e2d\u5b9e\u73b0\u7684 dev_ops->link_update \u51fd\u6570\u6765\u5b8c\u6210\u3002 wait \u4e0e nowait \u7684\u533a\u522b\u5c31\u662f\u5728 link_update \u51fd\u6570\u4e2d\u4f53\u73b0\u7684\u3002\\n\\n**\u4e00\u822c\u6765\u8bf4 wait \u65b9\u5f0f\u503e\u5411\u4e8e\u68c0\u6d4b\u5230\u63a5\u53e3 up \u72b6\u6001**\uff0c\u5728\u8bbe\u5b9a\u7684\u65f6\u95f4\u5185\uff089s) \u5185\u4e0d\u65ad\u7684\u8f6e\u8be2\u63a5\u53e3\u72b6\u6001\uff0c\u5f53**\u83b7\u53d6\u5230\u4e00\u6b21 up \u5c31\u7acb\u523b\u8fd4\u56de**\uff0c\u6216\u8005**\u5f53\u65f6\u95f4\u8017\u5c3d\u65f6\u4ecd\u65e7\u4e3a down \u5219\u8fd4\u56de down \u7684\u72b6\u6001**\u3002\\n\\nnowait \u65b9\u5f0f\u5219\u4e0d\u5b58\u5728\u8fd9\u79cd\u503e\u5411\uff0c\u5b83\u76f4\u63a5\u8bfb\u53d6\u63a5\u53e3\u7684\u5f53\u524d\u72b6\u6001\u8fd4\u56de\u3002\\n\\n\u8fd9\u91cc link_update \u7684\u8fd4\u56de\u503c\u8868\u793a**\u94fe\u8def\u72b6\u6001\u4e0e\u4e0a\u4e00\u6b21\u7684\u72b6\u6001\u76f8\u6bd4\u662f\u5426\u6709\u53d8\u5316**\uff0c\u6709\u53d8\u5316\u5219\u8fd4\u56de 0\uff0c\u65e0\u53d8\u5316\u5219\u8fd4\u56de -1\u3002\\n\\n## ixgbe \u9a71\u52a8\u4e2d link_update \u51fd\u6570\u7684\u5b9e\u73b0\\nixgbe pmd \u9a71\u52a8\u4e2d link_update \u51fd\u6570\u7684\u6e90\u7801\u5728 ixgbe_ethdev.c \u6587\u4ef6\u4e2d\u5b9e\u73b0\uff0c\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n\\n```c\\nstatic int\\nixgbe_dev_link_update(struct rte_eth_dev *dev, int wait_to_complete)\\n{\\n        struct ixgbe_hw *hw = IXGBE_DEV_PRIVATE_TO_HW(dev->data->dev_private);\\n        struct rte_eth_link link, old;\\n        ixgbe_link_speed link_speed = IXGBE_LINK_SPEED_UNKNOWN;\\n        int link_up;\\n        int diag;\\n\\n        link.link_status = ETH_LINK_DOWN;\\n        link.link_speed = 0;\\n        link.link_duplex = ETH_LINK_HALF_DUPLEX;\\n        memset(&old, 0, sizeof(old));\\n        rte_ixgbe_dev_atomic_read_link_status(dev, &old);\\n\\n        hw->mac.get_link_status = true;\\n\\n        /* check if it needs to wait to complete, if lsc interrupt is enabled */\\n        if (wait_to_complete == 0 || dev->data->dev_conf.intr_conf.lsc != 0)\\n                diag = ixgbe_check_link(hw, &link_speed, &link_up, 0);\\n        else\\n                diag = ixgbe_check_link(hw, &link_speed, &link_up, 1);\\n\\n        if (diag != 0) {\\n                link.link_speed = ETH_SPEED_NUM_100M;\\n                link.link_duplex = ETH_LINK_FULL_DUPLEX;\\n                rte_ixgbe_dev_atomic_write_link_status(dev, &link);\\n                if (link.link_status == old.link_status)\\n                        return -1;\\n                return 0;\\n        }\\n\\n        if (link_up == 0) {\\n                rte_ixgbe_dev_atomic_write_link_status(dev, &link);\\n                if (link.link_status == old.link_status)\\n                        return -1;\\n                return 0;\\n        }\\n        link.link_status = ETH_LINK_UP;\\n        link.link_duplex = ETH_LINK_FULL_DUPLEX;\\n\\n        switch (link_speed) {\\n        default:\\n        case IXGBE_LINK_SPEED_UNKNOWN:\\n                link.link_duplex = ETH_LINK_FULL_DUPLEX;\\n                link.link_speed = ETH_SPEED_NUM_100M;\\n                break;\\n\\n        case IXGBE_LINK_SPEED_100_FULL:\\n                link.link_speed = ETH_SPEED_NUM_100M;\\n                break;\\n\\n        case IXGBE_LINK_SPEED_1GB_FULL:\\n                link.link_speed = ETH_SPEED_NUM_1G;\\n                break;\\n\\n        case IXGBE_LINK_SPEED_10GB_FULL:\\n                link.link_speed = ETH_SPEED_NUM_10G;\\n                break;\\n        }\\n        rte_ixgbe_dev_atomic_write_link_status(dev, &link);\\n\\n        if (link.link_status == old.link_status)\\n                return -1;\\n\\n        return 0;\\n}\\n```\\nixgbe_check_link \u51fd\u6570\u4e2d\u4f1a\u8bfb\u53d6\u786c\u4ef6\u5bc4\u5b58\u5668\u6765\u83b7\u53d6\u94fe\u8def\u72b6\u6001\u5185\u5bb9\u3002\u8fd9\u4e4b\u540e\u94fe\u8def\u7684\u5f53\u524d\u72b6\u6001\u4f1a\u88ab\u66f4\u65b0\u5230 dev \u4e2d\u7684 data->dev_link \u6210\u5458\u4e2d\uff0cupdate_link \u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\uff0crte_eth_link_get_nowait\u3001rte_eth_link_get \u51fd\u6570\u4f1a\u5c06 **dev \u4e2d\u66f4\u65b0\u540e \u7684 data->dev_link \u6210\u5458\u7684\u503c\u5199\u5165\u5230\u4f20\u5165\u7684 eth_link \u53c2\u6570\u4e2d**\uff0c\u4e0a\u5c42\u901a\u8fc7\u8be5\u53c2\u6570\u5c31\u80fd\u83b7\u53d6\u5230\u5f53\u524d\u7684\u94fe\u8def\u72b6\u6001\u3002\\n\\n## dpdk \u83b7\u53d6\u5230\u7684\u94fe\u8def\u72b6\u6001\u5230\u5e95\u662f\u4ec0\u4e48\u7ec4\u4ef6\u7684\u72b6\u6001\uff1f\\ndpdk \u4e2d\u83b7\u53d6\u5230\u7684\u94fe\u8def\u72b6\u6001\u5b9e\u9645\u4e0a\u662f phy \u7684\u72b6\u6001\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u8fd9\u4e2a\u72b6\u6001\u4f1a\u4ea7\u751f\u7684\u9707\u8361\u73b0\u8c61\uff0c\u8fd9\u5176\u5b9e\u4e5f\u662f phy \u72b6\u6001\u7684\u6296\u52a8\u9020\u6210\u7684\u7ed3\u679c\uff0c\u9605\u8bfb\u7f51\u5361\u624b\u518c\u80fd\u591f\u627e\u5230 MAC \u5bc4\u5b58\u5668\u4e2d\u4e5f\u5b58\u5728 LINK status \u5bc4\u5b58\u5668\uff0c\u662f\u5426\u53ef\u4ee5\u8003\u8651\u83b7\u53d6 MAC \u4e2d\u4e0e\u94fe\u8def\u72b6\u6001\u76f8\u5173\u7684\u5bc4\u5b58\u5668\u6765\u4f5c\u4e3a\u7f51\u5361\u94fe\u8def\u72b6\u6001\u5462\uff1f\u8fd9\u79cd\u65b9\u5f0f\u662f\u5426\u80fd\u591f\u884c\u5f97\u901a\u5462\uff1f\u8fd9\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u601d\u8003\u4e0e\u5c1d\u8bd5\u4e86\uff01"},{"id":"/dpdk/dpdk \u5e38\u89c1\u95ee\u9898\uff1auio \u8bbe\u5907\u6587\u4ef6\u521b\u5efa\u4ee5\u53ca iommu \u5bfc\u81f4 x710 \u7f51\u5361\u521d\u59cb\u5316\u5931\u8d25\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u5e38\u89c1\u95ee\u9898\uff1auio \u8bbe\u5907\u6587\u4ef6\u521b\u5efa\u4ee5\u53ca iommu \u5bfc\u81f4 x710 \u7f51\u5361\u521d\u59cb\u5316\u5931\u8d25\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u5e38\u89c1\u95ee\u9898\uff1auio \u8bbe\u5907\u6587\u4ef6\u521b\u5efa\u4ee5\u53ca iommu \u5bfc\u81f4 x710 \u7f51\u5361\u521d\u59cb\u5316\u5931\u8d25\u95ee\u9898.md","source":"@site/blog/dpdk/dpdk \u5e38\u89c1\u95ee\u9898\uff1auio \u8bbe\u5907\u6587\u4ef6\u521b\u5efa\u4ee5\u53ca iommu \u5bfc\u81f4 x710 \u7f51\u5361\u521d\u59cb\u5316\u5931\u8d25\u95ee\u9898.md","title":"uio \u8bbe\u5907\u6587\u4ef6\u521b\u5efa\u7684\u95ee\u9898","description":"\u4f7f\u7528 dpdk \u7a0b\u5e8f\u8fdb\u884c\u6536\u53d1\u5305\u9700\u8981\u4f9d\u8d56 uio \u8bbe\u5907\u6587\u4ef6\uff0c\u8fd9\u4e2a\u8bbe\u5907\u6587\u4ef6\u5728\u4e00\u4e9b\u7cfb\u7edf\u4e2d\u5e76\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efa\uff0c\u6211\u4eec\u9700\u8981\u5728\u542f\u52a8\u6d41\u7a0b\u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684\u521b\u5efa\u6d41\u7a0b\u3002\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u4f1a\u5728\u7ed1\u5b9a\u9a71\u52a8\u524d\u6765\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u3002","date":"2022-06-20T23:48:14.000Z","formattedDate":"2022\u5e746\u670820\u65e5","tags":[],"readingTime":1.48,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u4e2d rte_eth_link_get_wait\u3001nowait \u51fd\u6570\u7814\u7a76","permalink":"/longyu.github.io/blog/dpdk/dpdk \u4e2d rte_eth_link_get_wait\u3001nowait \u51fd\u6570\u7814\u7a76"},"nextItem":{"title":"dpdk/dpdk \u7a0b\u5e8f\u521b\u5efa kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u5931\u8d25\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u521b\u5efa kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u5931\u8d25\u7684\u95ee\u9898"}},"content":"\u4f7f\u7528 dpdk \u7a0b\u5e8f\u8fdb\u884c\u6536\u53d1\u5305\u9700\u8981\u4f9d\u8d56 uio \u8bbe\u5907\u6587\u4ef6\uff0c\u8fd9\u4e2a\u8bbe\u5907\u6587\u4ef6\u5728\u4e00\u4e9b\u7cfb\u7edf\u4e2d\u5e76\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efa\uff0c\u6211\u4eec\u9700\u8981\u5728\u542f\u52a8\u6d41\u7a0b\u4e2d\u6dfb\u52a0\u76f8\u5e94\u7684\u521b\u5efa\u6d41\u7a0b\u3002\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u4f1a\u5728\u7ed1\u5b9a\u9a71\u52a8\u524d\u6765\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\u3002\\n\\n\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u811a\u672c\u6765\u5b8c\u6210\uff1a\\n\\n```bash\\n#!/bin/bash\\n\\nuiomajor_id=$(awk \'/ uio$/ {print $1}\' /proc/devices)\\n\\nfor id in $(seq 0 63);\\ndo\\n        mknod /dev/uio\\"$id\\" c $uiomajor_id $id\\ndone\\n```\\n\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\uff0cuio \u8bbe\u5907\u6587\u4ef6\u7684 major \u53f7\u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\u56e0\u6b64\u6211\u4eec\u6700\u597d\u6bcf\u6b21\u90fd\u4ece /proc/devices \u6587\u4ef6\u4e2d\u83b7\u53d6\u6700\u65b0\u7684\uff0c\u907f\u514d\u9020\u6210\u95ee\u9898\u3002\\n\\n\u540c\u65f6\u6ce8\u610f\u8fd9\u91cc\u6211\u521b\u5efa\u4e86 64 \u4e2a uio \u8bbe\u5907\u6587\u4ef6\uff0c\u8fd9\u610f\u5473\u7740\u7cfb\u7edf\u4e2d\u6700\u591a\u4f7f\u7528 64 \u4e2a\u7f51\u7edc\u63a5\u53e3\u3002\\n## iommu \u5bfc\u81f4 x710 \u7f51\u5361\u521d\u59cb\u5316\u5931\u8d25\u95ee\u9898\\n\u7f51\u4e0a\u641c\u7d22\u4e86\u4e0b\uff0c\u8fd9\u4e2a\u95ee\u9898\u4e0e iommu \u76f8\u5173\uff0c\u6309\u7167\u8fd9\u4e2a\u601d\u8def\uff0c\u8fdb\u884c\u4e86\u5982\u4e0b\u5c1d\u8bd5\uff1a\\n\\n   1. bios \u4e2d\u5173\u95ed VT-d \u540e\u8fdb\u884c\u6d4b\u8bd5\u95ee\u9898\u4ecd\u65e7\u5b58\u5728\\n   2. \u4fee\u6539 grub.cfg \u811a\u672c\uff0c\u8bbe\u5b9a linux \u542f\u52a8\u53c2\u6570 intel_iommu=off \\n\\n\u6dfb\u52a0 **intel_iommu=off** \u53c2\u6570\u540e x710 \u7f51\u5361\u80fd\u591f\u6b63\u5e38\u4f7f\u7528\uff0c\u8fd9\u4e2a iommu \u5bfc\u81f4\u95ee\u9898\u7684\u60c5\u51b5\u5728 dpdk known issues \u4e2d\u5e94\u8be5\u662f\u6709\u8bf4\u660e\u7684\u3002"},{"id":"/dpdk/dpdk \u7a0b\u5e8f\u521b\u5efa kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u5931\u8d25\u7684\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u521b\u5efa kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u5931\u8d25\u7684\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u521b\u5efa kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u5931\u8d25\u7684\u95ee\u9898.md","source":"@site/blog/dpdk/dpdk \u7a0b\u5e8f\u521b\u5efa kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u5931\u8d25\u7684\u95ee\u9898.md","title":"dpdk/dpdk \u7a0b\u5e8f\u521b\u5efa kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u5931\u8d25\u7684\u95ee\u9898","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-20T23:48:14.000Z","formattedDate":"2022\u5e746\u670820\u65e5","tags":[],"readingTime":4.495,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"uio \u8bbe\u5907\u6587\u4ef6\u521b\u5efa\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk \u5e38\u89c1\u95ee\u9898\uff1auio \u8bbe\u5907\u6587\u4ef6\u521b\u5efa\u4ee5\u53ca iommu \u5bfc\u81f4 x710 \u7f51\u5361\u521d\u59cb\u5316\u5931\u8d25\u95ee\u9898"},"nextItem":{"title":"dpdk/dpdk \u95ee\u9898\u6392\u67e5\u7684\u7b2c\u4e00\u5173\uff1a\u57fa\u7840\u73af\u5883\u7684\u6392\u67e5","permalink":"/longyu.github.io/blog/dpdk/dpdk \u95ee\u9898\u6392\u67e5\u7684\u7b2c\u4e00\u5173\uff1a\u57fa\u7840\u73af\u5883\u7684\u6392\u67e5"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n\u4eca\u5929\u63a5\u5230\u4e86\u540c\u4e8b\u7684\u4e00\u4e2a\u53cd\u9988\uff0c\u8bf4\u66f4\u65b0\u4e86 dpdk \u540e kni \u53e3\u65e0\u6cd5\u6b63\u5e38\u521b\u5efa\u3002\u6000\u7591\u53ef\u80fd\u662f rte_kni.ko \u6a21\u5757\u5b58\u5728\u95ee\u9898\u5bfc\u81f4\u521b\u5efa\u5931\u8d25\u3002\\n\\n## \u6392\u67e5\u8fc7\u7a0b\\n\u8fd0\u884c\u4ea7\u54c1\u7684 dpdk \u7a0b\u5e8f\u540e\u53d1\u73b0\u786e\u5b9e**\u6ca1\u6709\u521b\u5efa** kni \u53e3\uff0c\u5e76\u4e14 dpdk \u7a0b\u5e8f\u5728\u4e0d\u65ad\u7684**\u91cd\u542f**\u3002\\n\\n\u4f7f\u7528 kni \u547d\u4ee4\u4e5f\u80fd\u591f\u590d\u73b0\u95ee\u9898\uff0c\u5728\u8fd9\u79cd\u57fa\u7840\u4e0a\uff0c\u9700\u8981\u6392\u67e5\u95ee\u9898\u51fa\u5728**\u5185\u6838\u8fd8\u662f\u7528\u6237\u6001\u7a0b\u5e8f**\u4e2d\u3002\u8fd9\u65f6\u6211\u60f3\u5230\u5728 kni \u53e3\u521b\u5efa\u8fc7\u7a0b\u4e2d\u5185\u6838\u4f1a\u6709\u4fe1\u606f\u6253\u5370\uff0c\u67e5\u770b dmesg \u4fe1\u606f\uff0c\u53d1\u73b0 ioctl \u7684\u8fc7\u7a0b\u6ca1\u6709\u4efb\u4f55\u76f8\u5173\u7684\u6253\u5370\u3002\\n\\n## \u662f\u5426\u6253\u5370\u7ea7\u522b\u7684\u95ee\u9898\uff1f\\n\u6ca1\u6709\u6253\u5370\u53ef\u80fd\u662f printk \u6253\u5370\u7ea7\u522b\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 /proc/sys/kernel/printk \u6587\u4ef6\u6765\u89e3\u51b3\u3002manual \u4e2d\u76f8\u5173\u5185\u5bb9\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n```\\n   /proc/sys/kernel/printk\\n       /proc/sys/kernel/printk  is  a writable file containing four integer values that influence kernel printk() behavior when printing or logging error messages.  The\\n       four values are:\\n\\n       console_loglevel\\n              Only messages with a log level lower than this value will be printed to the console.  The default value for this field  is  DEFAULT_CONSOLE_LOGLEVEL  (7),\\n              but  it  is set to 4 if the kernel command line contains the word \\"quiet\\", 10 if the kernel command line contains the word \\"debug\\", and to 15 in case of a\\n              kernel fault (the 10 and 15 are just silly, and equivalent to 8).  The value of console_loglevel can be set (to a value in the range 1\u20138)  by  a  syslog()\\n              call with a type of 8.\\n\\n       default_message_loglevel\\n              This  value  will be used as the log level for printk() messages that do not have an explicit level.  Up to and including Linux 2.6.38, the hard-coded de\u2010\\n              fault value for this field was 4 (KERN_WARNING); since Linux 2.6.39, the default value is a defined by the kernel configuration option CONFIG_DEFAULT_MES\u2010\\n              SAGE_LOGLEVEL, which defaults to 4.\\n\\n       minimum_console_loglevel\\n              The value in this field is the minimum value to which console_loglevel can be set.\\n\\n       default_console_loglevel\\n              This is the default value for console_loglevel.\\n```\\n\u91cd\u8981\u7684\u4e1c\u897f\u5728\u4e8e console_loglevel \u8fd9\u4e2a\u5b57\u6bb5\uff0c\u53ea\u6709\u5f53\u6d88\u606f\u7684\u65e5\u5fd7\u7ea7\u522b\u4f4e\u4e8e\u8fd9\u4e2a\u503c\u624d\u4f1a\u6253\u5370\uff0c\u6211\u5c06\u8fd9\u4e2a\u503c\u8c03\u9ad8\u5230 7 \u540e\u91cd\u65b0\u6267\u884c\u7a0b\u5e8f\u53d1\u73b0\u8fd8\u662f\u6ca1\u6709\u6253\u5370\uff0c\u4fee\u6539\u4e86 kni \u4e2d\u521b\u5efa\u865a\u62df\u7f51\u7edc\u63a5\u53e3\u7684\u4ee3\u7801\uff0c\u91cd\u65b0\u6d4b\u8bd5\u53d1\u73b0\u4e5f\u6ca1\u6709\u6253\u5370\uff0c\u786e\u5b9a\u662f\u6ca1\u6709\u8c03\u7528\u5230\u3002\\n\\n## \u5185\u6838\u4e0e\u7528\u6237\u6001\u95ee\u9898\u754c\u5b9a\\n\\n\u6839\u636e\u4e0a\u9762\u7684\u7ed3\u679c\uff0c\u6211\u6ca1\u6709\u754c\u5b9a\u51fa\u95ee\u9898\u5230\u5e95\u51fa\u5728\u5185\u6838\u4e2d\u8fd8\u662f\u7528\u6237\u6001\u7a0b\u5e8f\u4e2d\uff0c\u6211\u5bf9 kni \u53e3\u521b\u5efa\u7684\u8fc7\u7a0b\u6bd4\u8f83\u6e05\u695a\uff0c\u77e5\u9053\u8fd9\u4e2a\u662f\u7528\u6237\u6001\u7a0b\u5e8f\u4e2d\u8c03\u7528 ioctl \u53d1 IOCTL_CREATE \u5b50\u547d\u4ee4\u5230\u5185\u6838\u4e2d\uff0c\u8c03\u7528 kni_ioctl_create \u51fd\u6570\u6765\u5b8c\u6210\u7684\u3002\\n\\n\u90a3\u4e48\u6211\u8981\u754c\u5b9a\u95ee\u9898\u51fa\u5728\u54ea\u91cc\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u4f7f\u7528 strace \u8ddf\u8e2a\u7cfb\u7edf\u8c03\u7528\u5c31\u53ef\u4ee5\u4e86\u3002\u7528 strace \u8ddf\u8e2a\uff0c\u786e\u8ba4\u7a0b\u5e8f\u6ca1\u6709\u8c03\u7528\u5230 ioctl \u6765\u521b\u5efa kni \u53e3\uff0c\u786e\u5b9a\u95ee\u9898\u51fa\u5728\u7528\u6237\u6001\u3002\\n\\n## \u7528\u6237\u6001\u7a0b\u5e8f\u4e2d\u521b\u5efa kni \u53e3\u7684\u6d41\u7a0b\\n\u7528\u6237\u6001\u7a0b\u5e8f\u4e2d\u521b\u5efa kni \u63a5\u53e3\u7684\u6b65\u9aa4\u4e3b\u8981\u6709\u5982\u4e0b\u4e24\u6b65\uff1a\\n\\n1. rte_kni_init \u521d\u59cb\u5316\u76f8\u5173\u6570\u636e\u7ed3\u6784\\n2. rte_kni_alloc \u521b\u5efa kni \u865a\u62df\u63a5\u53e3\\n\\ndpdk-16.04 \u4e2d rte_kni_alloc \u4e2d\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```bash\\n\\tsnprintf(mz_name, sizeof(mz_name), RTE_MEMPOOL_OBJ_NAME,\\n\\t\\tpktmbuf_pool->name);\\n\\tmz = rte_memzone_lookup(mz_name);\\n\\tKNI_MEM_CHECK(mz == NULL);\\n\\tdev_info.mbuf_va = mz->addr;\\n\\tdev_info.mbuf_phys = mz->phys_addr;\\n\\tctx->pktmbuf_pool = pktmbuf_pool;\\n\\tctx->group_id = conf->group_id;\\n\\tctx->slot_id = slot->id;\\n\\tctx->mbuf_size = conf->mbuf_size;\\n\\n\\tret = ioctl(kni_fd, RTE_KNI_IOCTL_CREATE, &dev_info);\\n```\\n\u6000\u7591\u662f\u5728\u8fd9\u4e2a KNI_MEM_CHECK \u8fd9\u51fa\u4e86\u95ee\u9898\uff0c\u8fdb\u4e00\u6b65\u6392\u67e5\u786e\u8ba4\u4e86\u95ee\u9898\u786e\u5b9e\u662f mz \u4e3a NULL \u5bfc\u81f4\u6ca1\u6709\u8c03\u7528 ioctl \u5c31\u63d0\u524d\u7ec8\u6b62\u4e86\u3002\u81f3\u4e8e\u4e3a\u5565 rte_memzone_lookup \u6ca1\u6709\u627e\u5230 mz_name\uff0c\u539f\u56e0\u662f\u6ca1\u6709\u4eba\u521b\u5efa\u5b83\u3002\\n\\n## \u603b\u7ed3\\n\u5728\u5206\u6790\u4e00\u4e2a\u95ee\u9898\u65f6\u9996\u5148\u8981\u5bf9\u95ee\u9898\u8fdb\u884c\u754c\u5b9a\uff0c\u754c\u5b9a\u95ee\u9898\u662f\u4e3a\u4e86\u7f29\u5c0f\u95ee\u9898\u7684\u8303\u56f4\u3002\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\u5185\u6838\u4e0e\u7528\u6237\u6001\u5c31\u662f\u9700\u8981\u754c\u5b9a\u7684\u70b9\uff0c\u6ca1\u6709\u8fd9\u4e2a\u754c\u5b9a\u95ee\u9898\u5c31\u4e0d\u597d\u641e\u3002\u5176\u5b9e\u4e5f\u662f\u5728\u8fd9\u91cc\u8fdb\u884c\u4e86\u4e00\u4e2a 2 \u5206\u6cd5\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u4e00\u76f4\u6267\u884c\u4e0b\u53bb\uff0c\u76f4\u5230\u89e3\u51b3\u4e86\u95ee\u9898\u3002"},{"id":"/dpdk/dpdk \u95ee\u9898\u6392\u67e5\u7684\u7b2c\u4e00\u5173\uff1a\u57fa\u7840\u73af\u5883\u7684\u6392\u67e5","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk \u95ee\u9898\u6392\u67e5\u7684\u7b2c\u4e00\u5173\uff1a\u57fa\u7840\u73af\u5883\u7684\u6392\u67e5","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk \u95ee\u9898\u6392\u67e5\u7684\u7b2c\u4e00\u5173\uff1a\u57fa\u7840\u73af\u5883\u7684\u6392\u67e5.md","source":"@site/blog/dpdk/dpdk \u95ee\u9898\u6392\u67e5\u7684\u7b2c\u4e00\u5173\uff1a\u57fa\u7840\u73af\u5883\u7684\u6392\u67e5.md","title":"dpdk/dpdk \u95ee\u9898\u6392\u67e5\u7684\u7b2c\u4e00\u5173\uff1a\u57fa\u7840\u73af\u5883\u7684\u6392\u67e5","description":"uio \u9a71\u52a8\u662f\u5426\u52a0\u8f7d","date":"2022-06-20T23:48:14.000Z","formattedDate":"2022\u5e746\u670820\u65e5","tags":[],"readingTime":11.15,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u7a0b\u5e8f\u521b\u5efa kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u5931\u8d25\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk \u7a0b\u5e8f\u521b\u5efa kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u5931\u8d25\u7684\u95ee\u9898"},"nextItem":{"title":"dpdk/\u7f16\u8bd1dpdk-19.10\u65f6\u9047\u5230\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/\u7f16\u8bd1dpdk-19.10\u65f6\u9047\u5230\u7684\u95ee\u9898"}},"content":"## uio \u9a71\u52a8\u662f\u5426\u52a0\u8f7d\\nigb_uio \u9a71\u52a8\u4f9d\u8d56 uio \u9a71\u52a8\uff0c**\u5b9e\u9645\u4e0a igb_uio \u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u4f7f\u7528 uio \u9a71\u52a8\u6620\u5c04\u786c\u4ef6\u8bbe\u5907\u5230\u7528\u6237\u6001\u7684\u5b9e\u4f8b**\u3002\\n\\n\u4e00\u822c\u6765\u8bf4 uio \u9a71\u52a8\u5927\u591a\u90fd\u662f\u76f4\u63a5\u7f16\u8bd1\u5230\u5185\u6838\u4e2d\u7684\uff0c\u4e0d\u8fc7\u4e5f\u5b58\u5728\u5c06\u8fd9\u4e2a\u9a71\u52a8\u7f16\u8bd1\u4e3a\u6a21\u5757\u7684\u65b9\u5f0f\u3002\\n\\n\u68c0\u67e5 uio \u9a71\u52a8\u662f\u5426\u52a0\u8f7d\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b **/sys/class/uio \u6587\u4ef6\u662f\u5426\u5b58\u5728**\u6765\u5224\u65ad\u3002\\n\\n## igb_uio \u4e0e rte_kni \u9a71\u52a8\u662f\u5426\u52a0\u8f7d\\n\u7f16\u8bd1 dpdk \u65f6\u4e00\u822c\u4f1a\u751f\u6210\u4e24\u4e2a\u5185\u6838\u6a21\u5757\uff1a\\n\\n1. igb_uio.ko\\n2. rte_kni.ko\\n\\nigb_uio \u9a71\u52a8\u8d1f\u8d23**\u5c06\u786c\u4ef6\u8bbe\u5907\u6620\u5c04\u5230\u7528\u6237\u6001**\uff0crte_kni \u8d1f\u8d23**\u521b\u5efa\u865a\u62df\u7f51\u7edc\u8bbe\u5907\u7528\u4e8e ifconfig\u3001ethtool \u547d\u4ee4\u63a7\u5236\u3001\u83b7\u53d6\u63a5\u53e3\u72b6\u6001**\u3002\\n\\n\u4e00\u822c\u6765\u8bf4 igb_uio.ko \u662f**\u5fc5\u987b\u52a0\u8f7d**\u7684\uff0c\u800c rte_kni.ko \u662f\u5426\u52a0\u8f7d\u5219\u770b\u4e1a\u52a1\u9700\u6c42\uff0c\u5728\u4e00\u4e9b\u4e0d\u9700\u8981\u521b\u5efa kni \u865a\u62df\u7f51\u7edc\u63a5\u53e3\u7684\u7a0b\u5e8f\u4e2d\uff0c\u4e0d\u9700\u8981\u52a0\u8f7d rte_kni.ko\u3002\\n\\n\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b /**sys/module/igb_uio** \u4e0e **/sys/module/rte_kn**i \u76ee\u5f55\u662f\u5426\u5b58\u5728\u6765\u5224\u65ad\u8fd9\u4e24\u4e2a\u9a71\u52a8\u662f\u5426\u6b63\u5e38\u52a0\u8f7d\uff0c\u6216\u8005\u6267\u884c **lsmod | grep igb_uio**\u3001l**smod | grep rte_kni** \u6765\u5224\u65ad\u3002\\n\\n## \u7f51\u5361\u662f\u5426\u7ed1\u5b9a\u9a71\u52a8\\ndpdk \u63a7\u5236\u7684\u786c\u4ef6\u662f\u7f51\u5361\u63a5\u53e3\uff0c\u7f51\u5361\u5728 linux \u5185\u6838\u4e2d\u4e00\u822c\u90fd\u6709\u81ea\u5df1\u7684\u5185\u6838\u9a71\u52a8\uff0cdpdk \u8981\u6b63\u5e38\u4f7f\u7528\u7684\u8bdd\uff0c\u9700\u8981**\u5c06\u8fd9\u4e9b\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u5230 igb_uio \u9a71\u52a8\u4e2d**\u4ee5\u5728**\u7528\u6237\u6001\u63a7\u5236\u786c\u4ef6**\u3002\\n\\ndpdk \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a dpdk-devbind.py \u7684\u811a\u672c\u6765\u5b8c\u6210\u63a5\u53e3\u7ed1\u5b9a\u7684\u5de5\u4f5c\uff0c\u5728\u8001\u7248\u672c\u4e2d\u8fd9\u4e2a\u811a\u672c\u7684\u540d\u5b57\u662f dpdk_nic_bind.py\u3002\\n\\n\u6267\u884c -s \u547d\u4ee4\u6765\u67e5\u770b\u9700\u8981\u4f7f\u7528\u7684\u7f51\u5361\u63a5\u53e3\u662f\u5426\u7ed1\u5b9a\u5230\u4e86 igb_uio \u4e2d\uff0c\u6267\u884c\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```bash\\nlongyu@virt-debian10:~/dpdk-test$ dpdk-devbind.py -s \\nNetwork devices using DPDK-compatible driver\\n============================================\\n0000:04:00.0 \'82574L Gigabit Network Connection\' drv=igb_uio unused=\\n0000:08:00.0 \'82574L Gigabit Network Connection\' drv=igb_uio unused=\\n0000:09:00.0 \'82574L Gigabit Network Connection\' drv=igb_uio unused=\\n\\nNetwork devices using kernel driver\\n===================================\\n0000:01:00.0 \'Virtio network device\' if=enp1s0 drv=virtio-pci unused=igb_uio *Active*\\n\\nOther network devices\\n=====================\\n```\\ndrv=igb_uio \u8868\u793a\u63a5\u53e3\u7ed1\u5b9a\u5230\u4e86 igb_uio \u9a71\u52a8\u4e0a\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d 04:00.0\u300108:00.0\u300109:00.0 \u8fd9\u4e09\u4e2a e100e \u7684 82574L \u7f51\u5361\u90fd\u7ed1\u5b9a\u5230\u4e86 igb_uio \u4e2d\u3002\\n\\n## /dev/uioX \u8bbe\u5907\u6587\u4ef6\u662f\u5426\u6b63\u5e38\u751f\u6210\\n\u5728\u4e00\u4e9b\u5185\u6838\u4e2d\uff0c\u5728\u5c06\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u5230 igb_uio \u7684\u65f6\u5019\u4f1a\u81ea\u52a8\u751f\u6210 /dev/uioX \u6587\u4ef6\uff0c\u5728\u53e6\u5916\u4e00\u4e9b\u5185\u6838\u4e2d /dev/uioX \u6587\u4ef6\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\uff0c\u9700\u8981\u624b\u52a8\u521b\u5efa\u3002\\n\\n\u8fd9\u79cd\u9700\u8981\u624b\u52a8\u521b\u5efa\u7684\u60c5\u51b5\u53ef\u80fd\u4f1a\u51fa\u73b0 major \u8bbe\u5907\u53f7\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\uff0c\u8fd9\u5e38\u5e38\u4f1a\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u8fd0\u884c\u5f02\u5e38\u3002\\n\\n\u9996\u5148\u6211\u4eec\u67e5\u770b /dev/uioX \u5b57\u7b26\u8bbe\u5907\u6587\u4ef6\u4e2d major id \u7684\u503c\uff0c\u53ef\u4ee5\u6267\u884c ls -lh \u6765\u67e5\u770b\u3002\u6267\u884c\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```bash\\nlongyu@virt-debian10:~/dpdk-test$ ls -lh /dev/uio*\\ncrw------- 1 root root 244, 0 9\u6708   5 13:46 /dev/uio0\\ncrw------- 1 root root 244, 1 9\u6708   5 13:41 /dev/uio1\\ncrw------- 1 root root 244, 2 9\u6708   5 13:41 /dev/uio2\\nlongyu@virt-debian10:~/dpdk-test$ \\n```\\n\\n\u8fd9\u91cc 244 \u5c31\u662f uio \u8bbe\u5907 major_id \u7684\u503c\uff0c0, 1, 2 \u4e3a minor_id \u7684\u503c\uff0c\u8fd9\u91cc\u7684 major_id \u8981\u4e0e /proc/devices \u6587\u4ef6\u4e2d uio \u8bbe\u5907\u7684 major_id \u5bf9\u5e94\u3002\\n\\n\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u67e5\u770b\u5f53\u524d\u7cfb\u7edf\u4e2d uio \u8bbe\u5907\u6587\u4ef6\u7684 major_id:\\n\\n```bash\\nlongyu@virt-debian10:~/dpdk-test$ grep \' uio$\' /proc/devices \\n244 uio\\n```\\n\u8fd9\u91cc 244 \u8868\u793a major_id \u7684\u503c\uff0cuio \u8868\u793a\u4e00\u7c7b\u8bbe\u5907\u540d\u79f0\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u7684 244 \u4e0e\u4e0a\u9762 /dev/uioX \u4e2d\u7684 major_id \u80fd\u591f\u5bf9\u5e94\u7684\u4e0a\uff0c\u8fd9\u5c31\u662f\u6b63\u5e38\u7684\u3002\\n\\n## /dev/uiox \u80fd\u5426\u6b63\u5e38\u8bbf\u95ee\\ndpdk \u7a0b\u5e8f\u4e2d\u901a\u8fc7 uio \u8bbe\u5907\u6587\u4ef6\u6620\u5c04\u7269\u7406\u786c\u4ef6\u7684\u786c\u4ef6\u8d44\u6e90\uff0c\u540c\u65f6\u76d1\u542c uio \u8bbe\u5907\u6587\u4ef6\u4e8b\u4ef6\u6765\u6355\u83b7\u4e2d\u65ad\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e2d\uff0c/dev/uiox \u6587\u4ef6\u5c3d\u7ba1\u5df2\u7ecf\u521b\u5efa\u4e86\u4f46\u662f\u4e0d\u80fd\u6b63\u5e38\u8bbf\u95ee\uff0c\u8fd9\u4e5f\u4f1a\u9020\u6210\u95ee\u9898\u3002\\n\\n\u53ef\u4ee5 cat /dev/uiox \u6587\u4ef6\u6765\u67e5\u770b\u662f\u5426\u80fd\u591f\u6b63\u5e38\u8bbf\u95ee\u6b64\u6587\u4ef6\u3002\u6267\u884c\u793a\u4f8b\u5982\u4e0b\uff1a\\n```bash\\nroot@virt-debian10:/home/longyu/dpdk-test# cat /dev/uio2\\ncat: /dev/uio2: Invalid argument\\n```\\n\u8fd9\u91cc Invalid argument \u8868\u793a\u6211\u4eec\u53ef\u4ee5\u6b63\u5e38\u6253\u5f00\u6587\u4ef6\uff0c\u4e0d\u8fc7\u56e0\u4e3a /dev/uiox \u6587\u4ef6\u5e76\u4e0d\u50cf\u666e\u901a\u7684\u6587\u4ef6\u90a3\u6837\u80fd\u591f\u76f4\u63a5\u8bfb\u53d6\u5b57\u7b26\uff0c\u4f1a\u62a5 Invalid argument \u7684\u9519\u8bef\u3002\\n\\n\u4e00\u4e2a\u5f02\u5e38\u60c5\u51b5\u5982\u4e0b\u6240\u793a\uff1a\\n\\n```bash\\nroot@virt-debian10:/home/longyu/dpdk-test# cat /dev/uio4\\ncat: /dev/uio4: No such device\\nroot@virt-debian10:/home/longyu/dpdk-test# ls -lh /dev/uio4\\ncrw-r--r-- 1 root root 244, 4 9\u6708   5 13:52 /dev/uio4\\n```\\n\u53ef\u4ee5\u770b\u5230\u5f53\u6211\u4eec cat /dev/uio4 \u7684\u65f6\u5019\u62a5\u4e86 No such device \u7684\u9519\u8bef\uff0c\u800c\u6211\u4eec ls \u67e5\u770b\u53d1\u73b0\u8fd9\u4e2a\u8bbe\u5907\u6587\u4ef6\u786e\u5b9e\u662f\u5b58\u5728\u7684\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u5f02\u5e38\u7684\u72b6\u6001\u3002\u8fd9\u79cd\u72b6\u6001\u591a\u534a\u8fd8\u662f\u67d0\u4e2a\u7f51\u5361\u63a5\u53e3\u6ca1\u6709\u7ed1\u5b9a\u5230 igb_uio \u4e0a\u7684\u7ed3\u679c\u3002\\n \\n## /dev/kni \u6587\u4ef6\u662f\u5426\u521b\u5efa\\n\u5bf9\u4e8e\u8981\u4f7f\u7528 rte_kni \u7a0b\u5e8f\u521b\u5efa\u865a\u62df\u7f51\u7edc\u63a5\u53e3\u7684\u8bbe\u5907\u6765\u8bf4\uff0c/dev/kni \u6587\u4ef6\u9700\u8981\u6b63\u5e38\u521b\u5efa\u3002\\n\\nkni \u4e2d\u6ce8\u518c\u4e86\u4e00\u4e2a misc \u8bbe\u5907\uff0c\u5e76\u4e14\u52a8\u6001\u5206\u914d\u4e86 misc \u8bbe\u5907\u7684 minor id\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u901a\u8fc7\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u83b7\u53d6 misc \u7684 major id \u4e0e kni \u52a8\u6001\u5206\u914d\u7684 minor id\u3002\\n\\n```bash\\nroot@virt-debian10:/home/longyu/dpdk-test# grep \'misc\' /proc/devices \\n 10 misc\\nroot@virt-debian10:/home/longyu/dpdk-test# grep \'kni\' /proc/misc\\n 58 kni\\n```\\n\u53ef\u4ee5\u770b\u5230\u5728\u6211\u7684\u7cfb\u7edf\u4e2d\uff0cmisc \u7684 major id \u4e3a 10\uff0ckni \u52a8\u6001\u5206\u914d\u7684 minor id \u4e3a 58\uff0c\u6709\u4e86\u8fd9\u4e2a\u4fe1\u606f\u6211\u4eec\u67e5\u770b /dev/kni \u6587\u4ef6\u4fe1\u606f\u6765\u5224\u65ad\u662f\u5426\u6b63\u786e\u751f\u6210\u3002\\n\\n```bash\\nroot@virt-debian10:/home/longyu/dpdk-test# ls -lh /dev/kni\\ncrw------- 1 root root 10, 58 9\u6708   5 08:52 /dev/kni\\n```\\n\u53ef\u4ee5\u770b\u5230\uff0c/dev/kni \u8bbe\u5907\u6587\u4ef6\u5b58\u5728\uff0c\u4e14 major id \u4e0e minor id \u6b63\u5e38\u3002\\n\\n## \u5927\u9875\u5185\u5b58\u662f\u5426\u6b63\u5e38\\ndpdk \u7a0b\u5e8f\u7684\u542f\u52a8\u4e00\u822c\u90fd\u4f1a\u4f9d\u8d56\u5927\u9875\u5185\u5b58\uff0c\u4f7f\u7528\u5927\u9875\u5185\u5b58\u80fd\u591f**\u964d\u4f4e\u7f3a\u9875\u5e26\u6765\u7684\u6027\u80fd\u635f\u8017\u8fbe\u5230\u63d0\u9ad8\u6027\u80fd\u7684\u76ee\u7684**\u3002\\n\\ndpdk \u7a0b\u5e8f\u8fd0\u884c\u524d\u9700\u8981\u914d\u7f6e\u597d\u5927\u9875\u5185\u5b58\uff0c\u4e00\u4e9b\u7cfb\u7edf\u5728\u542f\u52a8\u65f6\u6307\u5b9a\u542f\u52a8\u53c2\u6570\u9884\u7559\u6307\u5b9a\u5927\u5c0f\u7684\u5927\u9875\u5185\u5b58\u6570\u76ee\uff0c\u4e00\u4e9b\u7cfb\u7edf\u5728\u542f\u52a8\u8fc7\u7a0b\u4e2d\u5199\u5165 **/sys/kernel/mm/hugepages/hugepages-*/nr_hugepages** \u6765\u521b\u5efa\u5927\u9875\u5185\u5b58\u3002\\n\\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b **/proc/meinfo** \u6765\u67e5\u770b\u7cfb\u7edf\u4e2d\u5927\u9875\u5185\u5b58\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u793a\u4f8b\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n```bash\\nHugePages_Total:     512\\nHugePages_Free:      512\\nHugePages_Rsvd:        0\\nHugePages_Surp:        0\\nHugepagesize:       2048 kB\\nHugetlb:         1048576 kB\\n```\\n\u4e0a\u8ff0\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b\u8868\uff1a\\n\\n| \u540d\u79f0 |\u542b\u4e49  |\\n|--|--|\\n| HugePages_Total | \u5927\u9875\u603b\u6570 |\\n|HugePages_Free|\u7a7a\u95f2\u7684\u5927\u9875\u6570\u76ee|\\n|HugePages_Rsvd|\u4fdd\u7559\u7684\u5927\u9875\u5185\u5b58\u6570\u76ee\uff08\u5df2\u7ecf\u63d0\u4ea4 alloc \u7533\u8bf7\u4f46\u662f\u6ca1\u6709\u771f\u6b63 alloc \u7684\u5927\u9875\u6570\u76ee\uff09|\\n|HugePages_Surp|\u5927\u9875\u5185\u5b58\u6c60\u4e2d\u8d85\u8fc7 /proc/sys/vm/nr_hugepages \u7684\u5927\u9875\u6570\u76ee|\\n|Hugepagesize|\u5927\u9875\u7684\u5355\u4e2a\u9875\u9762\u5927\u5c0f|\\n|Hugetlb|\u5927\u9875\u7684\u603b\u5927\u5c0f|\\n\\n\u6211\u4eec\u9700\u8981\u5173\u6ce8 HugePages_total \u7684\u6570\u76ee\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u4f1a\u6709\u5927\u9875\u5185\u5b58\u6570\u76ee\u8fc7\u5c11\u5bfc\u81f4 dpdk \u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u542f\u52a8\u7684\u95ee\u9898\u3002\\n\\n\u786e\u8ba4\u4e86\u5927\u9875\u5185\u5b58\u7684\u6570\u76ee\u540e\uff0c\u8fd8\u9700\u8981\u68c0\u67e5 hugetlbfs \u6587\u4ef6\u7cfb\u7edf\u662f\u5426\u6b63\u5e38\u6302\u8f7d\u3002\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b /etc/mtab \u6765\u5224\u65ad\u3002\u4e00\u4e2a\u6b63\u5e38\u7684\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n\\n```bash\\nroot@virt-debian10:/home/longyu# grep \'huge\' /etc/mtab\\nnodev /mnt/huge hugetlbfs rw,relatime,pagesize=2M 0 0\\n```\\n\u8fd9\u91cc /mnt/huge \u7684\u76ee\u5f55\u5e76\u4e0d\u56fa\u5b9a\uff0c\u5728\u4e00\u4e9b\u7cfb\u7edf\u4e2d\u5b83\u4e5f\u53ef\u80fd\u662f /dev/huge \u7b49\u76ee\u5f55\u3002\\n\\n## \u7f51\u5361\u63a5\u53e3\u7c7b\u578b\u662f\u5426\u6b63\u786e\\ndpdk \u5b98\u65b9\u7684 demo \u4e2d\u901a\u8fc7\u83b7\u53d6 pci \u7684\u4fe1\u606f\u6765\u5224\u65ad\u7f51\u5361\u7684\u578b\u53f7\u3002\u4ea7\u54c1\u7684\u4e1a\u52a1\u53ef\u80fd\u9700\u8981\u9488\u5bf9\u6bcf\u4e2a\u63a5\u53e3\u5199\u989d\u5916\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u8fd9\u6837\u4e00\u822c\u4f1a\u751f\u6210\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86\u7f51\u5361\u63a5\u53e3\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5176\u4e2d\u4e0e dpdk \u5173\u8054\u6bd4\u8f83\u5927\u7684\u5c31\u662f\u7f51\u5361\u7684\u578b\u53f7\uff0c\u9700\u8981\u786e\u5b9a**\u7f51\u5361\u7684\u63a5\u53e3\u7c7b\u578b\u4e0e\u771f\u5b9e\u7c7b\u578b\u5bf9\u5e94**\u3002\\n\\n## \u4e00\u4e2a\u7b80\u5355\u7684\u68c0\u6d4b\u811a\u672c\\n\u4e0a\u6587\u4e2d\u6211\u63cf\u8ff0\u4e86\u6392\u67e5 dpdk \u7a0b\u5e8f\u8fd0\u884c\u7684\u73af\u5883\u662f\u5426\u6b63\u5e38\u7684\u57fa\u672c\u70b9\uff0c\u8fd9\u4e9b\u57fa\u672c\u70b9\u5c31\u662f**\u68c0\u6d4b\u811a\u672c\u7684\u9700\u6c42**\uff0c\u6211\u4eec\u53ef\u4ee5\u9884\u5148\u9488\u5bf9\u4e0d\u540c\u7684\u70b9\u7f16\u5199\u68c0\u6d4b\u811a\u672c\uff0c\u8981\u5b9a\u4f4d\u95ee\u9898\u65f6\uff0c\u76f4\u63a5\u5237\u811a\u672c\u770b\u7ed3\u679c\u3002\\n\\n\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```bash\\n#!/bin/bash\\n\\nfunction check_failed\\n{\\t\\n    echo -e \\"\\\\033[31m$1\\\\033[0m\\" > /dev/stderr\\n\\n    exit 1\\n}\\n\\nfunction check_passed\\n{\\n    echo -e \\"[$1]\\\\033[32m check passed \\\\033[0m\\"\\n}\\n\\nfunction check_uio_module\\n{\\n    local uio_major_id=$(awk \'/ uio$/{print $1}\' /proc/devices)\\n\\n    if [ -z \\"$uio_major_id\\" ]\\n    then\\n        check_failed \\"uio module not loaded\\"\\n    fi\\n\\n    check_passed \\"uio module loaded\\"\\n\\n    return $uio_major_id\\n}\\n\\nfunction check_specified_module_loaded\\n{\\n\\n    if [ -z \\"$1\\" ]\\n    then\\n        echo \\"Invalid module_name $1\\" > /dev/stderr\\n        return \\n    fi\\n    \\n    if [ -d \\"/sys/module/$1\\" ]\\n    then\\n        check_passed \\"$1 module loaded\\"\\n    else\\n        check_failed \\"$1 module not loaded\\"\\n    fi\\n}\\n\\nfunction check_uiofile\\n{\\n    local uiofile=$(ls /dev/uio* 2>/dev/null)\\n    local uio_major_id=$1\\n\\n    if [ -z \\"$uio_major_id\\" ]\\n    then\\n        echo \\"Invalid parameters $1\\" > /dev/stderr\\n        return 1\\n    fi\\n    \\n    if [ -z \\"$uiofile\\" ]\\n    then\\n        check_failed \\"/dev/uio* file not created\\"\\n    fi\\n\\n    check_passed \\"/dev/uioX file exist\\"\\n\\n    for file in $uiofile\\n    do\\n        local major_id=$(ls -l $file | awk -F \',| \' \'{printf(\\"%s\\",$5)}\')\\n        if [ \\"$major_id\\" -ne \\"$uio_major_id\\" ]\\n        then\\n\\t    check_failed \\"$file major id $major_id invalid, should be $uio_major_id\\"\\n        fi\\n        \\n        check_passed \\"check $file major_id checked passed\\"\\n    done\\n\\n    # TODO check cat /dev/uioX\\n}\\n\\n\\n# 1. check uio module\\ncheck_uio_module\\nuio_device_major_id=$?\\n\\n# 2. check dpdk module\\n\\ncheck_specified_module_loaded igb_uio\\ncheck_specified_module_loaded rte_kni\\n\\n# 3. check /dev/uioX file \\ncheck_uiofile $uio_device_major_id\\n```\\n\u8fd0\u884c\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```bash\\nroot@virt-debian10:/home/longyu/dpdk-test# ./check_dev_uio.sh \\n[uio module loaded] check passed \\n[igb_uio module loaded] check passed \\n[rte_kni module loaded] check passed \\n[/dev/uioX file exist] check passed \\n[check /dev/uio0 major_id checked passed] check passed \\n[check /dev/uio1 major_id checked passed] check passed \\n[check /dev/uio2 major_id checked passed] check passed \\n[check /dev/uio4 major_id checked passed] check passed \\n```\\n## \u603b\u7ed3\\ndpdk \u7a0b\u5e8f\u7684\u6267\u884c\u4f9d\u8d56\u8bf8\u591a\u73af\u8282\uff0c\u5728\u5b9a\u4f4d\u95ee\u9898\u65f6\u6211\u4eec\u9996\u5148\u8981\u6392\u67e5\u8fd9\u4e9b\u57fa\u672c\u73af\u8282\u662f\u5426\u6b63\u786e\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684 **dpdk \u7a0b\u5e8f\u8fd0\u884c\u7684\u57fa\u7840\u73af\u5883\u662f\u5426\u6b63\u5e38**\u3002\\n\\n\u6839\u636e\u6211\u7684\u7ecf\u9a8c dpdk \u7a0b\u5e8f\u8fd0\u884c\u51fa\u73b0\u7684\u5f88\u591a\u95ee\u9898\u90fd**\u96c6\u4e2d**\u5728\u8fd9\u4e2a**\u57fa\u7840\u73af\u5883**\u4e2d\uff0c\u901a\u8fc7\u6392\u67e5\u8fd9\u4e9b\u57fa\u672c\u70b9\uff0c\u6211\u4eec\u80fd\u591f\u89e3\u51b3\u4e00\u90e8\u5206\u95ee\u9898\uff0c\u540c\u65f6\u4e5f\u80fd\u591f\u4e3a\u5b9a\u4f4d\u7591\u96be\u95ee\u9898\u6e05\u9664\u4e00\u5b9a\u7684\u76f2\u533a\u3002\\n\\n\u8fd9\u4e9b\u6392\u67e5\u70b9\u4e0d\u80fd\u8df3\u8fc7\uff0c\u552f\u6709\u5f53\u8fd9\u4e9b\u57fa\u7840\u73af\u5883\u6b63\u5e38\u65f6\u6211\u4eec\u624d\u5e94\u8be5\u505a\u8fdb\u4e00\u6b65\u7684\u6392\u67e5\u3002"},{"id":"/dpdk/\u7f16\u8bd1dpdk-19.10\u65f6\u9047\u5230\u7684\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u7f16\u8bd1dpdk-19.10\u65f6\u9047\u5230\u7684\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u7f16\u8bd1dpdk-19.10\u65f6\u9047\u5230\u7684\u95ee\u9898.md","source":"@site/blog/dpdk/\u7f16\u8bd1dpdk-19.10\u65f6\u9047\u5230\u7684\u95ee\u9898.md","title":"dpdk/\u7f16\u8bd1dpdk-19.10\u65f6\u9047\u5230\u7684\u95ee\u9898","description":"\u672a\u5b89\u88c5 numa \u5e93\u7684\u95ee\u9898","date":"2022-06-20T23:48:14.000Z","formattedDate":"2022\u5e746\u670820\u65e5","tags":[],"readingTime":7.6,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk \u95ee\u9898\u6392\u67e5\u7684\u7b2c\u4e00\u5173\uff1a\u57fa\u7840\u73af\u5883\u7684\u6392\u67e5","permalink":"/longyu.github.io/blog/dpdk/dpdk \u95ee\u9898\u6392\u67e5\u7684\u7b2c\u4e00\u5173\uff1a\u57fa\u7840\u73af\u5883\u7684\u6392\u67e5"},"nextItem":{"title":"dpdk/dpdk-kni\u4e0eethtool\u8bd5\u73a9\u95ee\u9898\u8bb0\u5f55","permalink":"/longyu.github.io/blog/dpdk/dpdk-kni\u4e0eethtool\u8bd5\u73a9\u95ee\u9898\u8bb0\u5f55"}},"content":"## \u672a\u5b89\u88c5 numa \u5e93\u7684\u95ee\u9898\\n```make\\n/home/longyu/dpdk-19.08/lib/librte_eal/linux/eal/eal_memory.c:32:10: fatal error: numa.h: No such file or directory\\n #include <numa.h>\\n```\\n\\n\u5b98\u65b9\u7f51\u9875\u4e2d\u7684\u76f8\u5173\u8bf4\u660e\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n\\n> Library for handling NUMA (Non Uniform Memory Access).\\n>    numactl-devel in Red Hat/Fedora;\\n >   libnuma-dev in Debian/Ubuntu;\\n\\n\u6211\u662f\u5728 Debian \u7cfb\u7edf\u4e2d\u7f16\u8bd1\uff0c\u9700\u8981\u5b89\u88c5 libnuma-dev \u5e93\uff0c\u5b89\u88c5\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```sh\\nlongyu@longyu-pc:~/dpdk-19.08$ sudo apt-get install libnuma-dev\\n```\\n\\n## \u52a0\u8f7d\u7f16\u8bd1\u51fa\u7684\u5185\u6838\u6a21\u5757\\n\u52a0\u8f7d igb_uio \u4e4b\u524d\u9700\u8981\u5148\u52a0\u8f7d uio \u5185\u6838\u6a21\u5757\u3002uio \u6a21\u5757\u4e00\u822c\u90fd\u5df2\u7ecf\u5b89\u88c5\u5230\u4e86\u7cfb\u7edf\u4e2d\u7684 /usr/lib/modules/$(uname -r)/ \u76ee\u5f55\u4e2d\uff0c\u53ea\u662f\u4e00\u822c\u6ca1\u6709\u88ab\u4f7f\u7528\uff0c\u8fd9\u91cc\u53ef\u4ee5\u901a\u8fc7 modprobe uio \u76f4\u63a5\u52a0\u8f7d\u6b64\u5185\u6838\u6a21\u5757\u3002\\n\\n## \u7f16\u8bd1 examples \u76ee\u5f55\u4e0b\u7684 demo\\n1. \u68c0\u67e5 RTE_SDK \u4e0e RTE_TARGET \u73af\u5883\u53d8\u91cf\u662f\u5426\u8bbe\u5b9a\\n\\n\\t```sh\\n\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ echo -e  $RTE_SDK \\"\\\\n\\" $RTE_TARGET\\n\\t/home/longyu/dpdk-19.08 \\n\\t x86_64-native-linuxapp-gcc\\n\\t```\\n\\t**\u6ce8\u610f\u8fd9\u91cc\u7684 RTE_SDK \u4e3a dpdk \u6e90\u7801\u7684\u6839\u76ee\u5f55\uff0cRTE_RARGET \u4e3a\u7f16\u8bd1\u7684\u76ee\u6807\u8bbe\u5907\u5168\u540d\u3002**\\n\\n2. \u7f16\u8bd1 examples \u76ee\u5f55\u4e0b\u7684 helloworld demo\\n\\n\\t\u8fdb\u5165\u5230 helloworld \u5b50\u76ee\u5f55\u4e2d\uff0c\u6267\u884c make \u547d\u4ee4\uff0c\u8f93\u51fa\u62a5\u9519\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n\\t```sh\\n\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ make \\n\\t/bin/sh: 1: pkg-config: not found\\n\\t/home/longyu/dpdk-19.08/mk/internal/rte.extvars.mk:29: *** Cannot find .config in /home/longyu/dpdk-19.08/x86_64-native-linuxapp-gcc.  Stop.\\n\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ echo $RTE_SDK\\n\\t/home/longyu/dpdk-19.08\\n\\t```\\n\\n\\t**\u89e3\u51b3 pkg-config not found \u7684\u95ee\u9898**\\n\\n\\t```sh\\n\\t# \u67e5\u770b\u6587\u4ef6\u662f\u5426\u5b58\u5728\\n\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ sudo updatedb\\n\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ locate \'pkg-config\'\\n\\t/etc/dpkg/dpkg.cfg.d/pkg-config-hook-config\\n\\t/var/cache/apt/archives/pkg-config_0.29-6_amd64.deb\\n\\t/var/lib/dpkg/info/pkg-config.list\\n\\t\\n\\t# \u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u5b89\u88c5\\n\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ sudo apt-get install pkg-config\\n\\t\\n\\t# \u5b58\u5728\u5219\u68c0\u67e5\u73af\u5883\u53d8\u91cf\u914d\u7f6e\\n\\t```\\n\\t**\u89e3\u51b3\u627e\u4e0d\u5230 .config \u6587\u4ef6\u7684\u95ee\u9898**\\n\\t\\n\\t```sh\\n\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ make\\n\\t/home/longyu/dpdk-19.08/mk/internal/rte.extvars.mk:29: *** Cannot find .config in /home/longyu/dpdk-19.08/x86_64-native-linuxapp-gcc.  Stop.\\n\\t```\\n\\n\\t\u5982\u679c\u7f16\u8bd1\u65f6\u6709\u4e0a\u9762\u7684\u9519\u8bef\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u68c0\u67e5\u7f16\u8bd1\u51fa\u7684\u76ee\u6807\u4e0e RTE_TARGET \u53d8\u91cf\u8bbe\u5b9a\u7684\u662f\u5426\u4e00\u81f4\u3002\\n\\t\\n  3. \u7f16\u8bd1\u6210\u529f\u7684\u8f93\u51fa\\n\\n\\t\\t```sh\\n\\t\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ make\\n\\t\\t  CC main.o\\n\\t\\t  LD helloworld\\n\\t\\t  INSTALL-APP helloworld\\n\\t\\t  INSTALL-MAP helloworld.map\\n\\t\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ ls ./build/helloworld\\n\\t\\t./build/helloworld\\n\\t\\t```\\n\\n    4. \u6267\u884c helloworld \u65f6\u7a0b\u5e8f panic \\n\\t\\n\\t\\t\u6211\u5728\u6267\u884c helloworld \u7a0b\u5e8f\u65f6\u9047\u5230\u4e86\u5982\u4e0b\u9519\u8bef\uff1a\\n\\t\\n\\t\\t```sh\\n\\t\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ sudo ./build/helloworld\\n\\t\\tEAL: Detected 2 lcore(s)\\n\\t\\tEAL: Detected 1 NUMA nodes\\n\\t\\tEAL: Multi-process socket /var/run/dpdk/rte/mp_socket\\n\\t\\tEAL: Selected IOVA mode \'PA\'\\n\\t\\tEAL: No free hugepages reported in hugepages-2048kB\\n\\t\\tEAL: No available hugepages reported in hugepages-2048kB\\n\\t\\tEAL: No available hugepages reported in hugepages-1048576kB\\n\\t\\tEAL: FATAL: Cannot get hugepage information.\\n\\t\\tEAL: Cannot get hugepage information.\\n\\t\\tPANIC in main():\\n\\t\\tCannot init EAL\\n\\t\\t5: [./build/helloworld(_start+0x2a) [0x55d9e3802e3a]]\\n\\t\\t4: [/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xeb) [0x7fa75466d09b]]\\n\\t\\t3: [./build/helloworld(+0xa9e0c) [0x55d9e364ee0c]]\\n\\t\\t2: [./build/helloworld(__rte_panic+0xba) [0x55d9e365f480]]\\n\\t\\t1: [./build/helloworld(rte_dump_stack+0x1b) [0x55d9e38dfa7b]]\\n\\t\\tAborted\\n\\t\\t```\\n\\n   \\t\\t\u4ece\u4e0a\u9762\u7684\u8f93\u51fa\u4e2d\u6211\u53d1\u73b0\u662f hugepage \u76f8\u5173\u7684\u95ee\u9898\uff0c\u6d4f\u89c8\u5b98\u65b9\u7f51\u9875\u6587\u6863\uff0c\u6211\u6267\u884c\u4e86\u4e0b\u9762\u7684\u64cd\u4f5c\uff1a\\n\\t\\t\\n\\t\\t```sh\\t\\n\\t\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ sudo su -c \'echo 128 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages\'\\n\\t\\t```\\n\\t\\t\u8fd9\u4e4b\u540e\u6211\u91cd\u65b0\u6267\u884c helloworld \u7a0b\u5e8f\uff0c\u5f97\u5230\u7684\u8f93\u51fa\u5982\u4e0b\uff1a\\n\\t\\t```sh\\n\\t\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ sudo ./build/helloworld\\n\\t\\tEAL: Detected 2 lcore(s)\\n\\t\\tEAL: Detected 1 NUMA nodes\\n\\t\\tEAL: Multi-process socket /var/run/dpdk/rte/mp_socket\\n\\t\\tEAL: Selected IOVA mode \'PA\'\\n\\t\\tEAL: No available hugepages reported in hugepages-1048576kB\\n\\t\\tEAL: Probing VFIO support...\\n\\t\\tEAL: WARNING: cpu flags constant_tsc=yes nonstop_tsc=no -> using unreliable clock cycles !\\n\\t\\tEAL: PCI device 0000:00:03.0 on NUMA socket -1\\n\\t\\tEAL:   Invalid NUMA socket, default to 0\\n\\t\\tEAL:   probe driver: 8086:100e net_e1000_em\\n\\t\\thello from core 1\\n\\t\\thello from core 0\\n\\t\\tlongyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ \\n\\t\\t```\\n\\t\\n\\t \\t\u5c3d\u7ba1\u6267\u884c\u4e86\u4e0a\u9762\u7684\u64cd\u4f5c\u4e4b\u540e\uff0chelloworld \u80fd\u591f\u6b63\u5e38\u6267\u884c\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e0a\u8ff0\u64cd\u4f5c\u80cc\u540e\u6d89\u53ca\u7684\u4e1c\u897f\u6211\u5374\u6ca1\u6709\u8fdb\u4e00\u6b65\u7684\u8ba4\u8bc6\uff0c\u8fd9\u6709\u5f85\u6211\u5bf9 dpdk \u7684\u8fdb\u4e00\u6b65\u7814\u7a76\u3002 \\t\\n\\n## \u7ed1\u5b9a\u7f51\u7edc\u7aef\u53e3\u5230\u5185\u6838\u6a21\u5757\u7684\u95ee\u9898\\n1. lspci not found \u7684\u95ee\u9898\\n\\n\\t\u7ed1\u5b9a\u7f51\u7edc\u7aef\u53e3\u5230\u5185\u6838\u6a21\u5757\u65f6\u6709\u5982\u4e0b\u62a5\u9519\u4fe1\u606f\uff1a\\n\\t\\n\\t```sh\\n\\tlongyu@longyu-pc:~/dpdk-19.08$ sudo ./usertools/dpdk-devbind.py --bind=igb_uio ens33\\n\\t\'lspci\' not found - please install \'pciutils\'\\n\\t```\\n\\t\u6839\u636e\u63d0\u793a\u4fe1\u606f\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff0c\u5b89\u88c5 pciutils\u3002\\n\\t\\n\\t```sh\\n\\tlongyu@longyu-pc:~/dpdk-19.08$ sudo apt-get install pciutils\\n\\t```\\n2. \u63a5\u53e3\u6b63\u5728\u4f7f\u7528\u5bfc\u81f4\u7ed1\u5b9a\u7aef\u53e3\u5931\u8d25\u7684\u95ee\u9898\\n\\n\\t\u89e3\u51b3\u4e86 lspci \u547d\u4ee4\u627e\u4e0d\u5230\u7684\u95ee\u9898\u4e4b\u540e\u6211\u91cd\u65b0\u6267\u884c\u7ed1\u5b9a\u7aef\u53e3\u7684\u547d\u4ee4\uff0c\u6709\u5982\u4e0b\u8f93\u51fa\uff1a\\n\\n\\t```sh\\t\\n\\tlongyu@longyu-pc:~/dpdk-19.08$ sudo ./usertools/dpdk-devbind.py --bind=igb_uio ens3\\n\\tWarning: routing table indicates that interface 0000:00:03.0 is active. Not modifying\\n\\t```\\n\\t\u4ece\u4e0a\u9762\u7684\u8f93\u51fa\u4e2d\uff0c\u6211\u786e\u5b9a\u7ed1\u5b9a\u7aef\u53e3\u5931\u8d25\u4e86\uff0c\u6211\u671b\u6587\u751f\u4e49\u7684\u6293\u4f4f\u4e86 routing table \u8fd9\u4e2a\u540d\u8bcd\uff0c\u89c9\u5f97\u5e94\u8be5\u6e05\u9664\u8def\u7531\u8868\u7684\u5185\u5bb9\uff0c\u5728\u7f51\u4e0a\u641c\u4e86\u4e00\u4e0b\u6ca1\u6709\u53d1\u73b0\u8be5\u5982\u4f55\u53bb\u505a\u3002\u8fd9\u4e4b\u540e\u6211\u60f3\u8d77\u4e86 TCP/IP \u534f\u8bae\u6808\u4e2d\u5bf9\u5173\u95ed\u7f51\u7edc\u8bbe\u5907\u7684\u63cf\u8ff0\uff0c\u8bb0\u5f97\u5728\u5173\u95ed\u7f51\u7edc\u8bbe\u5907\u7684\u65f6\u5019\u4f1a\u6e05\u7a7a\u8def\u7531\u8868\u3002\u57fa\u4e8e\u8fd9\u6837\u7684\u8ba4\u8bc6\uff0c\u6211\u6267\u884c\u4e86\u5982\u4e0b\u547d\u4ee4 down \u6389\u5f85\u4f7f\u7528\u7684\u7f51\u7edc\u8bbe\u5907\uff1a\\n\\n\\t```sh\\n\\tlongyu@longyu-pc:~/dpdk-19.08$ sudo ifconfig ens3 down\\n\\t```\\n\\n\\t \u6267\u884c\u4e86\u8fd9\u4e00\u6b65\u540e\u6211\u53d1\u73b0 ssh \u8fde\u63a5\u5f02\u5e38\u4e86\uff0c\u8fd9\u624d\u8ba9\u6211\u610f\u8bc6\u5230\u6211\u5c31\u662f\u901a\u8fc7\u8fd9\u4e2a\u7f51\u5361\u8bbe\u5907\u8fde\u63a5\u5230\u865a\u62df\u673a\u4e2d\u7684\uff0c\u5173\u95ed\u4e86\u8bbe\u5907\u4e4b\u540e\u7f51\u7edc\u65ad\u5f00\uff0cssh \u5c31\u5931\u6548\u4e86\u3002\\n\\t\\n\\t\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\u5982\u4e0b\uff1a\\n\\t\\n\\t> \u5728\u865a\u62df\u673a\u4e2d\u6dfb\u52a0\u4e24\u5757\u7f51\u5361\uff0c\u4e00\u5757\u7528\u4e8e\u6b63\u5e38\u7684\u8fde\u63a5\uff0c\u4e00\u5757\u7528\u4e8e\u6d4b\u8bd5\u3002\\n\\n## \u6267\u884c testpmd \u6d4b\u8bd5\u7a0b\u5e8f\\n\u6307\u5b9a\u5982\u4e0b\u53c2\u6570\uff0c\u6267\u884c testpmd \u547d\u4ee4\u3002\\n\\n```sh\\nlongyu@longyu-pc:~/dpdk-19.08/x86_64-native-linux-gcc/app$ sudo ./testpmd -l 0-1 -n 1 -- -i --portmask=0x1 --nb-cores=1\\n```\\n\\n\u4ee5\u4e0a\u53c2\u6570\u9700\u8981\u6839\u636e\u6267\u884c\u7684\u73af\u5883\u8fdb\u884c\u4fee\u6539\uff01\\n\\n\u67e5\u770b\u7aef\u53e3\u4fe1\u606f\uff1a\\n\\n```sh\\ntestpmd> show port info 0\\n\\n********************* Infos for port 0  *********************\\nMAC address: 52:54:00:CE:BA:AD\\nDevice name: 0000:00:03.0\\nDriver name: net_e1000_em\\nConnect to socket: 0\\nmemory allocation on the socket: 0\\nLink status: up\\nLink speed: 1000 Mbps\\nLink duplex: full-duplex\\nMTU: 1500\\nPromiscuous mode: enabled\\nAllmulticast mode: disabled\\nMaximum number of MAC addresses: 15\\nMaximum number of MAC addresses of hash filtering: 0\\nVLAN offload: \\n  strip off \\n  filter off \\n  qinq(extend) off \\nNo RSS offload flow type is supported.\\nMinimum size of RX buffer: 256\\nMaximum configurable length of RX packet: 16128\\nCurrent number of RX queues: 1\\nMax possible RX queues: 1\\nMax possible number of RXDs per queue: 4096\\nMin possible number of RXDs per queue: 32\\nRXDs number alignment: 8\\nCurrent number of TX queues: 1\\nMax possible TX queues: 1\\nMax possible number of TXDs per queue: 4096\\nMin possible number of TXDs per queue: 32\\nTXDs number alignment: 8\\nMax segment number per packet: 255\\nMax segment number per MTU/TSO: 255\\n```\\n\\n## \u603b\u7ed3\\n**\u7f16\u8bd1 latest dpdk \u7684\u8fc7\u7a0b\u4e2d\u4f1a\u9047\u5230\u5f88\u591a\u7684\u95ee\u9898\uff0c\u4e00\u4e9b\u95ee\u9898\u662f\u56e0\u4e3a\u7f3a\u5c11\u5fc5\u8981\u7684\u5e93\u4e0e\u5de5\u5177\u6240\u81f4\uff0c\u4e00\u4e9b\u95ee\u9898\u662f\u5bf9\u67d0\u4e9b\u529f\u80fd\u7684\u5de5\u4f5c\u539f\u7406\u4e0d\u6e05\u695a\u6240\u81f4\uff0c\u6700\u7ec8\u8fd9\u4e9b\u95ee\u9898\u5f97\u5230\u4e86\u89e3\u51b3\u3002\u5728\u89e3\u51b3\u95ee\u9898\u7684\u8fc7\u7a0b\u4e2d\u4e5f\u4f53\u73b0\u51fa\u4e86\u6211\u5bf9 linux \u4e2d\u7684\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6\u6709\u4e86\u964c\u751f\u611f\uff0c\u9700\u8981\u53ca\u65f6\u7684\u590d\u4e60\u590d\u4e60\u3002**\\n\\n**\u4e0b\u9762\u662f\u6211\u5bf9 dpdk \u7684\u4e00\u4e9b\u8ba4\u8bc6\uff1a**\\n\\n**dpdk \u4f9d\u8d56 uio \u5185\u6838\u6a21\u5757\u6765\u5c06\u7f51\u7edc\u8bbe\u5907\u6620\u5c04\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u901a\u8fc7\u91cd\u65b0\u7ed1\u5b9a\u7f51\u7edc\u8bbe\u5907\u9a71\u52a8\u5230 pmd \u6765\u6784\u5efa\u4ece\u7528\u6237\u7a7a\u95f4\u64cd\u4f5c\u7f51\u7edc\u8bbe\u5907\u7684\u6865\u6881\u3002\u8fd9\u91cc\u7684 pmd \u5168\u79f0\u4e3a polling mode driver\uff0c\u5b83\u6765\u6e90\u4e8e\u9a71\u52a8\u8bbe\u8ba1\u6a21\u578b\u4e2d\u7684\u8f6e\u8be2\u6a21\u578b\u3002**\\n\\n**dpdk \u4f7f\u7528 pmd \u6765\u62e6\u622a\u7f51\u7edc\u8bbe\u5907\u7684\u786c\u4ef6\u4e2d\u65ad\uff0c\u8fd9\u662f\u8f6e\u8be2\u5f0f\u6570\u636e\u5904\u7406\u7684\u57fa\u7840\uff0c\u4e5f\u662f dpdk \u6240\u8981\u89e3\u51b3\u7684\u4e00\u5927\u96be\u9898\u3002**"},{"id":"/dpdk/dpdk-kni\u4e0eethtool\u8bd5\u73a9\u95ee\u9898\u8bb0\u5f55","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-kni\u4e0eethtool\u8bd5\u73a9\u95ee\u9898\u8bb0\u5f55","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-kni\u4e0eethtool\u8bd5\u73a9\u95ee\u9898\u8bb0\u5f55.md","source":"@site/blog/dpdk/dpdk-kni\u4e0eethtool\u8bd5\u73a9\u95ee\u9898\u8bb0\u5f55.md","title":"dpdk/dpdk-kni\u4e0eethtool\u8bd5\u73a9\u95ee\u9898\u8bb0\u5f55","description":"ethtool  \u80fd\u591f dump \u7f51\u5361\u7684\u5bc4\u5b58\u5668\uff0c\u67e5\u770b\u5176\u5b83\u7f51\u5361\u76f8\u5173\u7684\u4fe1\u606f\u3002\u5728 dpdk \u7a0b\u5e8f\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u5e38\u5e38\u9700\u8981\u4f7f\u7528 ethtool \u83b7\u53d6\u7f51\u5361\u7684\u4e00\u4e9b\u4fe1\u606f\u6765\u5b9a\u4f4d\u95ee\u9898\u3002","date":"2022-06-19T07:40:00.000Z","formattedDate":"2022\u5e746\u670819\u65e5","tags":[],"readingTime":3.79,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/\u7f16\u8bd1dpdk-19.10\u65f6\u9047\u5230\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/\u7f16\u8bd1dpdk-19.10\u65f6\u9047\u5230\u7684\u95ee\u9898"},"nextItem":{"title":"dpdk/dpdk-pdump\u5de5\u5177\u7f16\u8bd1\u8fd0\u884c","permalink":"/longyu.github.io/blog/dpdk/dpdk-pdump\u5de5\u5177\u7f16\u8bd1\u8fd0\u884c"}},"content":"ethtool  \u80fd\u591f dump \u7f51\u5361\u7684\u5bc4\u5b58\u5668\uff0c\u67e5\u770b\u5176\u5b83\u7f51\u5361\u76f8\u5173\u7684\u4fe1\u606f\u3002\u5728 dpdk \u7a0b\u5e8f\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u5e38\u5e38\u9700\u8981\u4f7f\u7528 ethtool \u83b7\u53d6\u7f51\u5361\u7684\u4e00\u4e9b\u4fe1\u606f\u6765\u5b9a\u4f4d\u95ee\u9898\u3002\\n\\n\u6211\u6700\u8fd1\u4e5f\u5c1d\u8bd5\u7528\u4e86\u7528 ethtool\uff0c\u4e2d\u95f4\u5374\u9047\u5230\u4e86\u5f88\u591a\u95ee\u9898\u3002**\u6211\u4f7f\u7528\u7684 dpdk \u7248\u672c\u662f 17.05\u3002**\\n\\n**\u7b2c\u4e00\u7c7b\u662f\u7f16\u8bd1\u76f8\u5173\u7684\u95ee\u9898\uff0c\u7b2c\u4e8c\u7c7b\u662f ethtool \u81ea\u8eab\u652f\u6301\u7f51\u5361\u7684\u95ee\u9898\u3002\u4e0b\u9762\u6211\u5c31\u4ece\u8fd9\u4e24\u65b9\u9762\u7684\u95ee\u9898\u5f00\u59cb\u63cf\u8ff0\u3002**\\n\\n## \u4f7f\u7528 ethtool \u65f6\u7684 .config \u914d\u7f6e\\ndpdk \u7684\u5b98\u65b9\u6587\u6863\u4e2d\u8bf4\u660e\uff0c\u8981\u4f7f\u7528 ethtool \u9700\u8981\u4f7f\u80fd KNI_KMOD_ETHTOOL \u529f\u80fd\u9879\u3002\u8fd9\u901a\u8fc7\u4fee\u6539 .config \u914d\u7f6e\u6587\u4ef6\u6765\u5b8c\u6210\u3002\u4fee\u6539\u5b8c\u6210\u4e4b\u540e\u91cd\u65b0\u7f16\u8bd1\u5373\u53ef\uff0c\u8fd9\u4e2a\u95ee\u9898\u76f8\u5bf9\u7b80\u5355\u3002\\n\\n\u6267\u884c\u4e86 kni \u7a0b\u5e8f\u4e4b\u540e\uff0c\u901a\u8fc7 ifconfig \u53ef\u4ee5\u770b\u5230\u591a\u51fa\u4e86\u4e00\u4e2a\u7f51\u5361\uff0c\u8fd9\u4e2a\u7f51\u5361\u5c31\u662f\u4e4b\u540e\u6211\u4f7f\u7528 ethtool \u6765\u67e5\u770b\u7684\u7f51\u5361\u786c\u4ef6\u3002\\n\\n## hugepage \u5185\u5b58\u4e0d\u8db3\u5bfc\u81f4 eal \u521d\u59cb\u5316\u5931\u8d25\u7684\u95ee\u9898\\n\u6267\u884c ifconfig \u547d\u4ee4\u770b\u5230\u591a\u51fa\u6765\u7684\u7f51\u5361\u4e4b\u540e\uff0c\u6211\u4ee5\u4e3a ethtool \u5c31\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u7ed3\u679c\u5b83\u5728\u542f\u52a8\u7684\u65f6\u5019\u5c31\u62a5\u4e86\u9519\uff0c\u9519\u8bef\u4fe1\u606f\u8868\u660e eal \u521d\u59cb\u5316\u5931\u8d25\u3002\\n\\n\u5177\u4f53\u7684\u62a5\u9519\u4fe1\u606f\u8868\u660e\u6ca1\u6709\u8db3\u591f\u7684 hugepage \u5185\u5b58\u4f7f\u7528\u3002\\n\\n\u6211\u731c\u662f\u56e0\u4e3a kni \u7a0b\u5e8f\u5c06\u6240\u6709\u7684 hugepage \u5185\u5b58\u5168\u90e8\u72ec\u5360\u9020\u6210\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c31\u4fee\u6539\u4e86 /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages \u6587\u4ef6\uff0c\u8fd9\u4e4b\u540e eal \u521d\u59cb\u5316\u8fd9\u4e00\u6b65\u6ca1\u6709\u62a5\u9519\uff0c\u4f46\u662f\u53c8\u51fa\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u9519\u8bef\uff0c\u9519\u8bef\u5185\u5bb9\u5982\u4e0b\uff1a\\n\\n> Cannot create lock on \'/var/run/.rte_config\'. Is another primary process running?\\n\\n\u5728\u7f51\u4e0a\u641c\u7d22\u4e86\u4e0b\u8fd9\u4e2a\u95ee\u9898\uff0c\u6ca1\u6709\u53d1\u73b0\u4ec0\u4e48\u89e3\u51b3\u65b9\u6848\u3002\\n\\n## ethtool \u4e0d\u652f\u6301\u5f53\u524d\u7f51\u5361\\n\u5220\u9664 /var/run/.rte_config \u540e\u91cd\u65b0\u8fd0\u884c kni \u7a0b\u5e8f\uff0c\u6267\u884c ethtool \u547d\u4ee4\u540e\uff0cdmesg \u67e5\u770b\u7cfb\u7edf\u4fe1\u606f\u53d1\u73b0\u4e86\u5982\u4e0b\u5185\u5bb9\uff1a\\n\\n> Device not supported by ethtool\\n\\n\u8fd9\u4e2a\u4fe1\u606f\u8868\u9762\u4e0a\u770b\u6765\u662f\u8bf4 ethtool \u4e0d\u652f\u6301\u6211\u7684\u7f51\u5361\uff0c\u4f46\u662f\u6211\u4f7f\u7528\u7684\u662f e1000 \u7684\u7f51\u5361\u5440\uff0c\u6211\u60f3\u5e94\u8be5\u4e0d\u81f3\u4e8e\u4e0d\u652f\u6301\u5427\u3002\\n\\n\u4e3a\u4e86\u786e\u8ba4 ethtool \u662f\u5426\u652f\u6301\u6211\u7684\u7f51\u5361\uff0c\u6211\u4f7f\u7528 cscope \u5728\u6e90\u7801\u4e2d\u641c\u7d22 Device not supported by ethtool \u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u53d1\u73b0\u5b83\u662f\u5728 kni_misc.c \u4e2d\u7684 kni_ioctl_create \u51fd\u6570\u4e2d\u6253\u5370\u7684\u3002\u8fd9\u4e2a\u51fd\u6570\u4e2d\u4f1a\u7528\u83b7\u53d6\u5230\u7684\u5f53\u524d\u7f51\u5361\u4fe1\u606f\u67e5\u8be2\u4e24\u5f20\u8868\u2014\u2014ixgbe_pci_tbl \u4e0e igb_pci_tbl\u3002\\n\\n\u8fd9\u4e24\u5f20\u8868\u7684\u90e8\u5206\u5185\u5bb9\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n```c\\nconst struct pci_device_id ixgbe_pci_tbl[] = {\\n\\t{PCI_VDEVICE(INTEL, IXGBE_DEV_ID_82598)},\\n\\t{PCI_VDEVICE(INTEL, IXGBE_DEV_ID_82598AF_DUAL_PORT)},\\n\\t{PCI_VDEVICE(INTEL, IXGBE_DEV_ID_82598AF_SINGLE_PORT)},\\n\\t{PCI_VDEVICE(INTEL, IXGBE_DEV_ID_82598AT)},\\n\\t...........................................\\n\\t/* required last entry */\\n\\t{0, }\\n};\\n\\nconst struct pci_device_id igb_pci_tbl[] = {\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_I354_BACKPLANE_1GBPS) },\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_I354_SGMII) },\\n\\t{ PCI_VDEVICE(INTEL, E1000_DEV_ID_I354_BACKPLANE_2_5GBPS) },\\n\\t..........................................................\\n\\t/* required last entry */\\n\\t{0, }\\n};\\n\\n```\\n\u6211\u4f7f\u7528 lspci \u547d\u4ee4\u67e5\u770b\u6211\u7684\u7f51\u5361\u578b\u53f7\uff0c\u5f97\u5230\u7684\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n>e1000 82545EM\\n\\n\u8fd9\u4e2a\u578b\u53f7\u5728 dpdk \u4e2d\u5bf9\u5e94\u7684\u5b8f\u662f E1000_DEV_82545EM\uff0c\u5e76\u4e0d\u5b58\u5728\u4e8e\u4e0a\u9762\u7684\u4e24\u5f20\u8868\u4e2d\uff0c\u8fd9\u8868\u660e ethtool \u786e\u5b9e\u4e0d\u652f\u6301\u6b64\u6b3e\u7f51\u5361\u3002\u4ece\u7b2c\u4e8c\u5f20\u8868\u4e2d\u6211\u53d1\u73b0 e1000 \u7f51\u5361\u662f\u4e00\u4e2a\u7cfb\u5217\uff0c\u5176\u4e2d\u6709\u5f88\u591a\u4e0d\u540c\u578b\u53f7\u7684\u7f51\u5361\uff0c\u8fd9\u662f\u6211\u4e4b\u524d\u6ca1\u6709\u610f\u8bc6\u5230\u7684\u95ee\u9898\u3002\\n\\n\u5176\u5b9e\u8fd9\u662f dpdk \u7684 rte_kni \u6a21\u5757\u4e0d\u652f\u6301\u8fd9\u4e2a\u7f51\u5361\uff0c\u5b98\u65b9\u9a71\u52a8\u662f\u652f\u6301\u7684\u3002"},{"id":"/dpdk/dpdk-pdump\u5de5\u5177\u7f16\u8bd1\u8fd0\u884c","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-pdump\u5de5\u5177\u7f16\u8bd1\u8fd0\u884c","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-pdump\u5de5\u5177\u7f16\u8bd1\u8fd0\u884c.md","source":"@site/blog/dpdk/dpdk-pdump\u5de5\u5177\u7f16\u8bd1\u8fd0\u884c.md","title":"dpdk/dpdk-pdump\u5de5\u5177\u7f16\u8bd1\u8fd0\u884c","description":"dpdk-pdump \u662f\u4ec0\u4e48","date":"2022-06-19T07:40:00.000Z","formattedDate":"2022\u5e746\u670819\u65e5","tags":[],"readingTime":4.565,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-kni\u4e0eethtool\u8bd5\u73a9\u95ee\u9898\u8bb0\u5f55","permalink":"/longyu.github.io/blog/dpdk/dpdk-kni\u4e0eethtool\u8bd5\u73a9\u95ee\u9898\u8bb0\u5f55"},"nextItem":{"title":"dpdk/dpdk-pdump\u7f16\u8bd1\u8fd0\u884c","permalink":"/longyu.github.io/blog/dpdk/dpdk-pdump\u7f16\u8bd1\u8fd0\u884c"}},"content":"## dpdk-pdump \u662f\u4ec0\u4e48\\n\\n**dpdk-pdump \u662f dpdk \u63d0\u4f9b\u7684\u4e00\u4e2a\u5de5\u5177\u3002\u5b83\u53ef\u4ee5\u53ef\u4ee5\u4f5c\u4e3a secondary \u7a0b\u5e8f\u8fd0\u884c\uff0c\u80fd\u591f\u6355\u83b7 dpdk \u7684\u7aef\u53e3\u7684\u6570\u636e\u5305\u3002**\\n\\n## \u7f16\u8bd1 dpdk-pdump \\n\\n**dpdk-pdump** \u5de5\u5177\u7684\u6e90\u7801\u4f4d\u4e8e dpdk \u6e90\u7801\u6839\u76ee\u5f55\u4e0b\u7684 **./app/pdump** \u76ee\u5f55\u4e2d\uff0c\u4e0d\u9700\u8981\u50cf examples \u4e2d\u7684 demo \u4e00\u6837\u5355\u72ec\u7f16\u8bd1\uff0c\u5b83\u4f1a\u5728\u7f16\u8bd1 dpdk \u7684\u540c\u65f6\u4e5f\u88ab\u7f16\u8bd1\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7f16\u8bd1\u751f\u6210\u7684 app \u76ee\u5f55\u4e2d\u627e\u5230\u8fd9\u4e2a\u7a0b\u5e8f\u3002\\n\\n\u5728\u6211\u7684\u865a\u62df\u673a\u4e2d\uff0c\u7f16\u8bd1 dpdk \u540e\uff0c\u5b83\u7684\u4f4d\u7f6e\u5982\u4e0b\uff1a\\n\\n>/home/longyu/dpdk-stable-17.05.2/x86_64-native-linuxapp-gcc/app/dpdk-pdump\\n\\n## \u4f7f\u7528 dpdk-pdump \\n**dpdk-pdump \u7684\u7528\u6cd5\u5982\u4e0b\uff1a**\\n\\n```bash\\nusage: ./dpdk-pdump [EAL options] -- --pdump \'(port=<port id> | device_id=<pci id or vdev name>),(queue=<queue_id>),(rx-dev=<iface or pcap file> | tx-dev=<iface or pcap file>,[ring-size=<ring size>default:16384],[mbuf-size=<mbuf data size>default:2176],[total-num-mbufs=<number of mbufs>default:65535]\' [--server-socket-path=<server socket dir>default:/var/run/.dpdk/ (or) ~/.dpdk/] [--client-socket-path=<client socket dir>default:/var/run/.dpdk/ (or) ~/.dpdk/]```\\n\\n**dpdk-pdump** \u9700\u8981\u4f9d\u8d56\u4e00\u4e2a **dpdk primary** \u8fdb\u7a0b\uff0c\u6211\u5c31\u4ee5 **l2fwd** \u547d\u4ee4\u4f5c\u4e3a **dpdk primary** \u8fdb\u7a0b\u3002\\n\\n\u6709\u4e86 **dpdk primary** \u8fdb\u7a0b\u4e4b\u540e\uff0c\u6839\u636e\u6211\u7684\u73af\u5883\uff0c\u6211\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u884c\u542f\u52a8 dpdk-pdump\\n```bash\\n\\tsudo ./dpdk-pdump -n 4 -- --pdump \'port=0,queue=*,rx-dev=./rx-pcap\'\\n```\\n## no driver for pcap \u7684\u95ee\u9898\\n\\n\u6211\u7b2c\u4e00\u6b21\u6267\u884c\u4e0a\u9762\u7684\u547d\u4ee4\u65f6\u7a0b\u5e8f\u5f02\u5e38\u7ec8\u6b62\uff0c\u9519\u8bef\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n> EAL: no driver found for eth_pcap_rx_0\\n> EAL: Driver, cannot attach the device\\n\\n\u901a\u8fc7\u641c\u7d22\uff0c\u6211\u53d1\u73b0\u4e0a\u9762\u7684\u9519\u8bef\u662f\u56e0\u4e3a\u5728\u7f16\u8bd1 dpdk \u65f6\u6ca1\u6709\u542f\u7528 PCAP \u76f8\u5173\u7684\u529f\u80fd\u6240\u81f4\uff0c\u53c2\u8003\u94fe\u63a5\u5982\u4e0b\uff1a\\n\\n[dpdk-pdump-no-driver-found-for-net-pcap](https://stackoverflow.com/questions/44357995/dpdk-pdump-no-driver-found-for-net-pcap-rx-0)\\n\\n\u6839\u636e\u7f51\u9875\u4e2d\u7684\u56de\u7b54\u6211\u5bf9 **.config** \u6587\u4ef6\u505a\u4e86\u5982\u4e0b\u4fee\u6539\u4ee5\u4f7f\u80fd **PCAP** \u7684\u76f8\u5173\u529f\u80fd\uff1a\\n\\n```bash\\nlongyu@longyu-pc:~/dpdk-stable-17.05.2/x86_64-native-linuxapp-gcc$ grep \'PCAP\' .config\\n# Compile software PMD backed by PCAP files\\nCONFIG_RTE_LIBRTE_PMD_PCAP=y\\nCONFIG_RTE_PORT_PCAP=y\\n```\\n\u8fd9\u4e4b\u540e\u91cd\u65b0\u7f16\u8bd1\u540e\u7ee7\u7eed\u6d4b\u8bd5\uff0c\u8fd9\u4e2a\u95ee\u9898\u5f97\u5230\u4e86\u89e3\u51b3\uff0c\u53ef\u53c8\u9047\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\u3002\\n\\n## \u65e0\u6cd5\u4e0e primary server \u7aef\u901a\u4fe1\u7684\u95ee\u9898\\n\\n\u89e3\u51b3\u4e86 **pcap driver** \u7684\u95ee\u9898\u540e\uff0c\u6211\u91cd\u65b0\u6267\u884c **dpdk-pdump** \u65f6\u65b0\u7684\u62a5\u9519\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n> PDUMP: failed to send to server:No such file or directory,\\n> pdump_create_client_socket:702 PDUMP: client request for pdump\\n> enable/disable failed PDUMP: failed to send to server:No such file or\\n> directory, pdump_create_client_socket:702 PDUMP: client request for\\n> pdump enable/disable failed\\n\\n\u901a\u8fc7\u9605\u8bfb\u5b98\u65b9\u7f51\u9875\u4e2d\u7684\u8bf4\u660e\uff0c\u6211\u53d1\u73b0\u4e86\u95ee\u9898\u6240\u5728\u3002\u5b98\u65b9\u7684\u8bf4\u660e\u4e2d\u63d0\u5230 **dpdk-pdump** \u5de5\u5177\u53ea\u80fd\u4e0e\u521d\u59cb\u5316\u4e86 **packet capture framework** \u7684\u4e3b\u7a0b\u5e8f\u901a\u4fe1\uff0c\u800c **packet capture framework** \u7684\u521d\u59cb\u5316\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u7684\u6e90\u7801\u3002\\n\\n\u5728 dpdk \u63d0\u4f9b\u7684\u5de5\u5177\u4e2d\uff0c**testpmd** \u5de5\u5177\u7684\u6e90\u7801\u4e2d\u6dfb\u52a0\u4e86 **packet capture framework** \u7684\u521d\u59cb\u5316\u4ee3\u7801\uff0c\u6211\u67e5\u770b\u76f8\u5173\u4ee3\u7801\uff0c\u627e\u5230\u4e86\u5982\u4e0b\u6e90\u7801\u884c\uff1a\\n\\n```c\\n\\tdiag = rte_eal_init(argc, argv);\\n\\t    if (diag < 0)\\n\\t        rte_panic(\\"Cannot init EAL\\\\n\\");\\n\\t\\n\\t#ifdef RTE_LIBRTE_PDUMP\\n\\t    /* initialize packet capture framework */\\n\\t    rte_pdump_init(NULL);\\n\\t#endif\\n```\\n\u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u5728 **RTE_LIBRTE_PDUMP** \u5b8f\u5b9a\u4e49\u65f6\u6267\u884c **rte_pdump_init** \u51fd\u6570\u6765\u8fdb\u884c\u5fc5\u8981\u7684\u521d\u59cb\u5316\uff0c**RTE_LIBRTE_PDUMP** \u529f\u80fd\u5728 **.config** \u4e2d\u8fdb\u884c\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a\u5f00\u542f\u3002\\n\\n**.config** \u4e2d\u4e0e **RTE_LIBRTE_PDUMP** \u529f\u80fd\u76f8\u5173\u7684\u914d\u7f6e\u5982\u4e0b\uff1a\\n\\n```bash\\n\\t# Compile architecture we compile for. pdump library\\n\\tCONFIG_RTE_LIBRTE_PDUMP=y\\n```\\n\\n\u5f53\u4f7f\u7528\u80fd\u4e86\u8fd9\u4e2a\u53c2\u6570\u540e\uff0c\u7f16\u8bd1\u76ee\u5f55\u4e0b\u7684\u5934\u6587\u4ef6 **rte_config.h** \u4e2d\u4f1a\u5b9a\u4e49 **RTE_LIBRTE_PDUMP** \u5b8f\uff0c\u76f8\u5173\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n\\t#undef RTE_LIBRTE_PDUMP\\n\\t#define RTE_LIBRTE_PDUMP 1\\n```\\n\u6211\u6309\u7167\u4e0a\u9762\u7684\u63cf\u8ff0\u4fee\u6539\u4e86 dpdk-pdump \u7a0b\u5e8f\u7684\u6e90\u7801\u540e\uff0c\u7ec8\u4e8e\u80fd\u591f\u6b63\u5e38\u6267\u884c\u4e86\uff01\\n\\n## \u67e5\u770b dump \u51fa\u7684\u6570\u636e\u5305\u6587\u4ef6\\n**dpdk-pdump** \u4e2d\u5df2\u7ecf\u5bf9 dump \u51fa\u7684\u539f\u59cb\u6570\u636e\u5305\u8fdb\u884c\u4e86\u8f6c\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 **tcpdump** \u7684 **-r** \u9009\u9879\u6765\u67e5\u770b\u751f\u6210\u7684\u6587\u4ef6\u3002\\n \\n \u6211\u6307\u5b9a **dpdk-pdump dump** \u7aef\u53e3\u63a5\u6536\u5230\u7684\u5305\uff0c\u6307\u5b9a\u5b58\u50a8\u6587\u4ef6\u4e3a **./rx-pcap**\u3002\u6211\u53ea\u9700\u8981\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u5c31\u53ef\u4ee5\u770b\u5230\u63a5\u6536\u5230\u7684\u6570\u636e\u5305\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\\n\\n```bash\\n \\tsudo tcpdump -r ./rx-pcap\\n```\\n\\n## \u603b\u7ed3\\n**dpdk \u63d0\u4f9b\u7684\u7a0b\u5e8f\u5728\u4f7f\u7528\u65f6\u53ef\u80fd\u4f1a\u9047\u5230\u4e00\u4e9b\u95ee\u9898\uff0c\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u4e00\u822c\u6b65\u9aa4\u5982\u4e0b\uff1a**\\n\\n1. \u67e5\u770b\u4f9d\u8d56\u7684\u529f\u80fd\u662f\u5426\u5f00\u542f\uff08\u4fee\u6539 .config \u6587\u4ef6\uff09\\n2. \u4fee\u6539\u5fc5\u8981\u7684\u6e90\u4ee3\u7801\u4ee5\u6267\u884c\u5fc5\u8981\u7684\u521d\u59cb\u5316\u5de5\u4f5c\\n3. \u91cd\u65b0\u7f16\u8bd1\u540e\u518d\u6b21\u6267\u884c"},{"id":"/dpdk/dpdk-pdump\u7f16\u8bd1\u8fd0\u884c","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk-pdump\u7f16\u8bd1\u8fd0\u884c","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-pdump\u7f16\u8bd1\u8fd0\u884c.md","source":"@site/blog/dpdk/dpdk-pdump\u7f16\u8bd1\u8fd0\u884c.md","title":"dpdk/dpdk-pdump\u7f16\u8bd1\u8fd0\u884c","description":"dpdk-pdump \u662f\u4ec0\u4e48","date":"2022-06-19T07:40:00.000Z","formattedDate":"2022\u5e746\u670819\u65e5","tags":[],"readingTime":4.57,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-pdump\u5de5\u5177\u7f16\u8bd1\u8fd0\u884c","permalink":"/longyu.github.io/blog/dpdk/dpdk-pdump\u5de5\u5177\u7f16\u8bd1\u8fd0\u884c"},"nextItem":{"title":"dpdk/dpdk\u5e93\u6e90\u7801\u4e2d\u5305\u542b\u5185\u6838\u5934\u6587\u4ef6\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk\u5e93\u6e90\u7801\u4e2d\u5305\u542b\u5185\u6838\u5934\u6587\u4ef6\u7684\u95ee\u9898"}},"content":"## dpdk-pdump \u662f\u4ec0\u4e48\\n\\n**dpdk-pdump \u662f dpdk \u63d0\u4f9b\u7684\u4e00\u4e2a\u5de5\u5177\u3002\u5b83\u53ef\u4ee5\u53ef\u4ee5\u4f5c\u4e3a secondary \u7a0b\u5e8f\u8fd0\u884c\uff0c\u80fd\u591f\u6355\u83b7 dpdk \u7684\u7aef\u53e3\u7684\u6570\u636e\u5305\u3002**\\n\\n## \u7f16\u8bd1 dpdk-pdump \\n\\n**dpdk-pdump** \u5de5\u5177\u7684\u6e90\u7801\u4f4d\u4e8e dpdk \u6e90\u7801\u6839\u76ee\u5f55\u4e0b\u7684 **./app/pdump** \u76ee\u5f55\u4e2d\uff0c\u4e0d\u9700\u8981\u50cf examples \u4e2d\u7684 demo \u4e00\u6837\u5355\u72ec\u7f16\u8bd1\uff0c\u5b83\u4f1a\u5728\u7f16\u8bd1 dpdk \u7684\u540c\u65f6\u4e5f\u88ab\u7f16\u8bd1\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7f16\u8bd1\u751f\u6210\u7684 app \u76ee\u5f55\u4e2d\u627e\u5230\u8fd9\u4e2a\u7a0b\u5e8f\u3002\\n\\n\u5728\u6211\u7684\u865a\u62df\u673a\u4e2d\uff0c\u7f16\u8bd1 dpdk \u540e\uff0c\u5b83\u7684\u4f4d\u7f6e\u5982\u4e0b\uff1a\\n\\n>/home/longyu/dpdk-stable-17.05.2/x86_64-native-linuxapp-gcc/app/dpdk-pdump\\n\\n## \u4f7f\u7528 dpdk-pdump \\n**dpdk-pdump \u7684\u7528\u6cd5\u5982\u4e0b\uff1a**\\n\\n```bash\\nusage: ./dpdk-pdump [EAL options] -- --pdump \'(port=<port id> | device_id=<pci id or vdev name>),(queue=<queue_id>),(rx-dev=<iface or pcap file> | tx-dev=<iface or pcap file>,[ring-size=<ring size>default:16384],[mbuf-size=<mbuf data size>default:2176],[total-num-mbufs=<number of mbufs>default:65535]\' [--server-socket-path=<server socket dir>default:/var/run/.dpdk/ (or) ~/.dpdk/] [--client-socket-path=<client socket dir>default:/var/run/.dpdk/ (or) ~/.dpdk/]\\n```\\n\\n**dpdk-pdump** \u9700\u8981\u4f9d\u8d56\u4e00\u4e2a **dpdk primary** \u8fdb\u7a0b\uff0c\u6211\u5c31\u4ee5 **l2fwd** \u547d\u4ee4\u4f5c\u4e3a **dpdk primary** \u8fdb\u7a0b\u3002\\n\\n\u6709\u4e86 **dpdk primary** \u8fdb\u7a0b\u4e4b\u540e\uff0c\u6839\u636e\u6211\u7684\u73af\u5883\uff0c\u6211\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u884c\u542f\u52a8 dpdk-pdump\\n```bash\\n\\tsudo ./dpdk-pdump -n 4 -- --pdump \'port=0,queue=*,rx-dev=./rx-pcap\'\\n```\\n## no driver for pcap \u7684\u95ee\u9898\\n\\n\u6211\u7b2c\u4e00\u6b21\u6267\u884c\u4e0a\u9762\u7684\u547d\u4ee4\u65f6\u7a0b\u5e8f\u5f02\u5e38\u7ec8\u6b62\uff0c\u9519\u8bef\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n> EAL: no driver found for eth_pcap_rx_0\\n> EAL: Driver, cannot attach the device\\n\\n\u901a\u8fc7\u641c\u7d22\uff0c\u6211\u53d1\u73b0\u4e0a\u9762\u7684\u9519\u8bef\u662f\u56e0\u4e3a\u5728\u7f16\u8bd1 dpdk \u65f6\u6ca1\u6709\u542f\u7528 PCAP \u76f8\u5173\u7684\u529f\u80fd\u6240\u81f4\uff0c\u53c2\u8003\u94fe\u63a5\u5982\u4e0b\uff1a\\n\\n[dpdk-pdump-no-driver-found-for-net-pcap](https://stackoverflow.com/questions/44357995/dpdk-pdump-no-driver-found-for-net-pcap-rx-0)\\n\\n\u6839\u636e\u7f51\u9875\u4e2d\u7684\u56de\u7b54\u6211\u5bf9 **.config** \u6587\u4ef6\u505a\u4e86\u5982\u4e0b\u4fee\u6539\u4ee5\u4f7f\u80fd **PCAP** \u7684\u76f8\u5173\u529f\u80fd\uff1a\\n\\n```bash\\nlongyu@longyu-pc:~/dpdk-stable-17.05.2/x86_64-native-linuxapp-gcc$ grep \'PCAP\' .config\\n# Compile software PMD backed by PCAP files\\nCONFIG_RTE_LIBRTE_PMD_PCAP=y\\nCONFIG_RTE_PORT_PCAP=y\\n```\\n\u8fd9\u4e4b\u540e\u91cd\u65b0\u7f16\u8bd1\u540e\u7ee7\u7eed\u6d4b\u8bd5\uff0c\u8fd9\u4e2a\u95ee\u9898\u5f97\u5230\u4e86\u89e3\u51b3\uff0c\u53ef\u53c8\u9047\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\u3002\\n\\n## \u65e0\u6cd5\u4e0e primary server \u7aef\u901a\u4fe1\u7684\u95ee\u9898\\n\\n\u89e3\u51b3\u4e86 **pcap driver** \u7684\u95ee\u9898\u540e\uff0c\u6211\u91cd\u65b0\u6267\u884c **dpdk-pdump** \u65f6\u65b0\u7684\u62a5\u9519\u4fe1\u606f\u5982\u4e0b\uff1a\\n\\n> PDUMP: failed to send to server:No such file or directory,\\n> pdump_create_client_socket:702 PDUMP: client request for pdump\\n> enable/disable failed PDUMP: failed to send to server:No such file or\\n> directory, pdump_create_client_socket:702 PDUMP: client request for\\n> pdump enable/disable failed\\n\\n\u901a\u8fc7\u9605\u8bfb\u5b98\u65b9\u7f51\u9875\u4e2d\u7684\u8bf4\u660e\uff0c\u6211\u53d1\u73b0\u4e86\u95ee\u9898\u6240\u5728\u3002\u5b98\u65b9\u7684\u8bf4\u660e\u4e2d\u63d0\u5230 **dpdk-pdump** \u5de5\u5177\u53ea\u80fd\u4e0e\u521d\u59cb\u5316\u4e86 **packet capture framework** \u7684\u4e3b\u7a0b\u5e8f\u901a\u4fe1\uff0c\u800c **packet capture framework** \u7684\u521d\u59cb\u5316\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u7684\u6e90\u7801\u3002\\n\\n\u5728 dpdk \u63d0\u4f9b\u7684\u5de5\u5177\u4e2d\uff0c**testpmd** \u5de5\u5177\u7684\u6e90\u7801\u4e2d\u6dfb\u52a0\u4e86 **packet capture framework** \u7684\u521d\u59cb\u5316\u4ee3\u7801\uff0c\u6211\u67e5\u770b\u76f8\u5173\u4ee3\u7801\uff0c\u627e\u5230\u4e86\u5982\u4e0b\u6e90\u7801\u884c\uff1a\\n\\n```c\\n\\tdiag = rte_eal_init(argc, argv);\\n\\t    if (diag < 0)\\n\\t        rte_panic(\\"Cannot init EAL\\\\n\\");\\n\\t\\n\\t#ifdef RTE_LIBRTE_PDUMP\\n\\t    /* initialize packet capture framework */\\n\\t    rte_pdump_init(NULL);\\n\\t#endif\\n```\\n\u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u5728 **RTE_LIBRTE_PDUMP** \u5b8f\u5b9a\u4e49\u65f6\u6267\u884c **rte_pdump_init** \u51fd\u6570\u6765\u8fdb\u884c\u5fc5\u8981\u7684\u521d\u59cb\u5316\uff0c**RTE_LIBRTE_PDUMP** \u529f\u80fd\u5728 **.config** \u4e2d\u8fdb\u884c\u914d\u7f6e\uff0c\u9ed8\u8ba4\u4e3a\u5f00\u542f\u3002\\n\\n**.config** \u4e2d\u4e0e **RTE_LIBRTE_PDUMP** \u529f\u80fd\u76f8\u5173\u7684\u914d\u7f6e\u5982\u4e0b\uff1a\\n\\n```bash\\n\\t# Compile architecture we compile for. pdump library\\n\\tCONFIG_RTE_LIBRTE_PDUMP=y\\n```\\n\\n\u5f53\u4f7f\u7528\u80fd\u4e86\u8fd9\u4e2a\u53c2\u6570\u540e\uff0c\u7f16\u8bd1\u76ee\u5f55\u4e0b\u7684\u5934\u6587\u4ef6 **rte_config.h** \u4e2d\u4f1a\u5b9a\u4e49 **RTE_LIBRTE_PDUMP** \u5b8f\uff0c\u76f8\u5173\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n\\t#undef RTE_LIBRTE_PDUMP\\n\\t#define RTE_LIBRTE_PDUMP 1\\n```\\n\u6211\u6309\u7167\u4e0a\u9762\u7684\u63cf\u8ff0\u4fee\u6539\u4e86 dpdk-pdump \u7a0b\u5e8f\u7684\u6e90\u7801\u540e\uff0c\u7ec8\u4e8e\u80fd\u591f\u6b63\u5e38\u6267\u884c\u4e86\uff01\\n\\n## \u67e5\u770b dump \u51fa\u7684\u6570\u636e\u5305\u6587\u4ef6\\n**dpdk-pdump** \u4e2d\u5df2\u7ecf\u5bf9 dump \u51fa\u7684\u539f\u59cb\u6570\u636e\u5305\u8fdb\u884c\u4e86\u8f6c\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 **tcpdump** \u7684 **-r** \u9009\u9879\u6765\u67e5\u770b\u751f\u6210\u7684\u6587\u4ef6\u3002\\n \\n \u6211\u6307\u5b9a **dpdk-pdump dump** \u7aef\u53e3\u63a5\u6536\u5230\u7684\u5305\uff0c\u6307\u5b9a\u5b58\u50a8\u6587\u4ef6\u4e3a **./rx-pcap**\u3002\u6211\u53ea\u9700\u8981\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u5c31\u53ef\u4ee5\u770b\u5230\u63a5\u6536\u5230\u7684\u6570\u636e\u5305\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\\n\\n```bash\\n \\tsudo tcpdump -r ./rx-pcap\\n```\\n\\n## \u603b\u7ed3\\n**dpdk \u63d0\u4f9b\u7684\u7a0b\u5e8f\u5728\u4f7f\u7528\u65f6\u53ef\u80fd\u4f1a\u9047\u5230\u4e00\u4e9b\u95ee\u9898\uff0c\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u4e00\u822c\u6b65\u9aa4\u5982\u4e0b\uff1a**\\n\\n1. \u67e5\u770b\u4f9d\u8d56\u7684\u529f\u80fd\u662f\u5426\u5f00\u542f\uff08\u4fee\u6539 .config \u6587\u4ef6\uff09\\n2. \u4fee\u6539\u5fc5\u8981\u7684\u6e90\u4ee3\u7801\u4ee5\u6267\u884c\u5fc5\u8981\u7684\u521d\u59cb\u5316\u5de5\u4f5c\\n3. \u91cd\u65b0\u7f16\u8bd1\u540e\u518d\u6b21\u6267\u884c"},{"id":"/dpdk/dpdk\u5e93\u6e90\u7801\u4e2d\u5305\u542b\u5185\u6838\u5934\u6587\u4ef6\u7684\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk\u5e93\u6e90\u7801\u4e2d\u5305\u542b\u5185\u6838\u5934\u6587\u4ef6\u7684\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk\u5e93\u6e90\u7801\u4e2d\u5305\u542b\u5185\u6838\u5934\u6587\u4ef6\u7684\u95ee\u9898.md","source":"@site/blog/dpdk/dpdk\u5e93\u6e90\u7801\u4e2d\u5305\u542b\u5185\u6838\u5934\u6587\u4ef6\u7684\u95ee\u9898.md","title":"dpdk/dpdk\u5e93\u6e90\u7801\u4e2d\u5305\u542b\u5185\u6838\u5934\u6587\u4ef6\u7684\u95ee\u9898","description":"\u95ee\u9898\u63cf\u8ff0","date":"2022-06-19T07:40:00.000Z","formattedDate":"2022\u5e746\u670819\u65e5","tags":[],"readingTime":4.07,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk-pdump\u7f16\u8bd1\u8fd0\u884c","permalink":"/longyu.github.io/blog/dpdk/dpdk-pdump\u7f16\u8bd1\u8fd0\u884c"},"nextItem":{"title":"dpdk/dpdk\u6536\u53d1\u5305\u6d4b\u8bd5\u4e4b\u4f7f\u7528\u5185\u6838\u63a5\u53e3\u7ed9dpdk\u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305","permalink":"/longyu.github.io/blog/dpdk/dpdk\u6536\u53d1\u5305\u6d4b\u8bd5\u4e4b\u4f7f\u7528\u5185\u6838\u63a5\u53e3\u7ed9dpdk\u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305"}},"content":"## \u95ee\u9898\u63cf\u8ff0\\n1. \u5728 A \u73af\u5883\u4e0a\u4e0e B \u73af\u5883\u4e0a\u4f7f\u7528\u76f8\u540c\u7248\u672c\u7684 gcc \u7f16\u8bd1 dpdk \u7a0b\u5e8f\\n2. \u6d4b\u8bd5\u53d1\u73b0 A \u73af\u5883\u4e0a\u7f16\u8bd1\u7684\u7248\u672c\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0cB \u73af\u5883\u4e0a\u7f16\u8bd1\u7684\u7248\u672c\u4e0d\u80fd\u5de5\u4f5c\\n\\n\u8c03\u8bd5\u786e\u8ba4\uff0c**A \u73af\u5883\u4e0a\u7f16\u8bd1\u7684 dpdk \u7a0b\u5e8f\u521d\u59cb\u5316\u4e86 vfio \u7684 tailq\uff0c\u800c B \u73af\u5883\u4e0a\u7f16\u8bd1\u7684 dpdk \u7a0b\u5e8f\u6ca1\u6709\u521d\u59cb\u5316 vfio \u7684 tailq\u3002**\\n\\ndpdk \u7248\u672c\u4fe1\u606f\uff1a**dpdk-16.04**\\n\\n## \u4ece\u6e90\u7801\u7740\u624b\u5206\u6790\\nvfio \u7684 tailq \u5728 eal_pci_vfio.c \u4e2d\u901a\u8fc7 **EAL_REGISTER_TAILQ** \u6765\u6ce8\u518c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n#ifdef VFIO_PRESENT\\n\\n#define PAGE_SIZE   (sysconf(_SC_PAGESIZE))\\n#define PAGE_MASK   (~(PAGE_SIZE - 1))\\n\\nstatic struct rte_tailq_elem rte_vfio_tailq = {\\n\\t.name = \\"VFIO_RESOURCE_LIST\\",\\n};\\nEAL_REGISTER_TAILQ(rte_vfio_tailq)\\n```\\n\u4e0a\u8ff0\u4ee3\u7801\u8bf4\u660e\uff0c**\u53ea\u6709\u5b9a\u4e49\u4e86 VFIO_PRESENT \u5b8f\u624d\u4f1a\u6ce8\u518c vfio \u7684 tailq!** \u91cd\u65b0\u63cf\u8ff0\u95ee\u9898\uff1a\\n\\n**A \u73af\u5883\u4e0a\u7f16\u8bd1\u65f6 VFIO_PRESENT \u5b8f\u88ab\u5b9a\u4e49\uff0cB \u73af\u5883\u4e0a\u7f16\u8bd1\u65f6 VFIO_PRESENT \u5b8f\u6ca1\u6709\u88ab\u5b9a\u4e49\u3002**\\n\\n## \u63d0\u95ee\u73af\u8282\\n1. \u518d\u6b21\u786e\u8ba4\u7f16\u8bd1\u5668\u662f\u5426\u4e00\u81f4\\n\\t\u786e\u8ba4\u4e00\u81f4\\n2. \u786e\u8ba4\u7f16\u8bd1\u7684 dpdk \u4ee3\u7801\u4e00\u81f4\\n\\t\u786e\u8ba4\u4e00\u81f4\\n3. VFIO_PRESENT \u5728\u54ea\u91cc\u88ab\u5b9a\u4e49\u7684\uff1f\\n\\n## \u5bf9\u63d0\u95ee\u7684\u56de\u7b54\\n\u641c\u7d22\u786e\u5b9a **VFIO_PRESENT** \u5728 **eal_vfio.h** \u4e2d\u88ab\u5b9a\u4e49\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n#ifdef RTE_EAL_VFIO\\n#include <linux/version.h>\\n#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 6, 0)\\n#include <linux/vfio.h>\\n\\n.......\\n\\n#define VFIO_PRESENT\\n#endif /* kernel version */\\n#endif /* RTE_EAL_VFIO */\\n```\\n\u6839\u636e\u4ee3\u7801\u5185\u5bb9\uff0cVFIO_PRESENT \u8981\u88ab\u5b9a\u4e49\u9700\u8981\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff1a\\n\\n1. config \u4e2d\u914d\u7f6e CONFIG_RTE_EAL_VFIO \u4e3a y\\n2. \u5185\u6838\u7248\u672c\u5927\u4e8e\u7b49\u4e8e 3.6.0\\n\\n\u68c0\u67e5\u73af\u5883\u5f97\u5230\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\n1. config \u4e2d\u4f7f\u7528\u4e86 RTE_EAL_VFIO \u914d\u7f6e\\n2. RTE_KERNELDIR \u6307\u5411\u7684\u5185\u6838 kernel_devel \u7248\u672c\u4e00\u81f4\\n\\n\u786e\u8ba4\u4e86\u8fd9\u4e24\u70b9\u4fe1\u606f\u540e\uff0c\u5f97\u51fa**\u4e0d\u5e94\u8be5\u5b58\u5728\u95ee\u9898\u7684**\u7ed3\u8bba\u3002\\n\\n## linux/version.h \u662f\u54ea\u4e2a linux/version.h?\\n\u4e00\u901a\u7814\u7a76\u53d1\u73b0 eal_vfio.h \u4e2d\u5305\u542b\u7684 linux/version.h **\u5e76\u4e0d\u662f\u4ece RTE_KERNELDIR \u53d8\u91cf\u6307\u5b9a\u7684\u8def\u5f84\u4e0b\u641c\u7d22\u7684\uff01**\\n\\n\u603b\u7ed3\u4e24\u70b9\u95ee\u9898\uff1a\\n\\n1. \u7f16\u8bd1\u5185\u6838 ko \u7684\u6e90\u6587\u4ef6\u65f6 linux/version.h \u4ece\u6307\u5b9a\u7684\u5185\u6838\u8def\u5f84\u4e0b\u9762\u641c\u7d22 \\n2. \u7f16\u8bd1\u5e93\u51fd\u6570\u65f6\u5305\u542b\u7684 linux/version.h \u5934\u6587\u4ef6\u662f**\u4ece\u7f16\u8bd1\u73af\u5883\u4e0a\u7684 /usr/include \u76ee\u5f55\u641c\u7d22**\\n\\n## \u771f\u6b63\u7684\u95ee\u9898\u662f\u5565\uff1f\\n\u7ed5\u4e86\u4e00\u5708\u540e\uff0c\u6211\u786e\u8ba4\u771f\u6b63\u7684\u95ee\u9898\u662f\u4e0d\u540c\u7f16\u8bd1\u673a\u5668\u4e0a\u7684 **/usr/include/linux/version.h** \u6587\u4ef6\u4e0d\u540c\uff0c**A \u673a\u5668\u4e0a version.h \u4e2d\u5b9a\u4e49\u7684\u7248\u672c\u9ad8\u4e8e 3.6.0\uff0cB \u673a\u5668\u4e0a version.h \u4e2d\u5b9a\u4e49\u7684\u7248\u672c\u4f4e\u4e8e 3.6.0**\u3002\\n\\n## \u5e93\u51fd\u6570\u4e2d\u5305\u542b\u5185\u6838\u5934\u6587\u4ef6\u7684\u574f\u5904\\n\u7f16\u8bd1\u5e93\u51fd\u6570\u65f6\uff0c\u5e93\u51fd\u6570\u4e2d\u5305\u542b\u7684\u5185\u6838\u5934\u6587\u4ef6\u4f1a\u4ece\u7f16\u8bd1\u73af\u5883\u4e0a\u7684 /usr/include \u76ee\u5f55\u4e2d\u641c\u7d22\uff0c\u4e0d\u540c\u7684\u7f16\u8bd1\u73af\u5883\u4e0a\u5185\u6838\u5934\u6587\u4ef6\u7248\u672c\u4e0d\u540c\u5c31\u662f\u6f5c\u5728\u7684\u98ce\u9669\u3002\\n\\n**\u66f4\u5177\u4f53\u70b9\u8bf4\u5176\u5b9e\u662f\u5c06\u5e93\u51fd\u6570\u4e0e\u5185\u6838\u5934\u6587\u4ef6\u8026\u5408\u4e86\uff0c\u968f\u4e4b\u800c\u6765\u7684\u662f\u4e0e\u7f16\u8bd1\u73af\u5883\u7684\u8026\u5408**\u3002\u5e93\u51fd\u6570\u4e2d\u5305\u542b\u5185\u6838\u5934\u6587\u4ef6\u662f\u6709\u9700\u6c42\u7684\uff0c\u5982 ip \u547d\u4ee4\u5c31\u4f9d\u8d56\u5185\u6838\u7684 netlink \u76f8\u5173\u5934\u6587\u4ef6\uff0c\u4e0d\u8fc7\u5b83\u672c\u5730\u7ef4\u62a4\u4e86\u4e00\u4e2a\u7279\u5b9a\u7684 netlink \u5934\u6587\u4ef6\u7248\u672c\uff0c\u5c31\u6d88\u9664\u4e86\u4e0e\u7f16\u8bd1\u73af\u5883\u4e2d\u90e8\u7f72\u7684\u5185\u6838\u5934\u6587\u4ef6\u7684\u8026\u5408\u6027\u3002\\n\\n\u4ece eal_vfio.h \u7684\u9700\u6c42\u6765\u5206\u6790\uff0c\u5b83\u5b9e\u73b0\u4e86\u4e0d\u652f\u6301 3.6.0 \u4ee5\u4e0b\u5185\u6838\u7248\u672c\u7684\u9700\u6c42\uff0c\u800c\u8fd9\u4e2a\u5185\u6838\u7248\u672c\u662f **dpdk \u7a0b\u5e8f\u8fd0\u884c\u73af\u5883\u7684\u5185\u6838\u7248\u672c**\uff0c**\u5e76\u4e0d\u8981\u6c42\u4e0e\u7f16\u8bd1\u73af\u5883\u5185\u6838\u7248\u672c\u4e00\u81f4**\uff0c\u6700\u597d\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 RTE_KERNELDIR \u53d8\u91cf\u8def\u5f84\u4e2d\u7684 linux/version.h \u5934\u6587\u4ef6\uff0c\u53ef\u4e5f\u6709\u4e9b\u4e0d\u597d\u7684\u5730\u65b9\uff0c\u5982\u4f55\u53d6\u820d\u4e0d\u6613\u51b3\u5b9a\uff01"},{"id":"/dpdk/dpdk\u6536\u53d1\u5305\u6d4b\u8bd5\u4e4b\u4f7f\u7528\u5185\u6838\u63a5\u53e3\u7ed9dpdk\u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305","metadata":{"permalink":"/longyu.github.io/blog/dpdk/dpdk\u6536\u53d1\u5305\u6d4b\u8bd5\u4e4b\u4f7f\u7528\u5185\u6838\u63a5\u53e3\u7ed9dpdk\u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk\u6536\u53d1\u5305\u6d4b\u8bd5\u4e4b\u4f7f\u7528\u5185\u6838\u63a5\u53e3\u7ed9dpdk\u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305.md","source":"@site/blog/dpdk/dpdk\u6536\u53d1\u5305\u6d4b\u8bd5\u4e4b\u4f7f\u7528\u5185\u6838\u63a5\u53e3\u7ed9dpdk\u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305.md","title":"dpdk/dpdk\u6536\u53d1\u5305\u6d4b\u8bd5\u4e4b\u4f7f\u7528\u5185\u6838\u63a5\u53e3\u7ed9dpdk\u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305","description":"\u5982\u4f55\u4f7f\u7528\u5185\u6838\u63a5\u53e3\u7ed9 dpdk \u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305","date":"2022-06-19T07:40:00.000Z","formattedDate":"2022\u5e746\u670819\u65e5","tags":[],"readingTime":1.045,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk\u5e93\u6e90\u7801\u4e2d\u5305\u542b\u5185\u6838\u5934\u6587\u4ef6\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/dpdk\u5e93\u6e90\u7801\u4e2d\u5305\u542b\u5185\u6838\u5934\u6587\u4ef6\u7684\u95ee\u9898"},"nextItem":{"title":"dpdk/ethtool \u8bfb\u5230\u7684\u72b6\u6001\u4e0e dpdk \u8bfb\u5230\u7684\u7f51\u5361\u72b6\u6001\u4e0d\u4e00\u81f4","permalink":"/longyu.github.io/blog/dpdk/ethtool \u8bfb\u5230\u7684\u72b6\u6001\u4e0e dpdk \u8bfb\u5230\u7684\u7f51\u5361\u72b6\u6001\u4e0d\u4e00\u81f4"}},"content":"## \u5982\u4f55\u4f7f\u7528\u5185\u6838\u63a5\u53e3\u7ed9 dpdk \u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305\\n\u6700\u8fd1\u4e00\u6b21\u6d4b\u8bd5\u4e2d\uff0c\u9700\u8981\u901a\u8fc7\u5185\u6838\u63a5\u53e3\u7ed9 dpdk \u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5177\u4f53\u7684\u6d4b\u8bd5\u65b9\u6cd5\u89c1\u4e0b\u6587\u3002\\n\\n## \u786c\u4ef6\u8fde\u63a5\\n\u4e24\u4e2a\u7f51\u5361\u7684\u7aef\u53e3\u8fde\u63a5\u5230\u4e00\u8d77\u3002\\n## \u8f6f\u4ef6\u914d\u7f6e\\n\u4e00\u4e2a\u53e3\u7ed1\u5b9a\u5230\u5185\u6838\u9a71\u52a8\uff0c\u4e00\u4e2a\u53e3\u7ed1\u5b9a igb_uio \u9a71\u52a8\u3002\u7ed1\u5b9a\u5230 igb_uio \u7684\u7f51\u5361\u7aef\u53e3\uff0c\u4f7f\u7528 l2fwd \u7a0b\u5e8f\u6765\u6536\u53d1\u5305\u3002\\n## \u901a\u8fc7\u6307\u5b9a\u7684\u7aef\u53e3\u53d1\u5305\\nping \u547d\u4ee4\u7684 -I \u9009\u9879\u652f\u6301\u6307\u5b9a\u6536\u53d1\u5305\u7684 netdev \u7aef\u53e3\u3002\\n\\n\u4f7f\u7528 ping -I eth0 192.234.234.23 \u5c31\u53ef\u4ee5\u4ece eth0 \u53e3\u5c06\u6570\u636e\u5305\u53d1\u9001\u51fa\u53bb\u3002\u8fd9\u91cc\u7684 eth0 \u53e3\u5c31\u662f\u4e0a\u9762\u6211\u4eec\u7ed1\u5b9a\u5230\u5185\u6838\u9a71\u52a8\u4e0a\u9762\u7684\u53e3\u3002\u7531\u4e8e\u786c\u4ef6\u8fde\u63a5\u5230\u4e86\u4e00\u8d77\uff0cl2fwd \u76d1\u63a7\u7684\u7aef\u53e3\u4f1a\u6536\u5230\u5305\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u6d4b\u8bd5\u4e86\u3002"},{"id":"/dpdk/ethtool \u8bfb\u5230\u7684\u72b6\u6001\u4e0e dpdk \u8bfb\u5230\u7684\u7f51\u5361\u72b6\u6001\u4e0d\u4e00\u81f4","metadata":{"permalink":"/longyu.github.io/blog/dpdk/ethtool \u8bfb\u5230\u7684\u72b6\u6001\u4e0e dpdk \u8bfb\u5230\u7684\u7f51\u5361\u72b6\u6001\u4e0d\u4e00\u81f4","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/ethtool \u8bfb\u5230\u7684\u72b6\u6001\u4e0e dpdk \u8bfb\u5230\u7684\u7f51\u5361\u72b6\u6001\u4e0d\u4e00\u81f4.md","source":"@site/blog/dpdk/ethtool \u8bfb\u5230\u7684\u72b6\u6001\u4e0e dpdk \u8bfb\u5230\u7684\u7f51\u5361\u72b6\u6001\u4e0d\u4e00\u81f4.md","title":"dpdk/ethtool \u8bfb\u5230\u7684\u72b6\u6001\u4e0e dpdk \u8bfb\u5230\u7684\u7f51\u5361\u72b6\u6001\u4e0d\u4e00\u81f4","description":"ethtool \u8bfb\u5230\u7684\u94fe\u63a5\u72b6\u6001","date":"2022-06-19T07:40:00.000Z","formattedDate":"2022\u5e746\u670819\u65e5","tags":[],"readingTime":10.775,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/dpdk\u6536\u53d1\u5305\u6d4b\u8bd5\u4e4b\u4f7f\u7528\u5185\u6838\u63a5\u53e3\u7ed9dpdk\u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305","permalink":"/longyu.github.io/blog/dpdk/dpdk\u6536\u53d1\u5305\u6d4b\u8bd5\u4e4b\u4f7f\u7528\u5185\u6838\u63a5\u53e3\u7ed9dpdk\u7ed1\u5b9a\u7684\u7aef\u53e3\u53d1\u5305"},"nextItem":{"title":"dpdk/\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\u8fc7\u7a0b","permalink":"/longyu.github.io/blog/dpdk/\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\u8fc7\u7a0b"}},"content":"## ethtool \u8bfb\u5230\u7684\u94fe\u63a5\u72b6\u6001\\n\\n\u4f7f\u7528 ethtool \u8bfb\u53d6\u7f51\u5361\u94fe\u63a5\u72b6\u6001\u7684\u4e00\u4e2a\u793a\u4f8b\u5982\u4e0b\uff1a\\n```\\nlongyu@longyu-pc:~$ sudo /sbin/ethtool ens37 \\n[sudo] password for longyu: \\nSettings for ens37:\\n\\tSupported ports: [ TP ]\\n\\tSupported link modes:   10baseT/Half 10baseT/Full \\n\\t                        100baseT/Half 100baseT/Full \\n\\t                        1000baseT/Full \\n\\tSupported pause frame use: No\\n\\tSupports auto-negotiation: Yes\\n\\tSupported FEC modes: Not reported\\n\\tAdvertised link modes:  10baseT/Half 10baseT/Full \\n\\t                        100baseT/Half 100baseT/Full \\n\\t                        1000baseT/Full \\n\\t......                       \\n\\tLink detected: yes\\n```\\n\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6700\u540e\u4e00\u884c\u4e2d\u7684 Link detected \u8868\u793a\u94fe\u8def\u7684\u72b6\u6001\uff0c\u4e3a yes \u8868\u793a\u94fe\u8def up\uff0c\u4e3a no \u8868\u793a\u94fe\u8def down\u3002\u76ee\u524d\u94fe\u8def\u4e3a up \u72b6\u6001\u3002\u540c\u65f6\u4e0a\u9762\u7684\u8f93\u51fa\u4e2d\u4e5f\u8868\u660e\u6b64\u7f51\u5361\u652f\u6301\u81ea\u52a8\u534f\u5546\u3002\\n\\n**\u81ea\u52a8\u534f\u5546\u7528\u4e8e\u7f51\u5361\u7aef\u53e3\u4e0e\u5bf9\u7aef\u534f\u5546\u8fde\u63a5\u901f\u5ea6\u548c\u53cc\u5de5\u6a21\u5f0f\uff0c\u901a\u8fc7\u534f\u5546\u786e\u5b9a\u4e24\u7aef\u80fd\u591f\u8fbe\u5230\u7684\u6700\u5927\u8fde\u63a5\u901f\u5ea6\u4e0e\u4e24\u7aef\u90fd\u652f\u6301\u7684\u53cc\u5de5\u6a21\u5f0f\uff0c\u4e3b\u8981\u4e0e phy \u6709\u5173\u3002**\\n\\n\u901a\u8fc7\u641c\u7d22\uff0c\u6211\u53d1\u73b0\u4e86\u5982\u4e0b\u94fe\u63a5\uff1a\\n\\n[\u4ee5\u592a\u7f51\u81ea\u52a8\u534f\u5546\u7684\u539f\u7406](https://blog.csdn.net/skyflying2012/article/details/17557743)\\n \\n \u4e0b\u9762\u7684\u4fe1\u606f\u6765\u4e8e [\u4ee5\u592a\u7f51\u81ea\u52a8\u534f\u5546\u7684\u539f\u7406](https://blog.csdn.net/skyflying2012/article/details/17557743) \u8fd9\u7bc7\u535a\u5ba2\u3002\\n\\n> \u5343\u5146\u5149\u53e3\u81ea\u534f\u5546\u8fc7\u7a0b:\\n> \\n> 1.\u4e24\u7aef\u90fd\u8bbe\u7f6e\u4e3a\u81ea\u534f\u5546\u6a21\u5f0f\\n> \\n> \u53cc\u65b9\u4e92\u76f8\u53d1\u9001/C/\u7801\u6d41\uff0c\u5982\u679c\u8fde\u7eed\u63a5\u6536\u52303\u4e2a\u76f8\u540c\u7684/C/\u7801\u4e14\u63a5\u6536\u5230\u7684\u7801\u6d41\u548c\u672c\u7aef\u5de5\u4f5c\u65b9\u5f0f\u76f8\u5339\u914d\uff0c\u5219\u8fd4\u56de\u7ed9\u5bf9\u65b9\u4e00\u4e2a\u5e26\u6709Ack\u5e94\u7b54\u7684/C/\u7801\uff0c\u5bf9\u7aef\u63a5\u6536\u5230Ack\u4fe1\u606f\u540e\uff0c\u8ba4\u4e3a\u4e24\u8005\u53ef\u4ee5\u4e92\u901a\uff0c\u8bbe\u7f6e\u7aef\u53e3\u4e3aUP\u72b6\u6001\\n> \\n> 2.\u4e00\u7aef\u8bbe\u7f6e\u4e3a\u81ea\u534f\u5546\uff0c\u4e00\u7aef\u8bbe\u7f6e\u4e3a\u5f3a\u5236\\n> \\n> \u81ea\u534f\u5546\u7aef\u53d1\u9001/C/\u7801\u6d41\uff0c\u5f3a\u5236\u7aef\u53d1\u9001/I/\u7801\u6d41\uff0c\u5f3a\u5236\u7aef\u65e0\u6cd5\u7ed9\u5bf9\u7aef\u63d0\u4f9b\u672c\u7aef\u7684\u534f\u5546\u4fe1\u606f\uff0c\u4e5f\u65e0\u6cd5\u7ed9\u5bf9\u7aef\u8fd4\u56deAck\u5e94\u7b54\uff0c\u6545\u81ea\u534f\u5546\u7aefDOWN\u3002\u4f46\u662f\u5f3a\u5236\u7aef\u672c\u8eab\u53ef\u4ee5\u8bc6\u522b/C/\u7801\uff0c\u8ba4\u4e3a\u5bf9\u7aef\u662f\u4e0e\u81ea\u5df1\u76f8\u5339\u914d\u7684\u7aef\u53e3\uff0c\u6240\u4ee5\u76f4\u63a5\u8bbe\u7f6e\u672c\u7aef\u7aef\u53e3\u4e3aUP\u72b6\u6001\\n> \\n> 3.\u4e24\u7aef\u5747\u8bbe\u7f6e\u4e3a\u5f3a\u5236\u6a21\u5f0f\\n> \\n> \u53cc\u65b9\u4e92\u76f8\u53d1\u9001/I/\u7801\u6d41\uff0c\u4e00\u7aef\u63a5\u6536\u5230/I/\u7801\u6d41\u540e\uff0c\u8ba4\u4e3a\u5bf9\u7aef\u662f\u4e0e\u81ea\u5df1\u76f8\u5339\u914d\u7684\u7aef\u53e3\uff0c\u76f4\u63a5\u8bbe\u7f6e\u672c\u7aef\u7aef\u53e3\u4e3aUP\u72b6\u6001\\n> \\n\u9605\u8bfb\u4e0a\u9762\u7684\u4fe1\u606f\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53**\u4e24\u7aef\u90fd\u8bbe\u7f6e\u4e3a\u81ea\u534f\u5546\u6a21\u5f0f\u65f6\uff0c\u81ea\u534f\u5546\u6210\u529f\u540e\u4e24\u7aef\u7684\u7aef\u53e3\u72b6\u6001\u90fd\u4e3a UP**\uff1b**\u5f53\u4e00\u7aef\u8bbe\u7f6e\u81ea\u534f\u5546\uff0c\u4e00\u7aef\u8bbe\u7f6e\u5f3a\u5236\u65f6\uff0c\u81ea\u534f\u5546\u65f6\u8bbe\u7f6e\u81ea\u534f\u5546\u6a21\u5f0f\u7684\u7aef\u53e3\u72b6\u6001\u4f1a\u53d8\u4e3a DOWN\uff0c\u8bbe\u7f6e\u5f3a\u5236\u7aef\u7684\u7aef\u53e3\u72b6\u6001\u4f1a\u53d8\u4e3a UP\uff1b\u5f53\u4e24\u7aef\u5747\u8bbe\u7f6e\u4e3a\u5f3a\u5236\u6a21\u5f0f\u65f6\uff0c\u8fdb\u884c\u81ea\u534f\u5546\u4f1a\u4f7f\u4e24\u7aef\u7aef\u53e3\u90fd\u53d8\u4e3a UP \u72b6\u6001\u3002**\\n\\n## \u5bf9\u7aef\u53e3\u6267\u884c\u81ea\u534f\u5546\\n\u6709\u4e86\u8fd9\u4e2a\u57fa\u7840\u6211\u4eec\u6765\u8fdb\u884c\u4e0b\u9762\u7684\u64cd\u4f5c\uff0c\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u7f51\u5361\u578b\u53f7\u5982\u4e0b\uff1a\\n\\n```\\n02:05.0 Ethernet controller: Intel Corporation 82545EM Gigabit Ethernet Controller (Copper) (rev 01)\\n```\\n\u8fd9\u6b3e\u7f51\u5361\u5728\u6211\u7684\u7cfb\u7edf\u4e2d\u5bf9\u5e94\u7684 netdev \u63a5\u53e3\u7684\u540d\u5b57\u4e3a ens37\u3002\\n\\n**1. \u6267\u884c sudo ifconfig ens37 down \u547d\u4ee4\u5c06\u7f51\u5361\u8bbe\u5b9a\u4e3a down** \\n\\n**ethotool \u67e5\u770b\u94fe\u8def\u72b6\u6001\uff0c\u8f93\u51fa\u4fe1\u606f\u622a\u53d6\u5982\u4e0b\uff1a**\\n\\n```bash\\nlongyu@longyu-pc:~$ sudo ethtool ens37 \\n[sudo] password for longyu: \\nSettings for ens37:\\n\\tSupported ports: [ TP ]\\n\\tSupported link modes:   10baseT/Half 10baseT/Full \\n\\t                        100baseT/Half 100baseT/Full \\n\\t                        1000baseT/Full \\n\\tSupported pause frame use: No\\n\\tSupports auto-negotiation: Yes\\n\\t.........\\n\\tLink detected: no\\n```\\nLink detected \u4e3a no \u8868\u793a\u94fe\u8def\u4e3a down \u72b6\u6001\u3002\\n\\n**ethtool dump \u5bc4\u5b58\u5668\u4fe1\u606f\uff0c\u6709\u5982\u4e0b\u4e0e\u94fe\u8def\u72b6\u6001\u76f8\u5173\u7684\u4fe1\u606f\uff1a**\\n\\n```bash\\nlongyu@longyu-pc:~$ sudo ethtool -d ens37  | grep -i \'Link\'\\n      Link reset:                        reset\\n      Set link up:                       1\\n      Link up:                           link config\\n      Link speed:                        1000Mb/s\\n      Link State:                        Down\\n      Force Link Good:                   disabled\\n```\\n\u6b64\u65f6 Link State \u4e3a Down \u4e0e\u4e0a\u9762\u7684 Link detected : no \u4e00\u81f4\u3002\\n\\n**2. \u6267\u884c sudo ethtool -s ens37 autoneg on \u8fdb\u884c\u81ea\u534f\u5546** \\n\\n**ethtool \u67e5\u770b\u94fe\u8def\u72b6\u6001\uff0c\u622a\u53d6\u4e3b\u8981\u4fe1\u606f\u5982\u4e0b\uff1a**\\n\\n```bash\\nlongyu@longyu-pc:~$ sudo ethtool ens37\\nSettings for ens37:\\n\\tSupported ports: [ TP ]\\n\\tSupported link modes:   10baseT/Half 10baseT/Full \\n\\t                        100baseT/Half 100baseT/Full \\n\\t                        1000baseT/Full \\n\\tSupported pause frame use: No\\n\\tSupports auto-negotiation: Yes\\n\\t......\\n\\tLink detected: no\\n```\\nLink detected: no \u8868\u793a\u94fe\u8def\u4e3a down \u7684\u72b6\u6001\u3002\\n\\n**ethtool -d \u67e5\u770b\u5bc4\u5b58\u5668\u4fe1\u606f\uff0c\u76f8\u5173\u5185\u5bb9\u5982\u4e0b\uff1a**\\n\\n```bash\\nlongyu@longyu-pc:~$ sudo ethtool -d ens37  | grep -i \'Link\'\\n      Link reset:                        reset\\n      Set link up:                       1\\n      Link up:                           link config\\n      Link speed:                        1000Mb/s\\n      Link State:                        Up\\n      Force Link Good:                   disabled\\n```\\n\\n\u6ce8\u610f\u8fd9\u91cc Link State \u72b6\u6001\u53d8\u4e3a UP\uff0c\u8fd9\u8868\u660e\u81ea\u534f\u5546\u6210\u529f\u3002\u6839\u636e\u4e0a\u6587\u4e2d\u5f15\u7528\u7684\u5343\u5146\u5149\u53e3\u81ea\u534f\u5546\u7684\u8fc7\u7a0b\uff0c\u540c\u65f6\u6ce8\u610f\u5230\u6211\u4eec\u7684\u7f51\u5361\u652f\u6301\u81ea\u534f\u5546\uff0c\u6211\u4eec\u7528 ethtool -s \u547d\u4ee4\u6253\u5f00\u7f51\u5361\u7684\u81ea\u534f\u5546\u529f\u80fd\uff0c\u8fd9\u4e4b\u540e phy \u7684\u72b6\u6001\u53d8\u4e3a UP \u8868\u660e\u81ea\u534f\u5546\u6210\u529f\uff0c\u8fd9\u4e0e\u5343\u5146\u5149\u53e3\u81ea\u534f\u5546\u8fc7\u7a0b\u7684\u7b2c\u4e00\u79cd\u7c7b\u578b\u4e00\u81f4\uff0c\u4e24\u7aef\u90fd\u652f\u6301\u5e76\u5f00\u542f\u4e86\u81ea\u534f\u5546\uff0c\u534f\u5546\u6210\u529f\u540e\u4e24\u7aef\u7684 phy \u72b6\u6001\u90fd\u53d8\u4e3a\u4e86 UP\u3002\\n\\n\u8fd9\u65f6\u5019 ethtool \u76f4\u63a5\u67e5\u770b\u7f51\u5361\uff0cLink detected \u663e\u793a\u4e3a no \u8868\u660e\u94fe\u8def\u72b6\u6001\u4e3a down\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u662f UP \u5462\uff1f\\n\\n\u8fd9\u91cc phy \u7684\u72b6\u6001\u7531 DOWN \u53d8\u4e3a UP \u8fd9\u662f\u81ea\u534f\u5546\u6210\u529f\u7684\u7ed3\u679c\u3002\u8fd9\u4e2a\u662f\u53ef\u4ee5\u89e3\u91ca\u7684\u3002\u81ea\u534f\u5546\u7684\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u786e\u5b9a\u8fde\u63a5\u901f\u5ea6\u3001\u53cc\u5de5\u6a21\u5f0f\u8fd9\u4e9b\u914d\u7f6e\uff0c\u800c\u8fd9\u4e9b\u914d\u7f6e\u90fd\u662f\u8981\u5728 phy up \u7684\u72b6\u6001\u4e0b\u624d\u6709\u4f5c\u7528\u3002\\n\\n\u8fd9\u65f6\u5019\u76f4\u63a5\u4f7f\u7528 ifconfig \u67e5\u770b\u7f51\u5361\u4fe1\u606f\uff0c\u8f93\u51fa\u5982\u4e0b\uff1a\\n\\n```bash\\nlongyu@longyu-pc:~$ sudo ifconfig ens37 \\nens37: flags=4098<BROADCAST,MULTICAST>  mtu 1500\\n        ether 00:0c:29:5e:ba:35  txqueuelen 1000  (Ethernet)\\n        RX packets 1154  bytes 672588 (656.8 KiB)\\n        RX errors 0  dropped 0  overruns 0  frame 0\\n        TX packets 136  bytes 16616 (16.2 KiB)\\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\\n```\\n\\n\u4e0a\u9762\u7684\u8f93\u51fa\u8868\u660e\u7f51\u5361\u7684\u94fe\u8def\u72b6\u6001\u4e3a down\uff0c\u8fd9\u4e0e ethtool \u547d\u4ee4\u67e5\u770b\u5230\u7684\u7f51\u5361\u72b6\u6001\u4e3a no \u662f\u4e00\u81f4\u7684\u3002\\n\\n## ethtool: Link detected: no \u662f\u600e\u6837\u68c0\u6d4b\u7684\uff1f\\n\\n\u8fd9\u91cc\u6211\u4f7f\u7528 ethtool-4.19 \u7684\u6e90\u4ee3\u7801\u8fdb\u884c\u5206\u6790\u3002\\n\\n\u9996\u5148\u662f ethtool \u4e2d\u8bbe\u5b9a ETHTOOL_GLINK \u547d\u4ee4\uff0c\u8c03\u7528 ioctl \u51fd\u6570\u83b7\u53d6\u94fe\u8def\u72b6\u6001\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n\\tedata.cmd = ETHTOOL_GLINK;\\n\\terr = send_ioctl(ctx, &edata);\\n\\tif (err == 0) {\\n\\t\\tfprintf(stdout, \\"\\tLink detected: %s\\\\n\\",\\n\\t\\t\\tedata.data ? \\"yes\\":\\"no\\");\\n\\t\\tallfail = 0;\\n\\t} else if (errno != EOPNOTSUPP) {\\n\\t\\tperror(\\"Cannot get link status\\");\\n\\t}\\nedata.cmd \u4e2d\u586b\u5145\u7684\u662f ethtool \u4e2d\u7684\u5b50\u547d\u4ee4\uff0c\u5c5e\u4e8e SIOCETHTOOL \u4e0b\u9762\u7684\u5b50\u547d\u4ee4\u3002send_ioctol \u51fd\u6570\u7684\u6e90\u7801\u5982\u4e0b\uff1a\\n\\n\u6ce8\u610f\u8fd9\u91cc\u7684\u5b50\u547d\u4ee4\u901a\u8fc7 ctx->ifr \u6765\u4f20\u9012\u7ed9 ioctl\u3002\\n\\n```c\\nint send_ioctl(struct cmd_context *ctx, void *cmd)\\n{\\n\\tctx->ifr.ifr_data = cmd;\\n\\treturn ioctl(ctx->fd, SIOCETHTOOL, &ctx->ifr);\\n}\\n```\\n\\n\\n\u8fd9\u4e4b\u540e ioctl \u4f1a\u8fdb\u884c\u5206\u53d1\uff0c\u7531 ioctl \u5230 sock_ioctl \u5230 dev_ioctl \u5230 dev_ethtool \u9002\u914d\u5c42\u3002dev_ethtool \u9002\u914d\u5c42\u76f8\u5173\u51fd\u6570\u5728\u5185\u6838\u8def\u5f84\u4e0b\u7684 net/core/ethtool.c \u6587\u4ef6\u4e2d\u3002\\n\\ndev_ethtool \u51fd\u6570\u662f\u4e00\u4e2a\u5927\u7684\u5206\u53d1\u51fd\u6570\uff0c\u901a\u8fc7 switch \u6765\u5c06\u4e0d\u540c\u7684 ethtool \u5b50\u547d\u4ee4\u5206\u53d1\u5230\u4e0d\u540c\u7684\u5b50\u51fd\u6570\u8c03\u7528\u4e4b\u4e0a\u3002\u5b50\u51fd\u6570\u91cc\u9762\u7684\u6838\u5fc3\u903b\u8f91\u5728\u4e8e\u8c03\u7528\u7f51\u5361\u5185\u6838\u63a5\u53e3 net_device \u4e2d\u6ce8\u518c\u7684 ethtool_ops \u865a\u51fd\u6570\u8868\u4e2d\u7684\u51fd\u6570\u3002\\n\\n\u4e0a\u9762 Link detected \u4e2d\u4f7f\u7528\u7684 ethtool \u5b50\u547d\u4ee4\u4e3a ETHTOOL_GLINK\uff0c\u5728 dev_ethtool \u51fd\u6570\u4e2d\u88ab\u5206\u53d1\u5230 ethtool_get_link \u5b50\u51fd\u6570\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a \\n\\n```c\\n\\tcase ETHTOOL_GLINK:\\n\\t\\trc = ethtool_get_link(dev, useraddr);\\n\\t\\tbreak;\\n```\\n\\nethtool_get_link \u5b50\u51fd\u6570\u7684\u6838\u5fc3\u5728\u4e8e\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\uff1a\\n\\n```c\\nedata.data = netif_running(dev) && dev->ethtool_ops->get_link(dev);\\n```\\nnetif_running \u51fd\u6570\u5728\u5185\u6838\u5934\u6587\u4ef6\u8def\u5f84 include/linux/netdevice.h \u4e2d\u5b9a\u4e49\uff0c\u5b83\u901a\u8fc7\u68c0\u6d4b netdev \u7ed3\u6784\u4f53\u4e2d state \u53d8\u91cf\u7684 __LINK_STATE_START \u4f4d\u6765\u786e\u5b9a\u63a5\u53e3\u662f\u5426 running\u3002\\n\\n```c\\nstatic inline bool netif_running(const struct net_device *dev)\\n{\\n\\treturn test_bit(__LINK_STATE_START, &dev->state);\\n}\\n```\\n\u4e86\u89e3\u4e86 ethtool_get_link \u5b50\u51fd\u6570\u7684\u90e8\u5206\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0a\u6587\u4e2d\u63d0\u5230\u7684\u5728\u7f51\u5361\u63a5\u53e3 down \u7684\u72b6\u6001\u4e0b\u8fdb\u884c\u81ea\u534f\u5546\u540e\uff0cphy \u7684\u72b6\u6001\u53d8\u4e3a UP\uff0c\u800c ethtool \u8f93\u51fa\u7684 Link detected \u9879\u4e3a no \u7684\u60c5\u51b5\u662f\u6b63\u5e38\u7684\u73b0\u8c61\u3002\\n\\n\u6b64\u65f6 ifconfig \u663e\u793a\u7684\u7f51\u5361\u72b6\u6001\u4e0d\u662f RUNNING\uff0cnetif_running \u5c06\u4f1a\u8fd4\u56de false\uff0c&& \u8bed\u53e5\u4e4b\u540e\u7684\u8bfb\u53d6\u786c\u4ef6\u5bc4\u5b58\u5668\u4e2d\u4fdd\u5b58\u7684\u94fe\u8def\u72b6\u6001\u7684\u64cd\u4f5c\u5c06\u88ab\u5ffd\u7565\uff0cedata.data \u5c06\u4f1a\u8fd4\u56de false\uff0c\u5bf9\u5e94 ethtool \u4e2d Link detected \u9879\u7684\u8f93\u51fa\u4e3a no\u3002\\n\\n## dev->ethtool_ops->get_link(dev) vs rte_eth_link_get \\n```dev->ethtool_ops->get_link(dev)```\u6700\u7ec8\u662f\u901a\u8fc7\u8bbf\u95ee\u7f51\u5361\u4e2d\u7684\u5bc4\u5b58\u5668\u6765\u83b7\u53d6\u94fe\u8def\u72b6\u6001\u3002\\n\\n\\n\\ndpdk \u4e2d\u7684 rte_eth_link_get \u51fd\u6570\u6839\u636e lsc \u4e2d\u65ad\u662f\u5426\u5f00\u542f\uff0c\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5904\u7406\u65b9\u5f0f\u3002\\n\\n1. lsc \u4e2d\u65ad\u4f7f\u80fd\\n\\n\\t\u539f\u5b50\u8bfb\u53d6 dev \u7ed3\u6784\u4f53\u4e2d\u7684 eth_link \u6210\u5458\u3002\u8fd9\u4e2a\u6210\u5458\u53ea\u80fd\u5728 interrupt host \u7ebf\u7a0b\u4e2d\u88ab\u66f4\u65b0\u3002\u7528\u6237\u6ce8\u518c\u7684 lsc \u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u4e5f\u662f\u5728 interrupt host \u7ebf\u7a0b\u4e2d\u88ab\u8c03\u7528\u7684\uff0c\u53ef\u4ee5\u5728 lsc \u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u4e2d\u6539\u53d8 eth_link \u7684\u503c\u3002\\n\\n2. lsc \u4e2d\u65ad\u5173\u95ed\\n\\t\u8c03\u7528 dev_ops \u4e2d\u5b9e\u73b0\u7684 link_update \u51fd\u6570\uff0c\u8be5\u51fd\u6570\u901a\u8fc7\u76f4\u63a5\u8bbf\u95ee\u7f51\u5361\u5bc4\u5b58\u5668\u6765\u83b7\u53d6\u94fe\u8def\u7684\u6700\u65b0\u72b6\u6001\u3002\\n\\n\\n\u5728 lsc \u4e2d\u65ad\u5173\u95ed\u7684\u60c5\u51b5\u4e0b\uff0crte_eth_link_get \u4e0e dev->ethtool-ops->get_link(dev) \u6700\u7ec8\u90fd\u662f\u901a\u8fc7\u8bbf\u95ee\u7f51\u5361\u5bc4\u5b58\u5668\u6765\u786e\u5b9a\u94fe\u8def\u72b6\u6001\u7684\u3002\\n\\n\u81f3\u4e8e\u8bf4 ethtool \u8bfb\u5230\u7684\u72b6\u6001\u4e0e dpdk \u8bfb\u5230\u7684\u7f51\u5361\u72b6\u6001\u4e0d\u4e00\u81f4\uff0c\u8fd9\u662f\u6307 ethtool \u4e2d\u7684 Link detected \u4e2d\u68c0\u6d4b\u5230\u7684\u94fe\u8def\u72b6\u6001\u4e0e rte_eth_link_get \u51fd\u6570\u7684\u8f93\u51fa\u4e0d\u540c\u3002\\n\\n**\u4ece\u4e0a\u9762\u7684\u5206\u6790\u4e2d\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0cethtool \u4e2d\u7684 Link detected \u8f93\u51fa yes \u7684\u5fc5\u5907\u6761\u4ef6\u8fd8\u6709 netif_running \u8fd4\u56de true\uff0c\u800c rte_eth_link_get \u5374\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e2a\u72b6\u6001\uff0c\u8fd9\u4e24\u8005\u4ece\u903b\u8f91\u4e0a\u6765\u8bf4\u4e5f\u4e0d\u662f\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u4f1a\u4e00\u81f4\u7684\u3002**\\n\\n**\u7efc\u4e0a\u6240\u8ff0\uff0c\u8fd9\u4e2a\u95ee\u9898\u5176\u5b9e\u4e0d\u662f\u529f\u80fd\u7684\u95ee\u9898\uff0c\u800c\u662f\u4e0d\u4e86\u89e3\u529f\u80fd\u7684\u5b9e\u73b0\u800c\u8bef\u5224\u7684\u95ee\u9898\u3002**"},{"id":"/dpdk/\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\u8fc7\u7a0b","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\u8fc7\u7a0b","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\u8fc7\u7a0b.md","source":"@site/blog/dpdk/\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\u8fc7\u7a0b.md","title":"dpdk/\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\u8fc7\u7a0b","description":"\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u8fdb\u884c\u6d4b\u8bd5","date":"2022-06-19T07:40:00.000Z","formattedDate":"2022\u5e746\u670819\u65e5","tags":[],"readingTime":6.275,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/ethtool \u8bfb\u5230\u7684\u72b6\u6001\u4e0e dpdk \u8bfb\u5230\u7684\u7f51\u5361\u72b6\u6001\u4e0d\u4e00\u81f4","permalink":"/longyu.github.io/blog/dpdk/ethtool \u8bfb\u5230\u7684\u72b6\u6001\u4e0e dpdk \u8bfb\u5230\u7684\u7f51\u5361\u72b6\u6001\u4e0d\u4e00\u81f4"},"nextItem":{"title":"dpdk/\u8bb0\u5f55\u4e00\u6b21\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\u5bfc\u81f4 dpdk \u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/\u8bb0\u5f55\u4e00\u6b21\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\u5bfc\u81f4 dpdk \u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u7684\u95ee\u9898"}},"content":"## \u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u8fdb\u884c\u6d4b\u8bd5\\n\\n\u5bf9\u4e8e\u7f51\u5361\u7684\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\uff0c\u5e38\u5e38\u9700\u8981\u4f7f\u7528\u5b98\u65b9\u9a71\u52a8\u8fdb\u884c\u76f8\u540c\u7684\u6d4b\u8bd5\u4ee5\u786e\u8ba4\u95ee\u9898\u3002\\n\u672c\u6587\u53d9\u8ff0\u4e86\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u8fdb\u884c\u6d4b\u8bd5\u7684\u8fc7\u7a0b\u3002\\n\\n## \u7f51\u5361\u89e3\u7ed1\u5b9a\\n\\n### 1. lsof /dev/uio* \u627e\u5230\u4f7f\u7528 /dev/uioX \u8bbe\u5907\u6587\u4ef6\u7684\u4ea7\u54c1\u7a0b\u5e8f\u3002\\n\\n```\\n[root]# lsof /dev/uio*\\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF  NODE NAME\\nl2fwd     21178 root   30u   CHR  248,1      0t0 28807 /dev/uio1\\nl2fwd     21178 root   32u   CHR  248,0      0t0 28805 /dev/uio0\\nl2fwd     21178 root   34u   CHR  248,3      0t0 25875 /dev/uio3\\n........\\n```\\n\\n\u4ece\u4e0a\u9762\u7684\u8f93\u51fa\u91cc\u9762\u53ef\u4ee5\u786e\u8ba4\uff0c\u4ea7\u54c1\u7684 server \u4e3a l2fwd \u7a0b\u5e8f\uff0c\u8fd9\u4e2a l2fwd \u7a0b\u5e8f\u4f7f\u7528\u4e86\\n\u8bbe\u5907\u6587\u4ef6 /dev/uioX\u3002\\n\\n\u6211\u4eec\u9996\u5148\u9700\u8981 kill \u4ea7\u54c1\u7684 server \uff0c\u786e\u4fdd\u5728\u6ca1\u4eba\u4f7f\u7528\u7684\u60c5\u51b5\u4e0b\u89e3\u7ed1\u5b9a\u7f51\u5361\u3002\u4e3a\u4e86\u9632\u6b62 \\nkill \u7a0b\u5e8f\u540e\u5b88\u62a4\u7a0b\u5e8f\u5c06 server \u91cd\u65b0\u62c9\u8d77\u6765\uff0c**\u53ef\u4ee5\u5c06 server \u91cd\u547d\u540d\uff0c\u7136\u540e kill server\u3002**\\n\\n### 2. \u7f51\u5361\u4ece igb_uio \u9a71\u52a8\u89e3\u7ed1\\n\\n\u9996\u5148\u9700\u8981\u786e\u5b9a\u9700\u8981\u89e3\u7ed1\u5b9a\u7f51\u5361\u7684 pci \u53f7\u3002\u4e00\u822c\u53ef\u4ee5\u901a\u8fc7 lspci \u547d\u4ee4\u6765\u67e5\u8be2\u3002\\n\\n\u67d0\u8bbe\u5907\u4e0a X710 \u7f51\u5361\u7684 pci \u53f7\u76f8\u5173\u4fe1\u606f\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```\\n[root]# lspci |grep \'Eth\'\\n0f:00.0 Ethernet controller: Intel Corporation Ethernet Controller X710 for 10GbE backplane (rev 02)\\n0f:00.1 Ethernet controller: Intel Corporation Ethernet Controller X710 for 10GbE backplane (rev 02)\\n```\\n\\n\u4e0a\u9762 0f:00.0 \u4e0e 0f:00.1 \u5c31\u662f X710 \u7f51\u5361\u7684 pci \u53f7\u3002\\n\\n\u89e3\u7ed1\u5b9a\u9700\u8981\u4f7f\u7528 dpdk_nic_bind.py \u811a\u672c\u6765\u5b8c\u6210\uff0c\u4e0d\u540c\u7684\u4ea7\u54c1\u8fd9\u4e2a\u811a\u672c\u7684\u4f4d\u7f6e\u53ef\u80fd\u4e0d\u540c\uff0c\u8fd9\u70b9\u9700\u8981\u6ce8\u610f\u3002\\n\\n\u89e3\u7ed1\u5b9a\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```\\n[root]# /usr/local/bin/dpdk_nic_bind.py -u 0f:00.0 0f:00.1\\n```\\n\\n\u5728\u4e0a\u9762\u7684\u547d\u4ee4\u884c\u4e2d\uff0c-u \u8868\u793a\u89e3\u9664\u7ed1\u5b9a\uff0c0f:00.0 \u4e0e 0f:00.1 \u8868\u793a\u8981\u89e3\u9664\u7ed1\u5b9a\u7684\u7f51\u53e3\u3002\u6267\u884c\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u6267\u884c\\n\\ndpdk_nic_bind.py -s \u547d\u4ee4\u67e5\u770b\u7ed1\u5b9a\u4fe1\u606f\uff0c\u786e\u8ba4\u662f\u5426\u6210\u529f\u89e3\u7ed1\u3002\\n\\n\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```\\n[root]# /usr/local/bin/dpdk_nic_bind.py -s\\n............\\nOther network devices\\n=====================\\n0000:0f:00.0 \'Ethernet Controller X710 for 10GbE backplane\' unused=igb_uio,uio_pci_generic\\n0000:0f:00.1 \'Ethernet Controller X710 for 10GbE backplane\' unused=igb_uio,uio_pci_generic\\n\\n```\\n\\n\u4ece\u4e0a\u9762\u7684\u8f93\u51fa\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c0000:0f:00.0 \u4e0e 0000:0f:00.1 \u7f51\u5361\u63a5\u53e3\u5df2\u7ecf\u89e3\u9664\u4e86\u7ed1\u5b9a\uff0c\u6ca1\u6709\u7ed1\u5b9a\u5230\\n\u4efb\u4f55\u9a71\u52a8\u4e0a\u9762\u3002\\n\\n## \u52a0\u8f7d\u7f51\u5361\u7684\u5b98\u65b9\u9a71\u52a8 ko \u65f6\u81ea\u52a8\u8bc6\u522b\u5e76\u7ed1\u5b9a\\n\\n\u5f53\u6211\u4eec\u5c06\u7f51\u5361\u4ece igb_uio \u9a71\u52a8\u4e0a\u9762\u89e3\u7ed1\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u52a0\u8f7d\u7f51\u5361\u4f7f\u7528\u7684\u5b98\u65b9\u9a71\u52a8\u4e86\u3002\u8fd9\u91cc\u7684\u5b98\u65b9\u9a71\u52a8\\n\u4e00\u822c\u7cfb\u7edf\u4e0a\u4f1a\u5e26\u6709\uff08\u4e00\u822c\u653e\u5728 /bin \u76ee\u5f55\u4e0b\uff09\uff0c\u6ca1\u6709\u7684\u8bdd\u5c31\u9700\u8981\u81ea\u5df1\u7f16\u8bd1\u540e\u4e0a\u4f20\u5230\u8bbe\u5907\u4e0a\u6765\u52a0\u8f7d\u4e86\u3002\\n\\n\u4e0a\u9762\u7684\u793a\u4f8b\u64cd\u4f5c\u4e2d\uff0c\u7f51\u5361\u5df2\u7ecf\u89e3\u9664 igb_uio \u7684\u7ed1\u5b9a\u3002\u8fd9\u6837\u5f53\u6211\u4eec\u5728\u52a0\u8f7d\u5b98\u65b9\u9a71\u52a8\u7684\u65f6\u5019\uff0c\u5185\u6838\u4f1a\u81ea\\n\u52a8\u8bc6\u522b\u5230\u7f51\u5361\uff0c\u5e76\u6267\u884c\u5bf9\u5e94\u7684 probe \u64cd\u4f5c\u3002\\n\\nX710 \u7f51\u5361\u4f7f\u7528\u7684\u5b98\u65b9\u9a71\u52a8\u662f intel \u7684 i40e \u9a71\u52a8\uff0c\u52a0\u8f7d i40e \u9a71\u52a8\u7684\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```\\n[root]# insmod /bin/i40e.ko \\n[root]# dmesg | tail -n 20\\n[79357.260739] i40e: Intel(R) Ethernet Connection XL710 Network Driver - version 1.4.25-k\\n[79357.260746] i40e: Copyright (c) 2013 - 2014 Intel Corporation.\\n[79357.279249] i40e 0000:0f:00.0: fw 6.1.49420 api 1.7 nvm 6.80 0x80003cf0 0.0.0\\n[79357.279258] i40e 0000:0f:00.0: The driver for the device detected a newer version of the NVM image than expected. Please install the most recent version of the network driver.\\n[79357.365299] i40e 0000:0f:00.0: MAC address: 98:30:00:1e:42:20\\n[79357.369576] i40e 0000:0f:00.0: SAN MAC: 00:00:00:00:02:00\\n[79357.432223] i40e 0000:0f:00.0 enp15s0f0: renamed from eth2\\n[79357.496835] i40e 0000:0f:00.0: PCI-Express: Speed 8.0GT/s Width x8\\n[79357.502928] i40e 0000:0f:00.0: Features: PF-id[0] VFs: 64 VSIs: 66 QP: 16 RX: 1BUF RSS FD_ATR FD_SB NTUPLE VxLAN PTP VEPA\\n[79357.522602] i40e 0000:0f:00.1: fw 6.1.49420 api 1.7 nvm 6.80 0x80003cf0 0.0.0\\n[79357.522611] i40e 0000:0f:00.1: The driver for the device detected a newer version of the NVM image than expected. Please install the most recent version of the network driver.\\n[79357.610493] i40e 0000:0f:00.1: MAC address: 98:30:00:1e:42:21\\n[79357.614555] i40e 0000:0f:00.1: SAN MAC: 00:00:00:00:02:01\\n[79357.842767] i40e 0000:0f:00.1: PCI-Express: Speed 8.0GT/s Width x8\\n[79357.849279] i40e 0000:0f:00.1: Features: PF-id[1] VFs: 64 VSIs: 66 QP: 16 RX: 1BUF RSS FD_ATR FD_SB NTUPLE VxLAN PTP VEPA\\n[79357.966780] i40e 0000:0f:00.1 enp15s0f1: renamed from eth2\\n```\\n\\n\u4ece\u4e0a\u9762\u7684\u8f93\u51fa\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u52a0\u8f7d\u4e86 i40e.ko \u540e\uff0c0f:00.0 \u4e0e 0f:00.1 \u7f51\u5361\u63a5\u53e3\u88ab\u81ea\u52a8\u8bc6\u522b\u5e76\u7ed1\u5b9a\u5230\\n\u4e86 i40e \u9a71\u52a8\uff0c\u5bf9\u5e94\u7684 netdev \u540d\u79f0\u5206\u522b\u4e3a\uff1aenp15s0f0 \u4e0e enp15s0f1\uff0c\u8fd9\u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u6d4b\u8bd5\\n\u4e86\u3002\\n\\n## \u624b\u52a8\u7ed1\u5b9a\u7f51\u5361\u5230\u5b98\u65b9\u9a71\u52a8\u4e0a\\n\\n\u5982\u679c\u6211\u4eec\u5148\u52a0\u8f7d\u4e86\u7f51\u5361\u7684\u5b98\u65b9\u9a71\u52a8\uff0c\u7136\u540e\u518d\u89e3\u9664 igb_uio \u7684\u7ed1\u5b9a\u5e76\u91cd\u65b0\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u4e0a\u9762\uff0c\u53ef\u4ee5\\n\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u624b\u52a8\u5c06\u7f51\u5361\u63a5\u53e3\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u4e0a\u3002\\n\\n```\\ndpdk_nic_bind.py -b driver_name pcinum\\n```\\n\\ndriver_name \u4e3a\u52a0\u8f7d\u7684\u5b98\u65b9\u9a71\u52a8\u7684\u540d\u79f0\uff0cpcinum \u4e3a\u4ea7\u54c1\u7684 pci \u53f7\uff0c\u591a\u4e2a pcinum \u4e4b\u95f4\u4f7f\u7528\u7a7a\u683c\u5206\u9694\u3002\\n\\n\u4e00\u4e2a\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```\\n[root]# /usr/local/bin/dpdk_nic_bind.py -b i40e 0f:00.0 0f:00.1\\n[root]# /usr/local/bin/dpdk_nic_bind.py -s\\n\xb7\xb7\xb7\xb7\xb7\xb7\xb7\xb7\\nNetwork devices using kernel driver\\n===================================\\n0000:0f:00.0 \'Ethernet Controller X710 for 10GbE backplane\' if=enp15s0f0 drv=i40e unused=igb_uio,uio_pci_generic \\n0000:0f:00.1 \'Ethernet Controller X710 for 10GbE backplane\' if=enp15s0f1 drv=i40e unused=igb_uio,uio_pci_generic \\n```\\n\\n\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u9996\u5148\u901a\u8fc7 dpdk_nic_bind.py -b \u5c06 0f:00.0 \u4e0e 0f:00.1 \u7ed1\u5b9a\u5230 i40e \u5b98\u65b9\u9a71\u52a8\u4e0a\uff0c\u7136\u540e\\n\u6267\u884c dpdk_nic_bind.py -s \u663e\u793a\u5f53\u524d\u7684\u7f51\u5361\u8bbe\u5907\u72b6\u6001\u3002\u4ece\u8f93\u51fa\u53ef\u4ee5\u53d1\u73b0\uff0c0f:00.0 \u4e0e 0f:00.1 \u5df2\u7ecf\u88ab\\n\u7ed1\u5b9a\u5230\u4e86\u5b98\u65b9\u9a71\u52a8\u4e0a\u9762\u3002\\n\\n## \u91cd\u65b0\u7ed1\u5b9a\u5230 igb_uio \u4e2d\u5e76\u6062\u590d\\n\\n\u6d4b\u8bd5\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u9700\u8981\u91cd\u65b0\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u4e0a\uff0c\u6267\u884c dpdk_nic_bind.py -b \u547d\u4ee4\u6765\u5b8c\u6210\u3002\\n\\n\u5982\u679c\u7ed1\u5b9a\u7684\u8fc7\u7a0b\u4e2d\u6709\u5982\u4e0b\u62a5\u8b66\uff0c\u5219\u9700\u8981\u6267\u884c ifconfig netdev down \u547d\u4ee4\u6765\u5c06\u7f51\u5361 down \u6389\uff0c\u518d\u89e3\u9664\\n\u7ed1\u5b9a\u3002\\n\\n```\\n[root]# /usr/local/bin/dpdk_nic_bind.py -b igb_uio 0f:00.0 0f:00.1\\nRouting table indicates that interface 0000:0f:00.0 is active. Not modifying\\n```\\n\\nifconfig down \u6389\u7f51\u5361\u540e\u518d\u91cd\u65b0\u7ed1\u5b9a\u7684\u793a\u4f8b\uff1a\\n\\n```\\n[root]# ifconfig enp15s0f0 down\\n[root]# /usr/local/bin/dpdk_nic_bind.py -b igb_uio 0f:00.0\\n```"},{"id":"/dpdk/\u8bb0\u5f55\u4e00\u6b21\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\u5bfc\u81f4 dpdk \u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u7684\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u8bb0\u5f55\u4e00\u6b21\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\u5bfc\u81f4 dpdk \u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u7684\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u8bb0\u5f55\u4e00\u6b21\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\u5bfc\u81f4 dpdk \u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u7684\u95ee\u9898.md","source":"@site/blog/dpdk/\u8bb0\u5f55\u4e00\u6b21\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\u5bfc\u81f4 dpdk \u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u7684\u95ee\u9898.md","title":"dpdk/\u8bb0\u5f55\u4e00\u6b21\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\u5bfc\u81f4 dpdk \u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u7684\u95ee\u9898","description":"\u7f16\u8bd1 dpdk-20.02 \u65f6\uff0c\u6709\u5982\u4e0b\u62a5\u9519\u4fe1\u606f\uff1a","date":"2022-06-19T07:40:00.000Z","formattedDate":"2022\u5e746\u670819\u65e5","tags":[],"readingTime":1.915,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\u8fc7\u7a0b","permalink":"/longyu.github.io/blog/dpdk/\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230\u5b98\u65b9\u9a71\u52a8\u6d4b\u8bd5\u8fc7\u7a0b"},"nextItem":{"title":"dpdk/\u8bbe\u7f6e EXTRA_CFLAGS \u4ee5\u7f16\u8bd1 debug \u7248\u672c dpdk \u5e93","permalink":"/longyu.github.io/blog/dpdk/\u8bbe\u7f6e EXTRA_CFLAGS \u4ee5\u7f16\u8bd1 debug \u7248\u672c dpdk \u5e93"}},"content":"\u7f16\u8bd1 dpdk-20.02 \u65f6\uff0c\u6709\u5982\u4e0b\u62a5\u9519\u4fe1\u606f\uff1a\\n```\\nerror: \u2018__ATOMIC_RELAXED\u2019 undeclared (first use in this function)\\nerror: \u2018__ATOMIC_ACQUIRE\u2019 undeclared (first use in this function)\\nerror: \u2018__ATOMIC_RELAXED\u2019 undeclared (first use in this function)\\nerror: \u2018__ATOMIC_ACQUIRE\u2019 undeclared (first use in this function)\\n```\\n## \u5206\u6790\u89e3\u51b3\\n### \u5934\u6587\u4ef6\u7684\u95ee\u9898\\n\u6839\u636e\u8fc7\u53bb\u7684\u7ecf\u9a8c\uff0c\u672a\u58f0\u660e\u7684\u7b26\u53f7\u8fd9\u4e2a\u9519\u8bef\u5f88\u5927\u6982\u7387\u662f\u5934\u6587\u4ef6\u7684\u95ee\u9898\u3002\u9996\u5148\u9700\u8981\u786e\u5b9a\u7684\u662f\u7f16\u8bd1\u7684\u6e90\u7801\u4e2d\u662f\u5426\u6709\u76f8\u5173\u7684\u7b26\u53f7\u58f0\u660e\u3002\\n\\n\u4f7f\u7528\u4e0a\u8ff0\u7b26\u53f7\u5728 dpdk-20.02 \u7684\u6e90\u7801\u91cc\u9762\u641c\u7d22\uff0c\u53ea\u53d1\u73b0\u5f88\u591a\u4f7f\u7528\u7684\u5730\u65b9\uff0c\u6ca1\u6709\u53d1\u73b0\u58f0\u660e\u3002\\n\\n\u8fd9\u610f\u5473\u7740\u4e0a\u9762\u627e\u4e0d\u5230\u7684\u7b26\u53f7\u4e0d\u662f dpdk \u5185\u90e8\u5b9a\u4e49\u7684\u7b26\u53f7\uff0c\u90a3\u4e48\u8fd9\u4e9b\u7b26\u53f7\u53ef\u80fd\u662f dpdk \u4f9d\u8d56\u7684\u5916\u90e8\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u7684\u3002\\n\\n### \u5185\u6838\u5934\u6587\u4ef6\u662f\u5426\u58f0\u660e\u8fd9\u4e9b\u7b26\u53f7 \\n\u8003\u8651\u5230 dpdk \u7f16\u8bd1\u7684\u65f6\u5019\u9700\u8981\u6307\u5b9a\u5185\u6838\u6e90\u7801\u8def\u5f84\uff0c\u8fd9\u4e9b\u7b26\u53f7\u53ef\u80fd\u5728\u5185\u6838\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u3002\\n\\n\u4f7f\u7528\u4e0a\u8ff0\u7b26\u53f7\u5728\u5185\u6838\u6e90\u7801\u4e2d\u5168\u5c40\u641c\u7d22\uff0c\u6ca1\u6709\u627e\u5230\u3002\\n\\n### \u5728\u7f51\u4e0a\u641c\u7d22\\n\u641c\u7d22\u4e86\u4e0b\uff0c\u53d1\u73b0\u5982\u4e0b\u94fe\u63a5\u4e2d\u6709\u76f8\u540c\u7684\u95ee\u9898\u6848\u4f8b\uff1a\\n\\n[__ATOMIC_RELAXED undeclared](https://github.com/nim-lang/Nim/issues/2620)\\n\\n\u6d4f\u89c8\u4e0a\u8ff0\u94fe\u63a5\u7f51\u9875\uff0c\u53d1\u73b0\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u662f gcc \u7248\u672c\u8fc7\u4f4e\u5bfc\u81f4\u7684\u3002\u7f51\u9875\u4e2d\u7684\u8ba8\u8bba\u4e2d\u6709\u4e0b\u9762\u8fd9\u4e00\u53e5\uff1a\\n\\n>The atomic builtins referenced in atomic.nim are only available with GCC 4.7+\\n\\n\u6211\u68c0\u67e5\u81ea\u5df1\u7f16\u8bd1\u73af\u5883\u4e0b\u7684 gcc \u7248\u672c\uff0c\u53d1\u73b0\u4f7f\u7528\u7684 gcc \u4e3a 4.5.3 \u7248\u672c\u3002\\n\\n\u8fd9\u4e4b\u540e\u6211\u5728\u53e6\u5916\u4e00\u4e2a\u7f16\u8bd1\u73af\u5883\u4e0a\u91cd\u65b0\u7f16\u8bd1\uff0c\u7f16\u8bd1\u524d\u786e\u8ba4 gcc \u7684\u7248\u672c\u9ad8\u4e8e 4.7\uff0c\u7f16\u8bd1\u6210\u529f\u3002"},{"id":"/dpdk/\u8bbe\u7f6e EXTRA_CFLAGS \u4ee5\u7f16\u8bd1 debug \u7248\u672c dpdk \u5e93","metadata":{"permalink":"/longyu.github.io/blog/dpdk/\u8bbe\u7f6e EXTRA_CFLAGS \u4ee5\u7f16\u8bd1 debug \u7248\u672c dpdk \u5e93","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/\u8bbe\u7f6e EXTRA_CFLAGS \u4ee5\u7f16\u8bd1 debug \u7248\u672c dpdk \u5e93.md","source":"@site/blog/dpdk/\u8bbe\u7f6e EXTRA_CFLAGS \u4ee5\u7f16\u8bd1 debug \u7248\u672c dpdk \u5e93.md","title":"dpdk/\u8bbe\u7f6e EXTRA_CFLAGS \u4ee5\u7f16\u8bd1 debug \u7248\u672c dpdk \u5e93","description":"\u547d\u4ee4\u884c\u6307\u5b9a CFLAGS \u4e0d\u751f\u6548","date":"2022-06-19T07:40:00.000Z","formattedDate":"2022\u5e746\u670819\u65e5","tags":[],"readingTime":4.585,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/\u8bb0\u5f55\u4e00\u6b21\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\u5bfc\u81f4 dpdk \u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u7684\u95ee\u9898","permalink":"/longyu.github.io/blog/dpdk/\u8bb0\u5f55\u4e00\u6b21\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\u5bfc\u81f4 dpdk \u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u7684\u95ee\u9898"},"nextItem":{"title":"libc/\u4f7f\u7528mtrace\u8ddf\u8e2a\u5185\u5b58\u6cc4\u9732\u95ee\u9898","permalink":"/longyu.github.io/blog/libc/\u4f7f\u7528mtrace\u8ddf\u8e2a\u5185\u5b58\u6cc4\u9732\u95ee\u9898"}},"content":"## \u547d\u4ee4\u884c\u6307\u5b9a CFLAGS \u4e0d\u751f\u6548\\ndpdk \u7684 Makefile \u4e2d\u6709\u5bf9 CFLAGS \u7684\u8bbe\u5b9a\uff0c\u5728\u5f88\u591a Makefile \u5355\u72ec\u8bbe\u5b9a\u4e86 CFLAGS \u589e\u52a0 -O3 \u53c2\u6570\u3002\\n\\n\u4e0b\u9762\u662f dpdk-17.05 \u4e2d\u4e00\u4e9b Makefile \u5728 CFLAGS \u6807\u5fd7\u4e2d\u589e\u52a0 -O3 \u9009\u9879\u7684\u8bed\u53e5\u3002\\n\\n```\\n.......\\n./lib/librte_reorder/Makefile:37:CFLAGS += -O3\\n./drivers/net/fm10k/Makefile:39:CFLAGS += -O3\\n./drivers/net/tap/Makefile:42:CFLAGS += -O3\\n./drivers/net/pcap/Makefile:40:CFLAGS += -O3\\n./drivers/net/sfc/Makefile:38:CFLAGS += -O3\\n./drivers/net/vhost/Makefile:41:CFLAGS += -O3\\n./drivers/net/null/Makefile:39:CFLAGS += -O3\\n./drivers/net/mlx4/Makefile:47:CFLAGS += -O3\\n./drivers/net/af_packet/Makefile:45:CFLAGS += -O3\\n........\\n```\\n\u5168\u5c40\u8bbe\u5b9a ```export CFLAGS=\\" -O0 0g\\"```\u540e\u91cd\u65b0\u7f16\u8bd1\u53d1\u73b0\u8fd8\u662f\u4f7f\u7528\u4e86 -O3 \u7f16\u8bd1\uff0c\u8fd9\u8868\u660e dpdk \u7684\u7f16\u8bd1\u811a\u672c\u4e2d\u5bf9 CFLAGS \u7684\u503c\u91cd\u65b0\u8fdb\u884c\u4e86\u8bbe\u5b9a\uff0c**\u4e0d\u80fd\u901a\u8fc7\u547d\u4ee4\u884c\u6307\u5b9a CFLAGS \u6765\u7f16\u8bd1\u51fa debug \u7248\u672c\u3002**\\n\\n\u5728 doc \u76ee\u5f55\u4e0b\u627e\u5230\u4e86\u5982\u4e0b\u76f8\u5173\u5185\u5bb9\uff1a\\n```rst\\n331 Variables that Can be Set/Overridden in a Makefile Only\\n332 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n333 \\n334 *   VPATH: The path list that the build system will search for sources. By default, RTE_SRCDIR will be included in VPATH.\\n335 \\n336 *   CFLAGS: Flags to use for C compilation. The user should use +=  to append data in this variable.\\n337 \\n```\\n\u4ece\u4e0a\u9762\u7684\u5185\u5bb9\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u7528\u6237\u4e0d\u80fd\u901a\u8fc7\u547d\u4ee4\u884c\u8bbe\u5b9a CFLAGS\uff0c\u53ea\u80fd\u901a\u8fc7 Makefile \u6587\u4ef6\u6765\u8bbe\u5b9a\u3002\\n\\n## \u547d\u4ee4\u884c\u8bbe\u7f6e EXTRA_CFLAGS \u6807\u5fd7\u751f\u6210 debug \u7248\\n\u7ee7\u7eed\u9605\u8bfb doc \u76ee\u5f55\u4e2d\u7684\u5e2e\u52a9\u6587\u6863\uff0c\u6211\u53d1\u73b0 EXTRA_CFLAGS \u6807\u5fd7\u53ef\u4ee5\u4f7f\u7528\u3002\u6587\u6863\u4e2d\u76f8\u5173\u7684\u5185\u5bb9\u6458\u53d6\u5982\u4e0b\uff1a\\n\\n```rst\\nVariables that Can be Set/Overridden by the User in a Makefile or Command Line\\n389 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n390 \\n391 *   CFLAGS_my_file.o: Specific flags to add for C compilation of my_file.c.\\n392 \\n393 *   LDFLAGS_my_app: Specific flags to add when linking my_app.\\n394     \\n395 *   EXTRA_CFLAGS: The content of this variable is appended after CFLAGS when compiling.\\n396 \\n397 *   EXTRA_LDFLAGS: The content of this variable is appended after LDFLAGS when linking.\\n398 \\n399 *   EXTRA_LDLIBS: The content of this variable is appended after LDLIBS when linking.\\n400 \\n401 *   EXTRA_ASFLAGS: The content of this variable is appended after ASFLAGS when assembling.\\n402 \\n403 *   EXTRA_CPPFLAGS: The content of this variable is appended after CPPFLAGS when using a C preprocessor on assembly files.\\n```\\n\\n\u4e0a\u9762\u7684\u4ecb\u7ecd\u8868\u660e EXTRA_CFLAGS \u53d8\u91cf\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u8fdb\u884c\u8bbe\u5b9a\uff0c\u540c\u65f6\u5b83\u4f1a\u5728\u7f16\u8bd1\u65f6\u8ffd\u52a0\u5230 CFLAGS \u5185\u5bb9\u4e4b\u540e\u3002\\n\\n\u6267\u884c export EXTRA_CFLAGS=\\"-O0 -g\\" \u540e\u91cd\u65b0\u7f16\u8bd1 dpdk \u7684\u5e93\uff0c\u4f7f\u7528 gdb \u8c03\u8bd5 app \u76ee\u5f55\u4e0b\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u53d1\u73b0 gdb \u80fd\u591f\u8bfb\u53d6\u5230\u8c03\u8bd5\u4fe1\u606f\u3002\\n\\n\u867d\u7136\u6709\u4e86\u8c03\u8bd5\u4fe1\u606f\uff0c\u4f46\u662f Makefile \u4e2d\u5bf9 CFLAGS \u53d8\u91cf\u589e\u52a0\u7684 -O3 \u9009\u9879\u53ef\u80fd\u610f\u5473\u7740\u7f16\u8bd1\u51fa\u6765\u7684\u662f O3 \u7248\u672c\u7684\u7a0b\u5e8f\uff0c\u8fd9\u6837\u5c31\u4e0d\u80fd\u7b97\u4f5c\u662f debug \u7248\u672c\u3002\\n\\n\u6211\u67e5\u770b\u7f16\u8bd1\u7f16\u8bd1\u76ee\u5f55\u4e2d *.o.cmd \u4e2d\u4fdd\u5b58\u7684\u7f16\u8bd1\u547d\u4ee4\uff0c\u53d1\u73b0\u5e93\u51fd\u6570\u7684\u7f16\u8bd1\u547d\u4ee4\u4e2d\u540c\u65f6\u8bbe\u5b9a\u4e86 -O3 \u4e0e -O0 -g \u53c2\u6570\u3002\\n\\n\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```bash\\n[longyu@debian-10:22:02:09] x86_64-native-linuxapp-gcc $ cat ./build/lib/librte_eal/linuxapp/eal/.eal_alarm.o.cmd \\ncmd_eal_alarm.o = gcc -Wp,-MD,./.eal_alarm.o.d.tmp  -m64 -pthread  -march=native -DRTE_MACHINE_CPUFLAG_SSE -DRTE_MACHINE_CPUFLAG_SSE2 -DRTE_MACHINE_CPUFLAG_SSE3 -DRTE_MACHINE_CPUFLAG_SSSE3 -DRTE_MACHINE_CPUFLAG_SSE4_1 -DRTE_MACHINE_CPUFLAG_SSE4_2 -DRTE_MACHINE_CPUFLAG_AES -DRTE_MACHINE_CPUFLAG_PCLMULQDQ -DRTE_MACHINE_CPUFLAG_AVX -DRTE_MACHINE_CPUFLAG_RDRAND -DRTE_MACHINE_CPUFLAG_FSGSBASE -DRTE_MACHINE_CPUFLAG_F16C -DRTE_MACHINE_CPUFLAG_AVX2  -I/home/longyu/Downloads/dpdk-stable-17.02.1/x86_64-native-linuxapp-gcc/include -include /home/longyu/Downloads/dpdk-stable-17.02.1/x86_64-native-linuxapp-gcc/include/rte_config.h -I/home/longyu/Downloads/dpdk-stable-17.02.1/lib/librte_eal/linuxapp/eal/include -I/home/longyu/Downloads/dpdk-stable-17.02.1/lib/librte_eal/common -I/home/longyu/Downloads/dpdk-stable-17.02.1/lib/librte_eal/common/include -W -Wall -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wold-style-definition -Wpointer-arith -Wcast-align -Wnested-externs -Wcast-qual -Wformat-nonliteral -Wformat-security -Wundef -Wwrite-strings -O3  -O0 -g  -o eal_alarm.o -c /home/longyu/Downloads/dpdk-stable-17.02.1/lib/librte_eal/linuxapp/eal/eal_alarm.c  \\n```\\n\\n\u67e5\u770b\u5230\u7f16\u8bd1\u547d\u4ee4\uff0c\u6211\u60f3\u5230\u4e86\u4e00\u4e2a\u95ee\u9898\u2014\u2014**\u6307\u5b9a\u4e86\u591a\u4e2a\u4f18\u5316\u9009\u9879\u65f6 gcc \u7f16\u8bd1\u65f6\u4f1a\u4f7f\u7528\u54ea\u4e2a\u5462\uff1f**\\n\\n## gcc \u540c\u65f6\u6307\u5b9a\u591a\u4e2a\u4f18\u5316\u9009\u9879\u7684\u95ee\u9898\\n\u7ecf\u8fc7\u641c\u7d22\uff0c\u6211\u53d1\u73b0 gcc \u7684\u5b98\u65b9\u7f51\u9875\u4e2d\u5bf9\u8fd9\u4e2a\u95ee\u9898\u8fdb\u884c\u4e86\u63cf\u8ff0\u3002\u5f53 gcc \u7f16\u8bd1\u547d\u4ee4\u4e2d\u6307\u5b9a\u4e86\u591a\u4e2a\u4f18\u5316\u9009\u9879\u65f6\uff0c\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u4f18\u5316\u9009\u9879\u751f\u6548\u3002\\n\\n-O3 \u662f\u5728 CFLAGS \u53d8\u91cf\u4e2d\u6307\u5b9a\u7684\uff0cEXTRA_CFLAGS \u662f\u6211\u4eec\u5728\u547d\u4ee4\u884c\u4e2d\u6307\u5b9a\u7684\uff0c\u6839\u636e dpdk \u7684\u5e2e\u52a9\u6587\u6863\u4e2d\u7684\u8bf4\u660e\uff0cEXTRA_CFLAGS \u7684\u503c\u4f1a\u5728\u7f16\u8bd1\u65f6\u8ffd\u52a0\u5230 CFLAGS \u7684\u503c\u540e\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u770b\u5230\u4e86\u6709 -O3 ..... -O0 -g \u8fd9\u6837\u7684\u7f16\u8bd1\u547d\u4ee4\u3002\\n\\n-O0 \u662f\u6700\u540e\u4e00\u4e2a\u6307\u5b9a\u7684\u4f18\u5316\u9009\u9879\uff0c\u5b9e\u9645\u751f\u6548\u7684\u662f -O0\uff0c\u800c\u975e -O3\uff0c\u8fd9\u6837\u6211\u4eec\u901a\u8fc7\u8bbe\u5b9a EXTRA_CFLAGS \u4e3a -O0 -g \u5c31\u80fd\u591f\u7f16\u8bd1\u51fa debug \u7248\u672c\u7684 dpdk\u3002\\n\\n\u5907\u6ce8: EXTRA_CFLAGS \u662f\u5728  mk/internal/rte.compile-pre.mk \u4e2d\u4f7f\u7528\u7684\u3002\\n\\n## \u6700\u7ec8\u786e\u5b9a\u7684\u7f16\u8bd1 dpdk debug \u7248\u672c\u7684\u65b9\u6cd5\\n\u547d\u4ee4\u884c\u4e2d\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u8bbe\u5b9a EXTRA_CFLAGS \u540e\u91cd\u65b0\u7f16\u8bd1\u5373\u53ef\u3002\\n\\n```bash\\nexport EXTRA_CFLAGS=\\"-O0 -g\\"\\n```"},{"id":"/libc/\u4f7f\u7528mtrace\u8ddf\u8e2a\u5185\u5b58\u6cc4\u9732\u95ee\u9898","metadata":{"permalink":"/longyu.github.io/blog/libc/\u4f7f\u7528mtrace\u8ddf\u8e2a\u5185\u5b58\u6cc4\u9732\u95ee\u9898","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/libc/\u4f7f\u7528mtrace\u8ddf\u8e2a\u5185\u5b58\u6cc4\u9732\u95ee\u9898.md","source":"@site/blog/libc/\u4f7f\u7528mtrace\u8ddf\u8e2a\u5185\u5b58\u6cc4\u9732\u95ee\u9898.md","title":"libc/\u4f7f\u7528mtrace\u8ddf\u8e2a\u5185\u5b58\u6cc4\u9732\u95ee\u9898","description":"\u524d\u8a00","date":"2022-06-19T07:40:00.000Z","formattedDate":"2022\u5e746\u670819\u65e5","tags":[],"readingTime":20.065,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"dpdk/\u8bbe\u7f6e EXTRA_CFLAGS \u4ee5\u7f16\u8bd1 debug \u7248\u672c dpdk \u5e93","permalink":"/longyu.github.io/blog/dpdk/\u8bbe\u7f6e EXTRA_CFLAGS \u4ee5\u7f16\u8bd1 debug \u7248\u672c dpdk \u5e93"},"nextItem":{"title":"linux-kernel/linux-\u5185\u6838\u6a21\u5757\u4e2d\u5f15\u7528\u7b26\u53f7\u662f\u5982\u4f55\u94fe\u63a5\u7684","permalink":"/longyu.github.io/blog/linux-kernel/linux-\u5185\u6838\u6a21\u5757\u4e2d\u5f15\u7528\u7b26\u53f7\u662f\u5982\u4f55\u94fe\u63a5\u7684"}},"content":"## \u524d\u8a00\\n\u7814\u7a76\u52a8\u6001\u94fe\u63a5\u7684\u539f\u7406\u4e2d\uff0c\u65e0\u610f\u95f4\u53d1\u73b0\u4e86 **mtrace** \u8fd9\u4e2a\u4e1c\u4e1c\u3002\u5b83\u662f\u4e00\u4e2a libc \u5e93\u63d0\u4f9b\u7684\u51fd\u6570\uff0c**\u901a\u8fc7\u5411 malloc\u3001calloc\u3001free \u7b49\u51fd\u6570\u6ce8\u518c hook \u51fd\u6570\u6765\u5b9e\u73b0\u5185\u5b58\u7533\u8bf7\u4e0e\u91ca\u653e\u7684\u8ddf\u8e2a**\uff0c\u53ef\u4ee5\u7528\u6765**\u5b9a\u4f4d\u5185\u5b58\u6cc4\u9732\u95ee\u9898**\u3002\\n\\n\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5c06\u63cf\u8ff0\u4e00\u4e2a\u5177\u4f53\u7684\u4f7f\u7528\u5b9e\u4f8b\uff0c\u53ca\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u4e00\u4e9b\u95ee\u9898\u3002\\n## mtrace \u793a\u4f8b demo\\n**man 3 mtrace** \u67e5\u770b manual \u4fe1\u606f\uff0c\u53d1\u73b0 manual \u4e2d\u5df2\u7ecf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u793a\u4f8b demo\uff0c\u5176\u6e90\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n#include <mcheck.h>\\n#include <stdlib.h>\\n#include <stdio.h>\\n\\nint\\nmain(int argc, char *argv[])\\n{\\n    int j;\\n\\n    mtrace();\\n\\n    for (j = 0; j < 2; j++)\\n        malloc(100);            /* Never freed--a memory leak */\\n\\n    calloc(16, 16);             /* Never freed--a memory leak */\\n    exit(EXIT_SUCCESS);\\n}\\n```\\n\u5c06\u4e0a\u8ff0\u4ee3\u7801\u4fdd\u5b58\u4e3a t_mtrace.c \u6e90\u6587\u4ef6\uff0c\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u8fdb\u884c\u7f16\u8bd1\uff1a\\n\\n```bash\\ngcc -g t_mtrace.c -o t_mtrace\\n```\\n\u5728\u8fd0\u884c\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u5b9a **MALLOC_TRACE** \u73af\u5883\u53d8\u91cf\uff0c\u8fd9\u4e2a\u73af\u5883\u53d8\u91cf\u6307\u5411 mtrace \u8f93\u51fa\u8bb0\u5f55\u6587\u4ef6\u7684\u8def\u5f84\u3002\\n\\nMALLOC_TRACE \u8bbe\u5b9a\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```bash\\n export MALLOC_TRACE=/tmp/t\\n```\\n\u8bbe\u5b9a\u4e86\u8fd9\u4e2a\u53d8\u91cf\u4e4b\u540e\u5c31\u53ef\u4ee5\u8fd0\u884c **t_mtrace** \u7a0b\u5e8f\uff0c\u8fd0\u884c\u5b8c\u6210\u540e /tmp/t \u6587\u4ef6\u4e2d\u5c06\u4f1a\u4fdd\u5b58\u8f93\u51fa\u7684\u8bb0\u5f55\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```bash\\n[longyu@debian-10:19:25:40] program-problem $ cat /tmp/t\\n= Start\\n@ ./t_mtrace:[0x55555555518c] + 0x5555555596a0 0x64\\n@ ./t_mtrace:[0x55555555518c] + 0x555555559710 0x64\\n@ ./t_mtrace:[0x5555555551a5] + 0x555555559780 0x100\\n```\\n**/tmp/t** \u7684\u8f93\u51fa\u5e76\u4e0d\u76f4\u89c2\uff0clibc \u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540c\u6837\u540d\u4e3a mtrace \u7684 perl \u811a\u672c\u6765\u89e3\u6790\u8fd9\u4e2a\u8bb0\u5f55\uff0cmtrace \u811a\u672c\u9700\u8981\u63d0\u4f9b\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a**\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u8def\u5f84\u540d**\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a **mtrace \u51fd\u6570\u8f93\u51fa\u7684\u8bb0\u5f55\u6587\u4ef6**\u3002\\n\\n\u6267\u884c\u793a\u4f8b\u5982\u4e0b\uff1a\\n\\n```bash\\n[longyu@debian-10:19:29:08] program-problem $ mtrace ./t_mtrace $MALLOC_TRACE\\n\\nMemory not freed:\\n-----------------\\n           Address     Size     Caller\\n0x00005555555596a0     0x64  at 0x55555555518c\\n0x0000555555559710     0x64  at 0x55555555518c\\n0x0000555555559780    0x100  at 0x5555555551a5\\n```\\n\u8fd9\u91cc\u6211\u5f97\u5230\u7684\u8f93\u51fa\u4fe1\u606f\u4e0e manual \u4e2d\u7684\u4fe1\u606f\u4e0d\u540c\uff0c**\u6ca1\u6709\u663e\u793a\u51fa\u8c03\u7528\u8005\u6240\u5728\u6e90\u7801\u4e2d\u7684\u884c\u53f7\u3002**\\n\\nmanual \u4e2d\u7684\u8f93\u51fa\u4fe1\u606f\u5982\u4e0b\uff1a\\n```bash\\n           $ mtrace ./t_mtrace $MALLOC_TRACE\\n           Memory not freed:\\n           -----------------\\n              Address     Size     Caller\\n           0x084c9378     0x64  at /home/cecilia/t_mtrace.c:12\\n           0x084c93e0     0x64  at /home/cecilia/t_mtrace.c:12\\n           0x084c9448    0x100  at /home/cecilia/t_mtrace.c:16\\n```\\n\u91cd\u65b0 **check** \u6211\u7684\u8fd0\u884c\u8fc7\u7a0b\uff0c\u6211\u786e\u5b9a\u4e0e manual \u4e2d\u63cf\u8ff0\u7684\u4e00\u81f4\uff0c\u770b\u6765\u4e00\u5b9a\u662f\u54ea\u91cc\u51fa\u4e86\u95ee\u9898\u4e86\u3002\\n\\n## \u5bf9 mtrace \u811a\u672c\u89e3\u6790\u4e0d\u5230\u884c\u53f7\u95ee\u9898\u7684\u89e3\u51b3\u8fc7\u7a0b\\n\u5bf9\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u6700\u5f00\u59cb\u8fdb\u884c\u4e86\u5982\u4e0b\u5c1d\u8bd5\uff1a\\n\\n1. -O0 -g \u7f16\u8bd1\u540e\u6d4b\u8bd5\u53d1\u73b0\u4ecd\u65e7\u6ca1\u6709\u6253\u5370\\n2. \u4fee\u6539\u6587\u4ef6\u540d\u4e3a\u7edd\u5bf9\u8def\u5f84\u540e\u4e5f\u6ca1\u6709\u6253\u5370\\n3. \u5bf9\u6bd4\u52a0\u4e86-g\u3001\u6ca1\u6709\u52a0 -g  /tmp/t \u6587\u4ef6\u7684\u533a\u522b\uff0c\u53d1\u73b0\u5185\u5bb9\u5b8c\u5168\u76f8\u540c\\n4. \u7f51\u4e0a\u641c\u7d22\u53d1\u73b0\u6709\u76f8\u5173\u7684\u63cf\u8ff0\uff0c\u4e0d\u8fc7\u7f51\u9875\u4e2d\u540c manual \u4e2d\u4e00\u6837\u80fd\u591f\u663e\u793a\u6e90\u4ee3\u7801\u884c\u53f7\\n\\n\u5728\u4e0a\u9762\u7684\u5c1d\u8bd5\u90fd\u5931\u8d25\u540e\uff0c\u6211\u5f00\u59cb\u4f7f\u7528 strace \u5927\u6cd5\u3002\u7528\u4e86 strace \u540e\u770b\u5230\u4e86\u4e00\u5806\u7cfb\u7edf\u8c03\u7528\uff0c\u5176\u4e2d**\u6709\u6267\u884c addr2line \u7684\u8fc7\u7a0b**\uff0c\u770b\u6765\u8fd9\u4e2a mtrace \u811a\u672c\u5b9e\u9645\u662f\u8fd0\u884c addr2line \u547d\u4ee4\u83b7\u53d6\u5230\u7684\u884c\u53f7\uff0c\u90a3**\u95ee\u9898\u662f\u5426\u51fa\u5728 addr2line \u4e2d\u5462\uff1f**\\n\\n\u6211\u5355\u72ec\u4f7f\u7528 addr2line \u83b7\u53d6 /tmp/t \u4e2d\u51fd\u6570\u8c03\u7528\u5730\u5740\u5bf9\u5e94\u7684\u884c\u53f7\uff0c\u53d1\u73b0\u6839\u672c\u83b7\u53d6\u4e0d\u5230\u4efb\u4f55\u4fe1\u606f\uff0c\u8f93\u51fa\u5185\u5bb9\u4e3a ??\u3002\\n\\n\u641e\u5230\u8fd9\u91cc\u6211\u8fd8\u662f\u6ca1\u6709\u53d1\u73b0\u6839\u672c\u95ee\u9898\uff0c\u53ea\u80fd\u786c\u7740\u5934\u76ae\u7528 perl -d \u6765\u8fd0\u884c\u8fd9\u4e2a mtrace \u811a\u672c\uff0c\u8c03\u8bd5\u4e86\u4e0b\u4e5f\u6ca1\u6709\u53d1\u73b0\u5173\u952e\u7684\u70b9\u3002\\n\\n### \u8fdb\u4e00\u6b65\u7684\u5206\u6790\\n\u5728\u4e00\u7cfb\u5217\u7684\u5c1d\u8bd5\u540e\uff0c\u6211\u6682\u65f6\u6ca1\u6709\u627e\u5230\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u4e0d\u8fc7\u6211\u89c9\u5f97 **addr2line \u662f\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6000\u7591\u5bf9\u8c61**\u3002\u4e3a\u4e86\u9a8c\u8bc1\u6211\u7684\u731c\u6d4b\uff0c\u6211\u5c06\u4ee3\u7801\u8fdb\u884c\u4e86\u5982\u4e0b\u4fee\u6539\uff1a\\n\\n```c\\n#include <mcheck.h>\\n#include <stdlib.h>\\n#include <stdio.h>\\n\\nint\\nmain(int argc, char *argv[])\\n{\\n    int j;\\n\\n    mtrace();\\n\\t\\t\\t\\t\\n    printf(\\"%p\\\\n\\", mtrace);\\n    for (j = 0; j < 2; j++)\\n        malloc(100);            /* Never freed--a memory leak */\\n\\n    calloc(16, 16);             /* Never freed--a memory leak */\\n    pause();\\n    exit(EXIT_SUCCESS);\\n}\\n```\\n\\n\u6211\u8fd9\u91cc\u6253\u5370\u51fa\u4e86 **mtrace \u51fd\u6570\u7684\u5730\u5740**\uff0c\u7f16\u8bd1\u5e76\u6267\u884c\u540e\u4f1a\u5f97\u5230 mtrace \u51fd\u6570\u7684\u5730\u5740\uff0c\u7136\u540e\u6211\u4f7f\u7528 addr2line \u547d\u4ee4\uff0c\u6307\u5b9a\u8fd9\u4e2a\u5730\u5740\u6765\u83b7\u53d6\u6e90\u7801\u884c\u53f7\uff0c\u53d1\u73b0\u4ecd\u65e7\u6253\u5370\u7684\u662f ??\uff0c\u8fd9\u8ba9\u6211\u89c9\u7684\u5f88\u5927\u6982\u7387\u662f **addr2line \u547d\u4ee4\u7684\u95ee\u9898**\u3002\\n\\n\u5728\u8fd9\u4e2a\u57fa\u7840\u4e0a\uff0c\u6211\u6267\u884c **objdump -d \u53cd\u6c47\u7f16\u53ef\u6267\u884c\u6587\u4ef6**\uff0c\u7136\u540e\u4f7f\u7528 main \u51fd\u6570\u7684**\u76f8\u5bf9\u5730\u5740\u4e3a\u53c2\u6570**\u7ee7\u7eed\u8c03\u7528 addr2line \u547d\u4ee4\u6765\u89e3\u6790\uff0c\u8fd9\u4e00\u6b21**\u80fd\u591f\u89e3\u6790\u5230\u4e86\u3002**\\n\\n\u6d4b\u8bd5\u8fc7\u7a0b\u8bb0\u5f55\u5982\u4e0b\uff1a\\n\\n```bash\\n[longyu@debian-10:19:50:39] program-problem $ objdump -d t_mtrace | grep main\\n    109d:\\t48 8d 3d c1 00 00 00 \\tlea    0xc1(%rip),%rdi        # 1165 <main>\\n    10a4:\\tff 15 2e 2f 00 00    \\tcallq  *0x2f2e(%rip)        # 3fd8 <__libc_start_main@GLIBC_2.2.5>\\n0000000000001165 <main>:\\n    119b:\\teb 0e                \\tjmp    11ab <main+0x46>\\n    11af:\\t7e ec                \\tjle    119d <main+0x38>\\n[longyu@debian-10:19:50:44] program-problem $ addr2line -e ./t_mtrace 1165\\n/home/longyu/problem_and_solution/program-problem/./t_mtrace.c:7\\n```\\n\u53ef\u4ee5\u770b\u5230\u5728\u6700\u540e\u4e00\u884c\uff0caddr2line \u6253\u5370\u51fa\u4e86\u884c\u53f7\uff01\\n\\n\u7136\u540e\u4f7f\u7528 gdb \u8fd0\u884c\uff0cstart \u540e\u5728 main \u51fd\u6570\u5904\u505c\u4e0b\u6765\u540e\uff0c\u53cd\u6c47\u7f16 main \u51fd\u6570\uff0c\u53d1\u73b0 **main \u51fd\u6570\u7684\u5730\u5740\u4e0e objdump -d \u7684\u8f93\u51fa\u5b8c\u5168\u4e0d\u540c**\uff0c\u770b\u6765\u5e94\u8be5\u662f**\u57fa\u5730\u5740\u88ab\u4fee\u6539\u4e86\u3002**\\n\\n\u6d4b\u8bd5\u8bb0\u5f55\u5982\u4e0b\uff1a\\n```bash\\n(gdb) start\\nTemporary breakpoint 1 at 0x1174: file ./mtrace.c, line 10.\\nStarting program: /home/longyu/problem_and_solution/program-problem/t_mtrace \\n\\nTemporary breakpoint 1, main (argc=1, argv=0x7fffffffdae8) at ./mtrace.c:10\\n10\\t               mtrace();\\n(gdb) disass main\\nDump of assembler code for function main:\\n   0x0000555555555165 <+0>:\\tpush   %rbp\\n```\\n\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc main \u51fd\u6570\u7684\u5730\u5740\u53d8\u4e3a\u4e86 **0x0000555555555165**\uff0c\u8fd9\u5c31\u9020\u6210 addr2line \u547d\u4ee4\u4e0d\u80fd\u89e3\u6790\u5230\u6e90\u7801\u884c\u53f7\u3002\\n\\n### \u5173\u95ed ASLR\\n**\u518d\u6b21\u6267\u884c\u6b64\u7a0b\u5e8f**\uff0c\u6211\u53d1\u73b0\u6bcf\u6b21\u6253\u5370\u7684 mtrace \u51fd\u6570\u7684\u5730\u5740\u90fd\u4e0d\u4e00\u6837\uff0c\u8fd9\u70b9\u8ba9\u6211\u60f3\u8d77\u4e86 ASLR \u8fd9\u4e2a\u529f\u80fd\uff0c\u9996\u5148\u67e5\u770b /proc/sys/kernel/randomize_va_space \u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u53d1\u73b0\u503c\u4e3a 2 \u8868\u793a**\u8fd9\u4e2a\u529f\u80fd\u786e\u5b9e\u662f\u6253\u5f00\u7684\u3002**\\n\\n\u4f7f\u7528 root \u6743\u9650\u5411 /proc/sys/kernel/randomize_va_space \u6587\u4ef6\u5199\u5165 0 \u5173\u95ed\u8fd9\u4e2a\u529f\u80fd\u540e\uff0c\u91cd\u65b0\u6267\u884c\u4e0a\u9762\u7684\u6d4b\u8bd5\uff0c\u53d1\u73b0**\u4ecd\u65e7\u4e0d\u80fd\u83b7\u53d6\u5230\u884c\u53f7\u4fe1\u606f**\u3002\\n\\n\u770b\u6765\u8fd8\u662f\u5f97\u4ece addr2line \u547d\u4ee4\u4e0a\u7740\u624b\uff01\\n\\n### \u4ee5 addr2line cannot work \u4e3a\u5173\u952e\u8bcd\u641c\u7d22\u4e92\u8054\u7f51\\n\u4f7f\u7528 addr2line cannot work \u641c\u7d22\u540e\uff0c\u6211\u5728 [addr2line cannot decode addresses that gdb does](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=860394) \u8fd9\u7bc7\u94fe\u63a5\u4e2d\u770b\u5230\u4e86\u5982\u4e0b\u5173\u952e\u4fe1\u606f\uff1a\\n\\n```\\nThere are 2 things going on. First, by default gcc is now building\\nexecutables as position independent (-pie). This can be explicitly\\ndisabled with the -no-pie linking option. Disabling PIE should result in\\nthings working as they did before.\\n\\nThe second thing going on is Address Space Layout Randomization\\n(ASLR). This is now active by default and will cause all PIE executables\\nto be loaded to random addresses. This can be disabled globally with\\nsysctl:\\n\\n    $ sudo sysctl -w kernel.randomize_va_space=0\\n\\nOr with a boot argument:\\n\\n    norandmaps\\n\\nOr (preferrably) locally for the process you are interested:\\n\\n    $ setarch `uname -m` -R /some/program\\n\\nOften it is convenient to use the above command with /bin/bash so as to\\nquickly create a non-randomized environment for yourself.\\n\\nHowever, be aware that even when ASLR is disabled, if it is a PIE\\nexectuable, it will always load to the same address, but that is not the\\naddress within the executable. That means that for PIE executables, many\\nbinutils (such as addr2line) will require you to recalculate the offset.\\n```\\n\u6211**\u5df2\u7ecf\u5173\u95ed\u4e86 ASLR \u529f\u80fd**\uff0c\u5bf9\u5e94\u4e0a\u8ff0\u63cf\u8ff0\u7684\u7b2c\u4e8c\u70b9\uff0c\u7b2c\u4e00\u70b9\u63cf\u8ff0\u8bf4\u4e0e pie \u6709\u5173\uff0c\u901a\u8fc7\u6307\u5b9a **-no-pie** \u53c2\u6570\u91cd\u65b0\u7f16\u8bd1\u4e0a\u8ff0\u7a0b\u5e8f\uff0c\u76f4\u63a5\u5728 gdb \u4e2d\u8fd0\u884c\uff0c\u518d\u6b21\u53cd\u6c47\u7f16 main \u51fd\u6570\uff0c\u8fd9\u6b21\u5f97\u5230\u4e86\u5982\u4e0b\u8f93\u51fa\u4fe1\u606f\uff1a\\n\\n```bash\\n(gdb) start\\nTemporary breakpoint 1 at 0x401171: file ./mtrace.c, line 10.\\nStarting program: /home/longyu/problem_and_solution/program-problem/t_mtrace \\n\\nTemporary breakpoint 1, main (argc=1, argv=0x7fffffffdae8) at ./mtrace.c:10\\n10\\t               mtrace();\\n(gdb) disass main\\nDump of assembler code for function main:\\n   0x0000000000401162 <+0>:\\tpush   %rbp\\n```\\n\u53ef\u4ee5\u770b\u5230\u8fd9\u6b21\uff0cmain \u51fd\u6570\u5730\u5740\u53d8\u4e3a\u4e86 **0x401162**\uff0cobjdump -d \u8f93\u51fa\u7684 main \u51fd\u6570\u5730\u5740\u5982\u4e0b\uff1a\\n\\n```bash\\n0000000000401162 <main>:\\n  401162:\\t55                   \\tpush   %rbp\\n```\\n\u53ef\u4ee5\u770b\u5230\uff0c**\u8fd9\u6b21 objdump \u5f97\u5230\u7684\u51fd\u6570\u5730\u5740\u4e0e\u8fd0\u884c\u65f6\u7684\u5730\u5740\u4e00\u81f4\u4e86**\uff0c\u770b\u6765\u5e94\u8be5\u6ca1\u6709\u95ee\u9898\u4e86\u3002\\n\\n\u8fd0\u884c\u7a0b\u5e8f\u540e\uff0c\u7ee7\u7eed\u67e5\u770b /tmp/t \u7684\u5185\u5bb9\uff0c\u8fd9\u6b21\u5f97\u5230\u4e86\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\n```bash\\n[longyu@debian-10:20:09:00] program-problem $ cat /tmp/t\\n= Start\\n@ /lib/x86_64-linux-gnu/libc.so.6:(_IO_file_doallocate+0x8c)[0x7ffff7e5971c] + 0x4056a0 0x400\\n@ ./t_mtrace:[0x4011a4] + 0x405ab0 0x64\\n@ ./t_mtrace:[0x4011a4] + 0x405b20 0x64\\n@ ./t_mtrace:[0x4011bd] + 0x405b90 0x100\\n@ /lib/x86_64-linux-gnu/libc.so.6:[0x7ffff7f52ad4] - 0x4056a0\\n```\\n\u8fd9\u4e2a\u8f93\u51fa\u770b\u4e0a\u53bb\u975e\u5e38\u6b63\u5e38\uff0c\u770b\u6765\u95ee\u9898\u5e94\u8be5\u80fd\u591f\u5f97\u5230\u89e3\u51b3\u4e86\uff01\u518d\u6b21\u6267\u884c mtrace \u811a\u672c\uff0c\u8fd9\u6b21\u786e\u5b9e\u80fd\u591f\u83b7\u53d6\u5230\u6e90\u7801\u884c\u53f7\u4e86\uff0c\u64cd\u4f5c\u8bb0\u5f55\u5982\u4e0b\uff1a\\n\\n```bash\\n[longyu@debian-10:20:10:06] program-problem $ mtrace ./t_mtrace /tmp/t\\n\\nMemory not freed:\\n-----------------\\n           Address     Size     Caller\\n0x0000000000405ab0     0x64  at /home/longyu/problem_and_solution/program-problem/./t_mtrace.c:13 (discriminator 3)\\n0x0000000000405b20     0x64  at /home/longyu/problem_and_solution/program-problem/./t_mtrace.c:13 (discriminator 3)\\n0x0000000000405b90    0x100  at /home/longyu/problem_and_solution/program-problem/./t_mtrace.c:17\\n```\\n\u5982\u679c\u4f60\u5bf9\u8fd9\u91cc\u7684\u884c\u53f7\u8db3\u591f\u654f\u611f\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u91cc\u7684\u884c\u53f7\u5e76\u4e0d\u51c6\u786e\uff0c\u5176\u5b9e\u5728 manual \u4e2d\u5df2\u7ecf\u8bf4\u660e\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\\n\\n\u4e0a\u8ff0 demo \u4e2d\u8c03\u7528\u4e86 malloc \u4e0e calloc \u51fd\u6570\u5e76\u4e14\u90fd\u6ca1\u6709\u8c03\u7528 free \u6765\u91ca\u653e\uff0c**\u6a21\u62df\u5185\u5b58\u6cc4\u9732\u7684\u60c5\u51b5**\uff0c\u6839\u636e mtrace \u7684\u8f93\u51fa\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u9a6c\u4e0a\u5b9a\u4f4d\u5230\u5185\u5b58\u6cc4\u9732\u7684\u4f4d\u7f6e\u3002\\n\\n\u540c\u65f6\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53 **MALLOC_TRACE** \u6307\u5411\u4e86\u4e00\u4e2a\u5408\u6cd5\u7684\u53ef\u4ee5\u5199\u7684\u6587\u4ef6\u8def\u5f84\u65f6\uff0cmtrace \u80fd\u591f\u8fd0\u884c\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u5e26\u6765**\u6027\u80fd\u4e0a\u7684\u635f\u8017\uff01**\\n## mtrace \u662f\u548b\u6837\u5b9e\u73b0\u7684\uff1f\\n\u89e3\u51b3\u4e86 addr2line \u4e0d\u80fd\u663e\u793a\u6e90\u7801\u884c\u53f7\u7684\u95ee\u9898\uff0cmtrace \u7b97\u6b63\u5f0f\u4e0a\u624b\u4e86\uff0c\u4e0b\u4e00\u4e2a\u95ee\u9898\u662f mtrace \u662f\u5982\u4f55\u5b9e\u73b0\u7684\u5462\uff1f\\n\\nmtrace \u51fd\u6570\u7684\u6e90\u7801\u4f4d\u4e8e glibc \u6e90\u7801\u4e2d\u7684 **malloc/mtrace.c** \u4e2d\uff0c\u6838\u5fc3\u903b\u8f91\u662f\u8bbe\u5b9a malloc\u3001calloc\u3001realloc\u3001free \u7b49\u51e0\u4e2a\u7533\u8bf7\u3001\u91ca\u653e\u5185\u5b58\u7a7a\u95f4\u51fd\u6570\u4f7f\u7528\u7684\u5185\u90e8 hook \u51fd\u6570\u3002\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n308           tr_old_free_hook = __free_hook;\\n309           __free_hook = tr_freehook;\\n310           tr_old_malloc_hook = __malloc_hook;\\n311           __malloc_hook = tr_mallochook;\\n312           tr_old_realloc_hook = __realloc_hook;\\n313           __realloc_hook = tr_reallochook;                                                                                                                               \\n314           tr_old_memalign_hook = __memalign_hook;\\n315           __memalign_hook = tr_memalignhook;\\n```\\n\u90a3\u8fd9\u4e9b hook \u51fd\u6570\u662f\u5728\u54ea\u91cc\u88ab\u8c03\u7528\u7684\u5462\uff1f\u8fd9\u91cc\u6211\u4ee5 malloc \u51fd\u6570\u4e2d\u7684\u8c03\u7528\u4ee3\u7801\u4e3a\u4f8b\u6765\u63cf\u8ff0\uff0c\u65e8\u5728\u629b\u51fa**\u5982\u4f55\u83b7\u53d6\u8fd4\u56de\u5730\u5740**\u8fd9\u4e00\u95ee\u9898\u3002\\n\\n\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a\\n\\n```c\\n3018 void * \\n3019 __libc_malloc (size_t bytes)\\n3020 { \\n3021   mstate ar_ptr;\\n3022   void *victim;\\n3023   \\n3024   void *(*hook) (size_t, const void *)\\n3025     = atomic_forced_read (__malloc_hook);\\n3026   if (__builtin_expect (hook != NULL, 0))\\n3027     return (*hook)(bytes, RETURN_ADDRESS (0));\\n```\\n\u6ce8\u610f\u5f53 **__malloc_hook** \u4e0d\u4e3a NULL \u7684\u65f6\u5019\uff08\u8c03\u7528\u4e86 mtrace \u51fd\u6570\u4f1a\u8bbe\u5b9a __malloc_hook \u51fd\u6570\u6307\u9488\uff09\uff0c\u8be5 hook \u51fd\u6570\u4f1a\u88ab\u88ab\u8c03\u7528\uff0c\u8c03\u7528 hook \u51fd\u6570\u4f20\u9012\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570 **RETURN_ADDRESS (0)** \u503c\u5f97\u7814\u7a76\u3002\\n\\n\u8fd9\u4e2a RETURN_ADDRESS(0) \u662f\u4e00\u4e2a\u5b8f\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a\\n\\n```c\\n/* Determine the return address.  */\\n#define RETURN_ADDRESS(nr) \\\\\\n  __builtin_extract_return_addr (__builtin_return_address (nr))\\n```\\n\u8fd9\u91cc\u4f7f\u7528\u4e86 gcc \u7684\u6269\u5c55\u529f\u80fd\u6765\u83b7\u53d6\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u8fd9\u91cc\u7684 nr \u5bf9\u5e94\u7684\u662f\u6808\u5e27\u7684\u5c42\u7ea7\uff0c0 \u8868\u793a\u5f53\u524d\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u653e\u5728\u8fd9\u5c31\u662f **malloc \u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u7ee7\u7eed\u6267\u884c\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740\u3002**\\n\\n## __builtin_return_address \u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f\\n\u5199\u5230\u8fd9\u91cc\u4e0e mtrace \u76f8\u5173\u7684\u5185\u5bb9\u544a\u4e00\u6bb5\u843d\uff0c\u5f00\u59cb\u8df3\u5230 __builtin_return_address \u7684\u5b9e\u73b0\u4e0a\u3002\\n\\n\u5173\u4e8e\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u6839\u636e\u4e4b\u524d\u5b66\u4e60 \u300aCSAPP\u300b\u7684\u5370\u8c61\uff0c\u5176\u5b9e\u5173\u952e\u5728\u4e8e\u83b7\u53d6\u5230\u6808\u4e2d\u4e0d\u540c\u6808\u5e27\u7684 EBP \u4e0e EIP \u7684\u503c\uff0c**EBP \u8868\u793a\u6808\u5e95\uff0c\u800c EIP \u5219\u662f\u8fd4\u56de\u5730\u5740\u3002**\\n\\n\u51fd\u6570\u8c03\u7528\u65f6\uff0c**\u53c2\u6570\u9996\u5148\u538b\u6808\uff0c\u6309\u7167\u4ece\u53f3\u5411\u5de6\u7684\u987a\u5e8f**\uff0c\u7136\u540e**\u8fd4\u56de\u5730\u5740\u5165\u6808**\uff0c\u7136\u540e**\u8c03\u7528\u8005\u7684 EBP \uff08\u65e7\u7684EBP \uff09\u538b\u6808**\u3002x86 \u4e2d\u6808\u662f\u5411\u4e0b\u589e\u957f\u7684\uff0c\u6211\u4eec\u53ea\u9700\u8981\u83b7\u53d6\u5230\u5f53\u524d EBP \u5bc4\u5b58\u5668\u7684\u503c\u5411\u4e0a\u62e8\u52a8\u4e00\u4e2a\u6570\u636e\u5355\u5143\uff0832-bit 4 \u5b57\u8282\uff0c64-bit 8 \u5b57\u8282\uff09\uff0c\u8bbf\u95ee\u8fd9\u4e2a\u5730\u5740\u5c31\u80fd\u591f\u5f97\u5230\u8fd4\u56de\u5730\u5740\u3002\u540c\u65f6\u4e0a\u4e00\u7ea7\u51fd\u6570\u6808\u5e27\u7684 EBP \u53c8\u53ef\u4ee5\u901a\u8fc7\u5f53\u524d\u51fd\u6570\u7684 EBP \u83b7\u53d6\u5230\uff08**\u8bbf\u95ee\u5f53\u524d\u51fd\u6570 EBP \u5bc4\u5b58\u5668\u503c\u6307\u5411\u7684\u5730\u5740**\uff09\u3002\\n\\n\u7531\u4e8e\u51fd\u6570\u8c03\u7528\u5b58\u5728\u5d4c\u5957\u6027\uff0c\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u51fd\u6570\u6808\u5e27\uff0c\u6211\u4eec\u9700\u8981**\u9012\u5f52\u6267\u884c**\u4e0a\u8ff0\u8fc7\u7a0b\u3002\\n\\n\u66f4\u5177\u4f53\u7684\u4fe1\u606f\u8bf7\u8bbf\u95ee\uff1a\\n\\n[\u7cfb\u7edf\u7a0b\u5e8f\u5458\u6210\u957f\u8ba1\u5212\uff0d\u50cf\u673a\u5668\u4e00\u6837\u601d\u8003(\u4e8c)](https://blog.csdn.net/absurd/article/details/4207357?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160423542319724836730112%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160423542319724836730112&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-4207357.pc_v1_rank_blog_v1&utm_term=%E8%B0%83%E7%94%A8&spm=1018.2118.3001.4450)\\n[](https://blog.csdn.net/absurd/article/details/4207357?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160423542319724836730112%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160423542319724836730112&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-4207357.pc_v1_rank_blog_v1&utm_term=%E8%B0%83%E7%94%A8&spm=1018.2118.3001.4450)\\n\\n\u4e0a\u8ff0\u94fe\u63a5\u4e2d\u7684\u793a\u4f8b\u4ee3\u7801\u76f4\u63a5\u7f16\u8bd1\u8fd0\u884c\u5728\u6211\u7684\u7cfb\u7edf\u4e0a\u4f1a\u62a5\u6bb5\u9519\u8bef\uff0c\u6211\u4fee\u6539\u4e86\u90e8\u5206\u5185\u5bb9\uff0c\u65b0\u7684 demo \u5982\u4e0b\uff1a\\n\\n```c\\n#include <stdio.h> \\n\\n#define NEW_GCC\\n#define MAX_LEVEL 4\\n#ifdef NEW_GCC\\n#define OFFSET 4\\n#else\\n#define OFFSET 0\\n#endif/*NEW_GCC*/ \\n\\nint backtrace(void** buffer, int size)\\n{\\n\\tlong n = 0xfefefefe;\\n\\tlong* p = &n;\\n\\tint\\t i = 0; \\n\\n\\tlong ebp = p[1 + OFFSET];\\n\\tlong eip = p[2 + OFFSET]; \\n\\n\\tfor(i = 0; i < size; i++)\\n\\t{\\n\\t\\tbuffer[i] = (void*)eip;\\n\\t\\tp = (long*)ebp;\\n\\t\\tebp = p[0];\\n\\t\\teip = p[1];\\n\\t} \\n\\n\\treturn size;\\n} \\n\\nstatic void test2()\\n{\\n\\tint i = 0;\\n\\tvoid* buffer[MAX_LEVEL] = {0}; \\n\\n\\tbacktrace(buffer, MAX_LEVEL); \\n\\n\\tfor(i = 0; i < MAX_LEVEL; i++)\\n\\t{\\n\\t\\tprintf(\\"called by %p\\\\n\\",\\tbuffer[i]);\\n\\t} \\n\\n\\treturn;\\n} \\n\\nstatic void test1()\\n{\\n\\tint a=0x11111111;\\n\\tint b=0x11111112; \\n\\n\\ttest2();\\n\\ta = b; \\n\\n\\treturn;\\n} \\n\\nstatic void test()\\n{\\n\\tint a=0x10000000;\\n\\tint b=0x10000002; \\n\\n\\ttest1();\\n\\ta = b; \\n\\n\\treturn;\\n} \\n\\nint main(int argc, char* argv[])\\n{\\n\\ttest(); \\n\\n\\treturn 0;\\n}\\n```\\n\u5c06\u4e0a\u8ff0\u4ee3\u7801\u4fdd\u5b58\u4e3a backtrace.c\uff0c\u7f16\u8bd1\u8fd0\u884c\u80fd\u591f\u6b63\u5e38\uff0c\u8bb0\u5f55\u5982\u4e0b\uff1a\\n```c\\n[longyu@debian-10:21:04:29] program-problem $ gcc ./backtrace.c -o backtrace\\n[longyu@debian-10:21:04:31] program-problem $ ./backtrace\\ncalled by 0x555555555204\\ncalled by 0x555555555258\\ncalled by 0x555555555281\\ncalled by 0x5555555552a3\\n```\\n[\u7cfb\u7edf\u7a0b\u5e8f\u5458\u6210\u957f\u8ba1\u5212\uff0d\u50cf\u673a\u5668\u4e00\u6837\u601d\u8003(\u4e8c)](https://blog.csdn.net/absurd/article/details/4207357?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160423542319724836730112%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160423542319724836730112&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-4207357.pc_v1_rank_blog_v1&utm_term=%E8%B0%83%E7%94%A8&spm=1018.2118.3001.4450)\\n[](https://blog.csdn.net/absurd/article/details/4207357?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160423542319724836730112%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=160423542319724836730112&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-4207357.pc_v1_rank_blog_v1&utm_term=%E8%B0%83%E7%94%A8&spm=1018.2118.3001.4450)\u8fd9\u7bc7\u674e\u5148\u9759\u5927\u795e\u7684\u535a\u5ba2\u4e2d\uff0c\u4ece\u6839\u672c\u4e0a\u89e3\u91ca\u4e86\u6211\u4e4b\u524d\u63cf\u8ff0\u7684 addr2line \u547d\u4ee4\u4e0d\u80fd\u83b7\u53d6\u5230\u884c\u53f7\u7684\u95ee\u9898\u3002\\n\\n\u76f8\u5173\u7684\u5185\u5bb9\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n>\u5bf9\u4e8e\u5171\u4eab\u5e93\uff0caddr2line\u65e0\u6cd5\u6839\u636e\u8fd9\u4e2a\u5730\u5740\u627e\u5230\u5bf9\u5e94\u7684\u6e90\u4ee3\u7801\u4f4d\u7f6e\u4e86\u3002\u539f\u56e0\u662f\uff1aaddr2line\u53ea\u80fd\u901a\u8fc7\u5730\u5740\u504f\u79fb\u91cf\u6765\u67e5\u627e\uff0c\u800c\u6253\u5370\u51fa\u7684\u5730\u5740\u662f\u7edd\u5bf9\u5730\u5740\u3002\u7531\u4e8e\u5171\u4eab\u5e93\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u4f4d\u7f6e\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u4e3a\u4e86\u8ba1\u7b97\u5730\u5740\u504f\u79fb\u91cf\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8fdb\u7a0bmaps\u6587\u4ef6\u7684\u5e2e\u52a9\\n\\n## \u8fdb\u7a0b maps \u6587\u4ef6\u7684\u4f7f\u7528\\n\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u6709\u81ea\u5df1\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4\uff0c\u5176\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u6620\u5c04\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b /proc/[pid]/maps \u6587\u4ef6\u6765\u786e\u5b9a\u3002\\n\\n\u4e0a\u6587\u4e2d\u5df2\u7ecf\u63cf\u8ff0\u4e86\u8fd0\u884c backtrace \u7a0b\u5e8f\u5f97\u5230\u7684\u5982\u4e0b\u8f93\u51fa\u4fe1\u606f\uff1a\\n\\n```c\\n[longyu@debian-10:21:04:31] program-problem $ ./backtrace\\ncalled by 0x555555555204\\ncalled by 0x555555555258\\ncalled by 0x555555555281\\ncalled by 0x5555555552a3\\n```\\n### \u7528 gdb \u6765\u9a8c\u8bc1\\ngdb \u6302\u8d77\u7a0b\u5e8f\uff0c\u53cd\u6c47\u7f16\u8c03\u7528\u5230\u7684\u4e0d\u540c\u51fd\u6570\uff0c\u8c03\u7528\u6307\u4ee4\u4e0e\u8fd4\u56de\u5730\u5740\u6307\u4ee4\u5217\u4e3e\u5982\u4e0b\uff1a\\n\\n```asm\\n   0x000055555555529e <+20>:\\tcallq  0x555555555261 <test>\\n   **0x00005555555552a3 <+25>:\\tmov    $0x0,%eax**\\n   0x000055555555527c <+27>:\\tcallq  0x555555555238 <test1>\\n   **0x0000555555555281 <+32>:\\tmov    -0x8(%rbp),%eax**\\n   0x0000555555555253 <+27>:\\tcallq  0x5555555551c4 <test2>\\n   **0x0000555555555258 <+32>:\\tmov    -0x8(%rbp),%eax**\\n   0x00005555555551ff <+59>:\\tcallq  0x555555555135 <backtrace>\\n   **0x0000555555555204 <+64>:\\tmovl   $0x0,-0x4(%rbp)**\\n```\\n\\n\u8fd9\u91cc\u52a0\u7c97\u7684\u8868\u793a\u8fd4\u56de\u5730\u5740\uff0c\u53ef\u4ee5\u770b\u5230\u4e0e\u4e0a\u9762\u7684\u8f93\u51fa\u662f\u5bf9\u5e94\u7684\uff0c\u4e0d\u8fc7\u7531\u4e8e backtrace \u662f\u5411\u540e\u56de\u6eaf\u7684\uff0c\u4e0e\u8fd9\u91cc\u7684**\u987a\u5e8f\u521a\u597d\u76f8\u53cd**\u3002\\n\\n### \u4f7f\u7528 maps \u6587\u4ef6\u6765\u9a8c\u8bc1\\n\u4e0a\u9762 backtrace \u7a0b\u5e8f\u8fd0\u884c\u7684\u8f93\u51fa\u4fe1\u606f\u4e2d 0x555555555204 \u8fd9\u4e9b\u5730\u5740\u662f**\u7a0b\u5e8f\u88ab\u6620\u5c04\u5230\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u7684\u865a\u62df\u5730\u5740**\uff0c\u6211\u901a\u8fc7\u6267\u884c\u5982\u4e0b\u6b65\u9aa4\u6765\u83b7\u53d6\u5230\u7a0b\u5e8f\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u5e03\u5c40\uff1a\\n\\n1. \u4f7f\u7528 gdb \u8fd0\u884c backtrace \u7a0b\u5e8f\u5e76\u5728 main \u51fd\u6570\u5904\u505c\u4e0b\u6765\\n2. \u4f7f\u7528 pmap \u67e5\u770b backtrace \u7a0b\u5e8f\u7684\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u6620\u5c04\\n\\n\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u6620\u5c04\u8868\u5982\u4e0b\uff1a\\n\\n```bash\\n[longyu@debian-10:21:17:56] glibc-2.28 $ pmap -p 5201\\n5201:   /home/longyu/problem_and_solution/program-problem/backtrace\\n0000555555554000      4K r---- /home/longyu/problem_and_solution/program-problem/backtrace\\n0000555555555000      4K r-x-- /home/longyu/problem_and_solution/program-problem/backtrace\\n0000555555556000      4K r---- /home/longyu/problem_and_solution/program-problem/backtrace\\n0000555555557000      4K r---- /home/longyu/problem_and_solution/program-problem/backtrace\\n0000555555558000      4K rw--- /home/longyu/problem_and_solution/program-problem/backtrace\\n00007ffff7dea000    136K r---- /usr/lib/x86_64-linux-gnu/libc-2.28.so\\n00007ffff7e0c000   1312K r-x-- /usr/lib/x86_64-linux-gnu/libc-2.28.so\\n00007ffff7f54000    304K r---- /usr/lib/x86_64-linux-gnu/libc-2.28.so\\n00007ffff7fa0000      4K ----- /usr/lib/x86_64-linux-gnu/libc-2.28.so\\n00007ffff7fa1000     16K r---- /usr/lib/x86_64-linux-gnu/libc-2.28.so\\n00007ffff7fa5000      8K rw--- /usr/lib/x86_64-linux-gnu/libc-2.28.so\\n00007ffff7fa7000     24K rw---   [ anon ]\\n00007ffff7fd0000     12K r----   [ anon ]\\n00007ffff7fd3000      8K r-x--   [ anon ]\\n00007ffff7fd5000      4K r---- /usr/lib/x86_64-linux-gnu/ld-2.28.so\\n00007ffff7fd6000    120K r-x-- /usr/lib/x86_64-linux-gnu/ld-2.28.so\\n00007ffff7ff4000     32K r---- /usr/lib/x86_64-linux-gnu/ld-2.28.so\\n00007ffff7ffc000      4K r---- /usr/lib/x86_64-linux-gnu/ld-2.28.so\\n00007ffff7ffd000      4K rw--- /usr/lib/x86_64-linux-gnu/ld-2.28.so\\n00007ffff7ffe000      4K rw---   [ anon ]\\n00007ffffffdd000    136K rw---   [ stack ]\\n total             2148K\\n```\\n\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u5173\u6ce8 backtrace \u7a0b\u5e8f\u5728\u865a\u62df\u5185\u5b58\u7a7a\u95f4\u4e2d\u7684\u5e03\u5c40\uff0c\u53ef\u4ee5\u770b\u5230\u6709\u51e0\u4e2a\u9879\u76ee\uff0c\u8d77\u59cb\u5730\u5740\u4e3a 0000555555554000\uff0c\u5bf9\u5e94\u7684\u9879\u76ee\u5982\u4e0b\uff1a\\n\\n```bash\\n0000555555554000      4K r---- /home/longyu/problem_and_solution/program-problem/backtrace\\n```\\n0000555555554000  \u5373\u4e3a backtrace \u7a0b\u5e8f\u6620\u5c04\u7684\u8d77\u59cb\u5730\u5740\uff0c\u6211\u4eec\u7528 backtrace \u7a0b\u5e8f\u7684\u8f93\u51fa\u5730\u5740\u51cf\u6389\u8fd9\u4e2a\u8d77\u59cb\u5730\u5740\uff0c\u5c06\u4f1a\u5f97\u5230\u4e0b\u9762\u51e0\u4e2a\u5730\u5740\uff1a\\n\\n0x1204\\n0x1258\\n0x1281\\n0x12a3\\n\\n\u5c06\u8fd9\u51e0\u4e2a\u5730\u5740\u5199\u5165\u4e00\u4e2a\u540d\u4e3a test \u7684\u6587\u4ef6\u4e2d\uff0c\u4f7f\u7528 xargs \u8bfb\u53d6\u8fd9\u4e2a\u6587\u4ef6\u5236\u4f5c\u53c2\u6570\u8c03\u7528 addr2line \u547d\u4ee4\uff0c\u5f97\u5230\u4e86\u5982\u4e0b\u4fe1\u606f\uff1a\\n\\n```bash\\n[longyu@debian-10:21:37:35] program-problem $ xargs -a ./test  addr2line -e ./backtrace \\n/home/longyu/problem_and_solution/program-problem/./backtrace.c:38\\n/home/longyu/problem_and_solution/program-problem/./backtrace.c:52\\n/home/longyu/problem_and_solution/program-problem/./backtrace.c:63\\n/home/longyu/problem_and_solution/program-problem/./backtrace.c:72\\n```\\n\u53ef\u4ee5\u770b\u5230 addr2line \u6210\u529f\u89e3\u6790\u51fa\u4e86\u6307\u4ee4\u5728\u4ee3\u7801\u4e2d\u7684\u4f4d\u7f6e\u3002\u5bf9\u4e8e\u52a8\u6001\u5e93\u4e2d\u7684\u51fd\u6570\u5730\u5740\uff0c\u6709\u7c7b\u4f3c\u7684\u8fc7\u7a0b\uff01\\n\\n## \u603b\u7ed3\\n\u4e00\u4e2a\u7b80\u5355\u7684\u77e5\u8bc6\u80cc\u540e\u53ef\u80fd\u8574\u85cf\u4e86\u5f88\u591a\u7684\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\u73af\u73af\u76f8\u6263\uff0c\u5f53\u4f60\u5904\u5728\u5206\u6790\u95ee\u9898\u7684\u8fc7\u7a0b\u4e2d\u65f6\uff0c\u5e38\u5e38\u4f1a\u611f\u5230\u5934\u75db\uff0c\u4f46\u5c06\u6574\u4e2a\u8fc7\u7a0b\u4e32\u8054\u8d77\u6765\u540e\uff0c\u5374\u53c8\u4f1a\u6709\u975e\u5e38\u5927\u7684\u6210\u5c31\u611f\u3002\\n\\n\u4ece\u4e00\u4e2a\u95ee\u9898\u8df3\u8dc3\u5230\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\uff0c\u7ed5\u6765\u7ed5\u53bb\u6700\u7ec8\u53c8\u56de\u5230\u6700\u521d\u7684\u95ee\u9898\uff0c\u4e0d\u8fc7\u6b64\u65f6\u77e5\u8bc6\u9762\u5f97\u5230\u4e86\u6269\u5145\uff0c\u8f93\u5165\u589e\u52a0\u4e86\uff0c\u6709\u4e86\u8fd9\u4e2a\u589e\u52a0\u7684\u8f93\u5165\u4fe1\u606f\uff0c\u6700\u521d\u7684\u95ee\u9898\u5df2\u7ecf\u4e0d\u7b97\u662f\u95ee\u9898\u4e86\uff01\\n\\n\u672c\u6587\u7684\u95ee\u9898\u8109\u7edc\u5927\u81f4\u6709\u5982\u4e0b\u51e0\u70b9\uff1a\\n\\n1. \u5982\u4f55\u4f7f\u7528 mtrace\uff1f\\n2. mtrace \u811a\u672c\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u6253\u5370\u6e90\u7801\u884c\u53f7\uff1f\\n3. addr2line \u4e3a\u4ec0\u4e48\u4e0d\u80fd\u6253\u5370\u6e90\u7801\u884c\u53f7\uff1f\\n4. mtrace \u51fd\u6570\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\\n5. RETURN_ADDRESS \u5b8f\u7684\u5b9a\u4e49\u662f\u4ec0\u4e48\uff1f\\n6. gcc \u5185\u5efa\u7684 __builtin_return_address \u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f\\n7. \u4ece backtrace \u7a0b\u5e8f\u518d\u6b21\u56de\u5230\u7b2c\u4e09\u4e2a\u95ee\u9898\\n\\n\u6ce8\u610f\u5728\u7b2c 7 \u4e2a\u5173\u952e\u70b9\u7684\u65f6\u5019\uff0c\u53c8\u56de\u5230\u4e86 3 \u8fd9\u4e2a\u70b9\uff0c\u4e0d\u8fc7\u8fd9\u65f6\u5019\u6211\u6709\u4e86 maps \u6587\u4ef6\u8fd9\u4e2a\u8f93\u5165\uff0c\u8fd9\u4e2a\u8f93\u5165\u8ba9 addr2line \u4e0d\u80fd\u6253\u5370\u884c\u53f7\u7684\u95ee\u9898\u8fce\u5203\u800c\u89e3\uff01\\n\\n\u5217\u51fa\u8fd9\u4e9b\u5173\u952e\u70b9\u53ea\u60f3\u629b\u51fa\u4e00\u4e2a\u95ee\u9898\uff1a**\u4f60\u89c9\u5f97\u81ea\u5df1\u4f1a\u5728\u54ea\u4e2a\u70b9\u7ed3\u675f\u5462\uff1f**"},{"id":"/linux-kernel/linux-\u5185\u6838\u6a21\u5757\u4e2d\u5f15\u7528\u7b26\u53f7\u662f\u5982\u4f55\u94fe\u63a5\u7684","metadata":{"permalink":"/longyu.github.io/blog/linux-kernel/linux-\u5185\u6838\u6a21\u5757\u4e2d\u5f15\u7528\u7b26\u53f7\u662f\u5982\u4f55\u94fe\u63a5\u7684","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/linux-kernel/linux-\u5185\u6838\u6a21\u5757\u4e2d\u5f15\u7528\u7b26\u53f7\u662f\u5982\u4f55\u94fe\u63a5\u7684.md","source":"@site/blog/linux-kernel/linux-\u5185\u6838\u6a21\u5757\u4e2d\u5f15\u7528\u7b26\u53f7\u662f\u5982\u4f55\u94fe\u63a5\u7684.md","title":"linux-kernel/linux-\u5185\u6838\u6a21\u5757\u4e2d\u5f15\u7528\u7b26\u53f7\u662f\u5982\u4f55\u94fe\u63a5\u7684","description":"\u524d\u8a00","date":"2022-06-19T07:40:00.000Z","formattedDate":"2022\u5e746\u670819\u65e5","tags":[],"readingTime":10.255,"truncated":false,"authors":[],"frontMatter":{},"prevItem":{"title":"libc/\u4f7f\u7528mtrace\u8ddf\u8e2a\u5185\u5b58\u6cc4\u9732\u95ee\u9898","permalink":"/longyu.github.io/blog/libc/\u4f7f\u7528mtrace\u8ddf\u8e2a\u5185\u5b58\u6cc4\u9732\u95ee\u9898"},"nextItem":{"title":"\u5199\u535a\u5ba2\u7684\u610f\u4e49","permalink":"/longyu.github.io/blog/2022/06/12/\u5e8f\u8a00"}},"content":"## \u524d\u8a00\\nlinux \u5185\u6838\u6a21\u5757\u7684\u52a0\u8f7d\u6d41\u7a0b\u53bb\u5e74\u5927\u81f4\u7422\u78e8\u4e86\u4e00\u904d\uff0c\u7b80\u5355\u7684\u5199\u4e86\u4e2a\u8349\u7a3f\u540e\u5c31\u5728\u8349\u7a3f\u7bb1\u91cc\u79ef\u538b\u7740\u3002\u6309\u7167\u4ee5\u5f80\u7684\u98ce\u683c\uff0c\u5e94\u5f53\u4ee5\u4e00\u7bc7\u957f\u6587\u5448\u73b0\uff0c\u4eca\u5929\u60f3\u60f3\u5374\u89c9\u5f97\u4e0d\u592a\u53ef\u53d6\u3002\u4e3a\u4ec0\u4e48\u4e0d\u4ece\u5173\u952e\u7684\u95ee\u9898\u7740\u624b\uff0c\u4f7f\u7528\u8f83\u77ed\u7684\u7bc7\u5e45\u6765\u9010\u4e2a\u51fb\u7834\u5462\uff1f\\n\\n\u6700\u7ec8\u9009\u62e9\u4e86\u4ece\u95ee\u9898\u51fa\u53d1\u7684\u63cf\u8ff0\u65b9\u5f0f\uff0c\u5728\u8fd9\u79cd\u65b9\u5f0f\u4e0b\uff0c\u6211\u9996\u5148\u5f97\u63d0\u51fa\u5173\u952e\u95ee\u9898\uff0c\u8fd9\u9700\u8981\u4e00\u5b9a\u7684\u8bad\u7ec3\uff0c\u672c\u6587\u4fbf\u662f\u8fd9\u6837\u7684\u4e00\u6b21\u5b9e\u8df5\u3002\\n\\n## \u6211\u7684\u95ee\u9898\\n\\n### 1. **linux \u5185\u6838\u6a21\u5757\u662f\u5982\u4f55\u94fe\u63a5\u7684\uff1f**\\n\\n\u6682\u65f6\u65e0\u6cd5\u56de\u7b54\u3002\\n\\n### 2. \u4e3a\u4ec0\u4e48\u8981\u63d0\u8fd9\u4e2a\u95ee\u9898\uff1f\\n\\n\u5e38\u89c4\u7684 c \u7a0b\u5e8f\u8981\u7ecf\u8fc7\u7f16\u8bd1\u94fe\u63a5\u6765\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u94fe\u63a5\u7684\u8fc7\u7a0b\u4f1a\u6309\u7167\u94fe\u63a5\u811a\u672c\u7684\u914d\u7f6e\u6765\u5b8c\u6210\u53ef\u6267\u884c\u6587\u4ef6\u7684 layout \u540c\u65f6\u4e5f\u4f1a\u5bf9\u6240\u6709\u7684\u53ef\u91cd\u5b9a\u4f4d\u9879\u76ee\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u4ee5\u786e\u5b9a\u8bbf\u95ee\u5730\u5740\u504f\u79fb\u3002\\n\\nlinux \u5185\u6838\u6a21\u5757\u4e5f\u6709\u7c7b\u4f3c\u7684\u8fc7\u7a0b\uff0c\u53ef\u7f16\u8bd1\u751f\u6210\u7684\u5185\u6838\u6a21\u5757\u53ea\u662f\u4e00\u4e2a\u3010\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u3011\uff0c**\u90a3\u5b83\u7684\u94fe\u63a5\u8fc7\u7a0b\u662f\u5728\u54ea\u91cc\u6267\u884c\u7684\u5462\uff1f**\\n\\n## \u7ecf\u9a8c\u4e4b\u8c08\\n\\n\u5185\u6838\u6a21\u5757\u4e00\u822c\u901a\u8fc7 insmod\u3001modprobe \u547d\u4ee4\u52a0\u8f7d\u8fd0\u884c\uff0c\u65e2\u7136\u8981\u8fd0\u884c\uff0c\u80af\u5b9a\u9700\u8981\u786e\u5b9a\u6a21\u5757\u5185\u8c03\u7528\u7684\u5916\u90e8\u7b26\u53f7\u7684\u504f\u79fb\u5730\u5740\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u53ef\u80fd\u5728\u5982\u4e0b\u6d41\u7a0b\u4e2d\u8fdb\u884c\uff1a\\n\\n1. insmod\u3001modprobe \u547d\u4ee4\u4e2d\\n2. \u5185\u6838\u4ee3\u7801\u4e2d\u6a21\u5757\u52a0\u8f7d\u6d41\u7a0b\u4e2d\\n\\n\u66fe\u7ecf strace \u8ddf\u8e2a\u8fc7 insmod \u52a0\u8f7d\u5185\u6838\u6a21\u5757\u7684\u8fc7\u7a0b\uff0c\u6838\u5fc3\u903b\u8f91\u662f\u8c03\u7528 finit_module\u3001init_module \u7cfb\u7edf\u8c03\u7528\uff0c\u6ca1\u6709\u770b\u5230\u5176\u5b83\u64cd\u4f5c\uff0c\u4e8e\u662f\u5224\u65ad\u5185\u6838\u6a21\u5757\u7684\u94fe\u63a5\u5e94\u5f53\u662f\u5728\u5185\u6838\u4ee3\u7801\u4e2d\u505a\u7684\u3002\\n\\n\u4e0b\u9762\u6211\u4ee5\u4e00\u4e2a\u7b80\u5355\u7684 hello world \u5185\u6838\u6a21\u5757\u4e3a\u4f8b\uff0c\u63a2\u8ba8\u5185\u6838\u4e2d\u6267\u884c\u6a21\u5757\u94fe\u63a5\u7684\u8fc7\u7a0b\u3002\\n\\n## \u4e00\u4e2a\u7b80\u5355\u7684\u5185\u6838\u6a21\u5757\u6e90\u7801\\n\\n```c\\n#include <linux/module.h>\\n#include <linux/init.h>\\n\\nstatic int __init my_init(void)\\n{\\n  printk(KERN_INFO \\"Hello from Hello Module\\\\\\\\n\\");\\n  return 0;\\n}\\n\\nstatic void __exit my_exit(void)\\n{\\n  printk(KERN_INFO \\"Bye from Hello Module\\\\\\\\n\\");\\n}\\n\\nmodule_init(my_init);\\nmodule_exit(my_exit);\\n\\nMODULE_DESCRIPTION(\\"Sample Hello World Module\\");\\nMODULE_LICENSE(\\"GPL\\");\\n\\n```\\n\\n\u5c06\u4e0a\u8ff0\u5185\u5bb9\u4fdd\u5b58\u4e3a mymodule.c \u4f7f\u7528\u5982\u4e0b Makefile \u5185\u5bb9\u7f16\u8bd1\uff1a\\n\\n```makefile\\nMODULE_FILENAME=mymodule\\n\\nPWD := $(shell pwd)\\nobj-m += ${MODULE_FILENAME}.o\\nKO_FILE=${MODULE_FILENAME}.ko\\n\\nexport KROOT=/lib/modules/$(shell uname -r)/build\\nmodules:\\n\\t@${MAKE} -C ${KROOT} M=${PWD}\\n\\nmodules_install:\\n\\t@${MAKE} -C ${KROOT} M=${PWD} modules_install\\n\\nclean:\\n\\t@${MAKE} -C ${KROOT} M=${PWD} clean\\n\\trm -rf Modules.symvers modules.order\\n\\ninsert: modules\\n\\tsudo insmod ${KO_FILE}\\n\\nremove:\\n\\tsudo rmmod ${MODULE_FILENAME}\\n\\nprintlog:\\n\\tsudo dmesg -c\\n\\tsudo insmod ${KO_FILE}\\n\\tdmesg\\n```\\n\\n## objdump -d mymodule.ko\\n\\n```bash\\nDisassembly of section .init.text:\\n\\n0000000000000000 <init_module>:\\n   0:\\te8 00 00 00 00       \\tcallq  5 <init_module+0x5>\\n   5:\\t48 c7 c7 00 00 00 00 \\tmov    $0x0,%rdi\\n   c:\\te8 00 00 00 00       \\tcallq  11 <init_module+0x11>\\n  11:\\t31 c0                \\txor    %eax,%eax\\n  13:\\tc3                   \\tretq\\n\\nDisassembly of section .exit.text:\\n\\n0000000000000000 <cleanup_module>:\\n   0:\\t48 c7 c7 00 00 00 00 \\tmov    $0x0,%rdi\\n   7:\\te9 00 00 00 00       \\tjmpq   c <__UNIQUE_ID_description18>\\n\\n```\\n\\ninit_module \u4e3a\u6a21\u5757\u7684\u521d\u59cb\u5316\u51fd\u6570\uff0c\u5728\u5176\u4e2d\u8c03\u7528\u5230\u7684\u4e24\u4e2a **callq** \u6307\u4ee4\u7528\u4e8e\u5b50\u51fd\u6570\u8c03\u7528\u3002**callq** \u6307\u4ee4\u7684\u5b57\u8282\u7801\u4e3a **0xe8**\uff0c\u5176\u540e\u56db\u4e2a\u5b57\u8282\u4e3a\u51fd\u6570\u8df3\u8f6c\u504f\u79fb\uff0c\u8fd9\u91cc\u4e24\u4e2a **callq** \u6307\u4ee4\u7684\u51fd\u6570\u8df3\u8f6c\u504f\u79fb\u503c\u90fd\u4e3a 0\uff0c\u8fd9\u7b26\u5408\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u7279\u5f81\uff0c\u8fd9\u91cc\u5c31\u662f\u4e24\u5904\u9700\u8981\u94fe\u63a5\u8fc7\u7a0b\u5b8c\u6210\u7684\u91cd\u5b9a\u4f4d\u5bf9\u8c61\u3002\\n\\n\u7b2c\u4e8c\u4e2a callq \u53ef\u4ee5\u660e\u786e\u662f printk\uff0c\u7b2c\u4e00\u4e2a callq \u6839\u636e readelf -r \u7684\u8f93\u51fa\u5224\u65ad\u662f ```__fentry__ ```\u3002\\n\\n## readelf -r mymodule.ko\\n\\n```bash\\nRelocation section \'.rela.init.text\' at offset 0x1cb30 contains 3 entries:\\n  Offset          Info           Type           Sym. Value    Sym. Name + Addend\\n000000000001  002600000004 R_X86_64_PLT32    0000000000000000 __fentry__ - 4\\n000000000008  00060000000b R_X86_64_32S      0000000000000000 .rodata.str1.1 + 0\\n00000000000d  002800000004 R_X86_64_PLT32    0000000000000000 printk - 4\\n\\nRelocation section \'.rela.exit.text\' at offset 0x1cb78 contains 2 entries:\\n  Offset          Info           Type           Sym. Value    Sym. Name + Addend\\n000000000003  00060000000b R_X86_64_32S      0000000000000000 .rodata.str1.1 + 1b\\n000000000008  002800000004 R_X86_64_PLT32    0000000000000000 printk - 4\\n```\\n\\nreadelf -r \u53c2\u6570\u83b7\u53d6\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u53ef\u91cd\u5b9a\u4f4d section \u8868\u9879\u3002\u4e0a\u8ff0\u8f93\u51fa\u4e2d\u6709\u5982\u4e0b\u4e24\u4e2a\u53ef\u91cd\u5b9a\u4f4d section:\\n\\n1. .rela.init.text\\n2. .rela.exit.text\\n\\n\u6bcf\u4e2a section \u4e2d\u90fd\u5217\u4e3e\u51fa\u4e86\u3010\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u9879\u76ee\u3011\uff0c\u4e00\u4e2a\u9879\u76ee\u6709\u4e94\u4e2a\u65b9\u9762\u7684\u5185\u5bb9\uff0c\u5176\u4e2d **Offset \u4e3a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u5730\u5740\u76f8\u5bf9\u6587\u4ef6\u8d77\u59cb\u5730\u5740\u7684\u504f\u79fb\u91cf**\uff0c**Type \u4e3a\u91cd\u5b9a\u4f4d\u7684\u7c7b\u578b**\uff0c\u7528\u4e8e\u8ba1\u7b97\u504f\u79fb\u5730\u5740\uff0c**Sym. Name + Addend \u5b57\u6bb5\u4e3a\u7b26\u53f7\u540d\u79f0\u4ee5\u53ca\u8ba1\u7b97\u5730\u5740\u504f\u79fb\u91cf\u65f6\u7684\u4fee\u6b63\u503c\u3002**\\n\\n**.rela.init_text section** \u4e2d\u6709\u4e24\u79cd\u91cd\u5b9a\u4f4d\u7c7b\u578b\uff0c**R_X86_64_PLT32**  \u7528\u4e8e\u51fd\u6570\u504f\u79fb\u8ba1\u7b97\uff0c**R_X86_64_32S** \u7528\u4e8e\u6570\u636e\u504f\u79fb\u8ba1\u7b97\u3002str1.1 \u5b9e\u9645\u6307\u5411 init_module \u51fd\u6570\u4e2d printk \u51fd\u6570\u6253\u5370\u7684\u5b57\u7b26\u4e32\u3002\\n\\n\u51fd\u6570\u504f\u79fb\u7684\u8ba1\u7b97\u53ef\u4ee5\u53c2\u8003\u5982\u4e0b\u5185\u5bb9\u6765\u5b66\u4e60\uff1a\\n\\n>So despite the fact that the type of the relocation entry is R_X86_64_PLT32 the linker will still use the R_X86_64_PC32 computation (S + A - P) for the relocation target being modified, where:\\n>\\n>    S is the value of the symbol (st_value of Elf64_Sym)\\n    A is the addend (-4 in your case)\\n    P is the address of the memory location being relocated (the start of the address of the call to Other)\\n\\n\u4e0a\u8ff0\u82f1\u6587\u6458\u81ea [How does the address of R_X86_64_PLT32 computed?](https://stackoverflow.com/questions/64424692/how-does-the-address-of-r-x86-64-plt32-computed) \u66f4\u591a\u7684\u4fe1\u606f\u53ef\u4ee5\u9605\u8bfb\u300a\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u7cfb\u7edf\u300b\u7b2c\u4e09\u7248 7.7 \u8282\u3002\\n\\n\u5728\u4e0b\u6587\u4e2d\u6211\u4f1a\u7528\u4e00\u4e2a\u5b9e\u4f8b\u6765\u8bf4\u660e\u51fd\u6570\u504f\u79fb\u5730\u5740\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002\\n\\n## \u5728\u5185\u6838\u6e90\u7801\u4e2d\u627e\u5230\u6a21\u5757\u94fe\u63a5\u76f8\u5173\u4ee3\u7801\\n\\n\u4f7f\u7528 R_X86_64_PLT32 \u5173\u952e\u5b57\u8fdb\u884c\u5982\u4e0b\u641c\u7d22\uff1a\\n\\n1. \u641c\u7d22 kernel \u76ee\u5f55\\n2. \u641c\u7d22 arch/x86 \u76ee\u5f55\\n\u786e\u5b9a\u6a21\u5757\u94fe\u63a5\u6d41\u7a0b\u5728 arch/x86/kernel/module.c \u4e2d\u5b9e\u73b0\u3002\\n\\n\u9605\u8bfb module.c \u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u6709\u4e00\u4e2a\u8c03\u8bd5\u4fe1\u606f\uff0c\u4e8e\u662f\u4fee\u6539\u5185\u6838\u4ee3\u7801\uff0c\u5f00\u542f\u8c03\u8bd5\u4fe1\u606f\u3002\\n\\n## \u5185\u6838\u4ee3\u7801\u4fee\u6539 patch\\n\\n```c\\ndiff --git a/arch/x86/kernel/module.c b/arch/x86/kernel/module.c\\nindex b052e883dd8c..11e39304c55f 100644\\n--- a/arch/x86/kernel/module.c\\n+++ b/arch/x86/kernel/module.c\\n@@ -37,7 +37,7 @@\\n #include <asm/setup.h>\\n #include <asm/unwind.h>\\n\\n-#if 0\\n+#if 1\\n #define DEBUGP(fmt, ...)                               \\\\\\\\\\n        printk(KERN_DEBUG fmt, ##__VA_ARGS__)\\n #else\\n@@ -196,6 +196,7 @@ int apply_relocate_add(Elf64_Shdr *sechdrs,\\n                                goto invalid_relocation;\\n                        val -= (u64)loc;\\n                        *(u32 *)loc = val;\\n+\\n #if 0\\n                        if ((s64)val != *(s32 *)loc)\\n                                goto overflow;\\n@@ -212,6 +213,7 @@ int apply_relocate_add(Elf64_Shdr *sechdrs,\\n                               me->name, ELF64_R_TYPE(rel[i].r_info));\\n                        return -ENOEXEC;\\n                }\\n+               DEBUGP(\\"val is 0x%llx\\\\\\\\n\\", val);\\n        }\\n        return 0;\\n\\n```\\n\\n## \u91cd\u65b0\u7f16\u8bd1\u5e76\u66f4\u65b0\u5185\u6838\u540e\u52a0\u8f7d mymodule.ko \u540e dmesg \u90e8\u5206\u6253\u5370\u4fe1\u606f\\n\\n```bash\\n[  109.974417] type 4 st_value ffffffffbda016d0 r_addend fffffffffffffffc loc ffffffffc0106001\\n[  109.974418] val is 0xfffffffffd8fb6cb\\n.........\\n```\\n\\n\u7531\u4e8e\u6253\u5370\u4fe1\u606f\u5f88\u591a\uff0c\u6211\u53ea\u622a\u53d6\u4e86\u5176\u4e2d\u7684\u4e00\u6761\u9879\u76ee\u3002\u5728\u4e0a\u8ff0\u9879\u76ee\u4e2d\u5173\u952e\u7684\u4fe1\u606f\u89e3\u6790\u5982\u4e0b\uff1a\\n\\n1. type 4 \u8868\u793a\u91cd\u5b9a\u4f4d\u7c7b\u578b\u4e3a R_X86_64_PLT32 \\n2. st_value ffffffffbda016d0 \u8868\u793a ```__fentry__```\u7b26\u53f7\u5730\u5740\\n    \\n    \u901a\u8fc7\u8bbf\u95ee /proc/kallsyms \u6587\u4ef6\u786e\u5b9a\uff0c\u76f8\u5173\u4fe1\u606f\u6458\u5f55\u5982\u4e0b\uff1b\\n    \\n\\n\\t```bash\\n\\t[root@debian-10:17:55:34] helloworld_module # grep __fentry__ /proc/kallsyms\\n\\tffffffffbda016d0 T __fentry__\\n\\t```\\n\\n1. r_addend fffffffffffffffc  \u4e3a\u4e0a\u6587\u4e2d readelf -r \u8f93\u51fa\u4e2d ```__fentry__```\u51fd\u6570\u7684 Addend \u503c\u2014\u2014 -4\\n2. loc ffffffffc0106001 \u8868\u793a\u4e0a\u6587\u4e2d readelf -r \u8f93\u51fa\u4e2d```__fentry__```\u88ab\u91cd\u5b9a\u4f4d\u533a\u57df\u5728\u5185\u6838\u7684\u5b9e\u9645\u5730\u5740\\n3. val is 0xfffffffffd8fb6cb\uff0cval \u4e3a\u6700\u7ec8\u8ba1\u7b97\u51fa\u7684\u8bbf\u95ee ```__fentry__```\u51fd\u6570\u7684\u504f\u79fb\u91cf\uff0c\u4f1a\u88ab\u586b\u5145\u5230 loc \u6307\u5411\u7684\u5730\u5740\u4e2d\\n    \\n    val \u8ba1\u7b97\u516c\u5f0f\u4e3a S + A - P: ffffffffbda016d0 + fffffffffffffffc  - ffffffffc0106001 = **0xfffffffffd8fb6cb**\\n    \\n\\n## \u6838\u5fc3\u5185\u6838\u4ee3\u7801\\n\\n\u5185\u6838\u4ee3\u7801\u4e2d\u76f8\u5173\u51fd\u6570\u8c03\u7528\u5173\u7cfb\u5982\u4e0b\uff1a\\n```c\\ninit_module/finit_module\\n\\tload_module\\n       apply_relocations\\n           apply_relocate_add\\n  ```\\napply_relocate_add \u51fd\u6570\u4e2d\u5b8c\u6210\u91cd\u5b9a\u5411\u4efb\u52a1\uff0c\u6838\u5fc3\u4ee3\u7801\u6458\u5f55\u5982\u4e0b\uff1a\\n\\n```c\\n        for (i = 0; i < sechdrs[relsec].sh_size / sizeof(*rel); i++) {\\n                /* This is where to make the change */\\n                loc = (void *)sechdrs[sechdrs[relsec].sh_info].sh_addr\\n                        + rel[i].r_offset;\\n\\n                /* This is the symbol it is referring to.  Note that all\\n                   undefined symbols have been resolved.  */\\n                sym = (Elf64_Sym *)sechdrs[symindex].sh_addr\\n                        + ELF64_R_SYM(rel[i].r_info);\\n\\n                DEBUGP(\\"type %d st_value %Lx r_addend %Lx loc %Lx\\\\\\\\n\\",\\n                       (int)ELF64_R_TYPE(rel[i].r_info),\\n                       sym->st_value, rel[i].r_addend, (u64)loc);\\n\\n                val = sym->st_value + rel[i].r_addend;\\n                switch (ELF64_R_TYPE(rel[i].r_info)) {\\n                case R_X86_64_NONE:\\n                        break;\\n                case R_X86_64_64:\\n                        if (*(u64 *)loc != 0)\\n                                goto invalid_relocation;\\n                        *(u64 *)loc = val;\\n                        break;\\n                case R_X86_64_32:\\n                        if (*(u32 *)loc != 0)\\n                                goto invalid_relocation;\\n                        *(u32 *)loc = val;\\n                        if (val != *(u32 *)loc)\\n                                goto overflow;\\n                        break;\\n                case R_X86_64_32S:\\n                        if (*(s32 *)loc != 0)\\n                                goto invalid_relocation;\\n                        *(s32 *)loc = val;\\n                        if ((s64)val != *(s32 *)loc)\\n                                goto overflow;\\n                        break;\\n                case R_X86_64_PC32:\\n                case R_X86_64_PLT32:\\n                        if (*(u32 *)loc != 0)\\n                                goto invalid_relocation;\\n                        val -= (u64)loc;\\n                        *(u32 *)loc = val;\\n..........\\n\\n```\\n\\n\u4e0a\u8ff0\u4ee3\u7801\u904d\u5386\u6bcf\u4e2a\u53ef\u91cd\u5b9a\u4f4d section \u9879\u76ee\uff0cloc \u6307\u5411\u6a21\u5757\u52a0\u8f7d\u5230\u5185\u6838\u540e\u5b58\u50a8\u6bcf\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u9879\u76ee\u88ab\u91cd\u5b9a\u4f4d\u533a\u57df\u7684\u5185\u5b58\u5730\u5740\uff0c\u4ee3\u8868 **R_X86_64_PLT32**  \u4e2d\u7684\u6807\u53f7 **P**\u3002\\n\\nsym \u4e2d\u4fdd\u5b58\u5df2\u7ecf resolve \u7684\u672a\u5b9a\u4e49\u7b26\u53f7\uff0csym->value \u8868\u793a\u7b26\u53f7\u52a0\u8f7d\u5730\u5740\uff0c\u4ee3\u8868 **R_X86_64_PLT32**  \u4e2d\u7684\u6807\u53f7 **S**\u3002\\n\\nrel[i].r_addend \u4fdd\u5b58\u53ef\u91cd\u5b9a\u4f4d\u9879\u76ee\u7684 **Addend** \u503c\uff0c\u4ee3\u8868 **R_X86_64_PLT32**  \u4e2d\u7684\u6807\u53f7 **A**\u3002\\n\\n\u5728\u786e\u5b9a\u4e86\u8fd9\u4e9b\u4fe1\u606f\u540e\uff0cswitch \u8bed\u53e5\u901a\u8fc7\u53ef\u91cd\u5b9a\u4f4d\u9879\u76ee\u7684 Type \u5b57\u6bb5\u8fdb\u884c\u903b\u8f91\u5206\u53d1\uff0c\u8ba1\u7b97\u5e76\u586b\u5145\u91cd\u5b9a\u4f4d\u540e\u7684\u5730\u5740\u3002\u5bf9\u4e8e R_X86_64_PLT32  \u8fd9\u79cd\u7c7b\u578b\u6765\u8bf4\uff0c\u8ba1\u7b97\u516c\u5f0f\u5c31\u662f **S + A - P**\u3002\\n\\n## \u603b\u7ed3\\n\\n\u5584\u4e8e\u63d0\u95ee\u662f\u4e00\u79cd\u5f88\u597d\u7684\u80fd\u529b\u3002\u4e3b\u52a8\u53d1\u73b0\u5e76\u63d0\u51fa\u95ee\u9898\u7136\u540e\u79ef\u6781\u7684\u5bfb\u627e\u7b54\u6848\uff0c\u6700\u540e\u7ed9\u51fa\u5408\u7406\u7684\u7b54\u6848\uff0c\u6536\u83b7\u6210\u5c31\u611f\u5e76\u63a8\u52a8\u81ea\u5df1\u7ee7\u7eed\u63d0\u51fa\u65b0\u7684\u95ee\u9898\uff0c\u8fd9\u662f\u4e00\u4e2a\u6b63\u53cd\u9988\u3002\u4ece\u81ea\u5df1\u80fd\u591f\u56de\u7b54\u7684\u5c0f\u95ee\u9898\u5f00\u59cb\uff0c\u4e0d\u65ad\u7684\u5faa\u73af\u5f80\u590d\uff0c\u96ea\u7403\u4f1a\u8d8a\u6eda\u8d8a\u5927\uff0c\u65f6\u95f4\u6b63\u7ad9\u5728\u4f60\u8fd9\u8fb9\u3002"},{"id":"/2022/06/12/\u5e8f\u8a00","metadata":{"permalink":"/longyu.github.io/blog/2022/06/12/\u5e8f\u8a00","editUrl":"https://github.com/longyuwlz/longyu.github.io/blog/2022-06-12-\u5e8f\u8a00/index.md","source":"@site/blog/2022-06-12-\u5e8f\u8a00/index.md","title":"\u5199\u535a\u5ba2\u7684\u610f\u4e49","description":"\u6211\u6ca1\u6709\u517b\u6210\u5199\u535a\u5ba2\u7684\u4e60\u60ef\uff0c\u6211\u4e00\u76f4\u5bf9\u81ea\u5df1\u7684\u8bb0\u5fc6\u529b\u62b1\u6709\u67d0\u79cd\u7279\u522b\u7684\u81ea\u4fe1\u3002\u6700\u8fd1\u6211\u53d1\u73b0\uff0c\u6211\u4e5f\u5fd8\u8bb0\u4e86\u5f88\u591a\u4e1c\u897f\u3002\u6211\u5728\u51e0\u5468\u524d\u641c\u96c6\u4e86\u4e00\u4e9b\u8d44\u6599\uff0c\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528\u865a\u62df\u673a\u6765\u8c03\u8bd5 linux \u5185\u6838\uff0c\u4f46\u6211\u6ca1\u6709\u603b\u7ed3\u3002\u73b0\u5728\u867d\u7136\u73af\u5883\u5df2\u7ecf\u642d\u5efa\u597d\u4e86\uff0c\u4f46\u6211\u5fd8\u8bb0\u4e86\u64cd\u4f5c\u4e32\u53e3\u7684\u547d\u4ee4\u884c\uff0c\u6211\u8fd8\u5f97\u7ee7\u7eed\u67e5\u8d44\u6599\uff0c\u53c8\u5c06\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\u3002\u5982\u679c\u6709\u4e00\u5929\uff0c\u6211\u5347\u7ea7\u4e86\u7cfb\u7edf\uff0c\u90a3\u4e48\u6211\u9700\u8981\u91cd\u65b0\u4ee5\u8fc7\u6765\u4eba\u7684\u8eab\u4efd\u4ece\u96f6\u5f00\u59cb\uff0c\u8fd9\u53ea\u662f\u7b80\u5355\u7684\u91cd\u590d\uff0c\u6ca1\u6709\u5b66\u4e60\u7684\u7a7a\u95f4\u3002","date":"2022-06-12T00:00:00.000Z","formattedDate":"2022\u5e746\u670812\u65e5","tags":[{"label":"blog","permalink":"/longyu.github.io/blog/tags/blog"}],"readingTime":4.705,"truncated":false,"authors":[],"frontMatter":{"title":"\u5199\u535a\u5ba2\u7684\u610f\u4e49","tags":["blog"]},"prevItem":{"title":"linux-kernel/linux-\u5185\u6838\u6a21\u5757\u4e2d\u5f15\u7528\u7b26\u53f7\u662f\u5982\u4f55\u94fe\u63a5\u7684","permalink":"/longyu.github.io/blog/linux-kernel/linux-\u5185\u6838\u6a21\u5757\u4e2d\u5f15\u7528\u7b26\u53f7\u662f\u5982\u4f55\u94fe\u63a5\u7684"}},"content":"\u6211\u6ca1\u6709\u517b\u6210\u5199\u535a\u5ba2\u7684\u4e60\u60ef\uff0c\u6211\u4e00\u76f4\u5bf9\u81ea\u5df1\u7684\u8bb0\u5fc6\u529b\u62b1\u6709\u67d0\u79cd\u7279\u522b\u7684\u81ea\u4fe1\u3002\u6700\u8fd1\u6211\u53d1\u73b0\uff0c\u6211\u4e5f\u5fd8\u8bb0\u4e86\u5f88\u591a\u4e1c\u897f\u3002\u6211\u5728\u51e0\u5468\u524d\u641c\u96c6\u4e86\u4e00\u4e9b\u8d44\u6599\uff0c\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528\u865a\u62df\u673a\u6765\u8c03\u8bd5 linux \u5185\u6838\uff0c\u4f46\u6211\u6ca1\u6709\u603b\u7ed3\u3002\u73b0\u5728\u867d\u7136\u73af\u5883\u5df2\u7ecf\u642d\u5efa\u597d\u4e86\uff0c\u4f46\u6211\u5fd8\u8bb0\u4e86\u64cd\u4f5c\u4e32\u53e3\u7684\u547d\u4ee4\u884c\uff0c\u6211\u8fd8\u5f97\u7ee7\u7eed\u67e5\u8d44\u6599\uff0c\u53c8\u5c06\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\u3002\u5982\u679c\u6709\u4e00\u5929\uff0c\u6211\u5347\u7ea7\u4e86\u7cfb\u7edf\uff0c\u90a3\u4e48\u6211\u9700\u8981\u91cd\u65b0\u4ee5\u8fc7\u6765\u4eba\u7684\u8eab\u4efd\u4ece\u96f6\u5f00\u59cb\uff0c\u8fd9\u53ea\u662f\u7b80\u5355\u7684\u91cd\u590d\uff0c\u6ca1\u6709\u5b66\u4e60\u7684\u7a7a\u95f4\u3002\\n\\n\u4e8b\u5b9e\u4e0a\uff0c\u6211\u6700\u8fd1\u51e0\u5e74\u5fd8\u8bb0\u4e86\u5b66\u8fc7\u7684\u5f88\u591a\u4e1c\u897f\u3002\u6211\u4e00\u76f4\u90fd\u6ca1\u517b\u6210\u8bb0\u5f55\u7684\u4e60\u60ef\uff0c\u6211\u89c9\u5f97\u8fd9\u6837\u4e0b\u53bb\u6211\u6c38\u8fdc\u5728\u524d\u5b66\u540e\u5fd8\uff0c\u6c38\u8fdc\u91cd\u65b0\u5f00\u59cb\uff0c\u800c\u4e0d\u662f\u7ad9\u5728\u8fc7\u53bb\u7684\u57fa\u7840\u4e4b\u4e0a\u3002\\n\\n\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e4b\u4e0a\uff0c\u8fd9\u662f\u4e00\u53e5\u5f88\u7ecf\u5178\u7684\u540d\u8a00\u3002\u6211\u5373\u4fbf\u4e0d\u80fd\u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e4b\u4e0a\uff0c\u6211\u53ea\u8981\u80fd\u591f\u7ad9\u5728\u8fc7\u53bb\u52aa\u529b\u7684\u57fa\u7840\u4e4b\u4e0a\u5c31\u80fd\u591f\u770b\u5f97\u66f4\u8fdc\uff0c\u6bd5\u7adf\u6211\u7ad9\u7684\u66f4\u9ad8\u4e86\u5440\u3002\u53ef\u662f\u6211\u53d1\u73b0\u8fc7\u53bb\u6ca1\u6709\u6210\u4e3a\u6211\u8db3\u4e0b\u7684\u571f\u5730\uff0c\u5b83\u4ec5\u4ec5\u6210\u4e3a\u4e86\u6211\u7684\u4e00\u6bb5\u6a21\u7cca\u8bb0\u5fc6\u3002\u4e3a\u6b64\uff0c\u6211\u611f\u5230\u60ed\u6127\uff0c\u66f4\u611f\u5230\u60cb\u60dc\u3002\u6211\u660e\u660e\u53ef\u4ee5\u7ad9\u7684\u66f4\u9ad8\uff0c\u53ef\u4e0d\u597d\u7684\u4e60\u60ef\u5374\u8ba9\u6211\u603b\u662f\u7ad9\u5728\u5e73\u5730\u3002\\n\\n\u4eca\u5929\u6211\u6240\u62e5\u6709\u7684\u4e00\u5207\u90fd\u662f\u6211\u81ea\u5df1\u4e00\u6b65\u6b65\u83b7\u53d6\u7684\uff0c\u8fd9\u4e9b\u4e8b\u60c5\u6709\u597d\u6709\u574f\uff0c\u5b83\u6784\u6210\u4e86\u6211\u73b0\u5728\u6240\u6709\u7684\u751f\u6d3b\u3002\u5982\u679c\u6211\u6709\u4efb\u4f55\u7684\u4e0d\u6ee1\u4e0e\u6094\u6068\uff0c\u6211\u90fd\u53ea\u80fd\u62b1\u6028\u81ea\u5df1\u3002\u6211\u89c9\u5f97\u81ea\u5df1\u5f88\u53ef\u803b\uff0c\u81ea\u5df1\u5f88\u53ef\u60b2\uff0c\u81ea\u5df1\u5f88\u53ef\u601c\u3002\u53ef\u6211\u66f4\u660e\u767d\u53ea\u6709\u6539\u53d8\u80fd\u591f\u8ba9\u6211\u62e5\u6709\u8fdb\u5165\u4e00\u4e2a\u597d\u73af\u5883\u7684\u5165\u573a\u5238\uff0c\u6211\u8981\u8fd9\u6837\u53bb\u505a\u3002\\n\\n\u5199\u535a\u5ba2\u662f\u6587\u5b57\u7684\u4e00\u4e2a\u7a81\u7834\u70b9\u3002\u60f3\u8981\u66f4\u52a0\u51c6\u786e\u3001\u6e05\u695a\u7684\u8868\u8fbe\u51fa\u4e00\u4ef6\u4e8b\u60c5\uff0c\u8fd9\u672c\u8eab\u5c31\u9700\u8981\u5f3a\u5927\u7684\u6587\u7b14\u652f\u6301\u3002\u6211\u786e\u5b9e\u5199\u8fc7\u4e86\u5f88\u591a\u6587\u7ae0\uff0c\u4f46\u6211\u552f\u4e00\u6e05\u695a\u7684\u662f\u6211\u8fd8\u6709\u5f88\u5927\u7684\u4e0a\u5347\u7a7a\u95f4\uff0c\u6211\u7684\u6587\u5b57\u8fd8\u53ef\u4ee5\u66f4\u597d\u3002\u8fd9\u5c31\u662f\u5199\u535a\u5ba2\u5bf9\u6211\u7684\u4e00\u5927\u610f\u4e49\u3002\\n\\n\u540c\u65f6\uff0c\u5199\u535a\u5ba2\u4e5f\u5c06\u5e2e\u52a9\u6211\u4fdd\u7559\u4f4f\u8fc7\u53bb\u7684\u57fa\u7840\uff0c\u8ba9\u6211\u4e0d\u7528\u6bcf\u6b21\u90fd\u91cd\u65b0\u5f00\u59cb\uff0c\u54ea\u6015\u4ec5\u4ec5\u80fd\u591f\u63d0\u4f9b\u8f7b\u5fae\u7684\u53c2\u8003\u4ef7\u503c\uff0c\u8fd9\u4e5f\u80fd\u8282\u7701\u6211\u7684\u65f6\u95f4\u3002\\n\\n\u5199\u535a\u5ba2\u4e5f\u662f\u5411\u4ed6\u4eba\u5c55\u793a\u81ea\u6211\u7684\u4e00\u6b21\u5c1d\u8bd5\uff0c\u867d\u7136\u8fd9\u70b9\u5e76\u4e0d\u662f\u521d\u8877\u6240\u5728\u3002\\n\\n\u73b0\u6709\u535a\u6587\u7684\u6570\u91cf\u5df2\u7ecf\u5341\u5206\u5e9e\u5927\uff0c\u6211\u60f3\u5199\u7684\u4e1c\u897f\u5f88\u591a\u4eba\u90fd\u5df2\u7ecf\u5199\u8fc7\u4e86\u3002\u53ef\u6211\u60f3\u6211\u4ecd\u65e7\u80fd\u591f\u5199\u51fa\u65b0\u7684\u4e1c\u897f\uff0c\u6211\u4ee5\u81ea\u5df1\u7684\u89c6\u89d2\u4e0e\u601d\u7ef4\u6765\u7ec4\u7ec7\u6587\u5b57\uff0c\u81f3\u5c11\u8fd9\u4e9b\u6587\u5b57\u662f\u72ec\u95e8\u72ec\u9662\u7684\uff0c\u5b83\u62e5\u6709\u4ec5\u4ec5\u5c5e\u4e8e\u6211\u7684\u98ce\u683c\u3002\u90a3\u4e48\u5c31\u8ba9\u6211\u4ee5\u535a\u5ba2\u6765\u63cf\u7ed8\u51fa\u5b8c\u6574\u7684\u81ea\u6211\u8096\u50cf\u5427\uff01\\n\\n## \u5199\u535a\u5ba2\u63a8\u52a8\u601d\u8003\\n\u8fd9\u7bc7\u6587\u7ae0\u5df2\u7ecf\u53d1\u4e86\u6709\u4e00\u4e24\u5e74\u4e86\uff0c\u4eca\u5929\u6211\u89c9\u5f97\u5176\u5b9e\u6211\u5199\u535a\u5ba2\u7684\u4e3b\u8981\u76ee\u7684\u662f\u60f3\u51ed\u501f\u8fd9\u4e00\u8fc7\u7a0b\u6765\u63a8\u52a8\u81ea\u6211\u601d\u8003\u3002\u5728\u7814\u7a76\u4e00\u4e9b\u4ee3\u7801\u65f6\uff0c\u53ef\u80fd\u4e0d\u591f\u6df1\u5165\uff0c\u770b\u7684\u6a21\u6a21\u7cca\u7cca\uff0c\u53ef\u771f\u6b63\u603b\u7ed3\u8d77\u6765\uff0c\u5374\u4e0d\u5f97\u4e0d\u6df1\u5165\u7684\u601d\u8003\u4ee5\u514d\u5199\u51fa\u4e91\u91cc\u96fe\u91cc\u7684\u6587\u7ae0\u3002\\n\\n\u6211\u529b\u6c42\u8ba9\u5199\u535a\u5ba2\u6210\u4e3a\u63a8\u52a8\u81ea\u5df1\u601d\u8003\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u66f4\u8fdb\u4e00\u6b65\u5c06\u5176\u53d1\u5c55\u4e3a\u4e00\u79cd\u4e60\u60ef\uff0c\u8fd9\u6837\u601d\u8003\u4fbf\u80fd\u591f\u6269\u5927\uff0c\u800c\u8fd9\u6b63\u662f\u6211\u8ba4\u53ef\u7684\u7ade\u4e89\u529b\u6240\u5728\uff01\u6050\u6015\u8fd9\u624d\u662f\u6211\u5199\u535a\u5ba2\u7684\u610f\u4e49\uff01\u81f3\u4e8e\u8bf4\u5f62\u5f0f\u4e0a\u7684\uff0c\u6216\u8005\u522b\u4eba\u8ba4\u4e3a\u7684\uff0c\u6216\u8005\u5176\u5b83\u7684\u4e1c\u897f\u5728\u8fd9\u4e2a\u610f\u4e49\u9762\u524d\u90fd\u53d8\u5f97\u65e0\u5173\u7d27\u8981\u4e86\uff01"}]}')}}]);