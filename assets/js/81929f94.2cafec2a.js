"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[4268],{3905:function(n,e,t){t.d(e,{Zo:function(){return s},kt:function(){return u}});var r=t(7294);function c(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){c(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,c=function(n,e){if(null==n)return{};var t,r,c={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(c[t]=n[t]);return c}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(c[t]=n[t])}return c}var p=r.createContext({}),l=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},s=function(n){var e=l(n.components);return r.createElement(p.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},_=r.forwardRef((function(n,e){var t=n.components,c=n.mdxType,o=n.originalType,p=n.parentName,s=a(n,["components","mdxType","originalType","parentName"]),_=l(t),u=c,m=_["".concat(p,".").concat(u)]||_[u]||d[u]||o;return t?r.createElement(m,i(i({ref:e},s),{},{components:t})):r.createElement(m,i({ref:e},s))}));function u(n,e){var t=arguments,c=e&&e.mdxType;if("string"==typeof n||c){var o=t.length,i=new Array(o);i[0]=_;var a={};for(var p in e)hasOwnProperty.call(e,p)&&(a[p]=e[p]);a.originalType=n,a.mdxType="string"==typeof n?n:c,i[1]=a;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}_.displayName="MDXCreateElement"},7090:function(n,e,t){t.r(e),t.d(e,{assets:function(){return s},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return d}});var r=t(7462),c=t(3366),o=(t(7294),t(3905)),i=["components"],a={},p="\u66ff\u4ee3\u4f20\u7edf ps\u3001top \u7b49\u8fdb\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u7684\u65b9\u6848",l={unversionedId:"\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/\u66ff\u4ee3\u4f20\u7edf ps\u3001top \u7b49\u8fdb\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u7684\u65b9\u6848",id:"\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/\u66ff\u4ee3\u4f20\u7edf ps\u3001top \u7b49\u8fdb\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u7684\u65b9\u6848",title:"\u66ff\u4ee3\u4f20\u7edf ps\u3001top \u7b49\u8fdb\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u7684\u65b9\u6848",description:"\u4f20\u7edf\u7684 ps\u3001top \u547d\u4ee4\u7684\u5de5\u4f5c\u539f\u7406\u4e0e\u7f3a\u70b9",source:"@site/docs/\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/\u66ff\u4ee3\u4f20\u7edf ps\u3001top \u7b49\u8fdb\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u7684\u65b9\u6848.md",sourceDirName:"\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790",slug:"/\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/\u66ff\u4ee3\u4f20\u7edf ps\u3001top \u7b49\u8fdb\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u7684\u65b9\u6848",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/\u66ff\u4ee3\u4f20\u7edf ps\u3001top \u7b49\u8fdb\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u7684\u65b9\u6848",draft:!1,editUrl:"https://github.com/longyuwlz/longyu.github.io/docs/\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/\u66ff\u4ee3\u4f20\u7edf ps\u3001top \u7b49\u8fdb\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u7684\u65b9\u6848.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u4ece\u7cfb\u7edf\u8c03\u7528\u89d2\u5ea6\u5206\u6790 ethregs dump \u5bc4\u5b58\u5668\u539f\u7406",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/\u547d\u4ee4\u5b9e\u73b0\u539f\u7406\u5206\u6790/\u4ece\u7cfb\u7edf\u8c03\u7528\u89d2\u5ea6\u5206\u6790 ethregs dump \u5bc4\u5b58\u5668\u539f\u7406"},next:{title:"UNIX/LINUX \u54f2\u5b66",permalink:"/longyu.github.io/\u6280\u672f\u535a\u5ba2/linux-system/\u54f2\u5b66/UNIX \u54f2\u5b66"}},s={},d=[{value:"\u4f20\u7edf\u7684 ps\u3001top \u547d\u4ee4\u7684\u5de5\u4f5c\u539f\u7406\u4e0e\u7f3a\u70b9",id:"\u4f20\u7edf\u7684-pstop-\u547d\u4ee4\u7684\u5de5\u4f5c\u539f\u7406\u4e0e\u7f3a\u70b9",level:2},{value:"\u7f51\u4e0a\u641c\u5230\u7684\u76f8\u5173\u5185\u5bb9",id:"\u7f51\u4e0a\u641c\u5230\u7684\u76f8\u5173\u5185\u5bb9",level:2},{value:"task_diag \u65b9\u5f0f",id:"task_diag-\u65b9\u5f0f",level:2},{value:"connector \u7684\u5b9e\u4f8b cn_proc \u9a71\u52a8",id:"connector-\u7684\u5b9e\u4f8b-cn_proc-\u9a71\u52a8",level:2},{value:"cn_proc \u9a71\u52a8\u4f7f\u7528 demo",id:"cn_proc-\u9a71\u52a8\u4f7f\u7528-demo",level:3}],_={toc:d};function u(n){var e=n.components,t=(0,c.Z)(n,i);return(0,o.kt)("wrapper",(0,r.Z)({},_,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u66ff\u4ee3\u4f20\u7edf-pstop-\u7b49\u8fdb\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u7684\u65b9\u6848"},"\u66ff\u4ee3\u4f20\u7edf ps\u3001top \u7b49\u8fdb\u7a0b\u76d1\u63a7\u7a0b\u5e8f\u7684\u65b9\u6848"),(0,o.kt)("h2",{id:"\u4f20\u7edf\u7684-pstop-\u547d\u4ee4\u7684\u5de5\u4f5c\u539f\u7406\u4e0e\u7f3a\u70b9"},"\u4f20\u7edf\u7684 ps\u3001top \u547d\u4ee4\u7684\u5de5\u4f5c\u539f\u7406\u4e0e\u7f3a\u70b9"),(0,o.kt)("p",null,"\u5728 linux \u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u4f1a\u4f7f\u7528 ps \u4e0e top \u547d\u4ee4\u6765",(0,o.kt)("strong",{parentName:"p"},"\u83b7\u53d6"),"\u7cfb\u7edf\u4e2d\u7684",(0,o.kt)("strong",{parentName:"p"},"\u8fdb\u7a0b\u4fe1\u606f"),"\u3002\nps \u4e0e top \u547d\u4ee4\u5176\u5de5\u4f5c\u539f\u7406\u662f\u901a\u8fc7",(0,o.kt)("strong",{parentName:"p"},"\u626b\u63cf")," /proc \u4e0b\u7684\u6bcf\u4e2a ",(0,o.kt)("strong",{parentName:"p"},"pid \u5b50\u76ee\u5f55"),"\u6765\n\u6536\u96c6\u4fe1\u606f\uff0c\u8fd9\u6837\u7684\u65b9\u5f0f\u975e\u5e38",(0,o.kt)("strong",{parentName:"p"},"\u7b80\u5355"),"\uff0c\u5374\u6709\u5982\u4e0b\u51e0\u4e2a\u7f3a\u70b9\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"\u9700\u8981\u6267\u884c\u8bb8\u591a\u6b21\u7cfb\u7edf\u8c03\u7528")),(0,o.kt)("p",{parentName:"li"},"\u5bf9\u4e8e\u6bcf\u4e00\u4e2a pid \u81f3\u5c11\u9700\u8981\u4e09\u6b21\u7cfb\u7edf\u8c03\u7528\u2014\u2014open, read, close")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"\u591a\u79cd\u683c\u5f0f")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"/proc/PID \u76ee\u5f55\u4e2d\u6709\u9700\u8981\u4e0d\u540c\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u6bcf\u79cd\u7279\u5b9a\u7684\u683c\u5f0f\u90fd\u8981\n")),(0,o.kt)("p",{parentName:"li"},"\u7f16\u5199\u89e3\u6790\u5668\u3002")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"\u4e0d\u53ef\u6269\u5c55\u7684\u683c\u5f0f")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"\u4e00\u4e9b\u4f4d\u4e8e /proc/PID \u4e2d\u7684\u683c\u5f0f\u662f\u4e0d\u53ef\u6269\u5c55\u7684\u3002\u4f8b\u5982\uff0c/proc/PID/maps \u7684\n")),(0,o.kt)("p",{parentName:"li"},"\u6700\u540e\u4e00\u5217\uff08\u6587\u4ef6\u540d\uff09\u662f\u53ef\u9009\u7684\uff0c\u56e0\u6b64\u6ca1\u6709\u5176\u5b83\u65b9\u5f0f\u6765\u6253\u7834\u5f53\u524d\u7684\u683c\u5f0f\u4ee5\u6dfb\u52a0\u66f4\u591a\u7684\u5217\u3002")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"\u989d\u5916\u7684\u4fe1\u606f\u8d1f\u8f7d\u9020\u6210\u8bfb\u53d6\u901f\u5ea6\u964d\u4f4e")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"\u4e00\u4e9b\u65f6\u5019\uff0c\u83b7\u53d6\u4fe1\u606f\u7684\u901f\u5ea6\u4f1a\u7531\u4e8e\u83b7\u53d6\u4e00\u4e9b\u4e0d\u9700\u8981\u7684\u5c5e\u6027\u4fe1\u606f\u800c\u53d8\u6162\u3002\u4f8b\u5982\uff0c/proc/PID/smaps \u5305\u542b VmFlags \u5b57\u6bb5\uff08\u4e0d\u80fd\u88ab\u6dfb\u52a0\u5230 /proc/PID/maps\n")),(0,o.kt)("p",{parentName:"li"},"\uff0c\u4e2d\uff0c\u4f46\u662f\u5176\u4e2d\u4e5f\u5305\u542b\u4e86\u9700\u8981\u82b1\u8f83\u957f\u65f6\u95f4\u6765\u751f\u6210\u7684\u9875\u7edf\u8ba1\u4fe1\u606f\uff09\u3002"))),(0,o.kt)("p",null,"\u4ee5\u4e0a\u4fe1\u606f\u6458\u81ea\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://lwn.net/Articles/683371/"},"add a new interface to get information about processes "),"\u3002"),(0,o.kt)("h2",{id:"\u7f51\u4e0a\u641c\u5230\u7684\u76f8\u5173\u5185\u5bb9"},"\u7f51\u4e0a\u641c\u5230\u7684\u76f8\u5173\u5185\u5bb9"),(0,o.kt)("p",null,"\u4ece\u4e0a\u9762\u63d0\u5230\u7684\u4fe1\u606f\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 ps \u4e0e top \u547d\u4ee4\u6240\u4ee3\u8868\u7684 linux \u4e2d\u4f20\u7edf\n\u3001\u7a0b\u5e8f\u4fe1\u606f\u83b7\u53d6\u3001\u76d1\u63a7\u5de5\u5177",(0,o.kt)("strong",{parentName:"p"},"\u9700\u8981\u8fdb\u884c\u6539\u8fdb"),"\u3002\u4ece\u7f51\u4e0a\u80fd\u591f\u641c\u7d22\u5230\u4e24\u79cd\u7c7b\u4f3c\u7684\u89e3\u51b3\u65b9\u6848\uff0c\n\u4e24\u8005\u90fd\u4f7f\u7528\u4e86 ",(0,o.kt)("strong",{parentName:"p"},"netlink \u6765\u83b7\u53d6\u8fdb\u7a0b\u4fe1\u606f"),"\uff0c\u5177\u4f53\u7684\u7ec6\u8282\u53c8\u6709\u6240\u533a\u522b\u3002"),(0,o.kt)("h2",{id:"task_diag-\u65b9\u5f0f"},"task_diag \u65b9\u5f0f"),(0,o.kt)("p",null,"task_diag \u9700\u8981\u5bf9\u5185\u6838\u8fdb\u884c\u4fee\u6539\u4ee5\u63d0\u4f9b\u5fc5\u8981\u7684\u529f\u80fd\uff0c\u9879\u76ee github \u5730\u5740\u5982\u4e0b\uff1a"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/avagin/linux-task-diag"},"linux task diag")),(0,o.kt)("p",null,"\u8fd9\u4e2a\u65b9\u5f0f\u4e0d\u4ec5\u9700\u8981\u4fee\u6539\u5185\u6838\uff0c\u8fd8\u9700\u8981\u7f16\u5199\u7528\u6237\u6001\u7a0b\u5e8f\u6765\u63a5\u6536\u3001\u89e3\u6790 netlink \u6d88\u606f\u3002"),(0,o.kt)("p",null,"\u6b64\u9879\u76ee\u57fa\u4e8e ",(0,o.kt)("strong",{parentName:"p"},"linux 5.8")," \u5185\u6838\u4fee\u6539\uff0c\u66f4\u65e9\u7684\u7248\u672c\u9700\u8981",(0,o.kt)("strong",{parentName:"p"},"\u8fdb\u884c\u9002\u914d"),"\u3002\u8fd9\u4e2a\u65b9\u6848\u4e2d\u4f1a\u521b\n\u5efa\u4e00\u4e2a /proc/task_diag \u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u7684\u63a7\u5236\u4f9d\u8d56\u5982\u4e0b\u89c4\u5219\u8fdb\u884c\uff1a"),(0,o.kt)("blockquote",null,(0,o.kt)("ol",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ol"},"\u4f20\u8f93\uff1a\u5199\u8bf7\u6c42\uff0c\u8bfb\u56de\u590d"),(0,o.kt)("li",{parentName:"ol"},"netlink \u4fe1\u606f\u683c\u5f0f (\u4e0e sock_diag \u4f7f\u7528\u7684\u7c7b\u4f3c\uff0c\u6570\u636e\u662f\u4e8c\u8fdb\u5236\u683c\u5f0f\u5e76\u4e14\u53ef\u4ee5\n\u6269\u5c55)"),(0,o.kt)("li",{parentName:"ol"},"\u53ef\u4ee5\u652f\u6301\u83b7\u53d6\u6307\u5b9a\u96c6\u5408\u7684\u8fdb\u7a0b\u4fe1\u606f**"),(0,o.kt)("li",{parentName:"ol"},"\u53ef\u9009\u7684\u5c5e\u6027\u7ec4\u4fe1\u606f \u4e00\u4e2a\u7ec4\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u5c5e\u6027\u90fd\u4e0d\u4f1a\u5f71\u54cd\u54cd\u5e94\u65f6\u95f4\u3002"))),(0,o.kt)("p",null,"\u66f4\u591a\u7684\u4fe1\u606f\u8bf7\u8bbf\u95ee ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/avagin/linux-task-diag"},"linux task diag"),"\u3002"),(0,o.kt)("h2",{id:"connector-\u7684\u5b9e\u4f8b-cn_proc-\u9a71\u52a8"},"connector \u7684\u5b9e\u4f8b cn_proc \u9a71\u52a8"),(0,o.kt)("p",null,"connector \u63d0\u4f9b\u4e86\u4e00\u79cd\u7edf\u4e00\u7684\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u4e4b\u95f4\u901a\u8fc7 netlink socket \u534f\u8bae\u5c42\n\u8fdb\u884c\u901a\u4fe1\u7684",(0,o.kt)("strong",{parentName:"p"},"\u6807\u51c6\u6846\u67b6"),"\uff0c\u5b83\u5b9e\u73b0\u4e86\u4e00\u79cd",(0,o.kt)("strong",{parentName:"p"},"\u865a\u62df\u8bbe\u5907"),"\uff0c\u901a\u8fc7\u8fd9\u79cd\u8bbe\u5907\u5185\u6838\u53ef\n\u4ee5\u4e0e\u7528\u6237\u6001\u7a0b\u5e8f\u901a\u8fc7 netlink \u8fdb\u884c\u901a\u4fe1\uff0c\u4f20\u8f93\u56fa\u5b9a\u683c\u5f0f\u4fe1\u606f\u7684\u62a5\u6587\u3002"),(0,o.kt)("p",null,"cn_proc \u9a71\u52a8\u4f7f\u7528\u4e86 connector \u9a71\u52a8\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u80fd\u591f\u5c06\u8fdb\u7a0b\u4e8b\u4ef6\u62a5\u544a\u7ed9\u7528\u6237\u6001\u7a0b\u5e8f"),"\u3002\u5b83\n\u4f1a\u53d1\u9001\u8bf8\u5982\u8fdb\u7a0b fork\u3001exec\u3001id change (uid\uff0cgid\uff0csuid\uff0cetc \u7b49)\uff0c\u4ee5\u53ca\nexit \u4e8b\u4ef6\u7684 netlink \u6d88\u606f\u3002"),(0,o.kt)("p",null,"cn_proc \u9a71\u52a8\u9488\u5bf9\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e8b\u4ef6\u7f16\u5199\u4e86\u4e0d\u540c\u7684\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u5904\u7406\u51fd\n\u6570\u6267\u884c\u7684\u8fc7\u7a0b\u5927\u62b5\u76f8\u540c\uff0c\u90fd\u6709\u5982\u4e0b\u6b65\u9aa4\uff1a"),(0,o.kt)("blockquote",null,(0,o.kt)("ol",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ol"},"\u4f7f\u7528\u4f20\u5165\u7684\u53c2\u6570\uff08\u8fdb\u7a0b\u7684 task_struct \u6307\u9488\u3001\u5176\u5b83\u503c\uff09\u5236\u4f5c\u6d88\u606f\u4e0e\u4e8b\u4ef6"),(0,o.kt)("li",{parentName:"ol"},"\u8c03\u7528 connector \u6846\u67b6\u63d0\u4f9b\u7684 cn_netlink_send \u51fd\u6570\u53d1\u9001 netlink \u6d88\u606f"))),(0,o.kt)("p",null,"\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u5728\u8c03\u7528 cn_netlink_sendcn_netlink_send \u51fd\u6570\u53d1\u9001 netlink \u6d88\u606f\u524d\uff0c\u9700\u8981",(0,o.kt)("strong",{parentName:"p"},"\u8bbe\u5b9a\u6d88\u606f\u7684 seq \u53f7"),"\uff0c\u4e3a\u4e86\u4fdd\u6301\u8fd9\u4e2a seq \u53f7\u7684",(0,o.kt)("strong",{parentName:"p"},"\u4e00\u81f4\u6027"),"\uff0c\u5728\u8c03\u7528 cn_netlink_send \u65f6\u4f1a",(0,o.kt)("strong",{parentName:"p"},"\u5173\u95ed\u5185\u6838\u62a2\u5360\u529f\u80fd"),"\u3002"),(0,o.kt)("p",null,"\u5728\u5185\u6838\u4ee3\u7801\u4e2d\u641c\u7d22\uff0c\u80fd\u591f\u68c0\u7d22\u5230\u5982\u4e0b\u76f8\u5173\u4ee3\u7801\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"./exec.c:1701:      proc_exec_connector(current);\n./exit.c:901:   proc_exit_connector(tsk);\n./ptrace.c:455:     proc_ptrace_connector(task, PTRACE_ATTACH);\n./ptrace.c:565: proc_ptrace_connector(child, PTRACE_DETACH);\n./signal.c:2564:            proc_coredump_connector(current);\n./cred.c:491:       proc_id_connector(task, PROC_EVENT_UID);\n./cred.c:497:       proc_id_connector(task, PROC_EVENT_GID);\n./sys.c:1182:       proc_sid_connector(group_leader);\n./sys.c:2326:       proc_comm_connector(me);\n./fork.c:2079:  proc_fork_connector(p);\n")),(0,o.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff0c\u591a\u4e2a\u8fdb\u7a0b\u7684\u72b6\u6001\u4e8b\u4ef6\uff0c\u8bf8\u5982 fork\u3001exec\u3001exit\u3001traced \u90fd\u4f1a\u53d1\u9001\u76f8\n\u5e94\u7684 netlink \u6d88\u606f\u3002"),(0,o.kt)("h3",{id:"cn_proc-\u9a71\u52a8\u4f7f\u7528-demo"},"cn_proc \u9a71\u52a8\u4f7f\u7528 demo"),(0,o.kt)("p",null,"demo \u6458\u81ea\u2014\u2014",(0,o.kt)("a",{parentName:"p",href:"https://bewareofgeek.livejournal.com/2945.html"},"linux process monitoring (exec, fork, exit, set",(0,o.kt)("em",{parentName:"a"},"uid, set"),"gid)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'#include <sys/socket.h>\n#include <linux/netlink.h>\n#include <linux/connector.h>\n#include <linux/cn_proc.h>\n#include <signal.h>\n#include <errno.h>\n#include <stdbool.h>\n#include <unistd.h>\n#include <string.h>\n#include <stdlib.h>\n#include <stdio.h>\n\n/*\n * connect to netlink\n * returns netlink socket, or -1 on error\n */\nstatic int nl_connect()\n{\n    int rc;\n    int nl_sock;\n    struct sockaddr_nl sa_nl;\n\n    nl_sock = socket(PF_NETLINK, SOCK_DGRAM, NETLINK_CONNECTOR);\n    if (nl_sock == -1) {\n        perror("socket");\n        return -1;\n    }\n\n    sa_nl.nl_family = AF_NETLINK;\n    sa_nl.nl_groups = CN_IDX_PROC;\n    sa_nl.nl_pid = getpid();\n\n    rc = bind(nl_sock, (struct sockaddr *)&sa_nl, sizeof(sa_nl));\n    if (rc == -1) {\n        perror("bind");\n        close(nl_sock);\n        return -1;\n    }\n\n    return nl_sock;\n}\n\n/*\n * subscribe on proc events (process notifications)\n */\nstatic int set_proc_ev_listen(int nl_sock, bool enable)\n{\n    int rc;\n    struct __attribute__ ((aligned(NLMSG_ALIGNTO))) {\n        struct nlmsghdr nl_hdr;\n        struct __attribute__ ((__packed__)) {\n            struct cn_msg cn_msg;\n            enum proc_cn_mcast_op cn_mcast;\n        };\n    } nlcn_msg;\n\n    memset(&nlcn_msg, 0, sizeof(nlcn_msg));\n    nlcn_msg.nl_hdr.nlmsg_len = sizeof(nlcn_msg);\n    nlcn_msg.nl_hdr.nlmsg_pid = getpid();\n    nlcn_msg.nl_hdr.nlmsg_type = NLMSG_DONE;\n\n    nlcn_msg.cn_msg.id.idx = CN_IDX_PROC;\n    nlcn_msg.cn_msg.id.val = CN_VAL_PROC;\n    nlcn_msg.cn_msg.len = sizeof(enum proc_cn_mcast_op);\n\n    nlcn_msg.cn_mcast = enable ? PROC_CN_MCAST_LISTEN : PROC_CN_MCAST_IGNORE;\n\n    rc = send(nl_sock, &nlcn_msg, sizeof(nlcn_msg), 0);\n    if (rc == -1) {\n        perror("netlink send");\n        return -1;\n    }\n\n    return 0;\n}\n\n/*\n * handle a single process event\n */\nstatic volatile bool need_exit = false;\nstatic int handle_proc_ev(int nl_sock)\n{\n    int rc;\n    struct __attribute__ ((aligned(NLMSG_ALIGNTO))) {\n        struct nlmsghdr nl_hdr;\n        struct __attribute__ ((__packed__)) {\n            struct cn_msg cn_msg;\n            struct proc_event proc_ev;\n        };\n    } nlcn_msg;\n\n    while (!need_exit) {\n        rc = recv(nl_sock, &nlcn_msg, sizeof(nlcn_msg), 0);\n        if (rc == 0) {\n            /* shutdown? */\n            return 0;\n        } else if (rc == -1) {\n            if (errno == EINTR) continue;\n            perror("netlink recv");\n            return -1;\n        }\n        switch (nlcn_msg.proc_ev.what) {\n            case PROC_EVENT_NONE:\n                printf("set mcast listen ok\\n");\n                break;\n            case PROC_EVENT_FORK:\n                printf("fork: parent tid=%d pid=%d -> child tid=%d pid=%d\\n",\n                        nlcn_msg.proc_ev.event_data.fork.parent_pid,\n                        nlcn_msg.proc_ev.event_data.fork.parent_tgid,\n                        nlcn_msg.proc_ev.event_data.fork.child_pid,\n                        nlcn_msg.proc_ev.event_data.fork.child_tgid);\n                break;\n            case PROC_EVENT_EXEC:\n                printf("exec: tid=%d pid=%d\\n",\n                        nlcn_msg.proc_ev.event_data.exec.process_pid,\n                        nlcn_msg.proc_ev.event_data.exec.process_tgid);\n                break;\n            case PROC_EVENT_UID:\n                printf("uid change: tid=%d pid=%d from %d to %d\\n",\n                        nlcn_msg.proc_ev.event_data.id.process_pid,\n                        nlcn_msg.proc_ev.event_data.id.process_tgid,\n                        nlcn_msg.proc_ev.event_data.id.r.ruid,\n                        nlcn_msg.proc_ev.event_data.id.e.euid);\n                break;\n            case PROC_EVENT_GID:\n                printf("gid change: tid=%d pid=%d from %d to %d\\n",\n                        nlcn_msg.proc_ev.event_data.id.process_pid,\n                        nlcn_msg.proc_ev.event_data.id.process_tgid,\n                        nlcn_msg.proc_ev.event_data.id.r.rgid,\n                        nlcn_msg.proc_ev.event_data.id.e.egid);\n                break;\n            case PROC_EVENT_EXIT:\n                printf("exit: tid=%d pid=%d exit_code=%d\\n",\n                        nlcn_msg.proc_ev.event_data.exit.process_pid,\n                        nlcn_msg.proc_ev.event_data.exit.process_tgid,\n                        nlcn_msg.proc_ev.event_data.exit.exit_code);\n                break;\n            default:\n                printf("unhandled proc event\\n");\n                break;\n        }\n    }\n\n    return 0;\n}\n\nstatic void on_sigint(int unused)\n{\n    need_exit = true;\n}\n\nint main(int argc, const char *argv[])\n{\n    int nl_sock;\n    int rc = EXIT_SUCCESS;\n\n    signal(SIGINT, &on_sigint);\n    siginterrupt(SIGINT, true);\n\n    nl_sock = nl_connect();\n    if (nl_sock == -1)\n        exit(EXIT_FAILURE);\n\n    rc = set_proc_ev_listen(nl_sock, true);\n    if (rc == -1) {\n        rc = EXIT_FAILURE;\n        goto out;\n    }\n\n    rc = handle_proc_ev(nl_sock);\n    if (rc == -1) {\n        rc = EXIT_FAILURE;\n        goto out;\n    }\n\n    set_proc_ev_listen(nl_sock, false);\n\nout:\n    close(nl_sock);\n    exit(rc);\n}\n')),(0,o.kt)("p",null,"\u8fd0\u884c\u793a\u4f8b\u5982\u4e0b\uff1b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"[longyu@debian-10:18:12:28] program-problem $ sudo ./a.out \n[sudo] longyu \u7684\u5bc6\u7801\uff1a\nset mcast listen ok\nfork: parent tid=2759 pid=2759 -> child tid=9529 pid=9529\nunhandled proc event\nexec: tid=9529 pid=9529\nfork: parent tid=2759 pid=2759 -> child tid=9530 pid=9530\nfork: parent tid=9529 pid=9529 -> child tid=9531 pid=9531\ngid change: tid=9530 pid=9530 from 1001 to 43\nexec: tid=9530 pid=9530\nexec: tid=9531 pid=9531\nexit: tid=9530 pid=9530 exit_code=0\nexit: tid=9531 pid=9531 exit_code=0\nfork: parent tid=9529 pid=9529 -> child tid=9532 pid=9532\nexec: tid=9532 pid=9532\nexit: tid=9532 pid=9532 exit_code=0\nfork: parent tid=9529 pid=9529 -> child tid=9533 pid=9533\nexec: tid=9533 pid=9533\nexit: tid=9533 pid=9533 exit_code=0\n")),(0,o.kt)("p",null,"\u901a\u8fc7\u7ec8\u7aef\u8f93\u51fa\u80fd\u591f\u770b\u5230\u5728\u8fdb\u7a0b fork\u3001exec\u3001exit\u3001gid change \u7684\u65f6\u5019\u90fd\u80fd\u591f\u63a5\n\u6536\u5230\u76f8\u5e94\u7684\u4e8b\u4ef6\u6d88\u606f\u3002"),(0,o.kt)("p",null,"\u53ef\u4ee5\u5bf9\u4e0a\u8ff0 demo \u8fdb\u884c\u6269\u5c55\uff0c\u5728",(0,o.kt)("strong",{parentName:"p"},"\u5f00\u673a"),"\u7684\u65f6\u5019\u5c06\u4fee\u6539\u540e\u7684\u7a0b\u5e8f\u4f5c\u4e3a\u4e00\u4e2a ",(0,o.kt)("strong",{parentName:"p"},"daemon")," \u6765\u8fd0\u884c\uff0c\u8fd9\u4e2a ",(0,o.kt)("strong",{parentName:"p"},"daemon")," \u901a\u8fc7\u63a5\u6536\u5185\u6838 ",(0,o.kt)("strong",{parentName:"p"},"netlink")," \u6d88\u606f\u6765\u76d1",(0,o.kt)("strong",{parentName:"p"},"\u63a7\u8fdb\u7a0b\u72b6\u6001"),"\uff0c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u5185\u90e8\u6309\u7167\u8fdb\u7a0b\u72b6\u6001\u5212\u5206\u6dfb\u52a0\u591a\u4e2a\u961f\u5217\uff0c\u540c\u65f6\u5c06\u8fd9\u4e2a daemon \u4f5c\u4e3a\u4e00\u4e2a server \u7a0b\u5e8f\uff0c\u53e6\u5916\u7f16\u5199\u4e00\u4e2a\u5ba2\u6237\u7aef\u7a0b\u5e8f\u6765\u83b7\u53d6\u8fdb\u7a0b\u4fe1\u606f\u4ee5\u5b8c\u6210\u8fdb\u7a0b\u4fe1\u606f\u67e5\u8be2\u4efb\u52a1\u3002"))}u.isMDXComponent=!0}}]);