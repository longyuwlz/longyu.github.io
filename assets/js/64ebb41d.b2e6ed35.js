"use strict";(self.webpackChunklongyu_website=self.webpackChunklongyu_website||[]).push([[7909],{3905:function(e,n,i){i.d(n,{Zo:function(){return _},kt:function(){return c}});var t=i(7294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function u(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)i=o[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var p=t.createContext({}),l=function(e){var n=t.useContext(p),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},_=function(e){var n=l(e.components);return t.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},s=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,_=u(e,["components","mdxType","originalType","parentName"]),s=l(i),c=r,m=s["".concat(p,".").concat(c)]||s[c]||d[c]||o;return i?t.createElement(m,a(a({ref:n},_),{},{components:i})):t.createElement(m,a({ref:n},_))}));function c(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=s;var u={};for(var p in n)hasOwnProperty.call(n,p)&&(u[p]=n[p]);u.originalType=e,u.mdxType="string"==typeof e?e:r,a[1]=u;for(var l=2;l<o;l++)a[l]=i[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,i)}s.displayName="MDXCreateElement"},4893:function(e,n,i){i.r(n),i.d(n,{assets:function(){return _},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return d}});var t=i(7462),r=i(3366),o=(i(7294),i(3905)),a=["components"],u={},p=void 0,l={permalink:"/longyu.github.io/blog/dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790",editUrl:"https://github.com/longyuwlz/longyu.github.io/blog/dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790.md",source:"@site/blog/dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790.md",title:"dpdk/dpdk-16.04 igb_uio \u6a21\u5757\u5206\u6790",description:"igb_uio \u662f dpdk \u5185\u90e8\u5b9e\u73b0\u7684\u5c06\u7f51\u5361\u6620\u5c04\u5230\u7528\u6237\u6001\u7684\u5185\u6838\u6a21\u5757\uff0c\u5b83\u662f uio \u6a21\u5757\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002",date:"2022-06-21T00:32:49.000Z",formattedDate:"2022\u5e746\u670821\u65e5",tags:[],readingTime:19.06,truncated:!1,authors:[],frontMatter:{},prevItem:{title:"dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898",permalink:"/longyu.github.io/blog/dpdk/dpdk-16.04 igb crc length \u7edf\u8ba1\u95ee\u9898"},nextItem:{title:"dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790",permalink:"/longyu.github.io/blog/dpdk/dpdk-16.04 l2fwd \u6e90\u7801\u5206\u6790"}},_={authorsImageUrls:[]},d=[{value:"uio \u6a21\u5757\u5206\u6790",id:"uio-\u6a21\u5757\u5206\u6790",level:2},{value:"uio_info \u7ed3\u6784\u4f53\u53ca\u5176\u5b9e\u4f8b\u5316\u8fc7\u7a0b",id:"uio_info-\u7ed3\u6784\u4f53\u53ca\u5176\u5b9e\u4f8b\u5316\u8fc7\u7a0b",level:2},{value:"igb_uio.c \u4e2d\u521d\u59cb\u5316\u5f53\u524d\u8bbe\u5907 uio_info \u7ed3\u6784\u8fc7\u7a0b",id:"igb_uioc-\u4e2d\u521d\u59cb\u5316\u5f53\u524d\u8bbe\u5907-uio_info-\u7ed3\u6784\u8fc7\u7a0b",level:2},{value:"uio_info \u7ed3\u6784\u4f53\u4e2d mem \u4e0e port io \u5b57\u6bb5\u5728 igb_uio \u4e2d\u586b\u5145\u7684\u4fe1\u606f\u5b58\u5728\u7684\u610f\u4e49",id:"uio_info-\u7ed3\u6784\u4f53\u4e2d-mem-\u4e0e-port-io-\u5b57\u6bb5\u5728-igb_uio-\u4e2d\u586b\u5145\u7684\u4fe1\u606f\u5b58\u5728\u7684\u610f\u4e49",level:2},{value:"\u5982\u4f55\u901a\u8fc7 mmap /dev/uiox \u6587\u4ef6\u6765\u6620\u5c04\u7f51\u5361 pci \u5185\u5b58\u8d44\u6e90",id:"\u5982\u4f55\u901a\u8fc7-mmap-devuiox-\u6587\u4ef6\u6765\u6620\u5c04\u7f51\u5361-pci-\u5185\u5b58\u8d44\u6e90",level:2},{value:"igb_uio \u6a21\u5757\u7684\u521d\u59cb\u5316\u4e0e\u89e3\u521d\u59cb\u5316\u51fd\u6570",id:"igb_uio-\u6a21\u5757\u7684\u521d\u59cb\u5316\u4e0e\u89e3\u521d\u59cb\u5316\u51fd\u6570",level:2},{value:"\u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u65f6 probe \u7684\u8fc7\u7a0b",id:"\u7f51\u5361\u7ed1\u5b9a\u5230-igb_uio-\u65f6-probe-\u7684\u8fc7\u7a0b",level:2},{value:"dpdk \u4e0e uio \u8bbe\u5907\u6587\u4ef6\u7684\u4ea4\u4e92\u8fc7\u7a0b",id:"dpdk-\u4e0e-uio-\u8bbe\u5907\u6587\u4ef6\u7684\u4ea4\u4e92\u8fc7\u7a0b",level:2},{value:"\u6807\u51c6 UIO \u8bbe\u5907\u63a7\u5236\u4e2d\u65ad\u8fc7\u7a0b",id:"\u6807\u51c6-uio-\u8bbe\u5907\u63a7\u5236\u4e2d\u65ad\u8fc7\u7a0b",level:2},{value:"\u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u6709\u600e\u6837\u7684\u5f71\u54cd\uff1f",id:"\u5199\u5165-uio-\u8bbe\u5907\u6587\u4ef6\u6709\u600e\u6837\u7684\u5f71\u54cd",level:2},{value:"write \u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u7684\u5b8c\u6574\u8fc7\u7a0b",id:"write-\u5199\u5165-uio-\u8bbe\u5907\u6587\u4ef6\u7684\u5b8c\u6574\u8fc7\u7a0b",level:2},{value:"write \u8fc7\u7a0b\u56fe\u793a",id:"write-\u8fc7\u7a0b\u56fe\u793a",level:2},{value:"dpdk \u7a0b\u5e8f\u4e2d\u76d1\u542c\u4e2d\u65ad\u4e8b\u4ef6\u7684\u8fc7\u7a0b",id:"dpdk-\u7a0b\u5e8f\u4e2d\u76d1\u542c\u4e2d\u65ad\u4e8b\u4ef6\u7684\u8fc7\u7a0b",level:2}],s={toc:d};function c(e){var n=e.components,i=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,t.Z)({},s,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"igb_uio \u662f dpdk \u5185\u90e8\u5b9e\u73b0\u7684\u5c06\u7f51\u5361\u6620\u5c04\u5230\u7528\u6237\u6001\u7684\u5185\u6838\u6a21\u5757\uff0c\u5b83\u662f uio \u6a21\u5757\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002"),(0,o.kt)("p",null,"igb_uio \u662f\u4e00\u79cd pci \u9a71\u52a8\uff0c\u5c06\u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u9694\u79bb\u4e86\u7f51\u5361\u7684\u5185\u6838\u9a71\u52a8\uff0c\u540c\u65f6 igb_uio \u5b8c\u6210\u7f51\u5361\u4e2d\u65ad\u5185\u6838\u6001\u521d\u59cb\u5316\u5e76\u5c06\u4e2d\u65ad\u4fe1\u53f7\u6620\u5c04\u5230\u7528\u6237\u6001\u3002"),(0,o.kt)("p",null,"igb_uio \u4e0e uio \u6a21\u5757\u5bc6\u5207\u76f8\u5173\uff0c\u6211\u5c06\u4ece uio \u6a21\u5757\u7740\u624b\u5206\u6790 igb_uio \u6a21\u5757\u7684\u5de5\u4f5c\u539f\u7406\u3002"),(0,o.kt)("h2",{id:"uio-\u6a21\u5757\u5206\u6790"},"uio \u6a21\u5757\u5206\u6790"),(0,o.kt)("p",null,"uio \u662f\u4e00\u79cd",(0,o.kt)("strong",{parentName:"p"},"\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8"),"\uff0c\u5728\u6b64\u9a71\u52a8\u4e2d\u6ce8\u518c\u4e86\u5355\u72ec\u7684 ",(0,o.kt)("strong",{parentName:"p"},"file_operations \u51fd\u6570\u8868"),"\uff0cuio \u8bbe\u5907\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u79cd\u72ec\u7acb\u7684\u8bbe\u5907\u7c7b\u578b\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"file_operations")," \u51fd\u6570\u5185\u5bb9\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"static const struct file_operations uio_fops = {\n    .owner      = THIS_MODULE,\n    .open       = uio_open,\n    .release    = uio_release,\n    .read       = uio_read,\n    .write      = uio_write,\n    .mmap       = uio_mmap,\n    .poll       = uio_poll,\n    .fasync     = uio_fasync,\n    .llseek     = noop_llseek,\n};\n")),(0,o.kt)("p",null,"\u8be5\u51fd\u6811\u8868\u5728 ",(0,o.kt)("strong",{parentName:"p"},"uio_major_init")," \u4e2d\u521d\u59cb\u5316 ",(0,o.kt)("strong",{parentName:"p"},"cdev")," \u7ed3\u6784\u4f53\u65f6\u4f7f\u7528\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'    cdev->owner = THIS_MODULE;\n    cdev->ops = &uio_fops;\n    kobject_set_name(&cdev->kobj, "%s", name);\n    \n    result = cdev_add(cdev, uio_dev, UIO_MAX_DEVICES);\n')),(0,o.kt)("p",null,"\u6211\u4eec\u5bf9 /dev/uioxx \u6587\u4ef6\u7684\u64cd\u4f5c\u6700\u7ec8\u90fd\u4f1a\u5bf9\u5e94\u5230",(0,o.kt)("strong",{parentName:"p"},"\u5bf9 uio_fops \u7684\u4e0d\u540c\u65b9\u6cd5\u7684\u8c03\u7528\u4e0a"),"\u3002"),(0,o.kt)("h2",{id:"uio_info-\u7ed3\u6784\u4f53\u53ca\u5176\u5b9e\u4f8b\u5316\u8fc7\u7a0b"},"uio_info \u7ed3\u6784\u4f53\u53ca\u5176\u5b9e\u4f8b\u5316\u8fc7\u7a0b"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"uio")," \u6a21\u5757\u4e2d\u7684 ",(0,o.kt)("strong",{parentName:"p"},"idev")," \u53d8\u91cf\u662f\u4e00\u4e2a\u6307\u5411 ",(0,o.kt)("strong",{parentName:"p"},"struct uio_device")," \u7684\u6307\u9488\uff0c",(0,o.kt)("strong",{parentName:"p"},"struct uio_device")," \u4e2d\u53c8\u5305\u542b \u4e00\u4e2a\u6307\u5411 ",(0,o.kt)("strong",{parentName:"p"},"struct uio_info")," \u7684\u6307\u9488\uff0c",(0,o.kt)("strong",{parentName:"p"},"struct uio_info")," \u7ed3\u6784\u4f53\u5185\u5bb9\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"struct uio_info {\n    struct uio_device   *uio_dev;\n    const char      *name;\n    const char      *version;\n    struct uio_mem      mem[MAX_UIO_MAPS];\n    struct uio_port     port[MAX_UIO_PORT_REGIONS];\n    long            irq;\n    unsigned long       irq_flags;\n    void            *priv;\n    irqreturn_t (*handler)(int irq, struct uio_info *dev_info);\n    int (*mmap)(struct uio_info *info, struct vm_area_struct *vma);\n    int (*open)(struct uio_info *info, struct inode *inode);\n    int (*release)(struct uio_info *info, struct inode *inode);\n    int (*irqcontrol)(struct uio_info *info, s32 irq_on);\n};\n")),(0,o.kt)("p",null,"\u6bcf\u4e00\u4e2a uio \u8bbe\u5907\u90fd\u4f1a",(0,o.kt)("strong",{parentName:"p"},"\u5b9e\u4f8b\u5316"),"\u4e00\u4e2a uio_info \u7ed3\u6784\u4f53\uff0c",(0,o.kt)("strong",{parentName:"p"},"uio \u9a71\u52a8\u81ea\u8eab\u4e0d\u4f1a\u5b9e\u4f8b\u5316 uio_info")," \u7ed3\u6784\u4f53\uff0c\u5b83\u53ea\u63d0\u4f9b\u4e00\u4e2a",(0,o.kt)("strong",{parentName:"p"},"\u6846\u67b6"),"\uff0c\u53ef\u4ee5\u5728\u5176\u5b83\u6a21\u5757\u4e2d\u8c03\u7528 ",(0,o.kt)("strong",{parentName:"p"},"uio_register_device")," \u6765",(0,o.kt)("strong",{parentName:"p"},"\u5b9e\u4f8b\u5316 uio_info \u7ed3\u6784\u4f53"),"\uff0c\u5728 dpdk \u4e2d\uff0c\u5e38\u89c1\u65b9\u5f0f\u662f\u5728",(0,o.kt)("strong",{parentName:"p"},"\u9a71\u52a8\u7ed1\u5b9a igb_uio")," \u7684\u65f6\u5019\u8c03\u7528 ",(0,o.kt)("strong",{parentName:"p"},"uio_register_device")," \u8fdb\u884c\u5b9e\u4f8b\u5316\u3002"),(0,o.kt)("h2",{id:"igb_uioc-\u4e2d\u521d\u59cb\u5316\u5f53\u524d\u8bbe\u5907-uio_info-\u7ed3\u6784\u8fc7\u7a0b"},"igb_uio.c \u4e2d\u521d\u59cb\u5316\u5f53\u524d\u8bbe\u5907 uio_info \u7ed3\u6784\u8fc7\u7a0b"),(0,o.kt)("p",null,"\u53ef\u4ee5\u5728 igb_uio.c \u7684 ",(0,o.kt)("strong",{parentName:"p"},"probe")," \u51fd\u6570 ",(0,o.kt)("strong",{parentName:"p"},"igbuio_pci_probe")," \u4e2d\u627e\u5230\u5b9e\u4f8b\u5316\u7684\u76f8\u5173\u4ee3\u7801\uff0c\u6458\u5f55\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'410     /* remap IO memory */\n411     err = igbuio_setup_bars(dev, &udev->info);\n.....................................................\n428     /* fill uio infos */\n429     udev->info.name = "igb_uio";\n430     udev->info.version = "0.1";\n431     udev->info.handler = igbuio_pci_irqhandler;\n432     udev->info.irqcontrol = igbuio_pci_irqcontrol;\n433 #ifdef CONFIG_XEN_DOM0\n434     /* check if the driver run on Xen Dom0 */\n435     if (xen_initial_domain())\n436         udev->info.mmap = igbuio_dom0_pci_mmap;\n437 #endif\n438     udev->info.priv = udev;\n    \n...........................................................\n\n478     /* register uio driver */\n479     err = uio_register_device(&dev->dev, &udev->info);\n')),(0,o.kt)("p",null,"411 \u884c\u8c03\u7528 igbuio_setup_bars \u6620\u5c04 pci \u8bbe\u5907 bar \u4e2d\u7684\u5185\u5b58\u533a\u57df\uff0c\u6b64\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'332 static int\n333 igbuio_setup_bars(struct pci_dev *dev, struct uio_info *info)\n334 {   \n335     int i, iom, iop, ret;\n336     unsigned long flags;\n337     static const char *bar_names[PCI_STD_RESOURCE_END + 1]  = {\n338         "BAR0",\n339         "BAR1",\n340         "BAR2",\n341         "BAR3",\n342         "BAR4",\n343         "BAR5",\n344     };\n345     \n346     iom = 0;\n347     iop = 0;\n348     \n349     for (i = 0; i < ARRAY_SIZE(bar_names); i++) {\n350         if (pci_resource_len(dev, i) != 0 &&\n351                 pci_resource_start(dev, i) != 0) {\n352             flags = pci_resource_flags(dev, i);\n353             if (flags & IORESOURCE_MEM) {\n354                 ret = igbuio_pci_setup_iomem(dev, info, iom,\n355                                  i, bar_names[i]);\n356                 if (ret != 0)\n357                     return ret;\n358                 iom++;\n359             } else if (flags & IORESOURCE_IO) {\n360                 ret = igbuio_pci_setup_ioport(dev, info, iop,\n361                                   i, bar_names[i]);\n362                 if (ret != 0)\n363                     return ret;\n364                 iop++;\n365             }\n366         }\n367     }\n368     \n369     return (iom != 0) ? ret : -ENOENT;\n370 }\n')),(0,o.kt)("p",null,"\u5b83\u5c06 pci \u8bbe\u5907\u6bcf\u4e2a bar \u7684\u5185\u5b58\u7a7a\u95f4\u6620\u5c04\u5230 uio_info \u7ed3\u6784\u4e2d\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u7c7b\u522b\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"IORESOURCE_MEM"),(0,o.kt)("li",{parentName:"ol"},"IORESOURCE_IO")),(0,o.kt)("p",null,"\u6bcf\u4e2a bar \u7684 IORESOURCE_MEM \u5185\u5b58\u4fe1\u606f\u586b\u5145 uio_info \u4e2d\u7684 mem \u5b57\u6bb5\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"289     info->mem[n].name = name;\n290     info->mem[n].addr = addr;\n291     info->mem[n].internal_addr = internal_addr;\n292     info->mem[n].size = len;\n293     info->mem[n].memtype = UIO_MEM_PHYS;\n")),(0,o.kt)("p",null,"n \u4ece 0 \u5f00\u59cb\uff0c\u4ee3\u8868\u6bcf\u4e00\u5757\u72ec\u7acb\u7684\u5185\u5b58\u533a\u57df\u3002"),(0,o.kt)("p",null,"\u6bcf\u4e2a bar \u7684 IORESOURCE_IO \u5185\u5b58\u4fe1\u606f\u586b\u5145 uio_info \u4e2d\u7684 port \u5b57\u6bb5\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"312     info->port[n].name = name;\n313     info->port[n].start = addr;\n314     info->port[n].size = len;\n315     info->port[n].porttype = UIO_PORT_X86;\n")),(0,o.kt)("p",null,"n \u4ece 0 \u5f00\u59cb\u7d2f\u52a0\uff0c\u4ee3\u8868\u6bcf\u4e00\u5757\u6709\u6548\u7684 io \u5185\u5b58\u533a\u57df\uff0cigb_uio \u4e2d\u6620\u5c04\u7684 pci bar \u7684\u5185\u5b58\u533a\u57df\u5e76\u4e0d\u4f1a\u88ab\u76f4\u63a5\u4f7f\u7528\uff0c\u5728\u7a0b\u5e8f\u6267\u884c mmap \u6620\u5c04 /dev/uioX \u8bbe\u5907\u5185\u5b58\u65f6 info \u7ed3\u6784\u4e2d\u7684 mem \u4e0e port \u5b57\u6bb5\u7684\u503c\u88ab\u4f7f\u7528\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u65b9\u5f0f\u5c06\u7f51\u5361\u7684 pci \u7269\u7406\u5730\u5740\u6620\u5c04\u4e3a\u7528\u6237\u6001\u7a7a\u95f4\u7684\u865a\u62df\u5730\u5740\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u7814\u7a76 dpdk-16.04 \u5185\u90e8\u4ee3\u7801\u5374\u53d1\u73b0\u5b83\u6620\u5c04\u7f51\u5361 pci resource \u5730\u5740\uff0c\u5e76\u4e0d\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5b9e\u9645\u662f\u901a\u8fc7\u8bbf\u95ee\u6bcf\u4e2a pci \u8bbe\u5907\u5728 /sys \u76ee\u5f55\u6811\u4e0b\u751f\u6210\u7684 resource \u6587\u4ef6\u83b7\u53d6 pci \u5185\u5b58\u8d44\u6e90\u4fe1\u606f\uff0c\u7136\u540e\u4f9d\u6b21 mmap \u6bcf\u4e2a pci \u5185\u5b58\u8d44\u6e90\u5bf9\u5e94\u7684 resourceX \u6587\u4ef6\uff0c\u8fd9\u91cc\u6267\u884c\u7684 mmap \u5c06 resource \u6587\u4ef6\u4e2d\u7684\u7269\u7406\u5730\u5740\u6620\u5c04\u4e3a\u7528\u6237\u6001\u7a0b\u5e8f\u4e2d\u7684\u865a\u62df\u5730\u5740\uff01")),(0,o.kt)("h2",{id:"uio_info-\u7ed3\u6784\u4f53\u4e2d-mem-\u4e0e-port-io-\u5b57\u6bb5\u5728-igb_uio-\u4e2d\u586b\u5145\u7684\u4fe1\u606f\u5b58\u5728\u7684\u610f\u4e49"},"uio_info \u7ed3\u6784\u4f53\u4e2d mem \u4e0e port io \u5b57\u6bb5\u5728 igb_uio \u4e2d\u586b\u5145\u7684\u4fe1\u606f\u5b58\u5728\u7684\u610f\u4e49"),(0,o.kt)("p",null,"\u9605\u8bfb uio \u6a21\u5757\u4ee3\u7801\uff0c\u53d1\u73b0\u6bcf\u4e2a uio \u8bbe\u5907\u793a\u4f8b\u5316\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u8c03\u7528 ",(0,o.kt)("strong",{parentName:"p"},"uio_dev_add_attributes")," \u521b\u5efa ",(0,o.kt)("strong",{parentName:"p"},"maps \u4e0e portio sysfs \u5c5e\u6027"),"\uff0c\u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee sysfs \u76ee\u5f55\u4e2d\u5f53\u524d pci \u8bbe\u5907 uio maps \u4e0e uio portio \u6587\u4ef6\u6765\u83b7\u53d6\u5230\u7f51\u5361\u7684 pci bar \u4e2d\u7684\u7269\u7406\u5185\u5b58\u4fe1\u606f\u3002"),(0,o.kt)("p",null,"\u793a\u4f8b\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," [root] # pwd\n/sys/bus/pci/drivers/igb_uio/0000:00:06.0\n [root] # cat ./uio/uio2/maps/map0/addr ./uio/uio2/maps/map0/name  ./uio/uio2/maps/map0/size\n0xfebf3000\nBAR1\n0x1000\n [root] # cat ./uio/uio2/portio/port0/start ./uio/uio2/portio/port0/name  ./uio/uio2/portio/port0/size ./uio/uio2/portio/port0/porttype\n0xc080\nBAR0\n0x20\nport_x86\n\n")),(0,o.kt)("p",null,"\u5982\u4e0a\u4fe1\u606f\u8bf4\u660e 00:06.0 pci \u63a5\u53e3\uff0c\u5176\u6709\u6548 IORESOURCE_MEM \u4f4d\u4e8e BAR1 \u4e2d\uff0c\u7269\u7406\u5730\u5740\u662f 0xfebf3000\uff0c\u957f\u5ea6\u662f 0x1000\uff0c\u6709\u6548 IORESOURCE_IO \u4f4d\u4e8e BAR0 \u4e2d\uff0c\u7269\u7406\u5730\u5740\u662f 0xc080\uff0c\u957f\u5ea6\u4e3a 0x20\uff0c\u7c7b\u578b\u4e3a port_x86\u3002"),(0,o.kt)("p",null,"\u83b7\u53d6 resource \u6587\u4ef6\u4fe1\u606f\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bssh"}," [root] # cat ./resource\n0x000000000000c080 0x000000000000c09f 0x0000000000040101\n0x00000000febf3000 0x00000000febf3fff 0x0000000000040200\n0x0000000000000000 0x0000000000000000 0x0000000000000000\n0x0000000000000000 0x0000000000000000 0x0000000000000000\n0x0000000000000000 0x0000000000000000 0x0000000000000000\n0x0000000000000000 0x0000000000000000 0x0000000000000000\n0x00000000feb80000 0x00000000febbffff 0x000000000004e200\n0x0000000000000000 0x0000000000000000 0x0000000000000000\n0x0000000000000000 0x0000000000000000 0x0000000000000000\n0x0000000000000000 0x0000000000000000 0x0000000000000000\n0x0000000000000000 0x0000000000000000 0x0000000000000000\n0x0000000000000000 0x0000000000000000 0x0000000000000000\n0x0000000000000000 0x0000000000000000 0x0000000000000000\n")),(0,o.kt)("p",null,"resource \u6587\u4ef6\u4fe1\u606f\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u4e2a pci \u8d44\u6e90\u7a7a\u95f4\uff0cdpdk \u4e2d\u53ea\u4f7f\u7528\u4e86\u524d 6 \u4e2a\u8d44\u6e90\u7a7a\u95f4\u3002\u6bcf\u4e00\u4e2a\u8d44\u6e90\u7a7a\u95f4\u7684\u7b2c\u4e00\u5217\u4e3a\u8d77\u59cb\u7269\u7406\u5730\u5740\uff0c\u7b2c\u4e8c\u5217\u4e3a\u7ec8\u6b62\u7269\u7406\u5730\u5740\uff0c\u7b2c\u4e09\u5217\u4e3a flag \u6807\u5fd7\u3002"),(0,o.kt)("p",null,"\u5176\u5185\u5bb9\u4e0e uio \u751f\u6210\u7684 maps \u6587\u4ef6\u53ca portio \u6587\u4ef6\u7684\u8f93\u51fa\u4fe1\u606f\u662f\u4e00\u81f4\u7684\uff01\u5b9e\u9645\u4e0a\u6211\u4eec\u4e5f\u53ef\u7528\u901a\u8fc7 mmap /dev/uioX \u6765\u5b8c\u6210 pci \u8bbe\u5907\u5185\u5b58\u8d44\u6e90\u6620\u5c04\u5230\u7528\u6237\u6001\u7684\u5de5\u4f5c\u3002"),(0,o.kt)("h2",{id:"\u5982\u4f55\u901a\u8fc7-mmap-devuiox-\u6587\u4ef6\u6765\u6620\u5c04\u7f51\u5361-pci-\u5185\u5b58\u8d44\u6e90"},"\u5982\u4f55\u901a\u8fc7 mmap /dev/uiox \u6587\u4ef6\u6765\u6620\u5c04\u7f51\u5361 pci \u5185\u5b58\u8d44\u6e90"),(0,o.kt)("p",null,"\u4e0a\u6587\u63d0\u5230\u8fc7\uff0cmmap /dev/uiox \u9700\u8981\u901a\u8fc7 uio \u751f\u6210\u7684 maps \u6587\u4ef6\u5b8c\u6210\uff0c\u4ece\u5185\u6838\u6587\u6863\u4e2d\u627e\u5230\u4e0e maps \u6587\u4ef6\u76f8\u5173\u7684\u5982\u4e0b\u4fe1\u606f\uff1a"),(0,o.kt)("p",null,"Each ",(0,o.kt)("inlineCode",{parentName:"p"},"mapX/")," directory contains four read-only files that show attributes of the memory:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"name"),": A string identifier for this mapping. This is optional, the string can be empty. Drivers can set this to make it easier for userspace to find the correct mapping."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"addr"),": The address of memory that can be mapped."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"size"),": The size, in bytes, of the memory pointed to by addr."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"offset"),": The offset, in bytes, that has to be added to the pointer returned by ",(0,o.kt)("inlineCode",{parentName:"li"},"mmap()")," to get to the actual device memory. This is important if the device\u2019s memory is not page aligned. Remember that pointers returned by ",(0,o.kt)("inlineCode",{parentName:"li"},"mmap()")," are always page aligned, so it is good style to always add this offset.")),(0,o.kt)("p",null,"From userspace, the different mappings are distinguished by adjusting the ",(0,o.kt)("inlineCode",{parentName:"p"},"offset")," parameter of the ",(0,o.kt)("inlineCode",{parentName:"p"},"mmap()")," call. To map the memory of mapping N, you have to use N times the page size as your offset:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"offset = N * getpagesize();\n")),(0,o.kt)("p",null,"\u4e0d\u540c\u7684 pci \u5185\u5b58\u533a\u57df\u901a\u8fc7 offset \u6765\u533a\u5206\uff0c\u8fd9\u5c31\u4fdd\u8bc1\u4e86\u5f53\u5b58\u5728\u4e24\u4e2a pci \u8d44\u6e90\u5185\u5b58\u5927\u5c0f\u4e00\u81f4\u60c5\u51b5\u65f6\u7684\u6b63\u5e38\u5904\u7406\u3002"),(0,o.kt)("h2",{id:"igb_uio-\u6a21\u5757\u7684\u521d\u59cb\u5316\u4e0e\u89e3\u521d\u59cb\u5316\u51fd\u6570"},"igb_uio \u6a21\u5757\u7684\u521d\u59cb\u5316\u4e0e\u89e3\u521d\u59cb\u5316\u51fd\u6570"),(0,o.kt)("p",null,"igb_uio \u6a21\u5757\u7684\u521d\u59cb\u5316\u4e0e\u89e3\u521d\u59cb\u5316\u51fd\u6570\u8c03\u7528\u8bed\u53e5\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"568 module_init(igbuio_pci_init_module);\n569 module_exit(igbuio_pci_exit_module);\n")),(0,o.kt)("p",null,"igb_uio \u6a21\u5757\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a pci \u9a71\u52a8\u7684\u5b9e\u4f8b\uff0c\u5176\u6d41\u7a0b\u4e0e pci \u9a71\u52a8\u521d\u59cb\u5316\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u5b83\u5b9e\u4f8b\u5316\u4e86\u4e00\u4e2a id_table \u4e3a\u7a7a\u7684 pci \u9a71\u52a8\uff0c\u5728\u7ed1\u5b9a\u7f51\u5361\u5230 igb_uio \u524d\u9700\u8981\u5148\u5199\u5165\u7f51\u5361\u7684 vendor id \u4e0e device id \u5230 igb_uio \u9a71\u52a8\u7684 new_id \u6587\u4ef6\uff0c\u52a8\u6001\u6269\u5145 igb_uio \u652f\u6301\u7684 pci \u8bbe\u5907\u578b\u53f7\uff0c\u8fd9\u4e0e\u5e38\u89c1\u7684 pci \u9a71\u52a8\u6709\u6240\u533a\u522b\u3002"),(0,o.kt)("p",null,"igb_uio pci \u9a71\u52a8\u5b9e\u4f8b\u53ca\u521d\u59cb\u5316\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'543 static struct pci_driver igbuio_pci_driver = {\n544     .name = "igb_uio",\n545     .id_table = NULL,\n546     .probe = igbuio_pci_probe,\n547     .remove = igbuio_pci_remove,\n548 };\n549 \n550 static int __init\n551 igbuio_pci_init_module(void)\n552 {\n553     int ret;\n554 \n555     ret = igbuio_config_intr_mode(intr_mode);\n556     if (ret < 0)\n557         return ret;\n558 \n559     return pci_register_driver(&igbuio_pci_driver);\n560 }\n561 \n')),(0,o.kt)("p",null,"igbuio_config_intr_mode \u914d\u7f6e\u6a21\u5757\u4f7f\u7528\u7684\u4e2d\u65ad\u6a21\u578b\uff0cintr_mode \u662f igb_uio \u6a21\u5757\u5b9a\u4e49\u7684\u4e00\u4e2a\u6a21\u5757\u53c2\u6570\uff0c\u5728\u52a0\u8f7d\u6a21\u5757\u7684\u65f6\u5019\u63d0\u4f9b\uff0c\u6ca1\u6709\u6307\u5b9a\u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528 MSIX \u4e2d\u65ad\u6a21\u578b\u3002"),(0,o.kt)("p",null,"559 \u884c\u6ce8\u518c\u4e86 igbuio pci \u8bbe\u5907\uff0c\u4e0e\u4e4b\u5bf9\u5e94\u5728\u89e3\u521d\u59cb\u5316\u51fd\u6570\u4e2d\u79fb\u9664\u6ce8\u518c\u7684 pci \u9a71\u52a8\uff0c\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"562 static void __exit\n563 igbuio_pci_exit_module(void)\n564 {\n565     pci_unregister_driver(&igbuio_pci_driver);\n566 }\n")),(0,o.kt)("h2",{id:"\u7f51\u5361\u7ed1\u5b9a\u5230-igb_uio-\u65f6-probe-\u7684\u8fc7\u7a0b"},"\u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u65f6 probe \u7684\u8fc7\u7a0b"),(0,o.kt)("p",null,"\u5f53\u7f51\u5361\u7ed1\u5b9a\u5230 igb_uio \u65f6\u4f1a\u6267\u884c probe \u64cd\u4f5c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'377 igbuio_pci_probe(struct pci_dev *dev, const struct pci_device_id *id)\n378 {\n379     struct rte_uio_pci_dev *udev;\n380     struct msix_entry msix_entry;\n381     int err;\n382 \n383     udev = kzalloc(sizeof(struct rte_uio_pci_dev), GFP_KERNEL);\n384     if (!udev)\n385         return -ENOMEM;\n386 \n387     /*\n388      * enable device: ask low-level code to enable I/O and\n389      * memory\n390      */\n391     err = pci_enable_device(dev);\n392     if (err != 0) {\n393         dev_err(&dev->dev, "Cannot enable PCI device\\n");\n394         goto fail_free;\n395     }\n396 \n397     /*\n398      * reserve device\'s PCI memory regions for use by this\n399      * module\n400      */\n401     err = pci_request_regions(dev, "igb_uio");\n402     if (err != 0) {\n403         dev_err(&dev->dev, "Cannot request regions\\n");\n404         goto fail_disable;\n405     }\n406 \n407     /* enable bus mastering on the device */\n408     pci_set_master(dev);\n410     /* remap IO memory */\n411     err = igbuio_setup_bars(dev, &udev->info);\n412     if (err != 0)\n413         goto fail_release_iomem;\n414 \n415     /* set 64-bit DMA mask */\n416     err = pci_set_dma_mask(dev,  DMA_BIT_MASK(64));\n417     if (err != 0) {\n418         dev_err(&dev->dev, "Cannot set DMA mask\\n");\n419         goto fail_release_iomem;\n420     }\n421 \n422     err = pci_set_consistent_dma_mask(dev, DMA_BIT_MASK(64));\n423     if (err != 0) {\n424         dev_err(&dev->dev, "Cannot set consistent DMA mask\\n");\n425         goto fail_release_iomem;\n426     }\n427 \n.................................................................\n439     udev->pdev = dev;\n440 \n441     switch (igbuio_intr_mode_preferred) {\n442     case RTE_INTR_MODE_MSIX:\n443         /* Only 1 msi-x vector needed */\n444         msix_entry.entry = 0;\n445         if (pci_enable_msix(dev, &msix_entry, 1) == 0) {\n446             dev_dbg(&dev->dev, "using MSI-X");\n447             udev->info.irq = msix_entry.vector;\n448             udev->mode = RTE_INTR_MODE_MSIX;\n449             break;\n450         }\n451         /* fall back to INTX */\n452     case RTE_INTR_MODE_LEGACY:\n453         if (pci_intx_mask_supported(dev)) {\n454             dev_dbg(&dev->dev, "using INTX");\n455             udev->info.irq_flags = IRQF_SHARED;\n456             udev->info.irq = dev->irq;\n457             udev->mode = RTE_INTR_MODE_LEGACY;\n458             break;\n459         }\n460         dev_notice(&dev->dev, "PCI INTX mask not supported\\n");\n461         /* fall back to no IRQ */\n462     case RTE_INTR_MODE_NONE:\n463         udev->mode = RTE_INTR_MODE_NONE;\n464         udev->info.irq = 0;\n465         break;\n466 \n467     default:\n468         dev_err(&dev->dev, "invalid IRQ mode %u",\n469             igbuio_intr_mode_preferred);\n470         err = -EINVAL;\n471         goto fail_release_iomem;\n472     }\n473 \n474     err = sysfs_create_group(&dev->dev.kobj, &dev_attr_grp);\n475     if (err != 0)\n476         goto fail_release_iomem;\n477 \n..............................................................\n480     if (err != 0)\n481         goto fail_remove_group;\n482 \n483     pci_set_drvdata(dev, udev);\n484 \n485     dev_info(&dev->dev, "uio device registered with irq %lx\\n",\n486          udev->info.irq);\n487 \n488     return 0;\n489 \n490 fail_remove_group:\n491     sysfs_remove_group(&dev->dev.kobj, &dev_attr_grp);\n492 fail_release_iomem:\n493     igbuio_pci_release_iomem(&udev->info);\n494     if (udev->mode == RTE_INTR_MODE_MSIX)\n495         pci_disable_msix(udev->pdev);\n496     pci_release_regions(dev);\n497 fail_disable:\n498     pci_disable_device(dev);\n499 fail_free:\n500     kfree(udev);\n501 \n502     return err;\n503 }\n')),(0,o.kt)("p",null,"383 \u884c\u521b\u5efa\u4e86\u4e00\u4e2a rte_uio_pci_dev \u7ed3\u6784\u4f53\u5b9e\u4f8b\uff0c387~408 \u884c\u4f7f\u80fd pci \u8bbe\u5907\u5e76\u4fdd\u7559\u8bbe\u5907\u7684 pci \u5185\u5b58\u533a\u57df\u5230 igb_uio \u6a21\u5757\u4e2d\u5e76\u4f7f\u80fd\u603b\u7ebf\u63a7\u5236\u3002"),(0,o.kt)("p",null,"411 \u884c\u8c03\u7528 igbuio_setup_bars \u6620\u5c04 pci \u8bbe\u5907\u7684 6 \u4e2a bar\uff0c\u5e76\u5c06\u5185\u5b58\u5730\u5740\u53ca\u957f\u5ea6\u4fdd\u5b58\u5230 rte_uio_pci_dev \u7ed3\u6784\u4f53\u7684 info \u5b57\u6bb5\u4e2d\uff0c\u8be6\u7ec6\u4fe1\u606f\u89c1\u4e0a\u6587\u3002"),(0,o.kt)("p",null,"415~426 \u884c\u8bbe\u7f6e dma mask \u4fe1\u606f\uff0c\u8df3\u8fc7\u4e86 uio_info \u7ed3\u6784\u4f53\u521d\u59cb\u5316\u8fc7\u7a0b\uff0c\u8fd9\u90e8\u5206\u4ee3\u7801\u5728\u63a2\u8ba8 uio \u7684\u65f6\u5019\u63cf\u8ff0\u3002"),(0,o.kt)("p",null,"441~472 \u884c\u5224\u65ad igb_uio \u4f7f\u7528\u7684\u4e2d\u65ad\u6a21\u578b\uff0c\u6839\u636e\u4e0d\u540c\u7684\u4e2d\u65ad\u6a21\u578b\u7533\u8bf7\u4f7f\u80fd\u5e76\u586b\u5145\u4e2d\u65ad\u4fe1\u606f\u3002474 \u884c\u521b\u5efa\u4e86 igb_uio \u5185\u90e8\u7684 sysfs \u5c5e\u6027\uff0c\u8fd9\u4e4b\u540e 483 \u884c\u8c03\u7528 pci_set_drvdata \u5c06 udev \u8bbe\u7f6e\u4e3a pci \u8bbe\u5907\u7684\u79c1\u6709\u6570\u636e\u3002"),(0,o.kt)("h2",{id:"dpdk-\u4e0e-uio-\u8bbe\u5907\u6587\u4ef6\u7684\u4ea4\u4e92\u8fc7\u7a0b"},"dpdk \u4e0e uio \u8bbe\u5907\u6587\u4ef6\u7684\u4ea4\u4e92\u8fc7\u7a0b"),(0,o.kt)("p",null,"dpdk \u901a\u8fc7\u8bbf\u95ee uio \u8bbe\u5907\u6587\u4ef6\u6765\u5b8c\u6210\u7269\u7406\u7f51\u5361\u5185\u6838\u6001\u7684\u4e2d\u65ad\u4ea4\u4e92\u8fc7\u7a0b\uff0c\u963b\u585e\u5f0f\u8bfb\u53d6\u3001epoll uio \u6587\u4ef6\u6765\u76d1\u542c\u662f\u5426\u6709\u4e2d\u65ad\u4e8b\u4ef6\uff0c\u5f53\u4e2d\u65ad\u5230\u6765\u540e\uff0cread\u3001epoll \u7cfb\u7edf\u8c03\u7528\u8fd4\u56de\uff0c\u7528\u6237\u6001\u4e2d\u65ad\u56de\u8c03\u51fd\u6570\u6267\u884c\u5b8c\u6210\u540e\u6e05\u9664\u76f8\u5e94\u7684\u4e2d\u65ad\u6807\u5fd7\u4f4d\u3002"),(0,o.kt)("p",null,"\u7ed1\u5b9a\u7f51\u5361\u5230 igb_uio \u65f6\uff0c\u5b9e\u4f8b\u5316\u4e00\u4e2a uio \u8bbe\u5907\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u7533\u8bf7 request_irq\uff0c\u5e76\u4f20\u5165\u4e86\u4e2d\u65ad\u56de\u8c03\u51fd\u6570 uio_interrupt\uff0c\u8fd9\u662f uio \u80fd\u591f\u6355\u83b7\u5230\u4e2d\u65ad\u4fe1\u53f7\u7684\u5173\u952e\uff01"),(0,o.kt)("h2",{id:"\u6807\u51c6-uio-\u8bbe\u5907\u63a7\u5236\u4e2d\u65ad\u8fc7\u7a0b"},"\u6807\u51c6 UIO \u8bbe\u5907\u63a7\u5236\u4e2d\u65ad\u8fc7\u7a0b"),(0,o.kt)("p",null,"\u5bf9\u4e8e\u6807\u51c6\u7684 uio \u8bbe\u5907\uff0c\u901a\u8fc7",(0,o.kt)("strong",{parentName:"p"},"\u5411\u8bbe\u5907\u6587\u4ef6\u4e2d\u5199\u5165 1")," \u6765",(0,o.kt)("strong",{parentName:"p"},"\u4f7f\u80fd"),"\u4e2d\u65ad\uff0c\u4e0e\u4e4b\u7c7b\u4f3c",(0,o.kt)("strong",{parentName:"p"},"\u5173\u95ed\u4e2d\u65ad"),"\u7684\u8fc7\u7a0b\u662f",(0,o.kt)("strong",{parentName:"p"},"\u5411\u8bbe\u5907\u6587\u4ef6"),"\u4e2d",(0,o.kt)("strong",{parentName:"p"},"\u5199\u5165 0"),"\u3002"),(0,o.kt)("p",null,"\u4f7f\u7528 uio \u6620\u5c04\u7f51\u5361\u5230\u7528\u6237\u6001\u65f6\uff0c\u7f51\u5361\u9a71\u52a8\u4f1a\u8c03\u7528 ",(0,o.kt)("strong",{parentName:"p"},"uio_intr_enable")," \u51fd\u6570\u6765\u4f7f\u80fd uio uio \u4e2d\u65ad\u3002\u5176\u4ee3\u7801\u6458\u5f55\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},'static int\nuio_intr_enable(struct rte_intr_handle *intr_handle)\n{\n    const int value = 1;\n\n    if (write(intr_handle->fd, &value, sizeof(value)) < 0) {\n        RTE_LOG(ERR, EAL,\n            "Error enabling interrupts for fd %d (%s)\\n",\n            intr_handle->fd, strerror(errno));\n        return -1;\n    }\n    return 0;\n}\n')),(0,o.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff0c\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u5199 1 \u5230 uio \u8bbe\u5907\u6587\u4ef6\u4e2d\u6765\u5b8c\u6210\u4f7f\u80fd\u4e2d\u65ad\u7684\u8fc7\u7a0b\u3002"),(0,o.kt)("h2",{id:"\u5199\u5165-uio-\u8bbe\u5907\u6587\u4ef6\u6709\u600e\u6837\u7684\u5f71\u54cd"},"\u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u6709\u600e\u6837\u7684\u5f71\u54cd\uff1f"),(0,o.kt)("p",null,"uio_write \u662f",(0,o.kt)("strong",{parentName:"p"},"\u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u65f6"),"\u5185\u6838\u4e2d",(0,o.kt)("strong",{parentName:"p"},"\u6700\u7ec8\u8c03\u7528\u5230"),"\u7684\u5199\u5165\u51fd\u6570\uff0c\u5176\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"static ssize_t uio_write(struct file *filep, const char __user *buf,\n            size_t count, loff_t *ppos)\n{   \n    struct uio_listener *listener = filep->private_data;\n    struct uio_device *idev = listener->dev;\n    ssize_t retval;\n    s32 irq_on;\n\n    if (count != sizeof(s32))\n        return -EINVAL;\n\n    if (copy_from_user(&irq_on, buf, count))\n        return -EFAULT;\n\n    mutex_lock(&idev->info_lock);\n    if (!idev->info) {\n        retval = -EINVAL;\n        goto out;\n    }\n\n    if (!idev->info || !idev->info->irq) {\n        retval = -EIO;\n        goto out;\n    }\n\n    if (!idev->info->irqcontrol) {\n        retval = -ENOSYS;\n        goto out;\n    }\n\n    retval = idev->info->irqcontrol(idev->info, irq_on);\n\nout:\n    mutex_unlock(&idev->info_lock);\n    return retval ? retval : sizeof(s32);\n}\n")),(0,o.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\u5b83\u4ece",(0,o.kt)("strong",{parentName:"p"},"\u7528\u6237\u6001"),"\u83b7\u53d6\u5230 ",(0,o.kt)("strong",{parentName:"p"},"irq_on")," \u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u4e3a 1 \u5bf9\u5e94\u8981\u4f7f\u80fd\u4e2d\u65ad\uff0c\u4e3a 0 \u5219\u8868\u793a\u5173\u95ed\u4e2d\u65ad\uff0c\u5728\u83b7\u53d6\u4e86\u8fd9\u4e2a\u53c2\u6570\u540e\uff0c\u5b83\u9996\u5148",(0,o.kt)("strong",{parentName:"p"},"\u5360\u7528\u4e92\u65a5\u9501"),"\uff0c\u7136\u540e\u8c03\u7528 info \u7ed3\u6784\u4f53\u4e2d\u5b9e\u4f8b\u5316\u7684 ",(0,o.kt)("strong",{parentName:"p"},"irqcontrol")," \u5b50\u51fd\u6570\u6765\u5b8c\u6210\u5de5\u4f5c\u3002"),(0,o.kt)("h2",{id:"write-\u5199\u5165-uio-\u8bbe\u5907\u6587\u4ef6\u7684\u5b8c\u6574\u8fc7\u7a0b"},"write \u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u7684\u5b8c\u6574\u8fc7\u7a0b"),(0,o.kt)("p",null,"\u4e0a\u6587\u4e2d\u6211\u5df2\u7ecf\u63d0\u5230\u8fc7\u4f7f\u7528 write \u7cfb\u7edf\u8c03\u7528\u5199\u5165 uio \u8bbe\u5907\u6587\u4ef6\u6700\u7ec8\u5c06\u4f1a\u8c03\u7528\u5230 ",(0,o.kt)("strong",{parentName:"p"},"info \u7ed3\u6784\u4f53"),"\u4e2d\u5b9e\u4f8b\u5316\u7684 ",(0,o.kt)("strong",{parentName:"p"},"irqcontrol \u5b50\u51fd\u6570"),"\u6765\u5b8c\u6210\u5de5\u4f5c\uff0cigb_uio \u5c31\u63d0\u4f9b\u4e86\u8fd9\u6837\u4e00\u4e2a\u51fd\u6570\u3002"),(0,o.kt)("p",null,"\u4e5f\u5c31\u662f\u8bf4\u5728",(0,o.kt)("strong",{parentName:"p"},"\u7ed1\u5b9a\u7f51\u5361\u5230 igb_uio \u65f6"),"\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u5199\u5165"),"\u63a5\u53e3\u5bf9\u5e94\u7684 ",(0,o.kt)("strong",{parentName:"p"},"uio \u8bbe\u5907\u6587\u4ef6"),"\u65f6\u5c06\u4f1a\u8c03\u7528 igb_uio \u4e2d\u5b9e\u4f8b\u5316\u7684 ",(0,o.kt)("strong",{parentName:"p"},"info->irqcontrol")," \u51fd\u6570\u6765",(0,o.kt)("strong",{parentName:"p"},"\u63a7\u5236\u4e2d\u65ad\u72b6\u6001"),"\u3002"),(0,o.kt)("p",null,"\u8fd9\u91cc\u63d0\u5230\u7684 ",(0,o.kt)("strong",{parentName:"p"},"irqcontrol")," \u7684\u5b9e\u4f8b\u5316\u51fd\u6570\uff0c\u5728 igb_uio \u4e2d\u5bf9\u5e94\u7684\u5c31\u662f ",(0,o.kt)("strong",{parentName:"p"},"igbuio_pci_irqcontrol")," \u51fd\u6570\u3002\u5176\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"static int\nigbuio_pci_irqcontrol(struct uio_info *info, s32 irq_state)\n{\n    struct rte_uio_pci_dev *udev = info->priv;\n    struct pci_dev *pdev = udev->pdev;\n\n    pci_cfg_access_lock(pdev);\n    if (udev->mode == RTE_INTR_MODE_LEGACY)\n        pci_intx(pdev, !!irq_state);\n\n    else if (udev->mode == RTE_INTR_MODE_MSIX) {\n        struct msi_desc *desc;\n\n#if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 3, 0))\n        list_for_each_entry(desc, &pdev->msi_list, list)\n            igbuio_msix_mask_irq(desc, irq_state);\n#else\n        list_for_each_entry(desc, &pdev->dev.msi_list, list)\n            igbuio_msix_mask_irq(desc, irq_state);\n#endif\n    }\n    pci_cfg_access_unlock(pdev);\n\n    return 0;\n}\n")),(0,o.kt)("p",null,"\u8fd9\u91cc\u9700\u8981",(0,o.kt)("strong",{parentName:"p"},"\u8bbf\u95ee pci \u914d\u7f6e\u7a7a\u95f4"),"\uff0c\u6839\u636e\u4e0d\u540c\u7684",(0,o.kt)("strong",{parentName:"p"},"\u4e2d\u65ad\u7c7b\u578b"),"\u6765\u63a7\u5236\u4e2d\u65ad\u72b6\u6001\u3002"),(0,o.kt)("h2",{id:"write-\u8fc7\u7a0b\u56fe\u793a"},"write \u8fc7\u7a0b\u56fe\u793a"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://img-blog.csdnimg.cn/20210421152518118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70",alt:"\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0"})),(0,o.kt)("p",null,"dpdk \u7a0b\u5e8f\u5728\u521d\u59cb\u5316\u7f51\u5361\u65f6\u4f1a\u5199\u5165\u7f51\u5361\u63a5\u53e3\u5bf9\u5e94\u7684 uio \u6587\u4ef6\u6765\u4f7f\u80fd\u4e2d\u65ad\uff0c\u5f53\u4e2d\u65ad\u4f7f\u80fd\u540e\uff0c\u4e00\u65e6\u6709\u4e2d\u65ad\u5230\u6765\uff0cuio_interrupt \u4e2d\u65ad\u56de\u8c03\u4f1a\u88ab\u6267\u884c\u3002"),(0,o.kt)("p",null,"\u6b64\u56de\u8c03\u51fd\u6570\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"\n/**\n * uio_interrupt - hardware interrupt handler\n * @irq: IRQ number, can be UIO_IRQ_CYCLIC for cyclic timer\n * @dev_id: Pointer to the devices uio_device structure\n */\nstatic irqreturn_t uio_interrupt(int irq, void *dev_id)\n{\n        struct uio_device *idev = (struct uio_device *)dev_id;\n        irqreturn_t ret = idev->info->handler(irq, idev->info);\n\n        if (ret == IRQ_HANDLED)\n                uio_event_notify(idev->info);\n\n        return ret;\n}\n")),(0,o.kt)("p",null,"\u5b83\u9996\u5148\u8c03\u7528\u4e86 uio_info \u4e2d\u7684 handler \u51fd\u6570\uff0c\u5bf9 igb_uio \u6765\u8bf4\uff0c\u6b64\u51fd\u6570\u662f igbuio_pci_irqhandler\uff0c\u5176\u6e90\u7801\u5982\u4e0b\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c"},"207 /**\n208  * This is interrupt handler which will check if the interrupt is for the right device.\n209  * If yes, disable it here and will be enable later.\n210  */\n211 static irqreturn_t\n212 igbuio_pci_irqhandler(int irq, struct uio_info *info)\n213 {\n214     struct rte_uio_pci_dev *udev = info->priv;\n215\n216     /* Legacy mode need to mask in hardware */\n217     if (udev->mode == RTE_INTR_MODE_LEGACY &&\n218         !pci_check_and_mask_intx(udev->pdev))\n219         return IRQ_NONE;\n220\n221     /* Message signal mode, no share IRQ and automasked */\n222     return IRQ_HANDLED;\n223 }\n")),(0,o.kt)("p",null,"\u5bf9\u4e8e Legacy \u4e2d\u65ad\u6a21\u5f0f\uff0c\u9700\u8981\u8bbe\u7f6e\u786c\u4ef6\u63a9\u7801\u503c\uff0c\u6211\u53ea\u5173\u6ce8\u8fd4\u56de IRQ_HANDLED \u7684\u6d41\u7a0b\u3002\u5f53 handler \u51fd\u6570\u8c03\u7528\u5b8c\u6210\u540e\uff0c\u5982\u679c\u8fd4\u56de\u503c\u662f IRQ_HANDLED\uff0c\u5219\u8c03\u7528 uio_event_notify \u5524\u9192\u963b\u585e\u5728 uio \u8bbe\u5907\u7b49\u5f85\u961f\u5217\u4e2d\u7684\u8fdb\u7a0b\uff0c\u4ee5\u901a\u77e5\u7528\u6237\u6001\u7a0b\u5e8f\u4e2d\u65ad\u5230\u8fbe\u3002"),(0,o.kt)("h2",{id:"dpdk-\u7a0b\u5e8f\u4e2d\u76d1\u542c\u4e2d\u65ad\u4e8b\u4ef6\u7684\u8fc7\u7a0b"},"dpdk \u7a0b\u5e8f\u4e2d\u76d1\u542c\u4e2d\u65ad\u4e8b\u4ef6\u7684\u8fc7\u7a0b"),(0,o.kt)("p",null,"dpdk \u5355\u72ec\u521b\u5efa\u4e86\u4e00\u4e2a\u4e2d\u65ad\u7ebf\u7a0b\u8d1f\u8d23\u76d1\u542c\u5e76\u5904\u7406\u4e2d\u65ad\u4e8b\u4ef6\uff0c\u5176\u4e3b\u8981\u8fc7\u7a0b\u5982\u4e0b\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u521b\u5efa epoll_event"),(0,o.kt)("li",{parentName:"ol"},"\u904d\u5386\u4e2d\u65ad\u6e90\u5217\u8868\uff0c\u6dfb\u52a0\u6bcf\u4e00\u4e2a\u9700\u8981\u76d1\u542c\u7684 uio \u8bbe\u5907\u4e8b\u4ef6\u7684 uio \u6587\u4ef6\u63cf\u8ff0\u7b26\u5230 epoll_event \u4e2d"),(0,o.kt)("li",{parentName:"ol"},"\u8c03\u7528 epoll_wait \u76d1\u542c\u4e8b\u4ef6\uff0c\u76d1\u542c\u5230\u4e8b\u4ef6\u540e\u8c03\u7528 eal_intr_process_interrupts \u8c03\u7528\u76f8\u5173\u7684\u4e2d\u65ad\u56de\u8c03\u51fd\u6570")))}c.isMDXComponent=!0}}]);