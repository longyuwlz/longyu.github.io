<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://longyuwlz.github.io/longyu.github.io/blog</id>
    <title>龙瑜的文字世界 Blog</title>
    <updated>2022-06-21T00:32:49.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://longyuwlz.github.io/longyu.github.io/blog"/>
    <subtitle>龙瑜的文字世界 Blog</subtitle>
    <entry>
        <title type="html"><![CDATA[dpdk/Failed to mmap 2MB hugepages 与 max_map_count limit]]></title>
        <id>/dpdk/Failed to mmap 2MB hugepages 与 max_map_count limit</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/Failed to mmap 2MB hugepages 与 max_map_count limit"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="设备内存信息">设备内存信息<a class="hash-link" href="#设备内存信息" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># free -h</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              total        used        </span><span class="token function" style="color:#d73a49">free</span><span class="token plain">      shared  buff/cache   available</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Mem:            15G        </span><span class="token number" style="color:#36acaa">8</span><span class="token plain">.1G        </span><span class="token number" style="color:#36acaa">7</span><span class="token plain">.0G         22M        512M        </span><span class="token number" style="color:#36acaa">7</span><span class="token plain">.4G</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Swap:            0B          0B          0B</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="l2fwd-运行报错信息">l2fwd 运行报错信息<a class="hash-link" href="#l2fwd-运行报错信息" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># ./l2fwd  -m 64 -- -p0x1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dpdk revision </span><span class="token builtin class-name">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">41333</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Support maximum </span><span class="token number" style="color:#36acaa">128</span><span class="token plain"> logical core</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> by configuration.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Probing VFIO support</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Module /sys/module/vfio_pci not found</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> error </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">No such </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> or directory</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: VFIO modules not loaded, skipping VFIO support</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Setting up child physically contiguous memory</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: map_all_hugepages</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">: mmap failed: Cannot allocate memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Failed to mmap </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> MB hugepages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PANIC </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> rte_eal_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Cannot init memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Aborted</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>关键信息如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: map_all_hugepages(): mmap failed: Cannot allocate memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Failed to mmap 2 MB hugepages</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从输出信息看问题是 mmap 映射大页的时候失败了，看不出其它问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="strace-跟踪扩大问题输入">strace 跟踪扩大问题输入<a class="hash-link" href="#strace-跟踪扩大问题输入" title="标题的直接链接">​</a></h2><p>strace 跟踪确认问题如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/dev/hugepages/rtemap_3061"</span><span class="token plain">, O_RDWR</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">O_CREAT, 0755</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mmap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">0x17ea00000, </span><span class="token number" style="color:#36acaa">2097152</span><span class="token plain">, PROT_READ</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">PROT_WRITE, MAP_SHARED</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">MAP_POPULATE, </span><span class="token number" style="color:#36acaa">5</span><span class="token plain">, </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> -1 ENOMEM </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Cannot allocate memory</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在 mmap 第 3061 个 hugepage 的时候报错，根本问题是 mmap 映射失败，出错 mmap 系统调用的返回值是 ENOMEM。</p><p>man mmap 找到下面这些与 ENOMEM 相关的信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">       ENOMEM No memory is available.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       ENOMEM The  process</span><span class="token string" style="color:#e3116c">'s  maximum  number  of mappings would have been exceeded.  This error can also occur for munmap(),</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">              when unmapping a region in the middle of an existing mapping, since this results in two smaller mappings on ei‐</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">              ther side of the region being unmapped.</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">       ENOMEM (since Linux 4.7) The process'</span><span class="token plain">s RLIMIT_DATA limit, described </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> getrlimit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">, would have been exceeded.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的信息描述了如下三种不同的问题：</p><ol><li>没有可用内存</li><li>超过了进程的最大映射数目</li><li>超过了进程的 RLIMIT_DATA 限制</li></ol><p>ulimit 查看获取到如下信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># ulimit -a</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">core </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> size          </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">blocks, -c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">data seg size           </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kbytes, -d</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> unlimited</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">scheduling priority             </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">-e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> size               </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">blocks, -f</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> unlimited</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pending signals                 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">-i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">63812</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">max locked memory       </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kbytes, -l</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">max memory size         </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kbytes, -m</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> unlimited</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">open</span><span class="token plain"> files                      </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">-n</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pipe size            </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">512</span><span class="token plain"> bytes, -p</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">POSIX message queues     </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">bytes, -q</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">819200</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">real-time priority              </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">-r</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">stack size              </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kbytes, -s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8192</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cpu </span><span class="token function" style="color:#d73a49">time</span><span class="token plain">               </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">seconds, -t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> unlimited</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">max user processes              </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">-u</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">63812</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">virtual memory          </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kbytes, -v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> unlimited</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> locks                      </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">-x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> unlimited</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>确认 ulimit 没有相关的限制设定内容。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="vmmax_map_count-设定">vm.max_map_count 设定<a class="hash-link" href="#vmmax_map_count-设定" title="标题的直接链接">​</a></h2><p>经过大佬提醒，这个问题可能与 vm.max_map_count 设定有关，查看系统中的设定内容如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># sysctl -a | grep vm.max_map_count</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vm.max_map_count = 3096</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行如下命令增加 max_map_count 值后重试，问题得到解决。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">65535</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /proc/sys/vm/max_map_count</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里的问题实际上与 man mmap 得到的信息中对 ENOMEM 的第二种解释符合，只不过 manual 中没有直接指出 max_map_count 的限定。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="vmmax_map_count-是干嘛的">vm.max_map_count 是干嘛的？<a class="hash-link" href="#vmmax_map_count-是干嘛的" title="标题的直接链接">​</a></h2><p>从内核 Documentation 目录中 sysctl/vm.txt 文件中找到了下面这些描述信息：</p><div class="language-man codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-man codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">max_map_count:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">This file contains the maximum number of memory map areas a process</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">may have. Memory map areas are used as a side-effect of calling</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">malloc, directly by mmap and mprotect, and also when loading shared</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">libraries.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">While most applications need less than a thousand maps, certain</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">programs, particularly malloc debuggers, may consume lots of them,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">e.g., up to one or two maps per allocation.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The default value is 65536.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个 max_map_count 是用来限定进程内存 map 区域的最大数量，每次 mmap 成功内部的 map_count 都会加 1，当内部 mmap_count 大于 sysctl 设定的 max_count 数目时 mmap 会返回 -ENOMEM。</p><p>mmap 流程中相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Too many mappings? */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mm</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">map_count </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> sysctl_max_map_count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENOMEM</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>同时 munmap 的时候会将内部的 map_count 减 1，而要改变这个数量，可以通过 sysctl 来重新设定，也可以通过写入 /proc/sys/vm/max_map_count 文件来完成，需要注意的是这个限定是全局的，会影响所有的进程。</p><p>如果需要永久生效，可以将配置写入到 /etc/sysctl.conf 文件中。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-1604--m-参数的原理">dpdk-16.04 -m 参数的原理<a class="hash-link" href="#dpdk-1604--m-参数的原理" title="标题的直接链接">​</a></h2><p>在这个问题中，l2fwd 命令运行参数如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./l2fwd  -m </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> -- -p0x1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>指定了 -m 参数限定映射的大页空间为 64M，按照一般的思路不应该出这种问题，但其实如果进一步研究 16.04 hugepage 映射的过程，能够发现如下信息：</p><p>dpdk-16.04 会在程序初始化的时候 map 所有的大页，这个行为没有参数来控制。-m 参数实际在映射所有大页的行为之后处理，通过解除超过数量的映射来实现。</p><p>这个实现是不合理的，听说高版本已经解决了这个问题，需要研究一下。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/I210 网卡设定 force link mode 并关闭 EEE mode]]></title>
        <id>/dpdk/I210 网卡设定 force link mode 并关闭 EEE mode</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/I210 网卡设定 force link mode 并关闭 EEE mode"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="标题的直接链接">​</a></h2><p>在定位 I210 网卡接口震荡问题的时候，阅读手册发现网卡支持设定 force mode，理解为可以将网卡设定为强制 up 状态，同时怀疑 eee 节能模式导致网卡休眠从而发生接口 down 的问题，于是需要设定 force mode 为 up 的时候同时关闭 eee 节能模式，需要修改 dpdk-16.04 中的部分代码来进行测试。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="i210-手册中的相关内容">I210 手册中的相关内容<a class="hash-link" href="#i210-手册中的相关内容" title="标题的直接链接">​</a></h2><p>I210 手册 P107 页描述了设定 force mode 需要设定的寄存器内容信息摘录如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> Move to Force mode by setting the following bits:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">— CTRL.FD (CSR 0x0 bit 0) = 1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">— CTRL.SLU (CSR 0x0 bit 6) = 1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">— CTRL.RFCE (CSR 0x0 bit 27) = 0b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">— CTRL.TFCE (CSR 0x0 bit 28) = 0b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">— PCS_LCTL.FORCE_LINK (CSR 0X4208 bit 5) = 1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">— PCS_LCTL.FSD (CSR 0x4208 bit 4) = 1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">— PCS_LCTL.FDV (CSR 0x4208 bit 3) = 1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">— PCS_LCTL.FLV (CSR 0x4208 bit 0) = 1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">— PCS_LCTL.AN_ENABLE (CSR 0x4208 bit 16) = 0b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk-16.04 中 pmd 与 kni 内核驱动同时使用，需要确定设定真实生效，这一点通过查看寄存器内容来确认。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="igb-pmd-驱动-igb_ethdevc-的修改">igb pmd 驱动 igb_ethdev.c 的修改<a class="hash-link" href="#igb-pmd-驱动-igb_ethdevc-的修改" title="标题的直接链接">​</a></h2><p>通过修改初始化逻辑来完成，patch 如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Index</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> drivers</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">net</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">e1000</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_ethdev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> drivers</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">net</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">e1000</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_ethdev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> drivers</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">net</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">e1000</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_ethdev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1390</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">7</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1390</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">28</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">e1000_setup_link</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    </span><span class="token class-name">uint32_t</span><span class="token plain"> ipcnfg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> eeer</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    ipcnfg </span><span class="token operator" style="color:#393A34">&amp;=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">~</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">E1000_IPCNFG_EEE_1G_AN </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> E1000_IPCNFG_EEE_100M_AN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    eeer </span><span class="token operator" style="color:#393A34">&amp;=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">~</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">E1000_EEER_TX_LPI_EN </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> E1000_EEER_RX_LPI_EN </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">                  E1000_EEER_LPI_FC</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    </span><span class="token function" style="color:#d73a49">E1000_WRITE_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_IPCNFG</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ipcnfg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    </span><span class="token function" style="color:#d73a49">E1000_WRITE_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_EEER</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> eeer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    </span><span class="token class-name">uint32_t</span><span class="token plain"> pcs_lctl</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    pcs_lctl </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_PCS_LCTL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"current PCS_LCTL is %u\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pcs_lctl</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* disable AN_ENABLE */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    pcs_lctl </span><span class="token operator" style="color:#393A34">&amp;=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">~</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">E1000_PCS_LCTL_AN_ENABLE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* enable FORCE_LINK and  FORCE_LINK_UP */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    pcs_lctl </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> E1000_PCS_LCTL_FORCE_LINK </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> E1000_PCS_LCTL_FLV_LINK_UP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> E1000_PCS_LCTL_FSD</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    </span><span class="token function" style="color:#d73a49">E1000_WRITE_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_PCS_LCTL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pcs_lctl</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"after changed PCS_LCTL is %u\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_PCS_LCTL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rte_intr_allow_others</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">intr_handle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">/* check if lsc interrupt is enabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">intr_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lsc </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="kni-驱动-e1000_82575c-代码的修改">kni 驱动 e1000_82575.c 代码的修改<a class="hash-link" href="#kni-驱动-e1000_82575c-代码的修改" title="标题的直接链接">​</a></h2><p>同样通过修改初始化代码来完成，patch 如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Index</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">ethtool</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">e1000_82575</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">ethtool</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">e1000_82575</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">ethtool</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">e1000_82575</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">2802</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">2802</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">7</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ipcnfg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_IPCNFG</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        eeer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_EEER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">#</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* enable or disable per user setting */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">_82575</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">eee_disable</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                u32 eee_su </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_EEE_SU</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">2818</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">2819</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">17</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                eeer </span><span class="token operator" style="color:#393A34">&amp;=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">~</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">E1000_EEER_TX_LPI_EN </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> E1000_EEER_RX_LPI_EN </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                          E1000_EEER_LPI_FC</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">#endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    　　ipcnfg </span><span class="token operator" style="color:#393A34">&amp;=</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">~</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">E1000_IPCNFG_EEE_1G_AN </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> E1000_IPCNFG_EEE_100M_AN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    　　eeer </span><span class="token operator" style="color:#393A34">&amp;=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">~</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">E1000_EEER_TX_LPI_EN </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> E1000_EEER_RX_LPI_EN </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">                   E1000_EEER_LPI_FC</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">E1000_WRITE_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_IPCNFG</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ipcnfg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">E1000_WRITE_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_EEER</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> eeer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">-</span><span class="token plain">       </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_IPCNFG</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">-</span><span class="token plain">       </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_EEER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">    </span><span class="token function" style="color:#d73a49">printk</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"after set ipcnfg is %x, eeer is %x\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_IPCNFG</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_EEER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试发现 kni 中默认是开启 eee 模式的，注释掉了开启 eee 模式的代码，并清除相关寄存器的设定，重新设定后使用 printk 打印寄存器内容，确定修改生效。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="igb_ethtoolc-的修改">igb_ethtool.c 的修改<a class="hash-link" href="#igb_ethtoolc-的修改" title="标题的直接链接">​</a></h2><p>为了在程序执行后进一步确认 force link mode 设定成功，且 EEE mode 正常关闭，在 igb 网卡获取寄存器的函数中添加打印，打印出 ipcnfg 与 eeer 寄存器的内容。</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Index</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">ethtool</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_ethtool</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">ethtool</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_ethtool</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">ethtool</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_ethtool</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">495</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">495</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">p</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> IGB_REGS_LEN </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        regs</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">24</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">revision_id </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">device_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token function" style="color:#d73a49">printk</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ipcnfg is %x, eeer is %x\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_IPCNFG</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_EEER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* General Registers */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        regs_buff</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_CTRL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>程序运行后，通过执行 ethtool -d 查看 <strong>PCS_LCTL 寄存器与 dmesg 的输出来确认设置生效</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="测试结果">测试结果<a class="hash-link" href="#测试结果" title="标题的直接链接">​</a></h2><p>测试发现 force link mode up 并不像我们想象的能够让网卡一直处于 up 状态，拔了网线后仍旧能够变为 down，推测强制的定义应该针对的是速率与双工模式。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/Unsupported SFP+ Module]]></title>
        <id>/dpdk/Unsupported SFP+ Module</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/Unsupported SFP+ Module"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>ixgbe 网卡使用了不兼容的光模块后，dpdk 程序启动报 Unsupported SFP+ Module 错误，程序无法正常工作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="经验之谈">经验之谈<a class="hash-link" href="#经验之谈" title="标题的直接链接">​</a></h2><p>dpdk 的不同版本对光模块的兼容性存在着差别，不同版本的 dpdk pmd 驱动支持的光模块型号存在着差别。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-ixgbe-pmd-allow_unsupported_sfp-参数">dpdk ixgbe pmd allow_unsupported_sfp 参数<a class="hash-link" href="#dpdk-ixgbe-pmd-allow_unsupported_sfp-参数" title="标题的直接链接">​</a></h2><p>dpdk 中的 ixgbe 驱动中可以设置允许使用不支持的 sfp 模块。</p><p>在 eth_ixgbe_dev_init 函数中有如下语句：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">allow_unsupported_sfp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里将 allow_unsupported_sfp 设置为 1 允许 ixgbe 驱动使用不支持的 sfp 模块。这种配置下的 ixgbe pmd 驱动可以使用的光模块型号会得到扩充，但使用官方未支持的 sfp 型号可能会引入新的问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ixgbe-官方驱动-allow_unsupported_sfp-参数">ixgbe 官方驱动 allow_unsupported_sfp 参数<a class="hash-link" href="#ixgbe-官方驱动-allow_unsupported_sfp-参数" title="标题的直接链接">​</a></h2><p>ixgbe 官方驱动也支持 allow_unsupported_sfp 参数，在 insmod ixgbe 驱动的时候可以设置 allow_unsupported_sfp 参数。</p><p>modinfo 查看 ixgbe.ko 的参数得到如下相关的信息i：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">parm:           allow_unsupported_sfp:Allow unsupported and untested SFP+ modules on 82599-based adapters (uint)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在使用 ixgbe 官方驱动的时候可以在加载模块时设置这个参数，不同的驱动版本支持的光模块型号可能也存在着差别。</p><p>注意，设置了 allow_unsupported_sfp 并不代表 sfp 模块就能够正常使用，需要以实际的测试结果为准。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk ebpf 库跨版本移植]]></title>
        <id>/dpdk/dpdk ebpf 库跨版本移植</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk ebpf 库跨版本移植"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[目标]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="目标">目标<a class="hash-link" href="#目标" title="标题的直接链接">​</a></h2><p>dpdk-19.11 ebpf 库移植到 dpdk-16.04 中并适配 testpmd 来测试。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="移植前评估工作">移植前评估工作<a class="hash-link" href="#移植前评估工作" title="标题的直接链接">​</a></h2><p>评估方法：</p><ol><li>使用 dpdk-19.11 编译生成 librte_bpf.a</li><li>nm 查看 .a 中的符号</li><li>过滤出 U 类型的符号并排除内部符号</li></ol><p>评估的情况：</p><p><a href="http://libelf.so/" target="_blank" rel="noopener noreferrer">libelf.so</a> 提供的符号：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">elf64_getehdr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elf64_getshdr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elf_begin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elf_end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elf_errmsg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elf_errno</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elf_getdata</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elf_getscn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elf_ndxscn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elf_nextscn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elf_strptr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">elf_version</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk 需要支持的接口：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_add_rx_callback</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_add_tx_callback</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_dev_is_valid_port</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_remove_rx_callback</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_remove_tx_callback</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_log_register</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_log_set_level</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_mempool_ops_table</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk-16.04 已经具备的符号：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_add_rx_callback</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_add_tx_callback</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_dev_is_valid_port</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_remove_rx_callback</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_remove_tx_callback</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_log</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>经过确认需要适配的符号如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rte_log_register</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_mempool_ops_table</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_log_set_level</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>根据上述信息，评估适配的工作量很少，风险可控。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="移植的注意事项">移植的注意事项<a class="hash-link" href="#移植的注意事项" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-librte_bpf-makefile-文件中设置-depdirs-变量将依赖的项目列举出来">1. librte_bpf Makefile 文件中设置 DEPDIRS 变量，将依赖的项目列举出来<a class="hash-link" href="#1-librte_bpf-makefile-文件中设置-depdirs-变量将依赖的项目列举出来" title="标题的直接链接">​</a></h3><p>   依赖 lib/librte_net lib/librte_eal lib/librte_mbuf  lib/librte_ether 这几个项目</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-dpdk-1604-不支持-rte_log_register-函数">2. dpdk-16.04 不支持 rte_log_register 函数<a class="hash-link" href="#2-dpdk-1604-不支持-rte_log_register-函数" title="标题的直接链接">​</a></h3><p> dpdk 高版本使用 rte_log_register 来注册一种类型的 log 事件，dpdk-16.04 的 log 系统比较落后，这部分逻辑需要去掉，同时 RTE_BPF_LOG 宏定义也需要修改。</p><p> 可以在 <strong>rte_log.h</strong> 中添加一个 <strong>RTE_LOGTYPE_BPF</strong> 的宏定义并修改 <strong>RTE_BPF_LOG</strong> 的实现。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-dpdk-1604-中用于标识网卡-id-的-port_id-为-uint8_t-类型高版本为-uint16_t-类型">3. dpdk-16.04 中用于标识网卡 id 的 port_id 为 uint8_t 类型，高版本为 uint16_t 类型<a class="hash-link" href="#3-dpdk-1604-中用于标识网卡-id-的-port_id-为-uint8_t-类型高版本为-uint16_t-类型" title="标题的直接链接">​</a></h3><p> 可以写一行 sed 命令一键替换</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-rte_experimental-与-rte_always_inline-这两个宏在-dpdk-1604-中缺少">4. <strong>rte_experimental 与 </strong>rte_always_inline 这两个宏在 dpdk-16.04 中缺少<a class="hash-link" href="#4-rte_experimental-与-rte_always_inline-这两个宏在-dpdk-1604-中缺少" title="标题的直接链接">​</a></h3><p><strong>rte_always_inline 的定义可以从高版本 <strong>copy</strong> 过来，</strong>rte_experimental  也可以从高版本 copy 过来，最好是加条件编译控制定义为空</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-mkrteappmk-中添加-rte_bpf-的链接项目与--lelf-的条件控制链接项目">5. mk/rte.app.mk 中添加 rte_bpf 的链接项目与 -lelf 的条件控制链接项目<a class="hash-link" href="#5-mkrteappmk-中添加-rte_bpf-的链接项目与--lelf-的条件控制链接项目" title="标题的直接链接">​</a></h3><p>   示例如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">+</span><span class="token plain">_LDLIBS</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">$</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">CONFIG_RTE_LIBRTE_BPF</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">            </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">lrte_bpf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">+</span><span class="token function" style="color:#d73a49">ifeq</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">$</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">CONFIG_RTE_LIBRTE_BPF_ELF</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">y</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">+</span><span class="token plain">_LDLIBS</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">$</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">CONFIG_RTE_LIBRTE_BPF</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">            </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">lelf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">+</span><span class="token plain">endif</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-修改-config-目录中的默认-dpdk-编译配置文件增加-config_rte_librte_bpf-与-config_rte_librte_bpf_elf-的配置项目并更新-rte_target-目录中的-config-文件">6. 修改 config 目录中的默认 dpdk 编译配置文件，增加 CONFIG_RTE_LIBRTE_BPF 与 CONFIG_RTE_LIBRTE_BPF_ELF 的配置项目，并更新 RTE_TARGET 目录中的 .config 文件<a class="hash-link" href="#6-修改-config-目录中的默认-dpdk-编译配置文件增加-config_rte_librte_bpf-与-config_rte_librte_bpf_elf-的配置项目并更新-rte_target-目录中的-config-文件" title="标题的直接链接">​</a></h3><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-移植-bpf_cmdc-与-bpf_cmdh-到-testpmd-中时需要根据调整-bpf_cmdc-文件包含的头文件">7. 移植 bpf_cmd.c 与 bpf_cmd.h 到 testpmd 中时，需要根据调整 bpf_cmd.c 文件包含的头文件<a class="hash-link" href="#7-移植-bpf_cmdc-与-bpf_cmdh-到-testpmd-中时需要根据调整-bpf_cmdc-文件包含的头文件" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="8-bpf-arm64-jit-代码翻译相关源码需要依赖两个高版本的宏在-rte_commonh-中添加-rte_fls_u64-与-rte_align_mul_ceil-宏定义即可">8. bpf arm64 jit 代码翻译相关源码需要依赖两个高版本的宏，在 rte_common.h 中添加 rte_fls_u64 与 RTE_ALIGN_MUL_CEIL 宏定义即可<a class="hash-link" href="#8-bpf-arm64-jit-代码翻译相关源码需要依赖两个高版本的宏在-rte_commonh-中添加-rte_fls_u64-与-rte_align_mul_ceil-宏定义即可" title="标题的直接链接">​</a></h3><h2 class="anchor anchorWithStickyNavbar_LWe7" id="移植后测试">移植后测试<a class="hash-link" href="#移植后测试" title="标题的直接链接">​</a></h2><p>在虚拟机中使用 testpmd 测试移植的 bpf 库。</p><p>bpf-load 加载：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">testpmd</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> bpf</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">load  rx </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> J </span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dummy</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">validate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0x7ffd0c107740</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> stats</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nb_nodes</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nb_jcc_nodes</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">node_color</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">WHITE</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">GREY</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">BLACK</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">edge_type</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">UNKNOWN</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">TREE</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">BACK</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">CROSS</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_bpf_elf_load</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fname</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"./dummy.o"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> sname</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">".text"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> successfully creates </span><span class="token number" style="color:#36acaa">0x7f141b176000</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">jit</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">func</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x7f141b14c000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sz</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">Success</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dummy.o bpf 指令码成功加载。</p><p>perf 观测函数调用：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">52.96</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">  testpmd   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> bpf_rx_callback_jit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">30.99</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">  testpmd   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> pkt_burst_io_forward</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">15.02</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">  testpmd   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> eth_em_recv_pkts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0.95</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">  testpmd   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> start_pkt_forward_on_core</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>bpf_rx_callback_jit 函数正常调用，移植成功。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk mempool cache 机制分析]]></title>
        <id>/dpdk/dpdk mempool cache 机制分析</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk mempool cache 机制分析"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="标题的直接链接">​</a></h2><p>池是一种常见的设计技术，它将程序中常用的核心资源提前申请出来，放到一个【池子】里面，由程序自行管理资源的释放与申请。</p><p>dpdk 作为一种高性能数据转发套件，其中的关键资源是以 <strong>mbuf</strong> 结构描述的报文。程序收发包与中间的处理涉及到【频繁】的 mbuf 申请、释放操作，为了优化这一过程，dpdk 内部也使用了池技术来管理 mbuf。</p><p>dpdk 提供了类似内存池的结构，这一结构在 dpdk 内部称为 <strong>mempool</strong>，【专用】于 mbuf 的 mempool 又称为 <strong>pktmbuf pool</strong>。</p><p>dpdk 中 mbuf 使用的常见流程如下：</p><ol><li>程序初始化时创建一个 pktmbuf pool，按照特定的模式初始化创建的每个 mbuf 结构</li><li>程序运行时从 pktmbuf pool 中申请 mbuf，释放 mbuf 时，mbuf 重新被添加到内存池中</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-内存池的-cache-功能">dpdk 内存池的 cache 功能<a class="hash-link" href="#dpdk-内存池的-cache-功能" title="标题的直接链接">​</a></h2><p>cache 是计算机体系中的一个非常重要的概念，它充当了 cpu 与主存之间的缓冲，平衡了 cpu 访问寄存器与访问主存之间的巨大差异，带了更好的性能。</p><p>cache 在计算机内存架构中的位置如下图所示：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/58157219eb4b4d5fb0fad60c60065f90.png" alt="在这里插入图片描述" class="img_ev3q">上图摘自 《CSAPP》。</p><p>上面的图形为正金字塔型，向上的方向上存储结构空间更小、访问速度更快、价格更昂贵，向下的方向存储结构空间更大、访问速度更慢、价格更便宜。</p><p>cache 的一般工作流程如下：</p><ol><li>当程序第一次访问某一字节存储空间时，这块空间不在 cache 中</li><li>cpu 以 cache line 为大小加载这一存储空间周围 64-byte（一个 cache line 的大小）长度的内容到 cache 中</li><li>此后继续访问这 64-byte 字节中的内容就能够直接在 cache 中找到，不用去访问主存，进而带来更好的性能</li></ol><p>cache 技术可以抽象为一种缓冲技术，它将少部分访问非常频繁的数据缓存起来，对这些数据的访问通过缓冲区完成，不用访问更底层的结构。</p><p>dpdk mempool 中就使用了缓冲技术，在 dpdk 内部称为 mempool cache，类比 cache 内存结构图，画了一个简单的 mempool cache 结构图如下：
<img loading="lazy" src="https://img-blog.csdnimg.cn/9d7922964ffa4b2ab886dee04a486c43.jpeg#pic_center" alt="在这里插入图片描述" class="img_ev3q"></p><p>与 cache 类似，mempool cache 中的元素更少，访问速度更快，在软件上的意义是执行更少的代码逻辑。</p><p>dpdk mempool 使用过程有些类似 cache 预取。</p><p>最开始的时候 mempool cache 中并<strong>没有元素</strong>，当你需要申请 n 个 mem 元素的时候不能在 cache 中找到（类似 cache miss），此时会访问外部的内存池，从内存池中直接出队 n + cache_size 大小个元素，加载到 cache 中，然后从 cache 中分配 n 个元素给上层。</p><p>这样当下一次分配的时候，当数目不超过 cache_size 时就可以直接从 cache 中分配，而不用再从外部内存池中分配。</p><p>下面我使用一个具体的实例，描述下 dpdk mempool cache 的工作原理。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-mempool-cache-结构">1. mempool cache 结构<a class="hash-link" href="#1-mempool-cache-结构" title="标题的直接链接">​</a></h2><p>rte_mempool_cache 结构体描述一个 mempool cache，其结构如下图所示：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/2c81faa1e9c6448ba3c998d4b5d2bade.jpeg#pic_center" alt="在这里插入图片描述" class="img_ev3q">
size 表示 cache 的容量，flushthresh 表示将多余的元素 flush 到内存池的门限值，len 表示当前 cache 中的元素个数，objs 用于存储每个元素（以地址的形式储存）。</p><p>flushthresh 的计算公式如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">CACHE_FLUSHTHRESH_MULTIPLIER</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">1.5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">CALC_CACHE_FLUSHTHRESH</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">c</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa">   </span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa">     </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression keyword" style="color:#00009f">typeof</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">c</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">c</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression operator" style="color:#393A34">*</span><span class="token macro property expression" style="color:#36acaa"> CACHE_FLUSHTHRESH_MULTIPLIER</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其数量为 cache 大小的 <strong>1.5 倍</strong>！</p><p>objs 的大小为 <strong>RTE_MEMPOOL_CACHE_MAX_SIZE * 3</strong>，而在创建 mempool cache 时会限制最大为 <strong>RTE_MEMPOOL_CACHE_MAX_SIZE</strong>，<strong>多出来的存储空间用于临时保存超过 cache size 数目的元素</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-创建一个-pktmbuf-mempool-并为每个逻辑核配置-mempool-cache">2. 创建一个 pktmbuf mempool 并为每个逻辑核配置 mempool cache<a class="hash-link" href="#2-创建一个-pktmbuf-mempool-并为每个逻辑核配置-mempool-cache" title="标题的直接链接">​</a></h2><p>dpdk 创建 pktmbuf pool 的示例代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">MEMPOOL_CACHE_SIZE</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">6</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">NB_MBUFS</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">1024</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* create the mbuf pool */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_pktmbuf_pool_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"mbuf_pool"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            NB_MBUFS</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> MEMPOOL_CACHE_SIZE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            RTE_MBUF_DEFAULT_BUF_SIZE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_socket_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里约定 cache size 为 6，NB_MBUFS 为 1024，同时约定使用了三个逻辑核,其它的参数不展开描述。</p><p>此函数调用后，dpdk 会在每个逻辑核上创建如下 mempool cache 结构：
<img loading="lazy" src="https://img-blog.csdnimg.cn/0ff3be5c27dc4be2bb9d621544a91080.png" alt="在这里插入图片描述" class="img_ev3q">
size 为 6 表明 cache 容量为 6 ，len 为 0 表明当前 cache 中没有元素。此时内存池的结构如下：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/228445d5b640419fb536242905b6d476.jpeg#pic_center" alt="在这里插入图片描述" class="img_ev3q">
如上图所示，pktmbuf pool 会为每个 lcore 按照传入的 cache_size 创建 mempool cache，此 cache 空间中保存内存池中单个元素的地址，初始化的时候 cache 的元素为空，内存池中的元素都在 <strong>ring</strong> 中入队。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-第一次从-mempool-中分配空间时-mempool-cache-的变化">3. 第一次从 mempool 中分配空间时 mempool cache 的变化<a class="hash-link" href="#3-第一次从-mempool-中分配空间时-mempool-cache-的变化" title="标题的直接链接">​</a></h2><p>约定绑定在逻辑核 1 上的线程调用 <code>rte_mempool_get_bulk</code><strong>申请 5 个 mbuf</strong> ，实际从 mempool 中申请的 mbuf 数量为 cache_size + 5——11 个。</p><p>由于 <strong>mempool cache</strong> 与每个逻辑核绑定，首先要获取当前线程所在的逻辑核，然后获取此逻辑核上的 <strong>mempool cache</strong>。</p><p>然后判断要申请的 mem 的数量小于 cache 的缓存数目，则申请 <strong>cache_size - cache_len + n</strong> (6 + 5 - 0 = 11 ) 个数量的元素。</p><p>此后调用底层的出队函数，从内存池中拿出 11 个元素存储到 cache 中，如果失败则 bypass cache，直接从内存池中重新分配。</p><p>成功分配时后将 cache_len 递增 req（11） 个数目，然后从 cache 中拿走 n（5） 个元素，并调整 cache_len 为 6。</p><p>此时当前 lcore 上的 mempool_cache 内容如下：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/65b9606a27c6459c8b479b70c742d016.jpeg#pic_center" alt="在这里插入图片描述" class="img_ev3q">
cache 中保存了 memaddr0 ~memaddr5 共 6 个元素。</p><p>此时 mempool 中的元素如下：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/5218010a31024d30a8e43674a5a8e293.jpeg#pic_center" alt="在这里插入图片描述" class="img_ev3q">
mempool 中的前 11 个元素为空表示被分配出去，其中 6 个元素缓存在 cache 中，剩下的 5 个元素被上层程序占用，其它的元素仍旧在 mempool 中。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-第二次从-mempool-中分配-mubf-时-mempool-cache-的变化">4. 第二次从 mempool 中分配 mubf 时 mempool cache 的变化<a class="hash-link" href="#4-第二次从-mempool-中分配-mubf-时-mempool-cache-的变化" title="标题的直接链接">​</a></h2><p>约定绑定在逻辑核 1 上的线程调用 <code>rte_mempool_get_bulk</code><strong>继续申请 5 个 mbuf</strong> ，此时 cache 中有 6 个元素，直接从 cache 中分配。</p><p>分配后逻辑核 1 上的 mempool_cache 状态如下：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/0e43273936cc471089bc71fd00305ee7.jpeg#pic_center" alt="在这里插入图片描述" class="img_ev3q">
此时 mempool 中的元素如下：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/0ebbb5200b8642f3ab9aed97d1a70688.jpeg#pic_center" alt="在这里插入图片描述" class="img_ev3q"> 此时，上层占用了 10 个 mbuf，lcore1 mempool  cache 中存储了 1 个 mbuf，剩下的 1013 个 mbuf 都在 mempool 中。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-上层释放-mbuf-到-mempool-中">5. 上层释放 mbuf 到 mempool 中<a class="hash-link" href="#5-上层释放-mbuf-到-mempool-中" title="标题的直接链接">​</a></h2><p>当上述 mbuf 使用完成后，上层释放 mbuf，约定上层在逻<strong>辑核 1 上运行的线程中同时释放占用的 10 个 mbuf</strong>。</p><p>释放过程的逻辑如下：</p><ol><li>获取线程所在逻辑核上的 mempool cache 结构</li><li>判断传入的释放元素个数是否大于 RTE_MEMPOOL_CACHE_MAX_SIZE(512)，大于则直接放到 mempool 中，小于则放到 mempool cache 中</li><li>判断 mempool cache 中存放的元素数目是否超过 flushthresh 值，超过后则将【超过 cache_size】 的部分重新放入 mempool 中并调整 cache_len 的值为 cache_size</li></ol><p>当同时释放 10 个 mbuf 时，首先 mbuf 被放到逻辑核 1 上的 mempool cache 中，此时此 cache 中共有 10+1 个元素，然后判断到 11 大于 flushthresh(9)，则将多出来的 5 个元素放回 mempool 中。</p><p>执行此操作后 mempool cache 的状态如下：
<img loading="lazy" src="https://img-blog.csdnimg.cn/65b9606a27c6459c8b479b70c742d016.jpeg#pic_center" alt="在这里插入图片描述" class="img_ev3q">
mempool 的状态如下：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/229518eb437f429398e0e91925e19ad8.jpeg#pic_center" alt="在这里插入图片描述" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-mempool-cache-使用的一些问题">dpdk mempool cache 使用的一些问题<a class="hash-link" href="#dpdk-mempool-cache-使用的一些问题" title="标题的直接链接">​</a></h2><ol><li>dpdk mempool 针对每个 lcore 配置 cache，dpdk lcore 机制可以参考 <a href="https://blog.csdn.net/Longyu_wlz/article/details/116398708" target="_blank" rel="noopener noreferrer">dpdk-16.04 eal lcore 多线程机制分析</a>，对于单独使用 pthread_create 创建的线程，由于 lcore_id 为 -1，不能获取到 mempool cache，在这些线程中申请、释放元素到 mempool 中不会经过 cache</li><li>每一个 lcore 上 mempool cache 的使用没有任何互斥保护，多个线程使用同一个 lcore 的情况下对 mempool cache 的访问会存在不一致性，这种场景下需要关闭 mempool cache 功能</li><li>申请元素的线程所在的 lcore 要与释放元素的线程所在的 lcore <strong>一致</strong>，如果不一致就可能存在<strong>泄露</strong>部分元素的情况
假设程序仅在 lcore 1 上申请 mbuf，而释放 mbuf 却在 lcore 2 上，这样就会泄露最多 mempool cache 初始化配置的容量大小个 mbuf</li><li>在 cache 中分配、释放的概率越大性能越好</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>这篇文章的背景是在实际的工作场景中遇到了一个 dpdk mbuf 泄露的问题，在这个问题中，将 mempool cache 的 size 改为 0 后问题得到解决，但是这只是个表面现象，不由得让人追问<strong>难道 dpdk mempool cache 功能真的有严重的缺陷吗？</strong></p><p>于是带着这一疑问深入分析了下 mempool cache 的处理过程，结果发现确实存在一些限制因素，但是却没有找到所谓的严重缺陷，看来问题并没有这么简单，表面的现象说明不了太多问题。</p><p>写的过程中想到这个过程跟 cache 的一些原理有些相似，就类比着描述下，这个过程是在逐渐从具象走向抽象，当能完全理解抽象的模型后，就容易在不同的场景中迁移了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考链接">参考链接<a class="hash-link" href="#参考链接" title="标题的直接链接">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/375537583" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/375537583</a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 不同版本下载地址]]></title>
        <id>/dpdk/dpdk 不同版本下载地址</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 不同版本下载地址"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[版本回退需要，整理了下 dpdk 多个版本的下载链接。]]></summary>
        <content type="html"><![CDATA[<p>版本回退需要，整理了下 dpdk 多个版本的下载链接。</p><p><a href="https://static.dpdk.org/rel/dpdk-1.7.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-1.7.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-1.8.0.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-1.8.0.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.04.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.04.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.07.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.07.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.07.2.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.07.2.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.07.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.07.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.10.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.10.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.11.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.11.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.2.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.2.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.3.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.3.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.4.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.4.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.5.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.5.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.6.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.6.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.7.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.7.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.8.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.8.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.9.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.9.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-16.11.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-16.11.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.02.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.02.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.02.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.02.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.05.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.05.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.05.2.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.05.2.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.05.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.05.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.08.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.08.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.08.2.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.08.2.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.08.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.08.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.11.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.11.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.11.10.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.11.10.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.11.2.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.11.2.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.11.3.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.11.3.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.11.4.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.11.4.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.11.5.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.11.5.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.11.6.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.11.6.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.11.7.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.11.7.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.11.8.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.11.8.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.11.9.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.11.9.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-17.11.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-17.11.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.02.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.02.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.02.2.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.02.2.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.02.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.02.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.05.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.05.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.05.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.05.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.08.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.08.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.08.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.08.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.11.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.11.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.11.2.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.11.2.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.11.3.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.11.3.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.11.4.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.11.4.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.11.5.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.11.5.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.11.6.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.11.6.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.11.7.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.11.7.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.11.8.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.11.8.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.11.9.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.11.9.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-18.11.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-18.11.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-19.02.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-19.02.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-19.05.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-19.05.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-19.08.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-19.08.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-19.08.2.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-19.08.2.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-19.08.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-19.08.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-19.11.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-19.11.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-19.11.2.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-19.11.2.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-19.11.3.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-19.11.3.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-19.11.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-19.11.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-2.0.0.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-2.0.0.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-2.1.0.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-2.1.0.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-2.2.0.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-2.2.0.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-20.02.1.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-20.02.1.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-20.02.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-20.02.tar.xz</a>
<a href="https://static.dpdk.org/rel/dpdk-20.05.tar.xz" target="_blank" rel="noopener noreferrer">https://static.dpdk.org/rel/dpdk-20.05.tar.xz</a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk 多进程模型]]></title>
        <id>/dpdk/dpdk 多进程模型共享队列收发包 virtio 网卡段错误问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 多进程模型共享队列收发包 virtio 网卡段错误问题"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[dpdk 原生支持多进程模型，主进程为 primary 进程，只有一个，从进程为 secondary 进程，可以有多个。]]></summary>
        <content type="html"><![CDATA[<p>dpdk 原生支持<strong>多进程模型</strong>，主进程为 <strong>primary</strong> 进程，<strong>只有一个</strong>，从进程为 <strong>secondary</strong> 进程，可以有多个。</p><p>dpdk 业务口的<strong>共享数据结构</strong>，如收发包队列，驱动内部的数据结构等由 <strong>primary</strong> 进程创建，<strong>secondary</strong> 进程通过与 <strong>primary</strong> 进程<strong>共享内存</strong>来 attach 到相应的数据结构上。</p><p>实际场景中，primary 进程完成<strong>接口配置、并提供接口控制如接口 up、down、接口状态检测等功能</strong>，<strong>secondary 进程可以用于 dump primary 进程创建的一些共享数据结构</strong>，<strong>也可以用于收发包以及基于报文的一些处理逻辑</strong>。</p><p>本文中描述的问题为 secondary 进程共享 primary 进程的收发队列收发包时出现<strong>段错误</strong>的问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p><strong>业务口类型</strong>：virtio 虚拟网卡
<strong>业务模型</strong>：多进程模型，secondary 进程用于收发包，收发包时出现段错误。
<strong>dpdk 版本</strong>：dpdk-16.11</p><p><strong>段错误信息：</strong></p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Thread </span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"lcore-slave-0"</span><span class="token plain"> received signal SIGSEGV</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Segmentation fault</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Switching to LWP </span><span class="token number" style="color:#36acaa">23400</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0x00007ffff69b5a4d</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">virtio_recv_mergeable_pkts</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from libdpdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">so</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> bt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff69b5a4d</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">virtio_recv_mergeable_pkts</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from libdpdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">1</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000042c291</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">dpdk_recv</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">2</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00000000004158e6</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">process_launch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff67ea297</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">eal_thread_loop</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from libdpdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">4</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff5c96da4</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">start_thread</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">local</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libpthread</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><span class="token punctuation" style="color:#393A34">.</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">5</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff59c820d</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">clone</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">local</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><span class="token punctuation" style="color:#393A34">.</span><span class="token number" style="color:#36acaa">6</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>复现概率</strong>：必现！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="编译-debug-版本确定段错误的位置">编译 debug 版本确定段错误的位置<a class="hash-link" href="#编译-debug-版本确定段错误的位置" title="标题的直接链接">​</a></h2><p>确定在如下函数中触发段错误：</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">virtqueue_notify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">virtqueue</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">vq</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * Ensure updated avail-&gt;idx is visible to host.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * For virtio on IA, the notificaiton is through io port operation</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * which is a serialization instruction itself.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    vq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">vtpci_ops</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">notify_queue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> vq</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>secondary 进程中接口的 hw 数据结构从 primary 进程共享，primary 进程中的 <strong>vtpci_ops-&gt;notify_queue</strong> <strong>函数指针</strong>在 <strong>secondary</strong> <strong>进程中指向一个非法位置，导致段错误</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="真正的问题">真正的问题<a class="hash-link" href="#真正的问题" title="标题的直接链接">​</a></h2><p>primary 进程与 secondary 进程共享的队列信息中，<strong>共享的内容为数据结构</strong>，<strong>不共享代码段。</strong></p><p>primary 进程中函数指针指向的函数在 secondary 进程中指向其它非法位置，导致段错误。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="修复方案">修复方案<a class="hash-link" href="#修复方案" title="标题的直接链接">​</a></h2><p>在接口初始化的时候，根据 hw-&gt;modern 的值<strong>配置某函数指针</strong>，将 virtio 收发包函数中调用到的 <strong>vtpci_ops-&gt;notify_queue</strong> 函数指针改为<strong>调用程序本地的函数指针</strong>，此指针指向的代码段在每个程序内部是合法的，它的地址不通过队列共享获取。</p><p>简单示例如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> virtqueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">h</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">revision </span><span class="token number" style="color:#36acaa">51811</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> virtqueue</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">h</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">working copy</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">330</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">7</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">330</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">13</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> For virtio on IA</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> the notificaiton is through io port operation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> which is a serialization instruction itself</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">-</span><span class="token plain">       vq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">vtpci_ops</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">notify_queue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> vq</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token function" style="color:#d73a49">vtpci_notify_queue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> vq</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题引申">问题引申<a class="hash-link" href="#问题引申" title="标题的直接链接">​</a></h2><p>dpdk 多进程收发队列共享存在限制，不能共享代码段，只能共享数据区域，对于<strong>共享函数指针的情况，会在其他进程中触发段错误</strong>。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 官方 bugzilla 导出信息]]></title>
        <id>/dpdk/dpdk 官方 bugzilla 导出信息</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 官方 bugzilla 导出信息"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <content type="html"><![CDATA[<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Bug ID  Product Component   Assignee    Status  Resolution  Summary Changed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">42  DPDK    cryptodev   akhil.gupta@puresoftware.com    IN_PROGRESS  ---    Crypto_mrvl error with multiple instances   2018/7/15 6:42</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">100 DPDK    testpmd alejandro.lucero@netronome.com  RESOLVED    FIXED   testpmd deadlock    2018/11/8 12:43</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">122 lab UNH infra   ci@dpdk.org RESOLVED    INVALID Performance results are not correct on Intel I40E environments  2020/4/21 15:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">193 DPDK    ethdev  mk@semihalf.com RESOLVED    FIXED   symmetric_mp example application crashes for Amazon ENA in multiple process mode    2019/1/26 0:54</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">278 DPDK    ethdev  3chas3@gmail.com    CONFIRMED    ---    bond_ethdev_rx_burst multithread access bond's different queue will crash   2019/5/15 22:59</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">301 DPDK    ethdev  rasland@nvidia.com  RESOLVED    INVALID DPDK driver is crashing for Mellanox-5 NIC card 2019/7/12 10:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">431 lab job scripts ci@dpdk.org RESOLVED    FIXED   Missing performance results in Patchwork checks, and possible false positives   2020/6/2 13:53</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">442 SPP main    yasufum.o@gmail.com CONFIRMED    ---    disable ASLR is been highly recommended 2020/8/3 6:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">443 SPP main    yasufum.o@gmail.com CONFIRMED    ---    spp primary takes up the complete hugepages 2020/8/5 7:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">82  DPDK    examples    honnappa.nagarahalli@arm.com    RESOLVED    FIXED   Failure to compile l3fwd example on ARM 2020/4/26 2:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">104 DPDK    core    reshma.pattan@intel.com RESOLVED    WORKSFORME  "dpdk-procinfo" received signal SIGSEGV, Segmentation fault.    2018/11/2 9:54</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">259 DPDK    testpmd konstantin.ananyev@intel.com    RESOLVED    DUPLICATE   unable to run sample t3 as bpf-load for testpmd 2019/7/25 10:54</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">315 DPDK    vhost/virtio    dev@dpdk.org    RESOLVED    WORKSFORME  Virtio crypto does not work . Tried with vhost crypto as backend and dpdk test application (cryptodev_virtio_autotest ) 2019/11/21 3:09</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">352 DPDK    examples    Muthurajan.Jayakumar@intel.com  UNCONFIRMED  ---    Bifurcated Driver X710 for ipv6 flow rule addition not working  2019/10/11 19:49</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">425 lab job scripts ci@dpdk.org RESOLVED    WONTFIX Eth Tests - Link Status Checks  2020/6/30 22:27</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">426 lab job scripts ci@dpdk.org RESOLVED    FIXED   Eth Tests - MTU Checks  2020/6/30 20:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">439 DPDK    ethdev  marko.kovacevic@intel.com   UNCONFIRMED  ---    memif pmd is allocating from Node 0, even after passing Node 1 in eal args  2020/4/10 10:48</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">453 SPP ctl yasufum.o@gmail.com CONFIRMED    ---    SPP-CTL does not run with python2.7 2020/4/24 4:17</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">500 lab Intel Lab   zhaoyan.chen@intel.com  RESOLVED    FIXED   Compilation failing in Intel CI since 07/04 2020/7/16 15:26</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">505 DPDK    core    jerinjacobk@gmail.com   CONFIRMED    ---    [dpdk-20.08] meson build 32-bits failed on ubuntu20.04  2020/7/10 11:55</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">515 DTS tests   dts@dpdk.org    UNCONFIRMED  ---    DTS must _not_ modify DPDK sources  2020/8/3 9:37</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">375 lab job scripts ci@dpdk.org RESOLVED    WONTFIX run basic DTS functional tests  2020/4/21 16:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">427 lab job scripts ci@dpdk.org RESOLVED    WONTFIX Eth Tests - Promiscuous Support 2020/6/30 20:01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">428 lab job scripts ci@dpdk.org RESOLVED    FIXED   Eth Tests - Hardware Checksum Checks    2020/6/30 20:02</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">451 lab job scripts blo@iol.unh.edu CONFIRMED    ---    Split dpdk-ci and dpdklab-ci scripts    2020/6/30 20:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">459 lab UNH infra   ci@dpdk.org RESOLVED    FIXED   Performance Turning and Results Stability Issues on NXP test environment    2020/6/16 14:51</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">468 DPDK    ethdev  kevuzaj@gmail.com   RESOLVED    FIXED   bnxt: build fail with gcc10 default fno-common  2020/5/6 15:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">476 lab job scripts ci@dpdk.org RESOLVED    FIXED   Run mingw-w64 compilation on windows    2020/6/25 15:12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">489 lab UNH infra   blo@iol.unh.edu IN_PROGRESS  ---    Broadcom 100Gbe NIC Upgrade 2020/7/14 22:51</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">149 lab dashboard   ci@dpdk.org CONFIRMED    ---    Add GA Performance results to the database  2018/12/10 20:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">169 lab job scripts dpdklab@iol.unh.edu RESOLVED    WONTFIX Create GA performance Jenkins Job   2020/4/7 15:23</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2   DPDK    eventdev    dev@dpdk.org    RESOLVED    INVALID Test bugs for checking the bug flow, no need any fix    2018/7/18 19:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5   DPDK    other   dev@dpdk.org    RESOLVED    WONTFIX This is a Bug, Please Disabled Create new Account   2018/7/15 6:50</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">6   DPDK    other   dev@dpdk.org    CONFIRMED    ---    dpdk-pdump leads to ovs-vswitchd crash  2020/1/9 8:19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">14  DPDK    other   batmanustc@gmail.com    CONFIRMED    ---    Kernel Crash bug of ixgbevf kernel module in "Intel(R) 10GbE PCI Express Virtual Function Driver Version: 4.0.3 Release: 1" and the latest version  2018/9/16 0:13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">15  DPDK    core    dev@dpdk.org    CONFIRMED    ---    Kernel crash after "Detected Tx Unit Hang" report   2018/2/6 14:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">56  DPDK    other   dev@dpdk.org    RESOLVED    FIXED   crash when freeing memory with no mlx5 device attached  2018/6/28 21:01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">88  DPDK    eventdev    harry.van.haaren@intel.com  CONFIRMED    ---    DPDK service core getting crashed with eventdev scheduler   2018/9/21 11:53</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">89  DPDK    ethdev  qi.z.zhang@intel.com    RESOLVED    WONTFIX XL710 DPDK i40evf : Ping is not working when RSS enabled for IP 2018/10/23 3:04</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">97  DPDK    core    dev@dpdk.org    RESOLVED    FIXED   rte_memcpy() moves data incorrectly on Ubuntu 18.04 on Intel Skylake    2019/7/11 9:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">106 DPDK    core    dev@dpdk.org    RESOLVED    FIXED   running dpdk-procinfo or any secondary leading to system memory exhaustion  2018/11/13 18:03</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">179 DPDK    other   anatoly.burakov@intel.com   RESOLVED    FIXED   mp_socket is not well handled when secondary process is exited  2019/1/10 13:50</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">188 DPDK    testpmd yskoh@mellanox.com  RESOLVED    FIXED   significant multi-core performance degradation with SR-IOV/macswap in some cases    2019/1/14 20:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">194 DPDK    vhost/virtio    maxime.coquelin@redhat.com  CONFIRMED    ---    vhost pmd has become unusable from secondary processes. 2019/7/9 13:55</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">199 DPDK    examples    qi.z.zhang@intel.com    RESOLVED    FIXED   Azure DPDK 18.11 Multiple Processes Example Support 2019/7/11 10:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">240 lab job scripts alialnu@mellanox.com    RESOLVED    FIXED   nic_single_core_perf test reports 0's for absolute values when it should fail   2020/7/9 15:42</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">333 DPDK    core    thomas@monjalon.net UNCONFIRMED  ---    PCI devices not found when DPDK is linked as dynamic libraries  2019/7/22 9:35</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">363 DPDK    other   maxime.coquelin@redhat.com  RESOLVED    FIXED   CVE-2019-14818  2019/12/2 13:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">371 DPDK    testpmd asafp@nvidia.com    RESOLVED    INVALID mlx5: failed to probe the port at testpmd (DPDK 19.11-rc3)  2020/6/23 14:18</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">379 DPDK    other   dev@dpdk.org    RESOLVED    INVALID Build fail using dpdk-setup.sh in RedHat version 3.10.0-862.rt56.804.el7.x86_64 2020/1/3 11:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">389 DPDK    core    scott_wasson@affirmednetworks.com   RESOLVED    FIXED   Crash in librte_kni driver due to noncontiguous pages   2020/4/26 2:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">405 DPDK    ethdev  matan@mellanox.com  CONFIRMED    ---    mlx5: the guest driver doesn't enforce the MTU set by rte_eth_dev_set_mtu() 2020/6/23 14:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">461 DPDK    ethdev  qi.z.zhang@intel.com    UNCONFIRMED  ---    i40evf link status is always down with the Intel XL710 driver   2020/5/15 15:50</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">471 DPDK    other   dev@dpdk.org    RESOLVED    DUPLICATE   failing to build test from app/test 2020/5/13 10:43</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">478 DPDK    ethdev  jeanprincemello@gmail.com   RESOLVED    FIXED   Unable to build igb_uio kernel module on Ubuntu 18.04   2020/5/15 15:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">486 DPDK    ethdev  dev@dpdk.org    RESOLVED    INVALID i40e driver has very bad performance when VXLAN TSO is enabled  2020/7/30 5:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">495 lab job scripts blo@iol.unh.edu RESOLVED    FIXED   make builds are getting stuck   2020/7/13 15:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">518 DPDK    ethdev  jia.guo@intel.com   UNCONFIRMED  ---    Disabling a VF with XL710 still sees the traffic and the link is still high 2020/8/3 7:51</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4   DPDK    testpmd salehals@mellanox.com   CONFIRMED    ---    Segfault while running txonly mode with 4 16B SGEs packets  2018/8/2 8:04</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">7   DPDK    ethdev  motih@mellanox.com  RESOLVED    FIXED   mlx4 PMD does not receive broadcast packets in promiscuous mode.    2020/5/12 15:55</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">9   DPDK    other   dev@dpdk.org    RESOLVED    INVALID qays    2018/6/16 2:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">27  DPDK    core    yskoh@mellanox.com  RESOLVED    INVALID Can't build mlx5 from 18.02 on CentOS Linux release 7.4.1708 with kernel 3.10.0-693.11.1.el7.x86_64 2019/10/25 9:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">49  DPDK    mk  dev@dpdk.org    RESOLVED    FIXED   Compile error kni_net.c unknown field ‘ndo_change_mtu’  2018/5/31 6:53</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">53  DPDK    core    bruce.richardson@intel.com  RESOLVED    WONTFIX rte abort issue on FreeBSD  2018/9/28 14:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">54  DPDK    ethdev  dev@dpdk.org    VERIFIED    FIXED   i40e port link status no updated for interrupt mode 2018/5/31 16:11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">55  DPDK    ethdev  qi.z.zhang@intel.com    RESOLVED    FIXED   I40E PMD driver in vector mode implicitly requires number of RX descriptors in a ring to be power of two    2018/11/13 4:24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">59  DPDK    core    dev@dpdk.org    RESOLVED    INVALID Cannot start secondary processes anyhow on Redhat EL7   2018/7/10 0:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">60  DPDK    eventdev    harry.van.haaren@intel.com  RESOLVED    FIXED   rte_event_port_unlink() causes subsequent events to end up in wrong port    2018/9/26 16:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">63  DPDK    other   mk@semihalf.com RESOLVED    FIXED   AWS ENA driver does not work with zero rx queues.   2018/7/20 9:57</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">65  DPDK    ethdev  beilei.xing@intel.com   RESOLVED    WORKSFORME  Tx VLAN offload not working on DPDK 17.11 LTS i40e PMD  2018/10/23 3:03</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">77  DPDK    examples    dev@dpdk.org    RESOLVED    FIXED   [Interrupt app]: failed to start interrupt app. 2018/7/26 17:21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">85  DPDK    core    geoffrey.lv@gmail.com   RESOLVED    FIXED   pci_scan_one() issue    2019/1/24 14:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">86  DPDK    ethdev  konstantin.ananyev@intel.com    RESOLVED    FIXED   Requested device cannot be used 2018/9/14 14:30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">90  DPDK    meson   ferruh.yigit@intel.com  IN_PROGRESS  ---    DPDK Installation fails on Centos   2018/9/20 16:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">93  DPDK    cryptodev   pablo.de.lara.guarch@intel.com  CONFIRMED    ---    crypto vdev create will reset the dev_started flag  when one dpdk process has been up the crypto vdev   2019/1/5 16:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">101 DPDK    testpmd alejandro.lucero@netronome.com  RESOLVED    FIXED   18.11-RC1/ Testpmd start fail   2018/11/8 12:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">110 DPDK    other   xueqin.lin@intel.com    RESOLVED    FIXED   system hang when device deleted for hotplug function(igb uio)   2018/11/28 2:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">115 DPDK    other   a.latifi.al@gmail.com   CONFIRMED    ---    pktgen panic when using big sized pcap file 2018/12/2 17:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">116 DPDK    ethdev  konstantin.ananyev@intel.com    RESOLVED    FIXED   Single-port, multi-core and multi-queue mode (open RSS), when configuring IP, may cause dpdk coredump   2019/1/16 10:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">191 DPDK    other   maria.lingemark@ericsson.com    RESOLVED    FIXED   Sometimes timers (rte_timer) do not expire  2019/1/21 12:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">196 DPDK    ethdev  konstantin.ananyev@intel.com    RESOLVED    WONTFIX IXGBE Driver Tx Packet/Bytes counters Sent returns Zero even though link-partner received valid packets 2019/6/3 7:30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">204 DPDK    core    beilei.xing@intel.com   CONFIRMED    ---    Crash on Vmware esxi host when dpdk guest reboots.  2019/3/16 14:51</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">210 lab job scripts ferruh.yigit@intel.com  CONFIRMED    ---    Patches with dependency fails to apply  2020/7/1 13:36</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">216 DPDK    examples    gain1974@gmail.com  RESOLVED    FIXED   rte_eth_rx_burst   nb_pkts   issue  2019/3/16 14:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">236 DPDK    core    anatoly.burakov@intel.com   RESOLVED    INVALID primary-secondary model is failing  2019/4/2 12:42</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">241 DPDK    vhost/virtio    dev@dpdk.org    CONFIRMED    ---    QEMU (vIOMMU+virtio) crashes when DPDK exits    2020/3/16 7:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">248 DPDK    ethdev  p.oltarzewski@gmail.com CONFIRMED    ---    Bonding PMD: Invalid array dimension in TX burst for 802.3ad mode with fast queue leads to SEGFAULT 2019/4/15 12:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">256 DPDK    ethdev  3chas3@gmail.com    RESOLVED    FIXED   Transmit or receive packets use the bond MAC is failed when switch backup port to active    2020/7/23 22:30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">265 DPDK    ethdev  qi.z.zhang@intel.com    RESOLVED    FIXED   i40e flow flush &amp; add new flow will occur segfault  2020/4/26 2:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">280 DPDK    doc beilei.xing@intel.com   CONFIRMED    ---    X710 PF Reset Issue with DPDK VF Driver 2019/7/15 21:02</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">284 DPDK    other   ferruh.yigit@intel.com  CONFIRMED    ---    Secondary not able to Rx/TX after primary dies in symmetric multiprocess    2019/8/14 16:36</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">285 DPDK    other   jananeex.m.parthasarathy@intel.com  RESOLVED    FIXED   rte_table unit test crashes in ipv6 2019/7/15 20:58</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">296 DPDK    ethdev  dev@dpdk.org    CONFIRMED    ---    max_rx_pkt_len issues with i40e dpdk SRIOV driver net_i40e_vf.  2019/9/12 7:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">297 DPDK    ethdev  lavaraj@gmail.com   CONFIRMED    ---    max_rx_pkt_len issues with i40e dpdk SRIOV driver net_i40e_vf.  2019/7/15 20:51</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">304 DPDK    ethdev  ullas-d.bhat@hpe.com    RESOLVED    INVALID [bnx2x_init] Initialization failed, stack notified driver is NOT running!   2019/8/6 19:55</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">312 DPDK    ethdev  beilei.xing@intel.com   RESOLVED    FIXED   i40evf could not receive mulicast packets   2020/4/26 2:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">319 DPDK    ethdev  beilei.xing@intel.com   UNCONFIRMED  ---    dpdk-i40e could not receive vlan packet whose ip_len was bigger than 1496   2019/11/7 7:42</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">355 DPDK    meson   dev@dpdk.org    RESOLVED    FIXED   Meson build failure 2019/12/2 18:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">366 DPDK    ethdev  ajit.khaparde@broadcom.com  CONFIRMED    ---    i40e PMD returns 0 for secondary invoking rx_burst on queue 0, when Primary dies    2020/1/27 5:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">369 DPDK    examples    pbhagavatula@marvell.com    UNCONFIRMED  ---    l2fwd-event fails for service core mask 2019/11/26 20:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">372 DPDK    ethdev  konstantin.ananyev@intel.com    UNCONFIRMED  ---    ixgbevf: cannot probe or start port if PF link is unstable  2019/11/27 20:34</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">378 DPDK    core    dev@dpdk.org    UNCONFIRMED  ---    takes more than 500ms to allocate memory from numa node1    2020/1/2 4:43</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">393 DPDK    core    anatoly.burakov@intel.com   UNCONFIRMED  ---    rte_zmalloc_socket does not zero memory 2020/2/20 12:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">397 DPDK    ethdev  dev@dpdk.org    RESOLVED    WORKSFORME  support-multi-driver=1 does not work in i40e PMD    2020/3/23 12:48</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">418 DPDK    ethdev  dev@dpdk.org    UNCONFIRMED  ---    failsafe/tap PMD drops first UDP packet 2020/3/11 2:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">433 SPP main    yasufum.o@gmail.com CONFIRMED    ---    suggested URL for DPDK-Suricata is limited or not working   2020/8/5 6:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">441 SPP main    yasufum.o@gmail.com CONFIRMED    ---    link is broken  2020/4/8 11:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">447 DPDK    ethdev  konstantin.ananyev@intel.com    IN_PROGRESS  ---    ixgbe: ixgbe_dev_link_update_share() leaks memory and memory mappings due to not cleaning up pthreads   2020/4/14 12:33</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">449 DPDK    ethdev  dev@dpdk.org    CONFIRMED    ---    Fortville X710 FDIR with flow APIs broken   2020/5/15 10:24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">454 SPP ctl yasufum.o@gmail.com UNCONFIRMED  ---    Documentation does callout the dependency for python modules in SPP-CTL 2020/4/23 10:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">455 SPP ctl yasufum.o@gmail.com UNCONFIRMED  ---    spp does not run with python3   2020/4/23 10:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">457 SPP main    yasufum.o@gmail.com UNCONFIRMED  ---    rte_mempool_create is based on lcore socketid and not the port socketid 2020/4/23 7:04</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">463 DPDK    testpmd suanmingm@mellanox.com  RESOLVED    FIXED   In Mellanox MLX5 driver, NULL pointer access in mlx5_ipool_malloc() 2020/5/13 4:50</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">472 DPDK    other   david.marchand@redhat.com   UNCONFIRMED  ---    failure in unit/self test   2020/5/13 19:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">473 DPDK    other   thomas@monjalon.net UNCONFIRMED  ---    variance in test case fail for static and shared build binaries 2020/5/19 13:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">474 DPDK    other   thomas@monjalon.net UNCONFIRMED  ---    auto-test report crash while manual test skips  2020/5/18 17:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">484 DPDK    other   hrvoje.habjanic@zg.ht.hr    UNCONFIRMED  ---    rte_sched_subport_free function does not free subport memory    2020/5/26 20:12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">485 DPDK    other   hrvoje.habjanic@zg.ht.hr    UNCONFIRMED  ---    pipe_profile_check function have wrong argument size    2020/6/15 19:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">488 DPDK    other   matan@mellanox.com  CONFIRMED    ---    mlx4: cannot reattach devices   2020/6/23 14:03</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">499 DPDK    meson   ferruh.yigit@intel.com  RESOLVED    FIXED   failed to start example after use meson/ninja build 32-bit app on x86 system    2020/8/19 3:11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">501 DPDK    ethdev  jia.guo@intel.com   RESOLVED    FIXED   igb: segfault in rte_eth_tx_done_cleanup() when using advanced descriptors  2020/8/4 18:43</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">502 lab UNH infra   blo@iol.unh.edu RESOLVED    FIXED   False negative for Windows compilation  2020/7/6 20:17</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">503 DPDK    core    dev@dpdk.org    RESOLVED    FIXED   can not detected device when use meson build dpdk   2020/7/13 7:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">517 DPDK    testpmd jia.guo@intel.com   UNCONFIRMED  ---    Traffic Class Assignment    2020/8/3 10:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1   DPDK    other   dev@dpdk.org    CONFIRMED    ---    Green goal: power efficiency with all hardwares 2018/2/7 15:38</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3   DPDK    doc qian.q.xu@intel.com RESOLVED    INVALID Test bug    2017/9/14 11:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">8   DPDK    core    ferruh.yigit@intel.com  IN_PROGRESS  ---    Debug/error output should go to stderr  2018/12/20 20:12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10  DPDK    testpmd nounoussma@hotmail.com  CONFIRMED    ---    [Testpmd] NUMA, speed issue 2018/8/29 20:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">12  DPDK    ethdev  dev@dpdk.org    RESOLVED    INVALID Request for submit in Kernel Upstream   2020/5/10 18:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">13  DPDK    ethdev  beilei.xing@intel.com   IN_PROGRESS  ---    Cannot initialize Intel XL710 40G interface 2018/12/4 14:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">16  DPDK    doc dev@dpdk.org    RESOLVED    INVALID Hacked by Turkish Hacker SpawN #siberordu.biz   2018/2/25 19:43</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">17  DPDK    ethdev  beilei.xing@intel.com   RESOLVED    INVALID vhost example VLAN offloading not working on igb tx 2018/11/30 14:35</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">20  DPDK    core    anatoly.burakov@intel.com   RESOLVED    FIXED   Undefined behavior caused by NUMA function in eal_memory    2018/10/25 14:57</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">21  DPDK    ethdev  konstantin.ananyev@intel.com    RESOLVED    WONTFIX Ixgbe driver changes FCTRL without first disabling RXCTRL.RXEN  2018/10/18 9:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">22  DPDK    ethdev  konstantin.ananyev@intel.com    RESOLVED    WONTFIX Ixgbe driver sets RDRXCTL with the wrong RSCACKC and FCOE_WRFIX values  2018/10/18 9:39</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">25  DPDK    ethdev  konstantin.ananyev@intel.com    CONFIRMED    ---    Ixgbe driver sets TDH register after TXDCTL.ENABLE is set   2018/11/16 8:34</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">26  DPDK    ethdev  konstantin.ananyev@intel.com    CONFIRMED    ---    Ixgbe driver does not ensure FWSM firmware mode is valid before using it    2019/10/3 5:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">28  DPDK    eventdev    pbhagavatula@caviumnetworks.com RESOLVED    FIXED   event/octeontx: snprintf() overflow 2018/4/25 16:53</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">29  DPDK    ethdev  keith.wiles@intel.com   CONFIRMED    ---    pktgen hangs when it tries to send packets through libvirt driver, works for all other drivers  2019/6/26 15:43</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">31  DPDK    core    bruce.richardson@intel.com  RESOLVED    FIXED   Does not compile with musl libc: lib/librte_eal/linuxapp/eal/eal_memory.c   2020/4/26 2:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">32  DPDK    mk  dev@dpdk.org    CONFIRMED    ---    Does not cross-compile: buildtools/check-experimental-syms.sh assumes `objdump` 2020/3/11 10:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">33  DPDK    core    bruce.richardson@intel.com  RESOLVED    FIXED   Does not compile with musl libc: lib/librte_eal/linuxapp/eal/eal_hugepage_info.c    2020/4/26 2:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">34  DPDK    core    bruce.richardson@intel.com  RESOLVED    FIXED   Does not compile with musl libc: lib/librte_eal/common/eal_common_fbarray.c 2020/4/26 2:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">35  DPDK    ethdev  ferruh.yigit@intel.com  CONFIRMED    ---    Does not compile with musl libc: drivers/bus/pci/linux/pci_uio.c    2019/6/26 10:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">37  DPDK    ethdev  shreyansh.jain@nxp.com  CONFIRMED    ---    DPAA / FSLMC do not compile on the musl libc    2018/5/4 10:04</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">38  DPDK    ethdev  rahul.lakkireddy@chelsio.com    CONFIRMED    ---    Does not compile with musl libc: drivers/net/cxgbe/base/common.h    2018/7/15 6:33</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">39  DPDK    ethdev  hyonkim@cisco.com   RESOLVED    FIXED   dpdk/drivers/net/enic/base/vnic_devcmd.h does not compile on musl libc because of type `u_int32_t`  2018/10/2 10:34</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">40  DPDK    ethdev  dev@dpdk.org    RESOLVED    FIXED   drivers/net/nfp/nfpcore/nfp-common/nfp_platform.h: does not compile with musl because it uses an internal glibc header  2019/10/3 5:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">41  DPDK    testpmd dev@dpdk.org    RESOLVED    FIXED   testpmd failed with net_failsafe error  2018/5/10 19:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">43  DPDK    ethdev  dev@dpdk.org    CONFIRMED    ---    "rte_eth_tx_queue_setup" will be failed if argument "tx_conf" not specified 2020/3/3 13:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">44  DPDK    examples    pablo.de.lara.guarch@intel.com  RESOLVED    FIXED   examples/l2fwd-crypto : Wrong data length in case of AEAD ciphers   2018/7/17 10:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">45  DPDK    other   thomas@monjalon.net RESOLVED    WONTFIX Test compilation fails at 2nd iteration after running resource_autotest 2020/6/18 22:37</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">47  DPDK    other   reshma.pattan@intel.com RESOLVED    WONTFIX Mempool performance autotest: Fail [Timeout]    2018/9/14 12:26</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">48  DPDK    vhost/virtio    maxime.coquelin@redhat.com  CONFIRMED    ---    Unexpected performance regression since CVE-2018-1059 fix with vector path  2018/9/12 10:48</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">50  DPDK    core    anatoly.burakov@intel.com   RESOLVED    FIXED   Secondary process launch is unreliable  2018/11/20 20:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">51  DPDK    other   thomas@monjalon.net CONFIRMED    ---    make coverage aborts with core dump 2018/7/19 21:33</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">57  DPDK    ethdev  pablo.de.lara.guarch@intel.com  RESOLVED    FIXED   ixgbe crash on detach when no VF is created 2018/7/10 0:22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">58  DPDK    core    ferruh.yigit@intel.com  RESOLVED    FIXED   cppcheck static analyzer warnings   2020/4/26 2:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">61  DPDK    core    erik.g.carrillo@intel.com   RESOLVED    FIXED   build fails when shared libs enabled and optimization turned off    2018/8/29 20:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">62  DPDK    other   shreyansh.jain@nxp.com  RESOLVED    WONTFIX Rawdev autotest fails   2018/7/17 13:49</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">64  DPDK    testpmd pablo.de.lara.guarch@intel.com  IN_PROGRESS  ---    Bound_promisc_opt:After the confounding mode is turned off, the port can receive data.  2018/10/1 11:37</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">67  DPDK    examples    bruce.richardson@intel.com  RESOLVED    INVALID multi_process/l2fwd_fork failed to compile  2018/11/29 15:39</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">68  DPDK    vhost/virtio    dev@dpdk.org    RESOLVED    INVALID virt    2018/7/19 21:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">69  DPDK    ethdev  konstantin.ananyev@intel.com    RESOLVED    FIXED   Intel x550 SFP+ fails to update link state  2020/4/26 2:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">70  DPDK    ethdev  meijuanx.zhao@intel.com RESOLVED    FIXED   freebsd build dpdk18.08-rc1 issue   2018/8/3 10:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">71  DPDK    ethdev  pablo.de.lara.guarch@intel.com  RESOLVED    FIXED   suse build dpdk 18.08-rc1 issue 2020/4/26 2:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">72  DPDK    core    dev@dpdk.org    RESOLVED    INVALID Unable to install dpdk on arm64 2018/7/18 10:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">73  DPDK    other   john.mcnamara@intel.com CONFIRMED    ---    Secondary processes can not set up ports: document limitation and return error in appropriate functions 2018/10/8 15:13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">74  DPDK    ethdev  beilei.xing@intel.com   CONFIRMED    ---    PMD: i40e_dcb_init_configure(): default dcb config fails. err = -53, aq_err = 3 2018/10/22 9:37</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">75  DPDK    core    ferruh.yigit@intel.com  RESOLVED    WONTFIX 16.11 compile fail on RHEL 6.9  2019/6/26 10:04</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">76  DPDK    core    anatoly.burakov@intel.com   RESOLVED    FIXED   2MB hugepages with IOMMU and passthrough not working    2018/11/16 15:19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">79  DPDK    other   konstantin.ananyev@intel.com    RESOLVED    FIXED   ACL doesn't match a rule with a first `TYPE_MASK` field with low mask when there's a large number of rules  2018/9/26 16:57</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">81  DPDK    vhost/virtio    maxime.coquelin@redhat.com  RESOLVED    FIXED   Use of rte_memseg_contig_walk in vhost_kernel.c causes deadlock 2020/4/26 2:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">83  DPDK    ethdev  dev@dpdk.org    CONFIRMED    ---    For RSS flow actions, e1000_ethdev.h uses IGB_MAX_RX_QUEUE_NUM instead of IGB_MAX_RX_QUEUE_NUM_82576    2018/9/30 3:08</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">92  DPDK    ethdev  qi.z.zhang@intel.com    CONFIRMED    ---    i40e RX capabilities include scatter/gather on VF, but not on PF    2018/9/30 3:04</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">94  DPDK    other   dev@dpdk.org    RESOLVED    INVALID librte_acl  library: First field in the rule definition can not be other types  2018/9/30 8:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">95  DPDK    core    anatoly.burakov@intel.com   RESOLVED    FIXED   eal/memory: testpmd failed to start with --socket-mem &gt;  16384 with 2MB huge pages and with memory hotplug  2019/4/15 17:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">96  DPDK    ethdev  viacheslavo@mellanox.com    RESOLVED    FIXED   mlx5: TX error for multi-seg packet where first segment has 14~18 bytes 2020/5/12 15:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">98  DPDK    cryptodev   declan.doherty@intel.com    RESOLVED    FIXED   wrongly assignment of digest_len    2019/1/9 13:03</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">99  DPDK    ethdev  dev@dpdk.org    CONFIRMED    ---    axgbe driver does not support 1G Copper 1000BASE-T SFPs (Unsupported AN_CL37)   2018/10/31 6:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">102 DPDK    core    alejandro.lucero@netronome.com  RESOLVED    FIXED   IOVA mode causes deadlock   2018/11/8 12:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">103 DPDK    testpmd alejandro.lucero@netronome.com  RESOLVED    FIXED   Testpmd with ixgbe device assignment doesn't work   2018/11/8 12:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">105 DPDK    cryptodev   dev@dpdk.org    RESOLVED    FIXED   Cannot create crypto_openssl after vdev_uninit  2019/9/12 18:42</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">107 DPDK    ethdev  rasland@nvidia.com  RESOLVED    INVALID Cannot set rte_flow QUEUE action for VF representor 2019/10/3 5:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">108 DPDK    ethdev  anatoly.burakov@intel.com   RESOLVED    FIXED   There should be a NULL pointer check about the internal_config.hugefile_prefix  2019/2/22 17:15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">111 DPDK    ethdev  gaetan.rivet@6wind.com  UNCONFIRMED  ---    There maybe some risks to printf  the addr of the map page  2018/12/5 8:17</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">112 DPDK    other   anandashish92@gmail.com CONFIRMED    ---    dpdk-18.05 not allowing to create bond interface with name "lan_bond"   2019/1/17 22:21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">113 DPDK    other   dev@dpdk.org    CONFIRMED    ---    pktgen -s option send pcap traffic once 2018/12/1 7:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">117 DPDK    core    anatoly.burakov@intel.com   RESOLVED    INVALID in case of malloc_elem_alloc should we increment alloc_count (heap-&gt;alloc_count++)? 2018/12/5 17:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">118 DPDK    doc dev@dpdk.org    CONFIRMED    ---    conflicting information for 'Running DPDK Applications Without Root Privileges' 2018/12/10 11:35</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">119 DPDK    ethdev  dev@dpdk.org    RESOLVED    INVALID I210 Gigabit is returning with -22 when vfio-pci is used for bind   2018/12/6 17:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">120 DPDK    core    dev@dpdk.org    RESOLVED    WONTFIX secondary fails failure without option '--legacy-mem'   2018/12/6 15:43</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">121 DPDK    ethdev  konstantin.ananyev@intel.com    CONFIRMED    ---    In ixgbe_tx_free_bufs function the variable free on stack is used before initialization 2019/1/9 16:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">139 lab dashboard   ci@dpdk.org CONFIRMED    ---    When measurements throws a 404, the dashboard throws a 500  2018/12/10 19:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">142 lab UNH infra   ci@dpdk.org RESOLVED    WONTFIX Creating a user requires restarting sssd on leaf node for them to log in    2019/11/19 21:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">162 lab dashboard   ci@dpdk.org CONFIRMED    ---    Private files can't be downloaded via CLI easily    2018/12/10 20:19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">164 DPDK    ethdev  dev@dpdk.org    CONFIRMED    ---    configure rx queue for JUMBO frame returns warning as offload is 0x0, but eth_pcap_rx_jumbo is present  2018/12/11 17:21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">165 DPDK    other   arnon@qwilt.com RESOLVED    FIXED   checkpatches.sh doesn't detect rte_exit() / rte_panic() instances   2020/4/26 2:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">166 lab dashboard   dpdklab@iol.unh.edu RESOLVED    FIXED   patch may fail to apply when it targets different sub-tree other than main tree 2019/11/19 17:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">174 DPDK    core    anatoly.burakov@intel.com   RESOLVED    FIXED   rte_vfio_dma_map issue in secondary process 2019/2/22 17:19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">175 DPDK    other   dev@dpdk.org    RESOLVED    INVALID DPDK on Azure using `intel-go/nff-go` fails using `hv_netvsc` driver    2020/5/12 15:54</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">176 DPDK    core    dev@dpdk.org    CONFIRMED    ---    secondary process cannot execute  iommu 2018/12/28 6:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">177 DPDK    ethdev  dev@dpdk.org    RESOLVED    INVALID binding i40e with uio_pci_generic fails for DPDK 19.02.0-rc1    2019/1/10 3:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">178 DPDK    examples    dev@dpdk.org    RESOLVED    WONTFIX l2fwd application does not work with option '-q'    2019/5/6 6:59</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">182 DPDK    doc dev@dpdk.org    RESOLVED    FIXED   make doc-guides-pdf fails with error 'make[3]: latexmk: Command not found'  2019/5/6 6:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">183 DPDK    other   dev@dpdk.org    CONFIRMED    ---    Problem using cloned rte_mbuf buffers with KNI interface    2019/9/10 21:24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">184 lab job scripts blo@iol.unh.edu CONFIRMED    ---    Update report emails for GA performance runs    2020/6/30 20:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">185 DPDK    core    dev@dpdk.org    CONFIRMED    ---    PVP zero-loss performance degradation without --legacy-mem  2019/1/10 12:27</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">186 DPDK    core    maxime.coquelin@redhat.com  CONFIRMED    ---    Huge testpmd startup time without --legacy-mem option   2019/3/11 17:33</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">187 DPDK    core    dev@dpdk.org    CONFIRMED    ---    Merge linux and bsd eal_thread.c which are same 2020/6/10 8:19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">189 DPDK    eventdev    jerinjacobk@gmail.com   CONFIRMED    ---    RTE Timer Adapter Use After Free    2019/7/31 6:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">190 lab dashboard   ci@dpdk.org RESOLVED    WONTFIX Investigate some apply errors with unclear root cause   2019/1/16 20:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">192 DPDK    mk  thomas@monjalon.net CONFIRMED    ---    construct function miss for  build with static library  2019/1/18 3:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">195 lab dashboard   ci@dpdk.org RESOLVED    FIXED   "Applied on" commit id and "baseline" commit id issues  2019/2/5 19:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">197 lab dashboard   ci@dpdk.org RESOLVED    FIXED   can we display deeper history   2019/2/11 9:48</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">198 lab job scripts ci@dpdk.org RESOLVED    FIXED   sent patchwork reports on build failures too    2019/1/30 15:04</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">200 dpdk-burst-replay   doc jonathan.ribas@fraudbuster.mobi RESOLVED    FIXED   mismatch in documentation and makefile  2019/2/1 9:35</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">201 dpdk-burst-replay   app vipin.varghese@intel.com    RESOLVED    INVALID main.c uses 'struct pcap_ctx'   2019/4/1 6:59</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">202 dpdk-burst-replay   app jonathan.ribas@fraudbuster.mobi RESOLVED    FIXED   in function check_needed_memory for dpdk-&gt;mbuf_sz does it get aligned?  2019/5/3 17:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">203 dpdk-burst-replay   app jonathan.ribas@fraudbuster.mobi RESOLVED    FIXED   if user passes numa id, why is pcicards under the same not populated    2019/5/3 17:21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">205 DPDK    other   dev@dpdk.org    RESOLVED    FIXED   make test fails with DPDK 19.02 (KeyError: 'Command')   2019/3/9 12:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">206 lab UNH infra   dpdklab@iol.unh.edu RESOLVED    FIXED   Set up systems for OVS ovs_perf testing at UNH  2019/11/19 20:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">207 lab dashboard   ci@dpdk.org RESOLVED    WORKSFORME  JS homepage TypeError with Chrome   2019/11/19 17:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">208 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Some “Not Applicable” items looks wrong 2019/2/15 18:34</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">209 lab dashboard   ci@dpdk.org CONFIRMED    ---    Main tree is not up to date when patch sent, which cause merge error    2019/2/12 18:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">211 lab dashboard   ci@dpdk.org RESOLVED    INVALID Invalid link for "applied on" sha1  2019/2/13 17:13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">212 lab job scripts ferruh.yigit@intel.com  RESOLVED    FIXED   add a new testcase: autotest, which runs a defined set of unit tests    2020/7/1 20:06</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">213 DPDK    core    ferruh.yigit@intel.com  RESOLVED    WONTFIX Fix the problem of KNI device (Net Stack kthread) keeps dropping packets (stats.tx_dropped++) and TX thread logs "KNI: Out of memory"   2019/4/25 19:34</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">214 DPDK    core    anatoly.burakov@intel.com   RESOLVED    INVALID There should be a NULL pointer check about the  malloc_elem_alloc   2019/2/25 12:57</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">215 DPDK    core    dev@dpdk.org    RESOLVED    INVALID IPC socket of 2 primary processes may conflict  2019/2/26 17:19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">217 DPDK    ethdev  debugnetiq1@yahoo.ca    RESOLVED    INVALID DPDK-19.02 will not build when MLX4/MLX5 is enabled. In comparison DPDK 18-11 builds fine   2019/7/11 10:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">218 DPDK    ethdev  debugnetiq1@yahoo.ca    RESOLVED    FIXED   DPDK 18.02 (stable) won't compile when MLX4/MLX5 support is enabled 2019/7/11 10:21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">219 DPDK    ethdev  debugnetiq1@yahoo.ca    RESOLVED    INVALID DPDK 18.11 builds with MLX4/MLX5 support but testpmd won't recognize the device 2019/7/11 9:48</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">221 DPDK    examples    ferruh.yigit@intel.com  RESOLVED    WONTFIX How to classifier ipv6 packets with  flow classification library    2019/4/8 15:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">222 DPDK    other   reshma.pattan@intel.com RESOLVED    FIXED   When setting CONFIG_RTE_LIBRTE_PDUMP=n, build fails with "undefined reference to `test_pdump'"  2020/2/10 11:38</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">223 lab job scripts ci@dpdk.org RESOLVED    FIXED   Using wrong/old commit id of the tree to apply the patch    2019/11/19 18:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">224 lab job scripts ci@dpdk.org RESOLVED    WONTFIX Possibly wrong regression report    2020/4/21 16:01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">225 DPDK    testpmd dev@dpdk.org    RESOLVED    FIXED   ethdev API for firmware version request is not tested   2020/4/26 2:18</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">227 DPDK    ethdev  dev@dpdk.org    CONFIRMED    ---    Flow control mode on mac Intel Corporation I350 Gigabit Network Connection (rev 01) issues  2019/3/17 12:24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">229 lab job scripts ci@dpdk.org RESOLVED    DUPLICATE   lab scripts should be upstreamed to dpdk-ci repository  2020/4/21 15:57</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">230 lab job scripts ci@dpdk.org CONFIRMED    ---    publish a tutorial about how to deploy a DPDK lab   2019/3/26 15:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">231 lab job scripts ferruh.yigit@intel.com  RESOLVED    WONTFIX when a sub-tree used as base, two different commit id displayed in logs 2020/7/1 15:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">232 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Should we make it more visible when at least one of the platforms failed?   2019/6/26 16:21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">234 DPDK    core    anatoly.burakov@intel.com   RESOLVED    INVALID dma remapping failed with errno 22 when use "--no-huge" 2019/4/24 12:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">235 DPDK    doc vipin.varghese@intel.com    RESOLVED    FIXED   References section for Algorithms for Routing Lookups and Packet Classification is not working  2019/10/3 5:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">237 DPDK    examples    dev@dpdk.org    RESOLVED    FIXED   Running test-build.sh Fails on ppc_64 fails due to hard-coded requirement for IXGBE_PMD in examples/vm_power_manager    2020/4/26 2:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">239 DPDK    examples    dev@dpdk.org    CONFIRMED    ---    ipsec-secgw fails to initialize when librte_ipsec is enabled    2019/4/10 19:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">242 DPDK    core    olivier.matz@6wind.com  RESOLVED    INVALID repeat to calling 'rte_pktmbuf_free' function, make the mempool exist the same 'rte_mbuf' obj;  2019/4/9 12:56</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">243 lab UNH infra   ci@dpdk.org RESOLVED    FIXED   DPDK Compilation Coverage   2020/4/21 16:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">244 lab UNH infra   ci@dpdk.org RESOLVED    FIXED   Running Unit Testing    2020/1/14 18:59</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">249 DPDK    core    ferruh.yigit@intel.com  RESOLVED    FIXED   kni cause a kernel crash on avx512 supported platform with gcc 8.3.1    2019/6/26 10:08</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">250 DPDK    ethdev  martin.weiser@allegro-packets.com   RESOLVED    FIXED   i40e: rte_eth_link_get_nowait() on X722 returns wrong link_speed value 20000 instead of 10000   2019/5/7 8:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">251 dpdk-burst-replay   app jonathan.ribas@fraudbuster.mobi RESOLVED    FIXED   Infinite mode not working   2019/4/11 9:17</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">252 DPDK    ethdev  keith.wiles@intel.com   RESOLVED    FIXED   Possible access to invalid FDs in rte_eth_tap   2020/4/26 2:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">253 DPDK    other   dev@dpdk.org    RESOLVED    FIXED   Unable to run DPDK test with "make test" command    2020/4/26 2:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">255 DPDK    ethdev  dev@dpdk.org    RESOLVED    INVALID Mbuf leak when rte_port_ethdev_writer_tx_bulk is called with more than 32 packets   2019/5/22 21:49</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">257 DPDK    core    anatoly.burakov@intel.com   CONFIRMED    ---    ipc: rte_mp_request_sync return 0 on error. 2019/5/1 6:06</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">260 DPDK    other   pablo.de.lara.guarch@intel.com  RESOLVED    DUPLICATE   DPDK 18.11 lockfree 哈希表的 bug    2019/5/5 3:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">261 DPDK    other   dharmik.thakkar@arm.com RESOLVED    FIXED   bug on lock-free hash API rte_hash_free_key_with_position   2019/5/16 18:35</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">262 DPDK    vhost/virtio    maxime.coquelin@redhat.com  RESOLVED    FIXED   Error: Invalid memory for eth_virtio_dev_init() 2019/5/2 9:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">263 DPDK    ethdev  konstantin.ananyev@intel.com    CONFIRMED    ---    ixgbe does not support 10GBASE-T copper SFP+    2019/5/1 20:23</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">264 DPDK    ethdev  yskoh@mellanox.com  RESOLVED    FIXED   ring_pmd fails to properly release used port on 17.11 branch    2020/6/18 22:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">266 DPDK    other   security@dpdk.org   RESOLVED    FIXED   CVE-2019-14818  2020/5/18 14:03</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">267 DPDK    other   security@dpdk.org   RESOLVED    FIXED   librte_vhost: Interger overflow in vhost_user_set_log_base()    2020/5/18 16:34</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">268 DPDK    other   security@dpdk.org   RESOLVED    FIXED   librte_vhost: Integer truncation in vhost_user_check_and_alloc_queue_pair() 2020/5/18 16:35</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">269 DPDK    other   security@dpdk.org   RESOLVED    FIXED   librte_vhost: Missing inputs validation in Vhost-crypto 2020/5/18 16:36</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">270 DPDK    other   security@dpdk.org   RESOLVED    FIXED   librte_vhost: Malicious guest could cause segfault by sending invalid Virtio descriptor 2020/5/18 16:37</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">271 DPDK    other   security@dpdk.org   RESOLVED    FIXED   librte_vhost: VHOST_USER_GET_INFLIGHT_FD message flooding to result in a DOS    2020/5/18 16:38</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">276 DPDK    core    mattias.ronnblom@ericsson.com   RESOLVED    FIXED   rte_rand() bit 31 and 63 are always zero    2019/6/30 7:17</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">277 DPDK    eventdev    nikhilprao@gmail.com    RESOLVED    FIXED   eventdev sw rx adapter enqueue buffer may store packets indefinitely    2020/4/26 2:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">279 DPDK    examples    ferruh.yigit@intel.com  RESOLVED    FIXED   Unaligned memory access when reading ipv6 header    2020/4/26 2:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">281 DPDK    testpmd dev@dpdk.org    RESOLVED    INVALID BPF: Linking error in librte_bpf    2019/5/20 17:03</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">282 DPDK    core    dev@dpdk.org    RESOLVED    FIXED   Fix missing headers in FreeBSD CURRENT build    2019/7/12 18:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">283 DPDK    other   michel@digirati.com.br  RESOLVED    FIXED   BPF: array ins_chk is missing an entry  2019/7/15 21:01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">286 lab job scripts ci@dpdk.org RESOLVED    FIXED   Run clang compilation on windows    2020/4/21 16:22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">287 DPDK    ethdev  stephen@networkplumber.org  IN_PROGRESS  ---    netvsc PMD/dpdk/azure: Driver lockup with multi-queue configuration 2020/5/12 15:59</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">289 DPDK    ethdev  dev@dpdk.org    RESOLVED    FIXED   mlx5: 100G interface capability not recognized  2019/7/11 10:23</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">290 DPDK    vhost/virtio    maxime.coquelin@redhat.com  RESOLVED    FIXED   RX packets in Virtio are corrupted in case of split to several mbufs    2019/6/6 11:30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">291 DPDK    ethdev  qi.z.zhang@intel.com    CONFIRMED    ---    FM10K dpdk driver - memory leak with KNI interface - interface up/down  2019/7/30 12:35</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">293 lab dashboard   ci@dpdk.org CONFIRMED    ---    Can we add a filter for status, to be able to see only some patches with specific status    2019/6/26 9:55</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">294 DPDK    ethdev  dev@dpdk.org    RESOLVED    DUPLICATE   max_rx_pkt_len issues with i40e dpdk SRIOV driver (net_i40e_vf).    2019/9/12 7:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">295 DPDK    ethdev  dev@dpdk.org    RESOLVED    DUPLICATE   max_rx_pkt_len issues with i40e dpdk SRIOV driver net_i40e_vf.  2019/9/12 7:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">298 DPDK    other   konstantin.ananyev@intel.com    RESOLVED    FIXED   BPF: eval_call() is messing bounds of return types different of RTE_BPF_ARG_RAW 2019/7/15 20:50</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">299 DPDK    ethdev  xiao.zhang@intel.com    RESOLVED    FIXED   Intel i219 reset hang   2019/7/24 4:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">300 DPDK    ethdev  xiao.zhang@intel.com    RESOLVED    FIXED   Intel i219 buffer overrun errata fix    2019/7/19 8:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">302 lab dashboard   ci@dpdk.org CONFIRMED    ---    Google's Webcache version of the website does not work  2019/7/1 22:26</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">303 DPDK    meson   ci@dpdk.org RESOLVED    FIXED   meson-0.51.0 isn't building docs    2020/4/26 2:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">307 DPDK    other   ido@cgstowernetworks.com    RESOLVED    FIXED   ACL (librte_acl) field of type RANGE and size U32 is not working properly   2020/4/26 2:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">308 DPDK    ethdev  donald_lee@trendmicro.com   RESOLVED    FIXED   Tap driver may leave some pending frame there but not retrieve  2019/11/12 11:09</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">316 DPDK    other   david.hunt@intel.com    RESOLVED    FIXED   livelock causes librte_distributor unit test to hang    2019/7/29 23:27</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">320 DPDK    ethdev  matan@mellanox.com  RESOLVED    FIXED   mlx4: info get fails in secondary process   2020/4/26 2:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">321 DPDK    examples    konstantin.ananyev@intel.com    RESOLVED    FIXED   BPF: Errors compiling example BPF programs  2020/4/26 2:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">322 DPDK    core    david.marchand@redhat.com   RESOLVED    FIXED   eal: ctrl thread calculation assumes 1:1 mapping between cpu and lcore id   2019/7/31 10:22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">323 DPDK    core    dev@dpdk.org    RESOLVED    DUPLICATE   eal: ctrl thread calculation assumes 1:1 mapping between cpu and lcore id   2019/7/29 15:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">324 DPDK    examples    stephen@networkplumber.org  RESOLVED    FIXED   eal/cmdline_autotest failed 2020/3/17 0:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">334 DPDK    ethdev  viacheslavo@mellanox.com    RESOLVED    INVALID ConnectX-4/mlx5 crashes under high load in rxq_cq_decompress_v()    2020/6/23 14:21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">335 DPDK    ethdev  hemant.agrawal@nxp.com  RESOLVED    FIXED   Compilation fails when HEADROOM is 0    2020/4/26 2:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">336 DPDK    other   ullas-d.bhat@hpe.com    CONFIRMED    ---    Unable to exit DPDK application when running as separate thread.    2019/8/14 16:34</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">337 DPDK    vhost/virtio    maxime.coquelin@redhat.com  CONFIRMED    ---    Live migration with dpdk(in host)+vhost-user+dpdk(in guest) fails: Failed to load virtio-net:virtio 2019/9/17 9:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">338 DPDK    core    abhijeet080808@gmail.com    UNCONFIRMED  ---    IP Reassembly with more 4 packets Segfault  2019/8/15 16:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">339 DPDK    ethdev  abhishek.sachan@altran.com  RESOLVED    FIXED   net/af_packet: af_packet driver is leaving stale socket after device is removed 2020/4/26 2:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">340 DPDK    examples    dev@dpdk.org    RESOLVED    FIXED   Can't build examples in Ubuntu 18 after commit 4131ad5db from 03/07/2019    2019/10/4 17:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">343 DPDK    ethdev  3chas3@gmail.com    UNCONFIRMED  ---    Couldn't receive LACP PDU when enable dedicated queue   2019/9/4 20:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">344 DPDK    meson   dev@dpdk.org    CONFIRMED    ---    Broken CPU feature discovery for armv8  2019/9/5 21:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">345 DPDK    other   yipeng1.wang@intel.com  RESOLVED    FIXED   rte_hash returns invalid key if the number of entries is not a power of 2   2019/11/27 15:02</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">347 DPDK    ethdev  rasland@nvidia.com  CONFIRMED    ---    TAPPMD frees buffers it fails to send   2020/6/23 14:24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">348 DPDK    ethdev  beilei.xing@intel.com   UNCONFIRMED  ---    i40e: packets greater than 1024B are dropped due to a integer overflow  2019/10/14 10:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">349 DPDK    ethdev  beilei.xing@intel.com   UNCONFIRMED  ---    i40e/i40evf: Allow bad packets to reach application (SBP)   2019/9/25 10:54</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">350 DPDK    ethdev  konstantin.ananyev@intel.com    UNCONFIRMED  ---    ixgbe: incorrect speed capabilities advertised for X553 devices 2019/9/20 13:53</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">351 DPDK    meson   dev@dpdk.org    RESOLVED    FIXED   When RTE_LIBRTE_PCAP_PMD is enabled RTE_PORT_PCAP is not enabled for rte_port_source_sink.c 2019/10/3 5:53</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">353 DPDK    core    hemant.agrawal@nxp.com  RESOLVED    FIXED   Missing null checks 2020/4/25 23:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">354 DPDK    ethdev  dev@dpdk.org    UNCONFIRMED  ---    net/tap can not get rx packet drop stats when packets be dropped in kernel (net/driver/tun.c)   2020/5/13 14:08</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">357 DPDK    ethdev  dev@dpdk.org    RESOLVED    FIXED   ppc64: i40e not compiling on RHEL7/CentOS7  2020/6/16 12:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">358 DPDK    ethdev  michael.pfeiffer@tu-ilmenau.de  RESOLVED    INVALID KNI packets dropped on Bluefield SDK    2020/6/23 14:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">359 DPDK    meson   bruce.richardson@intel.com  RESOLVED    WORKSFORME  Makefile calls 'pkg-config --path'  2019/11/6 15:56</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">360 DPDK    examples    marko.kovacevic@intel.com   RESOLVED    FIXED   FIPS application fails for AES-GCM test vectors with non-zero AAD   2020/3/2 14:42</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">361 DPDK    ethdev  ferruh.yigit@intel.com  CONFIRMED    ---    device reset handling with igb_uio  2020/8/5 9:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">362 DPDK    core    xiao.zhang@intel.com    UNCONFIRMED  ---    rte_pktmbuf_attach_extbuf does not update pkt_len   2019/12/26 13:57</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">367 DPDK    doc ajit.khaparde@broadcom.com  RESOLVED    FIXED   extra character in document l2_forward_event.rst    2020/4/26 2:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">368 DPDK    doc dev@dpdk.org    RESOLVED    DUPLICATE   missing character in document l2_forward_event.rst  2019/11/22 5:22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">370 DPDK    core    anatoly.burakov@intel.com   CONFIRMED    ---    Cannot hotplug VFIO devices if VFIO driver was not loaded at init   2019/11/27 11:19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">373 DPDK    ethdev  xiao.zhang@intel.com    UNCONFIRMED  ---    i40e: TSO breaks for packets larger than 16k    2020/5/28 13:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">374 DPDK    meson   alialnu@mellanox.com    IN_PROGRESS  ---    Meson build failure due to libibverbs-dev upgrade (version=45mlnx1-1.45101) 2020/6/23 14:24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">376 DPDK    testpmd jerryhao@os.amperecomputing.com RESOLVED    FIXED   mlx5 / DPDK 19.11 : single core throughput dropped at testpmd (VS DPDK 19.08)   2020/6/23 14:17</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">377 DPDK    cryptodev   dev@dpdk.org    RESOLVED    FIXED   CRYPTODEV: set_sym_session_private_data() line 489: Set private data for driver 0 not allowed   2020/4/26 2:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">380 DPDK    core    dev@dpdk.org    CONFIRMED    ---    memory subsystem leaks file descriptors 2020/1/7 11:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">381 DPDK    core    dev@dpdk.org    UNCONFIRMED  ---    hugepages not detached on cleanup   2020/1/7 11:27</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">382 DPDK    ethdev  dev@dpdk.org    UNCONFIRMED  ---    rte_eth: rx/tx callbacks invoked without lock protection    2020/1/10 4:05</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">383 DPDK    vhost/virtio    eupm90@gmail.com    RESOLVED    FIXED   dpdk virtio_user lack of notifications make vhost_net+napi stops tx buffers 2020/2/6 9:02</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">384 DPDK    ethdev  dev@dpdk.org    RESOLVED    FIXED   netvsc PMD crashes in secondary process in dev_info_get 2020/3/17 0:58</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">386 DPDK    core    siddsr@gmail.com    UNCONFIRMED  ---    Big spike in DPDK process VSZ since release 18.05.1 2020/2/5 20:53</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">387 DPDK    ethdev  jerin.jacob@caviumnetworks.com  RESOLVED    FIXED   Disabling octeontx in meson leads to meson configure failure    2020/4/26 2:02</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">388 DPDK    ethdev  qi.z.zhang@intel.com    RESOLVED    FIXED   ixgbe: link state race condition can occur when starting a fiber port   2020/5/12 4:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">390 DPDK    ethdev  matan@mellanox.com  RESOLVED    WONTFIX netvsc: There are always too many packets in tx-drop queue in testpmd tx-side   2020/3/16 22:43</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">391 DPDK    other   pierrick.louin@orange.com   UNCONFIRMED  ---    The dpdk-devbind.py tool crashes if some NIC property contains a unicode character - Patch proposal 2020/2/5 22:15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">392 DPDK    examples    dev@dpdk.org    RESOLVED    FIXED   l3fwd fails to run with eventdev    2020/2/7 11:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">394 DPDK    cryptodev   thomas@monjalon.net RESOLVED    FIXED   Build of librte_cryptodev with GCC 10.0.1 fails 2020/5/7 0:06</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">395 DPDK    other   dev@dpdk.org    RESOLVED    FIXED   Build of hinic with GCC 10.0.1 fails on aarch64 2020/3/20 13:42</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">396 DPDK    other   dev@dpdk.org    RESOLVED    FIXED   Build of octeontx2 with GCC 10.0.1 fails on armv7   2020/5/19 11:37</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">398 DPDK    ethdev  srn@nexatech.fr RESOLVED    FIXED   MLX5 device won't start with no RX queue    2020/2/21 20:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">399 DPDK    ethdev  konstantin.ananyev@intel.com    UNCONFIRMED  ---    ixgbe X540 PMD RSS is zero for NFSv3 NULL reply 2020/4/14 21:35</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">400 DPDK    testpmd dev@dpdk.org    VERIFIED    FIXED   start testpmd with vmxnet3 can't receive and forward packets    2020/5/12 9:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">401 DPDK    other   olivier.matz@6wind.com  UNCONFIRMED  ---    unit_tests: mempool_autotest failed with shared mode library    2020/2/21 20:26</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">402 DPDK    ethdev  wei.zhao1@intel.com RESOLVED    FIXED   i40e: cannot add rte_flow with ether_type = ARP 2020/4/29 10:12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">403 DPDK    ethdev  wei.zhao1@intel.com RESOLVED    FIXED   i40e: cannot add 2 rte_flows with one matching TCP sport and the other dport    2020/4/29 10:13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">404 DPDK    ethdev  wei.zhao1@intel.com RESOLVED    FIXED   i40e: "i40e_res_pool_free(): Failed to find entry" error when rte_flow are flushed  2020/4/29 10:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">406 DPDK    examples    dev@dpdk.org    UNCONFIRMED  ---    ethtool doesn't compile if you installed with ninja rather than make    2020/2/24 9:50</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">409 DPDK    testpmd viacheslavo@mellanox.com    CONFIRMED    ---    testpmd sometimes does not correctly show RX-missed on Mellanox NICs    2020/6/23 14:12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">410 DPDK    other   ferruh.yigit@intel.com  UNCONFIRMED  ---    KNI deadlocks when used with Mellanox device    2020/2/26 19:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">411 lab UNH infra   ci@dpdk.org RESOLVED    FIXED   Intel performance testing currently down    2020/4/7 15:22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">412 lab UNH infra   ci@dpdk.org RESOLVED    FIXED   NXP performance testing currently down  2020/4/21 15:12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">413 DPDK    core    dev@dpdk.org    RESOLVED    INVALID rte_ring: capacity was set incorrectly  2020/8/14 12:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">414 DPDK    ethdev  alialnu@mellanox.com    UNCONFIRMED  ---    mlx5: test/debug_autotest failed when enable CONFIG_RTE_LIBRTE_MLX5_PMD=y   2020/6/18 22:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">415 lab job scripts ci@dpdk.org RESOLVED    FIXED   [dpdk-ci] encoding issue when compiling ovs 2020/3/4 9:05</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">416 DPDK    ethdev  neruda@netcope.com  RESOLVED    FIXED   nfb build failed - missing rpms?    2020/3/18 9:15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">417 DPDK    cryptodev   pablo.de.lara.guarch@intel.com  RESOLVED    FIXED   CentOS7/RHEL7 nasm version too old for intel-ipsec-mb   2020/5/27 12:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">419 DPDK    other   thomas@monjalon.net UNCONFIRMED  ---    usertools/dpdk-setup.sh crashes on non-alphanumeric input   2020/3/20 19:12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">421 DPDK    core    thomas@monjalon.net RESOLVED    FIXED   gcc 10.0.1 stringops-overflow warnings  2020/5/7 0:06</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">422 DPDK    doc john.mcnamara@intel.com RESOLVED    FIXED   Typing error in patches.rst in doc/guides/contributing at line 177  2020/5/27 20:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">424 DPDK    other   drc@linux.vnet.ibm.com  RESOLVED    FIXED   malloc_autotest fails with message "Unexpected - ptr4 != ptr3"  2020/4/26 2:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">430 DPDK    ethdev  beilei.xing@intel.com   RESOLVED    INVALID i40e has wrong byte order in rte_flow_item_eth (ethdev) 2020/3/31 6:15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">432 DPDK    other   john.mcnamara@intel.com CONFIRMED    ---    Entering Non-numeric value for Setup hugepage mappings,  dpdk-setup.sh still goes to create_mnt_huge function and prints misleading info    2020/4/9 7:21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">434 DPDK    testpmd dev@dpdk.org    UNCONFIRMED  ---    bps calculation does not fit in 64 bit  2020/4/22 19:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">436 DPDK    ethdev  jgrajcia@cisco.com  CONFIRMED    ---    rte_eth_promiscuous_enable fails for memif on l2fwd 2020/4/28 4:18</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">437 DPDK    ethdev  dev@dpdk.org    CONFIRMED    ---    memif pmd, does not cleanup on primary application restart  2020/5/13 15:43</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">438 DPDK    ethdev  dev@dpdk.org    UNCONFIRMED  ---    memif sock does not honor file-prefix   2020/7/28 11:22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">440 DPDK    ethdev  mohsinshaikh@niometrics.com RESOLVED    FIXED   net/mlx5: Read of "out_of_buffer" using fopen/fscanf/fclose causing TLB shootdowns due to mmap/munmap   2020/4/25 4:05</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">444 DPDK    core    stephen@networkplumber.org  IN_PROGRESS  ---    DPDK fails to receive packets in Azure when using more than 3 transmit queues   2020/4/16 18:56</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">445 SPP cli oda@valinux.co.jp   RESOLVED    FIXED   pipe can not be added by CLI if the spp_primary does not have the forwarder 2020/6/9 7:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">446 DPDK    core    dev@dpdk.org    RESOLVED    FIXED   rte_lcore_index(-1) returns invalid data for non DPDK thread.   2020/7/9 9:01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">450 DPDK    testpmd honnappa.nagarahalli@arm.com    RESOLVED    FIXED   wrong report for cycles/pkt or pps  2020/7/9 9:01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">452 DPDK    core    yipeng1.wang@intel.com  RESOLVED    INVALID cuckoo hash gcc10 warning   2020/4/23 21:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">456 SPP ctl yasufum.o@gmail.com CONFIRMED    ---    spp with python2 has error  2020/4/24 4:18</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">458 DPDK    meson   dev@dpdk.org    RESOLVED    FIXED   Windows server 2019 UNH CI fails    2020/4/22 10:26</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">460 lab UNH infra   ci@dpdk.org RESOLVED    FIXED   Broadcom performance testing being setup    2020/5/28 23:15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">462 DPDK    other   dev@dpdk.org    VERIFIED    FIXED   command kvargs_autotest excute failed on freebsd with gcc and clang 2020/5/12 8:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">464 DPDK    other   l.wojciechow@partner.samsung.com    RESOLVED    FIXED   In test app running mbuf_autotest after running service_autotest causes terminal to get stuck   2020/7/9 9:01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">465 DPDK    testpmd dev@dpdk.org    RESOLVED    INVALID app/test compile failed with gcc and clang  2020/5/13 10:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">466 lab UNH infra   ci@dpdk.org RESOLVED    FIXED   Mellanox build errors occur randomly    2020/6/11 17:27</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">467 lab UNH infra   ci@dpdk.org RESOLVED    FIXED   Intel baseline pulling incorrect numbers    2020/4/30 16:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">469 DPDK    cryptodev   hemant.agrawal@nxp.com  RESOLVED    FIXED   crypto/dpaa: gcc 10 linker fails for fno-common 2020/5/19 11:37</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">470 DPDK    ethdev  dev@dpdk.org    UNCONFIRMED  ---    vmxnet3 pmd cannot received icmp6 ns packet 2020/5/11 9:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">475 DPDK    other   dev@dpdk.org    UNCONFIRMED  ---    failure in `EAL flags autotest` 2020/5/14 4:34</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">477 DPDK    doc dev@dpdk.org    RESOLVED    FIXED   Typing error in index.rst of doc/guides/eventdevs at line 8 2020/5/23 7:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">480 lab dashboard   ci@dpdk.org CONFIRMED    ---    No data points in Grafana dashboard 2020/5/19 15:59</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">481 DPDK    other   ferruh.yigit@intel.com  RESOLVED    DUPLICATE   [dpdk-20.05]kni/ifconfig:Failed to change vEth0_0 MTU on powerville and springville 2020/5/21 10:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">482 DPDK    other   ferruh.yigit@intel.com  RESOLVED    FIXED   [dpdk-20.05]kni/ifconfig:Failed to change vEth0_0 MTU on powerville and springville 2020/5/25 7:15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">483 DPDK    ethdev  iobeyond@126.com    UNCONFIRMED  ---    Bond 8023ad lacp handshake sometimes fail   2020/5/31 4:37</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">487 DPDK    core    dev@dpdk.org    UNCONFIRMED  ---    Worse performance with DPDK driver when MTU is set to 2022 or less  2020/6/10 22:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">490 lab UNH infra   blo@iol.unh.edu CONFIRMED    ---    Make scripts capture trex and dts version on test   2020/6/30 22:26</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">491 DPDK    other   dev@dpdk.org    UNCONFIRMED  ---    Timers synchronously resetting or stopping other timers as part of their callback can cause hangs   2020/7/29 10:11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">493 lab Intel Lab   zhaoyan.chen@intel.com  RESOLVED    FIXED   Failures reported by Intel CI for series 10551  2020/7/16 15:27</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">494 DPDK    core    dev@dpdk.org    UNCONFIRMED  ---    rte_pktmbuf_pool_create returns EINVAL instead of ENOMEM in rte_errno when not enough huge pages memory 2020/7/2 7:50</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">497 lab job scripts lylavoie@iol.unh.edu    RESOLVED    FIXED   Reporting format per patchset   2020/8/18 22:43</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">498 DPDK    meson   beilei.xing@intel.com   RESOLVED    FIXED   can not start testpmd after use meson/ninja build 32-bit app on x86 system  2020/7/6 17:09</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">504 lab UNH infra   alialnu@mellanox.com    CONFIRMED    ---    Upgrade DTS version on Mellanox system  2020/7/9 15:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">506 DPDK    ethdev  frederic.coiffier@6cure.com RESOLVED    FIXED   i40e: Fix for rte_eth_dev_get_module_eeprom()   2020/7/16 5:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">507 DPDK    vhost/virtio    dev@dpdk.org    IN_PROGRESS  ---    virtio perf decrease and interrupt abnormal 2020/7/22 17:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">508 lab Travis CI   aconole@bytheb.org  IN_PROGRESS  ---    Missing Reports from Travis CI  2020/7/16 15:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">509 DPDK    mk  ajit.khaparde@broadcom.com  RESOLVED    FIXED   [dpdk-20.08] make failed with cflags -O1    2020/8/3 14:09</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">510 DPDK    vhost/virtio    dev@dpdk.org    UNCONFIRMED  ---    Virtio driver breaks all apps which use ETH_MQ_RX_RSS   2020/7/17 22:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">512 DPDK    cryptodev   roy.fan.zhang@intel.com UNCONFIRMED  ---    [dpdk-20.08]Crypto:fips_cryptodev test failed for TDES on aesni_mb, openssl and qat PMD 2020/8/7 5:06</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">513 DPDK    testpmd dev@dpdk.org    RESOLVED    DUPLICATE   [dpdk-20.08]tx_preparation/tx_preparation:IPV6/TCP packets TSO checksum incorrect   2020/7/23 7:26</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">514 DPDK    testpmd arybchenko@solarflare.com   RESOLVED    FIXED   [dpdk-20.08]tx_preparation/tx_preparation:IPV6/TCP packets TSO checksum incorrect   2020/7/29 4:46</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">516 DPDK    ethdev  jia.guo@intel.com   UNCONFIRMED  ---    Multiple Intel Ethernet drivers do not conform to rte_eth_rx_burst() API    2020/8/3 7:58</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">519 DPDK    meson   shahafs@mellanox.com    RESOLVED    FIXED   DPDK 20.08-rc3 meson build fails with MLNX_OFED_LINUX-5.1-0.6.6.0   2020/8/4 14:38</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">520 DPDK    ethdev  jia.guo@intel.com   UNCONFIRMED  ---    i40e: UDP PTPv2 packets sent to port 320 not timestamped    2020/8/3 19:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">521 DPDK    ethdev  jia.guo@intel.com   UNCONFIRMED  ---    i40e: incorrect byte counters   2020/8/8 0:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">522 DPDK    ethdev  mk@semihalf.com UNCONFIRMED  ---    Performance degradation on AWS ena driver   2020/8/17 17:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">523 DPDK    vhost/virtio    dev@dpdk.org    UNCONFIRMED  ---    vhost iotlb cache incorrectly assumes to be single consumer 2020/8/10 15:56</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">524 DPDK    ethdev  dev@dpdk.org    UNCONFIRMED  ---    mlx5 pmd  crash, mlx5_rxte_vec_sse.h# rxq_cq_decompress_v   2020/8/13 13:04</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">525 lab Intel Lab   ci@dpdk.org UNCONFIRMED  ---    Change CI scripts due to branch name changed from "master" to "main"    2020/8/18 7:15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">526 DPDK    ethdev  dev@dpdk.org    UNCONFIRMED  ---    ixgbe: X550 flow type ETH / VLAN / RAW not supported    2020/8/14 12:06</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">527 lab UNH infra   blo@iol.unh.edu RESOLVED    FIXED   Update SPDK branch  2020/8/18 22:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">11  DPDK    cryptodev   dev@dpdk.org    RESOLVED    FIXED   crypto_preformance_test: core dumped    2018/2/7 13:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">19  DPDK    core    solal.pirelli@gmail.com RESOLVED    FIXED   Crash on initialization if first RTE_MAX_LCORE cores are disabled   2019/2/1 11:56</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">23  DPDK    ethdev  konstantin.ananyev@intel.com    RESOLVED    WONTFIX Ixgbe driver writes to reserved bit in the EIMC register    2018/10/18 9:40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">24  DPDK    ethdev  konstantin.ananyev@intel.com    RESOLVED    WONTFIX Ixgbe driver sets unknown bit of the 82599's SW_FW_SYNC register    2018/10/18 9:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">30  DPDK    cryptodev   wisamm@mellanox.com RESOLVED    WONTFIX Compilation error while disabling crypto device library 2020/6/18 22:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">36  DPDK    ethdev  anatoly.burakov@intel.com   RESOLVED    FIXED   drivers/bus/pci/linux/pci_vfio.c does not compile when compilation strictly fails on warnings   2018/11/20 16:27</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">46  DPDK    other   dev@dpdk.org    CONFIRMED    ---    Reciprocal division: Fail [Crash]   2018/5/11 12:06</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">52  DPDK    ethdev  ferruh.yigit@intel.com  RESOLVED    FIXED   Bonding PMD may fail to accept new slaves in certain conditions 2019/6/26 10:21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">66  DPDK    ethdev  thomas@monjalon.net CONFIRMED    ---    Secondary process must have exact same whitelist "-w" list  2018/6/26 1:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">78  DPDK    doc dev@dpdk.org    RESOLVED    FIXED   Mismatch between return value and documentation for `rte_hash_lookup_data` (cuckoo hashing implementation)  2018/8/7 19:34</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">84  DPDK    core    anatoly.burakov@intel.com   RESOLVED    FIXED   Primary process broadcasts vdevs during each secondary's vdev scan  2018/11/20 16:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">109 DPDK    ethdev  ferruh.yigit@intel.com  IN_PROGRESS  ---    Using the environment variable to get the filepath  2019/6/26 10:30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">114 DPDK    core    dev@dpdk.org    RESOLVED    FIXED   rte_rand() is not thread-safe but not documented as such    2019/6/30 7:19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">226 DPDK    cryptodev   pablo.de.lara.guarch@intel.com  RESOLVED    FIXED   Cryptodevs instruction for Kasumi isn't correct 2019/3/26 22:19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">228 DPDK    core    anatoly.burakov@intel.com   RESOLVED    FIXED   rte_mp_request_sync memleak with multiple recipients    2019/5/3 13:49</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">258 DPDK    ethdev  dev@dpdk.org    CONFIRMED    ---    Tap driver unnecessarily triggers timeout on failure    2019/5/1 6:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">288 DPDK    mk  thomas@monjalon.net CONFIRMED    ---    Target name recorded wrong when try to build dpdk with x86_64-native-linux-gcc  2019/7/15 20:55</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">341 DPDK    other   dev@dpdk.org    CONFIRMED    ---    repeated execution of distributor_autotest fails    2020/5/18 13:58</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">342 DPDK    other   dev@dpdk.org    RESOLVED    FIXED   distributor_autotest execution gets suspended   2020/4/26 2:22</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">356 DPDK    vhost/virtio    dev@dpdk.org    RESOLVED    FIXED   Building dpdk with rte_vhost sometimes fails due to missing rte_hash.h  2019/11/21 3:02</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">365 DPDK    other   dev@dpdk.org    UNCONFIRMED  ---    Do not reimplement inet_pton    2019/11/13 9:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">385 DPDK    other   reshma.pattan@intel.com UNCONFIRMED  ---    latency calculation has potential performance issues    2020/2/5 20:54</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">420 DPDK    doc thomas@monjalon.net RESOLVED    FIXED   Typing error in doc/guides/contributing/patches.rst 2020/5/27 20:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">423 DPDK    other   thomas@monjalon.net UNCONFIRMED  ---    usertools/dpdk-setup.sh can not be used to run an application without compiling dpdk first  2020/3/26 2:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">448 DPDK    vhost/virtio    maxime.coquelin@redhat.com  UNCONFIRMED  ---    Post-copy-Live migration with 8 vhost queues succeeds with warning from QEMU    2020/4/25 2:49</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">492 DPDK    doc anatoly.burakov@intel.com   RESOLVED    FIXED   Fix references to /dev/huge 2020/7/31 1:36</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">80  DPDK    doc linville@tuxdriver.com  RESOLVED    FIXED   There is not any mention of AF_PACKET PMD in the doc    2019/3/10 8:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">124 lab dashboard   ci@dpdk.org CONFIRMED    ---    Add previous/next navigation links to dashboard detail page 2018/12/10 19:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">126 lab UNH infra   ci@dpdk.org RESOLVED    INVALID Rename dev cluster FQDN suffix to dpdkdev.iol.unh.edu   2020/2/25 22:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">127 lab dashboard   ci@dpdk.org CONFIRMED    ---    Add a favicon to the dashboard  2018/12/10 19:38</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">128 lab dashboard   ci@dpdk.org CONFIRMED    ---    [Epic] Display historical trend plots on dashboard  2018/12/10 20:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">129 lab dashboard   ci@dpdk.org CONFIRMED    ---    [Epic] Add user management functionality to dashboard   2018/12/10 20:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">130 lab dashboard   ci@dpdk.org CONFIRMED    ---    As an IOL employee, I would like to send a new user a token-based URL to set their password 2018/12/10 20:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">131 lab dashboard   ci@dpdk.org CONFIRMED    ---    As an employee of a Member company, I would like to be able to request a dashboard account  2018/12/10 20:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">132 lab dashboard   ci@dpdk.org RESOLVED    FIXED   As a primary contact for a Member company, I would like to manage the users in my organization  2019/11/19 18:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">133 lab dashboard   ci@dpdk.org CONFIRMED    ---    As an employee of a Member company, I would like to request/access my VPN credentials   2018/12/10 20:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">134 lab dashboard   ci@dpdk.org CONFIRMED    ---    Investigate using OAuth or SAML for dashboard authentication to REST API    2018/12/10 20:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">136 lab dashboard   ci@dpdk.org CONFIRMED    ---    Add a way for users to filter results   2018/12/10 19:48</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">137 lab dashboard   ci@dpdk.org CONFIRMED    ---    [Epic] Patchwork 2.1 (API 1.1)  2018/12/10 19:50</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">138 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Delete old log files    2019/11/19 17:55</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">140 lab dashboard   ci@dpdk.org CONFIRMED    ---    Invalidate dashboard cache on database changes  2018/12/10 20:38</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">141 lab UNH infra   ci@dpdk.org RESOLVED    INVALID Restructure network 2020/2/25 22:27</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">143 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Add a run button to run incomplete tests    2019/4/3 19:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">144 lab dashboard   ci@dpdk.org CONFIRMED    ---    [Epic] Add hardware description page    2018/12/10 20:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">145 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Add API Key access to the preferences page  2019/11/19 17:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">146 lab dashboard   ci@dpdk.org CONFIRMED    ---    Add initial hardware description API    2018/12/10 20:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">147 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Add jenkins information to hardware api 2019/4/26 22:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">148 lab dashboard   ci@dpdk.org CONFIRMED    ---    Add hardware description UI to the dashboard    2018/12/10 20:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">150 lab dashboard   ci@dpdk.org CONFIRMED    ---    Add GA Performance deltas to the detailed view  2018/12/10 20:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">151 lab dashboard   ci@dpdk.org CONFIRMED    ---    Add graphing of GA over time to the dashboard   2018/12/10 20:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">152 lab dashboard   ci@dpdk.org CONFIRMED    ---    [Epic] Increase performance or perception of performance of the dashboard   2019/1/10 21:04</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">153 lab dashboard   ci@dpdk.org CONFIRMED    ---    Add timezone to date times  2018/12/10 20:08</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">154 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Add a way to select what branch a patchset was meant for    2019/2/5 19:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">155 lab dashboard   ci@dpdk.org CONFIRMED    ---    Parse NIC speed into GbE    2018/12/10 20:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">156 lab dashboard   ci@dpdk.org RESOLVED    FIXED   The primary contact should be able to update the configuration information pdf  2019/6/17 17:33</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">157 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Allow primary contact to revoke access to accounts  2019/6/17 17:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">158 lab dashboard   ci@dpdk.org CONFIRMED    ---    The primary contact should be able to set their environments public or private  2018/12/10 20:31</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">160 lab dashboard   ci@dpdk.org CONFIRMED    ---    Add graphing of LTS over time to the dashboard  2018/12/10 20:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">161 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Create master to master overview and detail pages   2019/3/22 20:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">163 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Add a way to download the tarball from the detailed view    2019/1/8 17:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">167 lab job scripts ci@dpdk.org RESOLVED    WONTFIX Check hardware/software for changes on each test run    2020/4/21 16:13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">168 lab job scripts ci@dpdk.org RESOLVED    FIXED   Record pipeline CI issues   2019/3/13 19:41</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">170 lab UNH infra   blo@iol.unh.edu CONFIRMED    ---    Send separate emails to users instead of CCing everyone 2020/6/30 20:21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">172 lab job scripts ci@dpdk.org RESOLVED    FIXED   Send updated reports after a rerun  2019/3/19 18:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">173 lab job scripts dpdklab@iol.unh.edu RESOLVED    FIXED   Filter branch instead of going directly to the branch (results api) 2019/1/9 16:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">180 lab job scripts ci@dpdk.org RESOLVED    FIXED   Add link to dashboard website in emailed reports    2019/1/8 20:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">181 lab job scripts ci@dpdk.org RESOLVED    FIXED   Don't run doc patches if only the doc folder has been changed   2019/1/9 15:17</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">220 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Add hardware usage status to the dashboard  2019/6/17 17:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">233 lab dashboard   ci@dpdk.org RESOLVED    FIXED   Create a way to share artifacts 2019/8/8 15:07</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">254 lab dashboard   ci@dpdk.org CONFIRMED    ---    Auto create measurements and test cases as results are submitted    2019/4/15 19:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">292 lab dashboard   ci@dpdk.org CONFIRMED    ---    Allow members to stop future jobs from running on their host from the dashboard 2019/6/24 20:33</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">346 DPDK    ethdev  tohofman@cisco.com  RESOLVED    WORKSFORME  Set the link speed / duplex of a DPDK port  2020/5/12 16:08</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">364 DPDK    doc dev@dpdk.org    CONFIRMED    ---    Do not generate temporary doc files in the sources  2020/3/25 8:23</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">407 lab UNH infra   ci@dpdk.org RESOLVED    DUPLICATE   Add ether layer testing to the community lab    2020/4/21 16:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">408 lab UNH infra   lylavoie@iol.unh.edu    CONFIRMED    ---    Add Arm hardware to the lab for general testing 2020/7/1 14:49</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">435 DPDK    testpmd dev@dpdk.org    UNCONFIRMED  ---    Proposed improvement to non-interactive loop timing 2020/4/4 3:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">496 DPDK    testpmd dev@dpdk.org    UNCONFIRMED  ---    Display link speed capabilities in testpmd  2020/7/22 9:37</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">511 lab job scripts ci@dpdk.org CONFIRMED    ---    Add check if performance tests are needed   2020/7/30 15:29</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">91  DPDK    mk  thomas@monjalon.net RESOLVED    WONTFIX Unable to build on Ubuntu 18.04 2020/6/18 22:35</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">245 lab UNH infra   ci@dpdk.org CONFIRMED    ---    Add virtio testing to the community lab 2020/4/21 16:24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">246 lab UNH infra   ci@dpdk.org CONFIRMED    ---    Add cryptodev testing to the community lab  2020/4/21 16:24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">247 lab UNH infra   ci@dpdk.org CONFIRMED    ---    Add compression testing to the community lab    2020/4/21 16:24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">306 DPDK    ethdev  lionel.fiat@atos.net    CONFIRMED    ---    Intel X722 chipset DPDK driver issue with WindRiver Titianium R18.03 platform - CentOS 7.4  2019/7/15 20:44</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">18  DPDK    core    nhorman@tuxdriver.com   RESOLVED    FIXED   mmap with MAP_ANONYMOUS should have fd == -1    2018/4/12 14:55</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">87  DPDK    other   jerin.jacob@caviumnetworks.com  RESOLVED    FIXED   build dpdk and example with different gcc version issue 2019/7/31 6:14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">479 lab job scripts blo@iol.unh.edu CONFIRMED    ---    Fedora 32  / gcc 10 build testing   2020/6/30 20:30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">123 lab UNH infra   ci@dpdk.org RESOLVED    FIXED   Add mechanism to periodically image nodes   2019/11/19 20:13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">125 lab UNH infra   ci@dpdk.org RESOLVED    INVALID Find a replacement for NFS for Jenkins filestore    2020/2/25 22:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">135 lab dashboard   ci@dpdk.org CONFIRMED    ---    Consider using zxcvbn for client-side password validation   2018/12/10 19:47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">159 lab UNH infra   ci@dpdk.org RESOLVED    FIXED   Change VPN to use routed configuration instead of bridged   2019/11/19 20:16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">171 lab job scripts ci@dpdk.org RESOLVED    WONTFIX Create LTS performance Jenkins Job  2020/6/30 20:15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">238 DPDK    other   dev@dpdk.org    CONFIRMED    ---    [tree-wide] enhance getopt_long usage   2019/4/2 9:38</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">429 lab job scripts ci@dpdk.org CONFIRMED    ---    New Perf Test Case: Test above / below maximum throughput of NIC / system   2020/6/30 20:29</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 对 numa 的使用与多 numa 架构下性能调优的基础]]></title>
        <id>/dpdk/dpdk 对 numa 的使用与多 numa 架构下性能调优的基础</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 对 numa 的使用与多 numa 架构下性能调优的基础"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[numa 是什么？]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="numa-是什么">numa 是什么？<a class="hash-link" href="#numa-是什么" title="标题的直接链接">​</a></h2><p>在 SMP 架构中，内存统一寻址（Uniform Memory Architecture)，处理器和内存之间通过一条总线连接起来。由于所有处理器都是通过一条总线连接起来的，<strong>随着处理器的增加，系统总线成为了系统瓶颈</strong>，另外，处理器和内存之间的通信延迟也较大。为了克服以上缺点，NUMA 架构应运而生。</p><p>numa 架构全称为非一致性内存架构 (Non Uniform Memory Architecture)，与 SMP 中的 UMA 统一寻址内存架构相对。在 numa 系统中有本地内存与远端内存的区别。访问本地内存有更小的延迟和更大的带宽，跨处理器内存访问速度会相对较慢一点，但是整个内存对于所有的处理器都是可见的。</p><p>numa 系统的一个示意图如下：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/0353fb8e352648e1bbfe32cde4f3b2ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAbG9uZ3l1X3dseg==,size_13,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" class="img_ev3q"></p><p>上图中有两个 cpu，CPU0 与 CPU1 都有自己的本地内存，访问这些内存的性能最优，这两个 cpu 也可以通过总线等架构跨处理器访问远端的内存，只不过性能相对会差一些。</p><p><strong>如上信息与图片摘自《深入浅出 DPDK》。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-1604-中对-numa-的使用">dpdk-16.04 中对 numa 的使用<a class="hash-link" href="#dpdk-1604-中对-numa-的使用" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-如何获取-pci-网卡所在的-numa-节点">1. 如何获取 pci 网卡所在的 numa 节点？<a class="hash-link" href="#1-如何获取-pci-网卡所在的-numa-节点" title="标题的直接链接">​</a></h3><p>linux 系统中 pci 设备会在 /sys/bus/pci/devices/ 中创建独立的子目录，目录名称就是 pci 设备的 pci 号。dpdk eal 初始化时，会扫描此目录来获取当前设备上所有可用的 pci 设备。每个 pci 设备所在的 numa 节点在 /sys/bus/pci/devices/xxx/numa_node  文件中保存，dpdk 通过访问这些文件获取到每个 pci 网卡的 numa_node 信息。</p><p>一个示例：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> # cat </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">sys</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">bus</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">pci</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">devices</span><span class="token operator" style="color:#393A34">/</span><span class="token number" style="color:#36acaa">0000</span><span class="token plain">\</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">80</span><span class="token plain">\</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00.0</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">numa_node</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk 会为每个扫描到的 pci 设备创建一个 rte_pci_device 结构，并将解析 sys 目录得到的字段写入到此结构中，解析完成后将每个 rte_pci_device 链入到 pci_device_list 链表中。</p><p>dpdk 内部会为每个网卡接口分配一个 rte_eth_dev 结构，在网卡 probe 流程中，pci 网卡接口的 rte_eth_dev 结构中的 pci_dev 结构被设置为扫描 pci 时创建的 rte_pci_device 结构地址。</p><p>同时每个 pci 接口的 rte_eth_dev 的 data 结构中的 numa_node 字段也用于存储接口所在的 numa_node，这个字段能够在多进程间共享且能够通过每个接口的 rte_eth_dev 直接访问到。其拷贝过程是在驱动初始化函数中调用 rte_eth_copy_pci_info 完成的。</p><p>一个示例如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">eth_i40e_dev_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_pci_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pci_dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">i40e_pf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">I40E_DEV_PRIVATE_TO_PF</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_private</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">i40e_hw</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">hw </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">I40E_DEV_PRIVATE_TO_HW</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_private</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">i40e_vsi</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">vsi</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint32_t</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint8_t</span><span class="token plain"> aq_fail </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">PMD_INIT_FUNC_TRACE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_ops </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">i40e_eth_dev_ops</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_pkt_burst </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i40e_recv_pkts</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">tx_pkt_burst </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i40e_xmit_pkts</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    pci_dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pci_dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_eth_copy_pci_info</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pci_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk 内部提供的获取接口所在 numa 节点的函数代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_eth_dev_socket_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint8_t</span><span class="token plain"> port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">rte_eth_dev_is_valid_port</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> rte_eth_devices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">numa_node</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到此函数将返回每个接口 rte_eth_dev 的 data 结构中的 numa_node 的值，这个值<strong>在每个接口初始化时调用驱动初始化函数从 rte_pci_device 中拷贝</strong>，缺少了这次拷贝就不能正确获取到网卡所在的 numa_node 的真实值。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-如何处理不同-numa-节点的大页内存">2. 如何处理不同 numa 节点的大页内存？<a class="hash-link" href="#2-如何处理不同-numa-节点的大页内存" title="标题的直接链接">​</a></h3><p>dpdk 程序运行依赖大页内存，在多 numa 结构的设备上，大页内存存在位于不同 numa 节点的情况。尽管分配大页所在的 numa 有几种规则，dpdk 内部并没有使用到这些规则来处理大页内存归属的 numa。</p><p>dpdk 仅仅<strong>映射所有的大页</strong>，在映射的过程中通过访问 <strong>/proc/self/numa_maps</strong> 文件来确定每个映射的大页所在的 numa 节点，这意味着在 dpdk 【分配前】大页内存归属的 numa 节点就已经确定下来了，这部分工作是内核在分配大页时控制的，默认所有的大页内存在每个 numa 上<strong>均分</strong>，也可以通过写入 sys 下的相关文件来手动控制。</p><p>如果你需要控制映射的大页所在的 numa 节点，在 Local allocation 内存分配策略下，修改线程绑核就可以完成这个工作。更多的信息可以阅读内核源码树根目录下的 <strong>Documentation/vm/numa_memory_policy.txt</strong> 文件。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-如何获取线程所在-numa-节点">3. 如何获取线程所在 numa 节点？<a class="hash-link" href="#3-如何获取线程所在-numa-节点" title="标题的直接链接">​</a></h3><p>dpdk 初始化时会扫描设备 cpu 信息，为每个核分配一个 <strong>lcore_config</strong> 结构，这个结构代表 dpdk 对一个<strong>逻辑核</strong>的抽象，同时也用于实现逻辑线程任务 <strong>pipeline</strong> 分发。</p><p>dpdk 提供 rte_socket_id 接口获取当前逻辑核所在的 numa 节点，此接口代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_socket_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">RTE_PER_LCORE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_socket_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk 基于性能的考量，使用了【每线程数据】保存每个逻辑核所处的 numa 节点，dpdk 创建的 lcore 线程执行函数通过调用 <strong>eal_thread_set_affinity</strong> 来初始化 <strong>_socket_id</strong> 每线程数据。</p><p>dpdk 在初始化时通过扫描 /sys 下的文件确定当前逻辑核所在的 numa 节点，相关函数为 eal_cpu_socket_id，源码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">eal_cpu_socket_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> lcore_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> socket</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">socket </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> socket </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> RTE_MAX_NUMA_NODES</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> socket</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> path</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">PATH_MAX</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">snprintf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"%s/node%u/cpu%u"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NUMA_NODE_PATH</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                socket</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lcore_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">access</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> F_OK</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> socket</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>/sys 目录中一个示例信息如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> # ls </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">sys</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">devices</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">system</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">node</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">node0</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">cpu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cpu0</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">    cpu3</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">    cpu6</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">    cpu66</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">   cpu69</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">   cpu71</span><span class="token operator" style="color:#393A34">/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cpu1</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">    cpu4</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">    cpu64</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">   cpu67</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">   cpu7</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">    cpulist</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cpu2</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">    cpu5</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">    cpu65</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">   cpu68</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">   cpu70</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">   cpumap</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk 遍历 /sys/devices/system/node 下每个 node 的目录，cpuX 存在时表明与之对应的 lcore_id 位于当前 node。在示例信息中，0-7 与 64-71 核都位于 numa 0 上。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-dpdk-接口相关重要数据结构分配中对-numa-的使用">4. dpdk 接口相关重要数据结构分配中对 numa 的使用<a class="hash-link" href="#4-dpdk-接口相关重要数据结构分配中对-numa-的使用" title="标题的直接链接">​</a></h3><p><strong>4.1 rte_eth_dev_data 结构所在 numa</strong></p><p>位于 master_lcore 所在的 numa 节点</p><p><strong>4.2 rte_eth_dev_data 结构中的 </strong>dev_private<strong> 结构（用于驱动内部数据结构）所在 numa</strong></p><p>优先在 master_lcore 所在 numa 节点的大页内存上分配，分配失败后从小到大遍历每个 numa 上的大页内存（跳过 master_lcore 所在 numa）上分配。</p><p><strong>4.3 mempool 所在的 numa</strong></p><p>由调用 rte_pktmbuf_pool_create 时传递的 socket_id 参数值决定。</p><p><strong>4.4. rte_eth_dev_data 中的 rx queues、tx queues 指针数组所在的 numa</strong></p><p>优先在调用 rte_eth_dev_configure 函数配置队列的<strong>线程绑定的核所在的 numa 节点</strong>上分配，分配失败则继续从小到大遍历每个 numa（跳过已经分配失败的 numa）节点来分配。</p><p><strong>4.5 网卡 rx_queues、rx_queues 上绑定的收包描述符所在的 numa 节点</strong></p><p>使用 rte_eth_rx_queue_setup 函数 socket_id 参数传入的 numa 节点。</p><p><strong>4.6 网卡 tx_queues、tx_queues 上绑定的发包描述符所在的 numa 节点</strong></p><p>使用 rte_eth_tx_queue_setup 函数 socket_id 参数传入的 numa 节点。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-mempool-创建时对-numa-节点的使用">5. mempool 创建时对 numa 节点的使用<a class="hash-link" href="#5-mempool-创建时对-numa-节点的使用" title="标题的直接链接">​</a></h3><p>关键代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mz </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_memzone_reserve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mz_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> mempool_size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> mz_flags</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>socket_id 代表设定的 numa node，此值通过 rte_pktmbuf_pool_create 接口传入。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-dpdk-程序队列相关的数据结构创建对-numa-的使用">6. dpdk 程序队列相关的数据结构创建对 numa 的使用<a class="hash-link" href="#6-dpdk-程序队列相关的数据结构创建对-numa-的使用" title="标题的直接链接">​</a></h3><p>下面以 ice 驱动为例，列举网卡收发包队列重要结构创建时对 numa 节点的使用。</p><p><strong>tx_queue 与 tx desc 创建时在指定的 socket_id（表示 numa 号）上分配相关结构：</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* Allocate the TX queue data structure. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    txq </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_zmalloc_socket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ice_tx_queue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 RTE_CACHE_LINE_SIZE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 socket_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tz </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dma_zone_reserve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"tx_ring"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> queue_idx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      ring_size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ICE_RING_BASE_ALIGN</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      socket_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* Allocate software ring */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    txq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">sw_ring </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_zmalloc_socket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                   </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ice_tx_entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> nb_desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                   RTE_CACHE_LINE_SIZE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                   socket_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>rx_queue 与 rx desc 创建时在指定的 socket_id（表示 numa 号）上分配相关结构：</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* Allocate the rx queue data structure */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rxq </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_zmalloc_socket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ice_rx_queue</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 RTE_CACHE_LINE_SIZE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 socket_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rz </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dma_zone_reserve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rx_ring"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> queue_idx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      ring_size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ICE_RING_BASE_ALIGN</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      socket_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* Allocate the software ring. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rxq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">sw_ring </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_zmalloc_socket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ice_rx_entry</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      RTE_CACHE_LINE_SIZE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      socket_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-1911-中网卡重要数据结构分配所在的-numa">dpdk-19.11 中网卡重要数据结构分配所在的 numa<a class="hash-link" href="#dpdk-1911-中网卡重要数据结构分配所在的-numa" title="标题的直接链接">​</a></h2><p><strong>4.1 rte_eth_dev_data 结构所在 numa</strong></p><p>位于 master_lcore 所在的 numa 节点。</p><p><strong>4.2 rte_eth_dev_data 结构中的 </strong>dev_private<strong> 结构（用于驱动内部数据结构）所在 numa</strong></p><p><strong>使用网卡所在的 numa 节点。</strong></p><p><strong>4.3 mempool 所在的 numa</strong></p><p>由调用 rte_pktmbuf_pool_create 时传递的 socket_id 参数值决定。</p><p><strong>4.4. rte_eth_dev_data 中的 rx queues、tx queues 指针数组所在的 numa</strong></p><p>优先在调用 rte_eth_dev_configure 函数配置队列的线程绑定的核所在的 numa 节点上分配，分配失败则继续从小到大遍历每个 numa（跳过已经分配失败的 numa）节点来分配。。</p><p><strong>4.5 网卡 rx_queues、rx_queues 上绑定的收包描述符所在的 numa 节点</strong></p><p>使用 rte_eth_rx_queue_setup 函数 socket_id 参数传入的 numa 节点。</p><p><strong>4.6 网卡 tx_queues、tx_queues 上绑定的发包描述符所在的 numa 节点</strong></p><p>使用 rte_eth_tx_queue_setup 函数 socket_id 参数传入的 numa 节点。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="对收发包性能影响显著的数据结构与多-numa-架构性能调优的一条规">对收发包性能影响显著的数据结构与多 numa 架构性能调优的一条规<a class="hash-link" href="#对收发包性能影响显著的数据结构与多-numa-架构性能调优的一条规" title="标题的直接链接">​</a></h2><p>dpdk 收发包进程核心逻辑是调用底层驱动实现的收发包函数，访问频繁的数据结构列举如下：</p><ol><li>从 mempool 中分配的 mbuf</li><li>tx_queue、rx_queue 及网卡 rx_desc、tx_desc 结构</li></ol><p>在多 numa 环境下，访问本地 numa 会有最高的性能，远程 numa 访问会造成性能的下降。收发包性能优化要以如下规则为基准：</p><p><strong>网卡所在的 numa 节点、mempool 分配自的 numa 节点、网卡队列与描述符分配自的 numa 节点、收发包线程绑定的核所在的 numa 节点完全一致。</strong></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[收发包向量函数实现分析]]></title>
        <id>/dpdk/dpdk 收发包函数分析：dpdk-20.11 ice sse 向量收发包函数关键过程分析</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 收发包函数分析：dpdk-20.11 ice sse 向量收发包函数关键过程分析"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[收包函数主体逻辑]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="收包函数主体逻辑">收包函数主体逻辑<a class="hash-link" href="#收包函数主体逻辑" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="mbuf_initializer-字段用于初始化每个-mbuf">mbuf_initializer 字段用于初始化每个 mbuf<a class="hash-link" href="#mbuf_initializer-字段用于初始化每个-mbuf" title="标题的直接链接">​</a></h3><p>mbuf_initializer 字段初始化的内容：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* next 8 bytes are initialised on RX descriptor rearm */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RTE_MARKER64 rearm_data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint16_t</span><span class="token plain"> data_off</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * Reference counter. Its size should at least equal to the size</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * of port field (16 bits), to support zero-copy broadcast.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * It should only be accessed using the following functions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * rte_mbuf_refcnt_update(), rte_mbuf_refcnt_read(), and</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * rte_mbuf_refcnt_set(). The functionality of these functions (atomic,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * or non-atomic) is controlled by the RTE_MBUF_REFCNT_ATOMIC flag.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint16_t</span><span class="token plain"> refcnt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint16_t</span><span class="token plain"> nb_segs</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Number of segments. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/** Input port (16 bits to support more than 256 virtual ports).</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * The event eth Tx adapter uses this field to specify the output port.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint16_t</span><span class="token plain"> port</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这部分值每个报文基本一致。</p><p><strong>mbuf_initialized 结构的内容：</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    mbuf_initialized </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token number" style="color:#36acaa">16</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> data_off             </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> RTE_PKTMBUF_HEADROOM</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token number" style="color:#36acaa">16</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> refcnt               </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token number" style="color:#36acaa">16</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> nb_segs              </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token number" style="color:#36acaa">16</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> port_id              </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> rxq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">port_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>向量函数含义：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">__m128i </span><span class="token function" style="color:#d73a49">_mm_set_epi64x</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__int64 q1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __int64 q0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">设置两个 </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> bit 整型值</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> q0 </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> q1 </span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>初始化 mbuf_init 结构：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> __m128i mbuf_init </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_set_epi64x</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rxq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_initializer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行后 mbuf_init 的值 :</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    mbuf_init  </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token number" style="color:#36acaa">16</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> data_off             </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> RTE_PKTMBUF_HEADROOM</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token number" style="color:#36acaa">16</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> refcnt               </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token number" style="color:#36acaa">16</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> nb_segs              </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token number" style="color:#36acaa">16</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> port_id              </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> rxq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">port_id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token number" style="color:#36acaa">32</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token number" style="color:#36acaa">32</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-设置-crc-掩码的值对一个-mbuf-进行处理同时将-pkt_len-与-data_len-减去-crc_len-长度">1. 设置 crc 掩码的值，对一个 mbuf 进行处理，同时将 pkt_len 与 data_len 减去 crc_len 长度<a class="hash-link" href="#1-设置-crc-掩码的值对一个-mbuf-进行处理同时将-pkt_len-与-data_len-减去-crc_len-长度" title="标题的直接链接">​</a></h3><p>向量函数含义：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">__m128i </span><span class="token function" style="color:#d73a49">_mm_set_epi16</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">short</span><span class="token plain"> w7</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">short</span><span class="token plain"> w6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">short</span><span class="token plain"> w5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">short</span><span class="token plain"> w4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">short</span><span class="token plain"> w3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">short</span><span class="token plain"> w2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">short</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">w1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">short</span><span class="token plain"> w0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">设置 </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> 个有符号 </span><span class="token number" style="color:#36acaa">16</span><span class="token plain">bit 整型</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> w0 </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> w1 </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> … </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> w7 </span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>驱动掩码设置相关代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    __m128i crc_adjust </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_set_epi16</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/* ignore non-length fields */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">rxq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">crc_len</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* sub crc on data_len */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">/* ignore high-16bits of pkt_len */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">rxq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">crc_len</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* sub crc on pkt_len */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">           </span><span class="token comment" style="color:#999988;font-style:italic">/* ignore pkt_type field */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此处的掩码设置用于后续基于向量单位对多个报文同时计算。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-设置后续运行的掩码">2. 设置后续运行的掩码<a class="hash-link" href="#2-设置后续运行的掩码" title="标题的直接链接">​</a></h3><p>mbuf 中相关的字段结构：</p><table><thead><tr><th>变量名称</th><th>变量宽度</th></tr></thead><tbody><tr><td>pkt_type</td><td>32</td></tr><tr><td>pkt_len</td><td>64</td></tr><tr><td>data_len</td><td>80</td></tr><tr><td>vlan_macip</td><td>96</td></tr><tr><td>rss_hash</td><td>128</td></tr></tbody></table><p>向量函数代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> __m128i zero </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_setzero_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* mask to shuffle from desc. to mbuf */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> __m128i shuf_msk </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_set_epi8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* rss hash parsed separately */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">/* octet 10~11, 16 bits vlan_macip */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* octet 4~5, 16 bits data_len */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* skip high 16 bits pkt_len, zero out */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* octet 4~5, low 16 bits pkt_len */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* pkt_type set as unknown */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">/* pkt_type set as unknown */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>0xFF 表示将对应字节的值清 0，最高位不为 1 表示选择 a<!-- -->[n &amp; 0xf]<!-- --> 字节值。</strong>
此掩码<strong>跳过 pkt_len 的高 16-bit</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-设置-eop-掩码值dd-maskeop-mask">3. 设置 EOP 掩码值、dd mask、eop mask<a class="hash-link" href="#3-设置-eop-掩码值dd-maskeop-mask" title="标题的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> __m128i eop_shuf_mask </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_set_epi8</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           </span><span class="token number" style="color:#36acaa">0x04</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0C</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                           </span><span class="token number" style="color:#36acaa">0x00</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x08</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * compile-time check the above crc_adjust layout is correct.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * NOTE: the first field (lowest address) is given last in set_epi16</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * call above.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_BUILD_BUG_ON</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pkt_len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rx_descriptor_fields1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_BUILD_BUG_ON</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> data_len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rx_descriptor_fields1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* 4 packets DD mask */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> __m128i dd_check </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_set_epi64x</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0x0000000100000001LL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token number" style="color:#36acaa">0x0000000100000001LL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* 4 packets EOP mask */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> __m128i eop_check </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_set_epi64x</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0x0000000200000002LL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                         </span><span class="token number" style="color:#36acaa">0x0000000200000002LL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>dd_check 与 eop_check 针对 rx 描述符，同时对两个描述符进行操作，每个描述符占据 64-bit</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-判断是否需要重整队列需要则执行队列重整操作">4. 判断是否需要重整队列，需要则执行队列重整操作<a class="hash-link" href="#4-判断是否需要重整队列需要则执行队列重整操作" title="标题的直接链接">​</a></h3><p>申请 <strong>ICE_RXQ_REARM_THRESH</strong> 个 mbuf，然后将 <strong>mbuf dataroom 的物理地址填充到空闲的描述符中。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-获取当前软件可用描述符并预取描述符">5. 获取当前软件可用描述符并预取描述符<a class="hash-link" href="#5-获取当前软件可用描述符并预取描述符" title="标题的直接链接">​</a></h3><p><strong>普通函数逻辑，读取描述符中的标志，当没有可用描述符时，函数直接返回。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-填充-mbuf-dataroom-物理地址到描述符函数主体向量指令">6. 填充 mbuf dataroom 物理地址到描述符<strong>函数主体向量指令</strong><a class="hash-link" href="#6-填充-mbuf-dataroom-物理地址到描述符函数主体向量指令" title="标题的直接链接">​</a></h3><p>向量函数代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* Initialize the mbufs in vector, process 2 mbufs in one loop */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ICE_RXQ_REARM_THRESH</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rxep </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __m128i vaddr0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> vaddr1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mb0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rxep</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mbuf</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mb1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rxep</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mbuf</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* load buf_addr(lo 64bit) and buf_iova(hi 64bit) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_BUILD_BUG_ON</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> buf_iova</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> buf_addr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        vaddr0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_loadu_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">mb0</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_addr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        vaddr1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_loadu_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">mb1</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_addr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* convert pa to dma_addr hdr/data */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dma_addr0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_unpackhi_epi64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vaddr0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> vaddr0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dma_addr1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_unpackhi_epi64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vaddr1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> vaddr1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* add headroom to pa values */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dma_addr0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_add_epi64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dma_addr0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hdr_room</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dma_addr1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_add_epi64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dma_addr1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hdr_room</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* flush desc with pa dma_addr */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">_mm_store_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rxdp</span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dma_addr0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">_mm_store_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rxdp</span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dma_addr1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>mbuf 中虚拟地址与物理地址结构如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token class-name">uint64_t</span><span class="token plain"> </span><span class="token class-name">rte_iova_t</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">buf_addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">           </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Virtual address of segment buffer. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * Physical address of segment buffer.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * Force alignment to 8-bytes, so as to ensure we have the exact</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * same mbuf cacheline0 layout for 32-bit and 64-bit. This makes</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * working on vector drivers easier.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">rte_iova_t</span><span class="token plain"> buf_iova </span><span class="token function" style="color:#d73a49">__rte_aligned</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">rte_iova_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用 <strong>128-bit</strong> 寄存器，一次将 <strong>buf_addr 与 buf_iova 地址加载到一个 128-bit 的变量中</strong>，<strong>低 64-bit 存储 buf_addr，高 64-bit 存储 buf_iova 地址</strong>。</p><p>6.1 <strong>每次处理两个 rxd，首先将第一组 rxep mbuf 地址分别加载到 mb0 与 mb1 两个 mbuf 结构中</strong></p><p>6.2 <strong>将 mb0 的虚拟地址加载到 vaddr0 128-bit 中，将 mb1 的虚拟地址加载到 vaddr1 128-bit 中</strong></p><p><strong>处理后 vaddr0 与 vaddr1 内容示例：</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        vaddr0 </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain">      vaddr1 </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hi</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  mb0</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">     hi</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b  </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> mb1</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lo</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  mb0</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_addr </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">     lo</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b  </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> mb1</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_addr</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain">                 </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>6.3 <strong>调整 vaddr0、vaddr1 中 buf_iova 的位置</strong></p><p>向量函数代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* convert pa to dma_addr hdr/data */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dma_addr0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_unpackhi_epi64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vaddr0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> vaddr0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dma_addr1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_unpackhi_epi64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vaddr1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> vaddr1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行后 vaddr0 与 vaddr1 结构：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        dma_addr0 </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">     dma_addr1 </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hi</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b   </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  mb0</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">     hi</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b     </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> mb1</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lo</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b   </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  mb0</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">     lo</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b     </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> mb1</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain">                      </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>6.4 使用 dma_addr0 加上 hdr_room 将地址指向 dataroom 的物理地址</strong></p><p>向量函数代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* add headroom to pa values */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dma_addr0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_add_epi64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dma_addr0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hdr_room</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dma_addr1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_add_epi64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dma_addr1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hdr_room</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行上述操作后的值：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    dma_addr0 </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain">        dma_addr</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hi</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b   </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  mb0</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> hdr_room </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">      hi</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b   </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> mb1</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> hdr_room </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    lo</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b   </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  mb0</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> hdr_room </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">      lo</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">b   </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> mb1</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> hdr_room </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">                   </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>6.5 将 dma_addr 存储到描述符中</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* flush desc with pa dma_addr */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">_mm_store_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rxdp</span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dma_addr0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">_mm_store_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rxdp</span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dma_addr1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>rx_desc 中报文地址相关定义：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        __le64 pkt_addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Packet buffer address */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le64 hdr_addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Header buffer address */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>普通收包函数中设置内容：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">         * fill the read format of descriptor with physic address in</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">         * new allocated mbuf: nmb</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">         */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rxdp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hdr_addr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rxdp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">read</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pkt_addr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dma_addr</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>普通收包函数中 <strong>hdr_addr 设置为 0，sse 中却设定为了 dma_addr，这里有机关！</strong></p><p><strong>6.6 更新软件变量值</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="7-判断当前描述符的-dd-位是否为-1为-1-表示至少有一个报文">7. 判断当前描述符的 dd 位是否为 1，为 1 表示至少有一个报文<a class="hash-link" href="#7-判断当前描述符的-dd-位是否为-1为-1-表示至少有一个报文" title="标题的直接链接">​</a></h3><h3 class="anchor anchorWithStickyNavbar_LWe7" id="8-开始批量从-rx-desc-向-mbuf-转换">8. 开始批量从 rx desc 向 mbuf 转换<a class="hash-link" href="#8-开始批量从-rx-desc-向-mbuf-转换" title="标题的直接链接">​</a></h3><p><strong>转换前添加如下断言，确保 mbuf 中字段的偏移正确。</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * Compile-time verify the shuffle mask</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * NOTE: some field positions already verified above, but duplicated</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * here for completeness in case of future modifications.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_BUILD_BUG_ON</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pkt_len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rx_descriptor_fields1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_BUILD_BUG_ON</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> data_len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rx_descriptor_fields1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_BUILD_BUG_ON</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> vlan_tci</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rx_descriptor_fields1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_BUILD_BUG_ON</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hash</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rx_descriptor_fields1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">12</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用向量指令从描述符转化为-mbuf-的关键过程"><strong>使用向量指令从描述符转化为 mbuf 的关键过程</strong><a class="hash-link" href="#使用向量指令从描述符转化为-mbuf-的关键过程" title="标题的直接链接">​</a></h2><p><strong>1. 进入 for 循环，每次处理 4 个描述符，填充 4 个 mbuf（此处假定为这种情况）</strong>
<strong>2. 加载描述符中的 mbuf 与描述符内容到 128-bit 变量中</strong></p><p><strong>一个 128-bit 加载两个 mbuf 地址</strong>：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">     mbp1 </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     hi</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> sw_ring</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     lo</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> sw_ring</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf     </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     mbp2 </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     hi</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> sw_ring</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     lo</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain">    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> sw_ring</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>加载四个描述符到四个 128-bit 的 desc 变量中：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_loadu_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rxdp </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_compiler_barrier</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* B.2 copy 2 64 bit or 4 32 bit mbuf point into rx_pkts */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">_mm_storeu_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rx_pkts</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> mbp1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_loadu_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rxdp </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_compiler_barrier</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* B.1 load 2 mbuf point */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_loadu_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rxdp </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_compiler_barrier</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_loadu_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rxdp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在每个 desc 加载时都添加了<strong>编译屏障，避免优化产生问题</strong>，加载后 desc 结构：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> rxdp</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> rxdp</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> rxdp</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> rxdp</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>接收描述符定义：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">union</span><span class="token plain"> ice_32b_rx_flex_desc </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le64 pkt_addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Packet buffer address */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le64 hdr_addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Header buffer address */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 </span><span class="token comment" style="color:#999988;font-style:italic">/* bit 0 of hdr_addr is DD bit */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le64 rsvd1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le64 rsvd2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> read</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 0 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 rxdid</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* descriptor builder profile ID */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 mir_id_umb_cast</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* mirror=[5:0], umb=[7:6] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 ptype_flex_flags0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* ptype=[9:0], ff0=[15:10] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 pkt_len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* [15:14] are reserved */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 hdr_len_sph_flex_flags1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* header=[10:0] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token comment" style="color:#999988;font-style:italic">/* sph=[11:11] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token comment" style="color:#999988;font-style:italic">/* ff1/ext=[15:12] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 1 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 status_error0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 l2tag1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 2 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 status_error1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 flex_flags2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 time_stamp_low</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 l2tag2_1st</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 l2tag2_2nd</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 3 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta3</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">union</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                __le16 flex_meta4</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                __le16 flex_meta5</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> flex</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __le32 ts_high</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> flex_ts</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> wb</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* writeback */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>单个 desc 加载后内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> Qword </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">   hi</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> Qword </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">   lo</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">64</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>注意顺序为从高地址向低地址加载</strong>。</p><p><strong>3. 将 mbuf 地址填充到 rx_pkts 数组中</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* B.2 copy 2 64 bit or 4 32 bit mbuf point into rx_pkts */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">_mm_storeu_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rx_pkts</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> mbp1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* B.2 copy 2 mbuf point into rx_pkts  */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">_mm_storeu_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rx_pkts</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pos </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> mbp2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>4. 当设置了 split_packet 后，预取 mbuf 中的第二个 cache line</strong></p><p>   在 mbuf 结构中使用不占空间的变量标识每一个 cache line 的起始位置。</p><p><strong>5. 将 desc 中的字段填充到 pktmbuf 中</strong></p><p>向量函数代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* D.1 pkt 3,4 convert format from desc to pktmbuf */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pkt_mb3 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_shuffle_epi8</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> shuf_msk</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pkt_mb2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_shuffle_epi8</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> shuf_msk</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* D.1 pkt 1,2 convert format from desc to pktmbuf */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pkt_mb1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_shuffle_epi8</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> shuf_msk</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pkt_mb0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_shuffle_epi8</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> shuf_msk</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* C.1 4=&gt;2 filter staterr info only */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sterr_tmp2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_unpackhi_epi32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* C.1 4=&gt;2 filter staterr info only */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sterr_tmp1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_unpackhi_epi32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>掩码值：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> __m128i shuf_msk </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_set_epi8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* rss hash parsed separately */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">/* octet 10~11, 16 bits vlan_macip */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* octet 4~5, 16 bits data_len */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* skip high 16 bits pkt_len, zero out */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* octet 4~5, low 16 bits pkt_len */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* pkt_type set as unknown */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">/* pkt_type set as unknown */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>rx 描述符与 mbuf 中的相关字段定义摘录：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 0 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 rxdid</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* descriptor builder profile ID */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 mir_id_umb_cast</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* mirror=[5:0], umb=[7:6] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 ptype_flex_flags0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* ptype=[9:0], ff0=[15:10] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 pkt_len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* [15:14] are reserved */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 hdr_len_sph_flex_flags1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* header=[10:0] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token comment" style="color:#999988;font-style:italic">/* sph=[11:11] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token comment" style="color:#999988;font-style:italic">/* ff1/ext=[15:12] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 1 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 status_error0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 l2tag1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">union</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint32_t</span><span class="token plain"> packet_type</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; L2/L3/L4 and tunnel information.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    ...................</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">};</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">uint32_t pkt_len;         /**&lt; Total pkt len: sum of all segments. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">uint16_t</span><span class="token plain"> data_len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Amount of data in segment buffer. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/** VLAN TCI (CPU order), valid if PKT_RX_VLAN is set. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">uint16_t</span><span class="token plain"> vlan_tci</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">union</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">union</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">uint32_t</span><span class="token plain"> rss</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; RSS hash result if RSS enabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行 <strong>__mm_shuffle_epi8</strong> 函数，设置 <strong>pkt_len、data_len、vlan_tci，清空 packet_type、rss</strong>。</p><p>向量函数调用代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pkt_mb3 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_shuffle_epi8</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> shuf_msk</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>调用之后 pkt_mb3 的结构内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pkt_mb3 </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                       </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                       </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">   mbuf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">packet_type</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                       </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                       </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pkt_len low </span><span class="token number" style="color:#36acaa">8</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pkt_len high </span><span class="token number" style="color:#36acaa">8</span><span class="token plain">b</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">   mbuf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pkt_len</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                       </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                       </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pkt_len low </span><span class="token number" style="color:#36acaa">8</span><span class="token plain">b  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">   mbuf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data_len</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pkt_len hith </span><span class="token number" style="color:#36acaa">8</span><span class="token plain">b </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l2tag1 low </span><span class="token number" style="color:#36acaa">8</span><span class="token plain">b   </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">   mbuf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">vlan_tci</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l2tag1 low </span><span class="token number" style="color:#36acaa">8</span><span class="token plain">b   </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                       </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                       </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">   mbuf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rss</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                       </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">                       </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>pkt_mb2、pkt_mb1、pkt_mb0 结构类似</strong>。</p><p><strong>6. 过滤 staterr 信息</strong></p><p><strong>向量函数代码：</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* C.1 4=&gt;2 filter staterr info only */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sterr_tmp2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_unpackhi_epi32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* C.1 4=&gt;2 filter staterr info only */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sterr_tmp1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_unpackhi_epi32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>向量函数含义：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">__m128i </span><span class="token function" style="color:#d73a49">_mm_unpackhi_epi32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __m128i b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">交替高</span><span class="token number" style="color:#36acaa">2</span><span class="token plain">位有符号或无符号</span><span class="token number" style="color:#36acaa">32</span><span class="token plain">bit整数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> a2 </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> b2 </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> a3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> b3 </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>rx desc 中相关结构：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 0 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 rxdid</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* descriptor builder profile ID */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 mir_id_umb_cast</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* mirror=[5:0], umb=[7:6] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 ptype_flex_flags0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* ptype=[9:0], ff0=[15:10] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 pkt_len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* [15:14] are reserved */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 hdr_len_sph_flex_flags1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* header=[10:0] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token comment" style="color:#999988;font-style:italic">/* sph=[11:11] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token comment" style="color:#999988;font-style:italic">/* ff1/ext=[15:12] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 1 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 status_error0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 l2tag1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行后 sterr_tmp2 结构如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">     sterr_tmp2 </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l2tag1 </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> status_error0  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">l2tag1 </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> status_error0  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flex_meta0 </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> flex_meta1 </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flex_meta0 </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> flex_meta1 </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>7. 将 rx olflags 映射到 mbuf 中</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="将四个描述符合并为一个的向量函数逻辑分析">将四个描述符合并为一个的向量函数逻辑分析<a class="hash-link" href="#将四个描述符合并为一个的向量函数逻辑分析" title="标题的直接链接">​</a></h2><p>ice_rx_desc 部分定义：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 0 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 rxdid</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* descriptor builder profile ID */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 mir_id_umb_cast</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* mirror=[5:0], umb=[7:6] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 ptype_flex_flags0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* ptype=[9:0], ff0=[15:10] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 pkt_len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* [15:14] are reserved */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 hdr_len_sph_flex_flags1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* header=[10:0] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token comment" style="color:#999988;font-style:italic">/* sph=[11:11] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token comment" style="color:#999988;font-style:italic">/* ff1/ext=[15:12] */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 1 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 status_error0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 l2tag1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 2 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 status_error1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 flex_flags2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 time_stamp_low</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 l2tag2_1st</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 l2tag2_2nd</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Qword 3 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le16 flex_meta3</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>合并 4 个描述符标志信息的向量函数调用代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* merge 4 descriptors */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flags </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_unpackhi_epi32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp_desc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_unpackhi_epi32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> descs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp_desc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_unpacklo_epi64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flags</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> tmp_desc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tmp_desc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_and_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tmp_desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> desc_mask</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>第一步执行后 flags 的布局:</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">   flags </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status_error0 l2tag1  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status_error0 l2tag1  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flex_meta0 flex_meta1 </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flex_meta0 flex_meta1 </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>第二步执行后 tmp_desc 的布局:</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">   tmp_desc </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status_error0 l2tag1  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status_error0 l2tag1  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flex_meta0 flex_meta1 </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">  desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flex_meta0 flex_meta1 </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>第三步执行后 tmp_desc 的布局:</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">   tmp_desc </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status_error0 l2tag1  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status_error0 l2tag1  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status_error0 l2tag1  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> desc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status_error0 l2tag1  </span><span class="token operator" style="color:#393A34">|</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>desc_mask 内容：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* mask everything except checksum, RSS and VLAN flags.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * bit6:4 for checksum.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * bit12 for RSS indication.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * bit13 for VLAN indication.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> __m128i desc_mask </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_set_epi32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0x3070</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x3070</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token number" style="color:#36acaa">0x3070</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x3070</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>合并操作后，设置四个描述符中 checksum、rss、vlan 的值。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="发包函数实现分析">发包函数实现分析<a class="hash-link" href="#发包函数实现分析" title="标题的直接链接">​</a></h2><p>tx 的逻辑非常简单，要用 mbuf 中的字段填充一个 ice_tx_desc 结构，使用到的 sse 向量函数逻辑：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">ice_vtx1</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ice_tx_desc</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">txdp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pkt</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">uint64_t</span><span class="token plain"> flags</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint64_t</span><span class="token plain"> high_qw </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ICE_TX_DESC_DTYPE_DATA </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint64_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">flags  </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> ICE_TXD_QW1_CMD_S</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint64_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">pkt</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data_len </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> ICE_TXD_QW1_TX_BUF_SZ_S</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    __m128i descriptor </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_mm_set_epi64x</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">high_qw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                pkt</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> pkt</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data_off</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">_mm_store_si128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__m128i </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">txdp</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> descriptor</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>ice_tx_desc 结构：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/* Tx Descriptor */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ice_tx_desc</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le64 buf_addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Address of descriptor's data buf */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __le64 cmd_type_offset_bsz</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>发包函数需要填充 <strong>mbuf dataroom 起始地址的物理地址以及一些发送标志到发送描述符中</strong>，ice_tx_desc 为 128bit，填充一次就能够存储这两个字段。</p><h1>总结</h1><p>dpdk 内部向量收发包函数使用<strong>硬件向量指令</strong>优化传统的收发包过程，主要的优化内容集中在<strong>收包逻辑上</strong>，发包的主要过程为 dma 操作，优化空间非常有限。</p><p>dpdk 收发包 burst 过程是一个非常代表性的批量化处理场景，将<strong>硬件向量指令集成到批量化上</strong>，带来了<strong>小包性能的显著提升</strong>以及程序 cpu 占用率的下降，是<strong>挖掘硬件特性</strong>达成性能优化的一个很好的案例。</p><p>同时需要说明的是 dpdk 使用向量收发包函数<strong>需要满足一定的条件</strong>，这个条件因<strong>网卡不同</strong>而有所区别，这些条件包括了 dpdk 接口初始化时配置的一些硬件卸载功能，需要非常注意！</p><p><strong>备注：dpdk 内部不直接使用向量指令而是通过使用一层封装函数来间接调用！</strong></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 死锁问题后续之初始化假设不可迁移问题]]></title>
        <id>/dpdk/dpdk 死锁问题后续之初始化假设不可迁移问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 死锁问题后续之初始化假设不可迁移问题"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="标题的直接链接">​</a></h2><p>在 <a href="https://blog.csdn.net/Longyu_wlz/article/details/124261738" target="_blank" rel="noopener noreferrer">程序启动顺序引发的血案之 dpdk 进程死锁</a> 这篇博客中，我描述了 dpdk 多进程之间共享的用户态锁在临界区被异常杀死后无法再获取到锁的问题。修改的方案是将这些在多个进程之间共享的锁修改为 pthread mutex 互斥锁。</p><p>前期的测试验证与代码 review 及集成测试都没有发现异常，最近却发现又出现了死锁的问题。最开始我的想法是现在使用了 mutex 锁，出现了死锁也能够找到是谁占有了锁，问题应该不太困难，实际操作起来却发现有些想当然。</p><p>在本文中我将完整地描述这一新死锁问题定位的过程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>问题的表面现象是某个运行在 docker 容器内的 dpdk 业务程序一直无法启动，使用 gdb 查看调用栈，发现卡在如下位置处：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff14034ed</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">__lll_lock_wait</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from target</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib64</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libpthread</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><span class="token punctuation" style="color:#393A34">.</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">1</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff13fedcb</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">_L_lock_883</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from target</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib64</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libpthread</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><span class="token punctuation" style="color:#393A34">.</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">2</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff13fec98</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">pthread_mutex_lock</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from target</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib64</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libpthread</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><span class="token punctuation" style="color:#393A34">.</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff22267d9</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_mutex_lock</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from target</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib64</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libdpdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">4</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff223835f</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">malloc_heap_alloc</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from target</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib64</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libdpdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">5</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff2233337</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_malloc_socket</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from target</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib64</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libdpdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">6</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff223bd1d</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_service_init</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from target</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib64</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libdpdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">7</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff22160c1</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_eal_init</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from target</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib64</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libdpdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x000000000043e51d</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">main</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>rte_mutex_lock 函数是对 pthread_mutex_lock</strong> 函数的【封装】，从函数调用栈上看，进程无法正常启动的原因是无法成功获取到 mutex 锁。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题定位过程">问题定位过程<a class="hash-link" href="#问题定位过程" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-哪一把锁获取不到">1. 哪一把锁获取不到？<a class="hash-link" href="#1-哪一把锁获取不到" title="标题的直接链接">​</a></h3><p>相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/* this will try lower page sizes first */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">malloc_heap_alloc_on_heap_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">type</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">size_t</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> heap_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> flags</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">size_t</span><span class="token plain"> align</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">size_t</span><span class="token plain"> bound</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bool contig</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mem_config</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">mcfg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eal_get_configuration</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mem_config</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">malloc_heap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">heap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">mcfg</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">malloc_heaps</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">heap_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> size_flags </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> flags </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">~</span><span class="token plain">RTE_MEMZONE_SIZE_HINT_ONLY</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> socket_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_spinlock_lock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">heap</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>确认是获取不到 rte_mem_config 中某个 malloc_heaps 的多进程共享锁。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-获取不到的锁到底是被谁占用的">2. 获取不到的锁到底是被谁占用的？<a class="hash-link" href="#2-获取不到的锁到底是被谁占用的" title="标题的直接链接">​</a></h3><p>编译相同版本的 dpdk-procinfo 调试获取到如下信息：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> bt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff6eacbfc</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">__lll_lock_wait</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">local</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libpthread</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><span class="token punctuation" style="color:#393A34">.</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">1</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff6ea84df</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">_L_lock_520</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">local</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libpthread</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><span class="token punctuation" style="color:#393A34">.</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">2</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff6ea82df</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">pthread_mutex_lock</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> from </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">local</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">libpthread</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">so</span><span class="token punctuation" style="color:#393A34">.</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000066e3b9</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_mutex_lock</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x3fffdcffd180</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">eal_common_mcfg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">93</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">4</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000067ff3f</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">malloc_heap_alloc_on_heap_id</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">contig</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bound</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> align</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> flags</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> heap_id</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8192</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> type</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x3fffdcffa000</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\356o.\001c\001\v\023\004"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">malloc_heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">646</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">5</span><span class="token plain">  </span><span class="token function" style="color:#d73a49">malloc_heap_alloc</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">type@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0xc02a2e</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_services"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8192</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket_arg</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">optimized out</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket_arg@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> flags</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">flags@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> align</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bound</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">bound@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    contig</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">malloc_heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">724</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">6</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000067af17</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_malloc_socket</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">type@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0xc02a2e</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_services"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">size@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8192</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> align</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">align@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket_arg</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">optimized out</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket_arg@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte_malloc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">60</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">7</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000067afa5</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_zmalloc_socket</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">type@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0xc02a2e</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_services"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">size@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8192</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> align</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">align@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">socket@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte_malloc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">79</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">8</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000067afba</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_zmalloc</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">type@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0xc02a2e</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_services"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">size@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8192</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> align</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">align@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte_malloc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">99</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">9</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000067afee</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_calloc</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">type@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0xc02a2e</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_services"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> num</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">num@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">size@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">128</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> align</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">align@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte_malloc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">117</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x00000000006838fd</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_service_init</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte_service</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">84</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">11</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x000000000065dca1</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_eal_init</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">optimized out</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> argv</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">optimized out</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">linux</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">eal</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">1266</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">12</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0000000000558a1c</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">main</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> argv</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x7fffffffe8c8</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">app</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">proc</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">info</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">main</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">1771</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> frame </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000066e3b9</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_mutex_lock</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x3fffdcffd180</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">eal_common_mcfg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">93</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">93</span><span class="token plain">      dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">eal_common_mcfg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> No such file or directory</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> print mutex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">pthread_mutex_t</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x3fffdcffd180</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> print </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">mutex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$</span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">__data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">__lock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14901</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __nusers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __kind </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __spins </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __list </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">__prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  __size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\002\000\000\000\000\000\000\000\065:\000\000\001"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token char">'\000'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">repeats </span><span class="token number" style="color:#36acaa">26</span><span class="token plain"> times</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __align </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>由于我对 mutex 中不同结构的含义并不清楚，我先在本地写了一个简单的 demo，然后观察占有了锁之后 mutex 一些字段的含义，确认 <strong>__owner</strong> 字段表示【占有锁的线程、进程 id】。</p><p>于是能够确认这把锁被 <strong>14901</strong> 线程持有，然而这个线程在系统中<strong>并不存在</strong>，也没有看到其它的异常信息，表明这个进程早已经被 kill 掉了。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-gdb-查看-rte_mem_config-文件的内容">3. gdb 查看 rte_mem_config 文件的内容<a class="hash-link" href="#3-gdb-查看-rte_mem_config-文件的内容" title="标题的直接链接">​</a></h3><p>曾经定位过一个 rte_mem_config文件内容被破坏导致死锁的问题，此后每次都会先确认下 rte_mem_config 文件的内容是否正常。于是用 gdb 打印相关信息，部分摘录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> print </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">x  </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rte_config</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mem_config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$</span><span class="token number" style="color:#36acaa">9</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  magic </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x12e6fee</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x130b0163</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  nchannel </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  nrank </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  mlock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    __data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      __lock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      __count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      __owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      __nusers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      __kind </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x90</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      __spins </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      __list </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    __size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">repeats </span><span class="token number" style="color:#36acaa">11</span><span class="token plain"> times</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x90</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">repeats </span><span class="token number" style="color:#36acaa">23</span><span class="token plain"> times</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    __align </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x100000000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  memzones </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x65</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x7a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6f</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6e</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x65</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">repeats </span><span class="token number" style="color:#36acaa">57</span><span class="token plain"> times</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x27</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xa00</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    elt_sz </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x48</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x3fffdd000000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rwlock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      __data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __lock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __nusers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __kind </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x90</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __spins </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __list </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      __size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">repeats </span><span class="token number" style="color:#36acaa">11</span><span class="token plain"> times</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x90</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">repeats </span><span class="token number" style="color:#36acaa">23</span><span class="token plain"> times</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      __align </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x100000000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  memsegs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        base_va </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x3fffdd200000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        addr_64 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x3fffdd200000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      page_sz </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x200000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      socket_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xa1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x400000000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      external </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      heap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      memseg_arr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x65</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x73</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x65</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x67</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x2d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x32</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x30</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x34</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x38</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6b</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x2d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x30</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x2d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x30</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">repeats </span><span class="token number" style="color:#36acaa">48</span><span class="token plain"> times</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1b</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x2000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        elt_sz </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x30</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x3fffdd02e000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rwlock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __lock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __nusers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __kind </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x90</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __spins </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __list </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              __prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              __next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">repeats </span><span class="token number" style="color:#36acaa">11</span><span class="token plain"> times</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x90</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">repeats </span><span class="token number" style="color:#36acaa">23</span><span class="token plain"> times</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __align </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x100000000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  malloc_heaps </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      lock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __lock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x3a35</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __nusers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __kind </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __spins </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __list </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0x2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x35</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x3a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">repeats </span><span class="token number" style="color:#36acaa">27</span><span class="token plain"> times</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __align </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>初次浏览并没有发现啥异常，但其实问题已经隐含在上面收集的信息里了，这里容我先卖个关子，这样才更贴切定位此问题的真实过程。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-还能做些什么">4. 还能做些什么？<a class="hash-link" href="#4-还能做些什么" title="标题的直接链接">​</a></h3><p>定位到这一步，尽管能够确定锁确实是被其它进程占用而无法被获取到，但占用进程早已经<strong>消失得无影无踪</strong>，只留下个无用的现场根本定位不了问题。于是我判断已经啥都做不了了，只能先恢复环境继续测试了。</p><p>同时我想到了如下几个问题：</p><ol><li><p>需要确定占着锁的进程到底是哪个，重新复现问题，复现前不断 ps aux 保存结果，问题复现后即可以判断是哪个程序没有释放</p><p>做这个测试的目的主要是为了缩小范围，却并不能一次就定位到问题。</p></li><li><p>前期对锁异常回收的验证过程是否存在问题？
前期各种临界区异常退出都测试过，均测试通过，存在问题的概率很小。</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题出现几次后发现的关键信息">问题出现几次后发现的关键信息<a class="hash-link" href="#问题出现几次后发现的关键信息" title="标题的直接链接">​</a></h2><p>此后，问题又复现了几次，每次复现时，我基本上都查看类似的信息，查看了几次后，我突然发现了一个明显的问题——malloc_heaps 中的 mutex lock 的 <strong>__kind</strong> 字段为 0x0，而其它类似的 <strong>mutex lock</strong> 的 <strong>__kind</strong> 字段为 <strong>0x90</strong>。重新翻了下几次复现时收集到的信息，发现都有这个特征。上文中卖的关子到此揭晓。</p><p>具体的对比如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">   rwlock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __lock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __nusers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __kind </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x90</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __spins </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __list </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              __prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              __next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">malloc_heaps </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      lock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __lock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x3a35</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __nusers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __kind </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __spins </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          __list </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            __next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当时我在尝试用 mutex 替换 dpdk 多进程之间用户态锁时曾经分析过 <strong>__kind</strong> 这个字段，确定它是<strong>在设置 mutex 属性的时候被赋值</strong>。</p><p>对于 dpdk 多进程共享锁的场景，<strong>初始化 mutex 锁的时候需要设定 PTHREAD_PROCESS_SHARED 与 PTHREAD_MUTEX_ROBUST 属性</strong>，正常的 <strong>__kind</strong> 应该是 <strong>0x90</strong>。</p><p>在这个问题里这把 mutex 锁【未初始化】就被使用，它不支持异常回收，这样在获取到这把锁后没有释放锁进程就被异常杀死时就会导致其它需要再次获取这把锁的进程死锁。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="存在问题的代码在哪里">存在问题的代码在哪里？<a class="hash-link" href="#存在问题的代码在哪里" title="标题的直接链接">​</a></h2><p>阅读代码，确认如下 dpdk 代码存在问题：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_eal_malloc_heap_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mem_config</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">mcfg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eal_get_configuration</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mem_config</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">internal_config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">match_allocations</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">DEBUG</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EAL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Hugepages will be freed exactly as allocated.\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rte_eal_process_type</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_PROC_PRIMARY</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* assign min socket ID to external heaps */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mcfg</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next_socket_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> EXTERNAL_HEAP_MIN_SOCKET_ID</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* assign names to default DPDK heaps */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_socket_count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">malloc_heap</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">heap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">mcfg</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">malloc_heaps</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> heap_name</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">RTE_HEAP_NAME_MAX_LEN</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> socket_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_socket_id_by_idx</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">snprintf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">heap_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">heap_name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token string" style="color:#e3116c">"socket_%i"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">strlcpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">heap</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> heap_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_HEAP_NAME_MAX_LEN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            heap</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">socket_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> socket_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk 原生使用 <strong>spinlock</strong> 保护 <strong>malloc_heaps</strong> 结构，<strong>spinlock</strong> 的初始化值为 0。由于 rte_mem_config 中 malloc_heaps 所有字段的初值就是 0，所以它并没有显示调用 rte_spinlock_init 函数来初始化 spinlock，<strong>而rte_spinlock_init 本身就会将 spinlock cnt 值初始化为 0，没有初始化也不影响正常执行。</strong></p><p>但是当把 <strong>spinlock</strong> 换为 <strong>mutex</strong> 时就【必须初始化】，不然锁【不能回收】，这样进程在临界区中被杀掉就会导致死锁，这就是本文所描述问题的根本原因。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="本地模拟问题">本地模拟问题<a class="hash-link" href="#本地模拟问题" title="标题的直接链接">​</a></h2><p>将 dpdk 代码修改如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Index</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">malloc_heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">malloc_heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">malloc_heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">645</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">645</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">12</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">#ifndef F_OK</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">#define F_OK </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">#endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">access</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/tmp/abnormal_exit"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> F_OK</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">               </span><span class="token function" style="color:#d73a49">exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        align </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> align </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> align</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试步骤：</p><ol><li>重新编译 dpdk 后运行 l2wd</li><li>创建 /tmp/abnormal_exit</li><li>运行 dpdk-procinfo</li><li>重新运行 dpdk-procinfo</li></ol><p>dpdk-procinfo 测试过程记录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@debian</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">home</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">longyu</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">lock</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">test# touch </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">tmp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">abnormal_exit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@debian</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">home</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">longyu</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">lock</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">test# </span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">procinfo </span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">--</span><span class="token plain">stats</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Detected </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Detected </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> NUMA nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Multi</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">process socket </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">var</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">run</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">mp_socket_3885_1494910686fd8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Selected IOVA mode </span><span class="token char">'PA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Probing VFIO support</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@debian</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">home</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">longyu</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">lock</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">test# gdb </span><span class="token operator" style="color:#393A34">--</span><span class="token plain">args </span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">procinfo </span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">--</span><span class="token plain">stats</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GNU </span><span class="token function" style="color:#d73a49">gdb</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Debian </span><span class="token number" style="color:#36acaa">10.1</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1.7</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10.1</span><span class="token number" style="color:#36acaa">.90</span><span class="token number" style="color:#36acaa">.20210103</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Reading symbols from </span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">procinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Continuing</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Detected </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Detected </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> NUMA nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">New Thread </span><span class="token number" style="color:#36acaa">0x7ffff77e3700</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LWP </span><span class="token number" style="color:#36acaa">3905</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Multi</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">process socket </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">var</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">run</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">mp_socket_3901_1494f794ad440</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">New Thread </span><span class="token number" style="color:#36acaa">0x7ffff6fe2700</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LWP </span><span class="token number" style="color:#36acaa">3906</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Selected IOVA mode </span><span class="token char">'PA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Probing VFIO support</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">^</span><span class="token plain">C</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Thread </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"dpdk-procinfo"</span><span class="token plain"> received signal SIGINT</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Interrupt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">__lll_lock_wait</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">futex</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">futex@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x3ffe92ffd180</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> private</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at lowlevellock</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">52</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">52</span><span class="token plain">      lowlevellock</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> No such file or directory</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> bt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token function" style="color:#d73a49">__lll_lock_wait</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">futex</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">futex@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x3ffe92ffd180</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> private</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at lowlevellock</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">52</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">1</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00007ffff79d5843</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">__GI___pthread_mutex_lock</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">mutex@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x3ffe92ffd180</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">nptl</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">pthread_mutex_lock</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">80</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">2</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000066e3b9</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_mutex_lock</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">mutex@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x3ffe92ffd180</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">eal_common_mcfg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">93</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">3</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000067ff51</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">malloc_heap_alloc_on_heap_id</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">contig</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bound</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> align</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> flags</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> heap_id</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8192</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    type</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x3ffe92ffd180</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\002"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">malloc_heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">646</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">4</span><span class="token plain">  </span><span class="token function" style="color:#d73a49">malloc_heap_alloc</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">type@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0xc02a7e</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_services"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8192</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket_arg</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">optimized out</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket_arg@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flags</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">flags@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> align</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bound</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">bound@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> contig</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">malloc_heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">730</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">5</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000067af17</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_malloc_socket</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">type@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0xc02a7e</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_services"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">size@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8192</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> align</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">align@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    socket_arg</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">optimized out</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket_arg@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte_malloc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">60</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">6</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000067afa5</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_zmalloc_socket</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">type@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0xc02a7e</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_services"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">size@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8192</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> align</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">align@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    socket</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">socket@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte_malloc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">79</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">7</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000067afba</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_zmalloc</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">type@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0xc02a7e</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_services"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">size@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8192</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> align</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">align@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte_malloc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">99</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">8</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000067afee</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_calloc</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">type</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">type@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0xc02a7e</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_services"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> num</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">num@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">size@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">128</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    align</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">align@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte_malloc</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">117</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">9</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000068392d</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_service_init</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte_service</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">84</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x000000000065dca1</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_eal_init</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">optimized out</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> argv</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">optimized out</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">linux</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">eal</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">1266</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">11</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0000000000558a1c</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">main</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> argv</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x7fffffffe5b8</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">app</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">proc</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">info</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">main</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">1771</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> frame </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">2</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000066e3b9</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_mutex_lock</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">mutex@entry</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x3ffe92ffd180</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">eal_common_mcfg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">93</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">93</span><span class="token plain">      dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">eal_common_mcfg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> No such file or directory</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> print </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">mutex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">__data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">__lock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3885</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __nusers </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __kind </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __spins </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __list </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">__prev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __next </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  __size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\002\000\000\000\000\000\000\000-\017\000\000\001"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token char">'\000'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">repeats </span><span class="token number" style="color:#36acaa">26</span><span class="token plain"> times</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> __align </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>通过控制 <strong>/tmp/abnormal_exit</strong> 文件的创建触发临界区异常退出，退出后重新运行 <strong>dpdk-procinfo</strong> 程序确认能够复现出与本文描述的问题完全一样的现象，而此时 <strong>3885</strong> 进程已经不存在，锁不能释放。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="修改代码测试">修改代码测试<a class="hash-link" href="#修改代码测试" title="标题的直接链接">​</a></h2><p>测试代码示例如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Index</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">malloc_heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">malloc_heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">common</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">malloc_heap</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">645</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">645</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">12</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">#ifndef F_OK</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">#define F_OK </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">#endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token keyword" style="color:#00009f">if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">access</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/tmp/abnormal_exit"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> F_OK</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">               </span><span class="token function" style="color:#d73a49">exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        align </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> align </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> align</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1391</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1397</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">11</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                        </span><span class="token string" style="color:#e3116c">"socket_%i"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> socket_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token function" style="color:#d73a49">strlcpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">heap</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> heap_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_HEAP_NAME_MAX_LEN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        heap</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">socket_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> socket_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">                       </span><span class="token function" style="color:#d73a49">rte_mutex_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">heap</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>核心修改是在<strong>初始化 malloc_heaps 的时候调用 rte_mutex_init 函数初始化 mutex 互斥锁</strong>。</p><p>重新编译 l2fwd 与 dpdk-procinfo 进行测试，测试步骤如下：</p><ol><li>运行 l2wd</li><li>创建 /tmp/abnormal_exit</li><li>运行 dpdk-procinfo</li><li>删除 /tmp/abnormal_exit 文件并重新运行 dpdk-procinfo</li></ol><p>第四步 dpdk-procinfo 能够正常运行表明锁被释放，问题得到修复！测试过程记录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@debian</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">home</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">longyu</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">lock</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">test# rm </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">rf </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">tmp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">abnormal_exit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@debian</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">home</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">longyu</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">lock</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">test# touch </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">tmp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">abnormal_exit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@debian</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">home</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">longyu</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">lock</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">test# </span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">procinfo </span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">--</span><span class="token plain">stats</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Detected </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Detected </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> NUMA nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Multi</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">process socket </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">var</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">run</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">mp_socket_3936_14a881225806c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Selected IOVA mode </span><span class="token char">'PA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Probing VFIO support</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@debian</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">home</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">longyu</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">lock</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">test# rm </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">rf </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">tmp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">abnormal_exit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@debian</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">home</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">longyu</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">19.11</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">mutex</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">lock</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">test# </span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">procinfo </span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">--</span><span class="token plain">stats</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Detected </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Detected </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> NUMA nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Multi</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">process socket </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">var</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">run</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">mp_socket_3946_14a91b7d40de5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Selected IOVA mode </span><span class="token char">'PA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Probing VFIO support</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> PCI device </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">11.0</span><span class="token plain"> on NUMA socket </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   Invalid NUMA socket</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> to </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   probe driver</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8086</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">100f</span><span class="token plain"> net_e1000_em</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> PCI device </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">12.0</span><span class="token plain"> on NUMA socket </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   Invalid NUMA socket</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> to </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   probe driver</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8086</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">100f</span><span class="token plain"> net_e1000_em</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> PCI device </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">13.0</span><span class="token plain"> on NUMA socket </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   Invalid NUMA socket</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> to </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   probe driver</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8086</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">100f</span><span class="token plain"> net_e1000_em</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ######################## NIC statistics </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> port </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  ########################</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当程序未释放锁退出后，重新运行 dpdk-procinfo 程序能够获得锁，测试通过！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="是否有其它类似问题">是否有其它类似问题？<a class="hash-link" href="#是否有其它类似问题" title="标题的直接链接">​</a></h2><p>review 代码，相关的问题只有一处，其它位置正常初始化。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>尽管本文描述的问题听上去有些高大上，可真正触发问题的点却非常小，尽管它小却也说明了一些关键的问题。</p><p>在编码的时候尽量【不做隐式地假设】，这种假设带来了非常差的扩展性，当其他人改造存在假设的代码时不容易发现这些依赖就可能带来严重的后果。</p><p>除了正向解决这个问题之外，从反面来看其实需要在测试的时候审视相关【修改的一致性】，即运行时<strong>特征字段值的一致性</strong>，而不是只验证功能。拿本文描述的问题来说，就是不同的 mutex 的 __kind 字段的值是否一致。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk 用户态驱动框架及其部分演进过程]]></title>
        <id>/dpdk/dpdk 用户态驱动框架及其演进过程分析</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 用户态驱动框架及其演进过程分析"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[dpdk 用户态驱动框架是 dpdk 相对核心的功能，本文将从老版本驱动框架开始描述，从演进过程中一步步逼近高版本中相对完善的驱动框架的设计原理。]]></summary>
        <content type="html"><![CDATA[<p>dpdk 用户态驱动框架是 dpdk 相对核心的功能，本文将从老版本驱动框架开始描述，从演进过程中一步步逼近高版本中相对完善的驱动框架的设计原理。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-v123-r0-版本">dpdk v1.2.3 r0 版本<a class="hash-link" href="#dpdk-v123-r0-版本" title="标题的直接链接">​</a></h2><p>dpdk git 中最老的版本为 v1.2.3 r0 版本，此版本中用户态驱动框架实现的关键环节如下：</p><ol><li><p>igb_uio 中完成将中断映射到用户态的任务，并填充 uio 结构体中 pci 资源空间的地址与长度，它注册的 pci_driver 中， id_table 字段不为空，其值如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_device_id</span><span class="token plain"> igbuio_pci_ids</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">RTE_PCI_DEV_ID_DECL</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">vend</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> dev</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">{</span><span class="token macro property expression function" style="color:#d73a49">PCI_DEVICE</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">vend</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> dev</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">}</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;rte_pci_dev_ids.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>rte_eal_init 函数中完成扫描 pci 设备的过程，扫描到的 pci 设备会填充到 device_list 链表中，rte_eal_init 函数中并不进行驱动 probe 过程，因为此时还未注册任何一个驱动。</p></li><li><p>这个版本的 dpdk 只支持 igb 与 ixgbe 两个系列的用户态驱动，每个驱动会实现一个注册函数并将注册函数暴露给 dpdk 程序使用，显式完成驱动注册过程。</p></li><li><p>由于驱动注册是在 dpdk 程序中完成的，驱动 probe pci 设备的过程也是在 dpdk 程序中显式调用 probe 函数完成的。</p></li><li><p>rte_eal_pci_probe 函数遍历在 rte_eal_init 中创建的 device_list pci 设备链表，使用这个链表中的每个 pci 设备去 match 注册的 pci 驱动链表。</p></li><li><p>当一个 pci 设备 match 到一个驱动后，首先调用 pci_uio_map_resource 函数来通过 map /dev/uioX 文件来映射 pci 的 resource 资源并填充到 pci 设备结构体中，然后调用 pci 驱动中的 devinit 函数完成接口初始化过程。</p></li><li><p>pci 驱动中并不定义 devinit 函数，它在显示注册驱动时，通过调用 rte_eth_driver_register 函数来设定，其值被设定为 rte_eth_dev_init 函数。</p></li><li><p>第 ６点中描述的 pci 驱动中的 devinit 函数就是第 7 点中的 rte_eth_dev_init 函数，rte_eth_dev_init 函数实现 pci 设备结构体与 dpdk 内部 rte_eth_dev 设备结构体的对接过程。</p></li><li><p>在 pci 这一侧每一个设备由一个 rte_pci_device 结构描述。由于 dpdk 需要对外提供网卡控制接口，这些控制过程中的参数是与驱动无关的，不能通过直接操作 pci 这一层的数据结构来完成，为此 dpdk 在此基础上进行了抽象，抽象出了 rte_eth_dev 设备结构体。</p></li><li><p>每一个 dpdk 初始化的 pci 接口都会分配一个唯一的 rte_eth_dev 结构体，dpdk 内部维护了一个 rte_eth_devices 全局变量，它是一个 rte_eth_dev 结构体数组，每个接口都从这个数组中分配一个 rte_eth_dev 结构体，外部接口通过指定一个 port_id 来让 rte_ethdev 这一层获取到 rte_eth_dev 结构，调用底层的函数来完成功能。</p></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="从-l2fwd-示例程序代码处探究">从 l2fwd 示例程序代码处探究<a class="hash-link" href="#从-l2fwd-示例程序代码处探究" title="标题的直接链接">​</a></h3><p>如下源码摘自此版本的 l2fwd 示例程序：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">/* init EAL */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eal_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> argv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_LIBRTE_IGB_PMD</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rte_igb_pmd_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot init igb pmd\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_LIBRTE_IXGBE_PMD</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rte_ixgbe_pmd_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot init ixgbe pmd\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rte_eal_pci_probe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot probe PCI\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到，igb 网卡与 ixgbe 网卡驱动调用驱动提供的初始化函数来显示注册，注册完成后，调用 rte_eal_pci_probe 来完成 probe 过程。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="eth_driver-结构">eth_driver 结构<a class="hash-link" href="#eth_driver-结构" title="标题的直接链接">​</a></h3><p><strong>此版本仅支持 pci 驱动</strong>，每个驱动需要实例化一个 eth_driver 结构，此结构的定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">eth_driver</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_pci_driver</span><span class="token plain"> pci_drv</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; The PMD is also a PCI driver. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">eth_dev_init_t</span><span class="token plain"> eth_dev_init</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Device init function. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> dev_private_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Size of device private data. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>pci_drv 是对用户态 pci 设备驱动的抽象，eth_dev_init 用户态驱动的初始化函数，dev_private_size 是每个设备的私有数据大小。</p><p>每个驱动都要实例化一个 eth_driver 结构体，并显示的调用注册函数进行注册。igb 网卡的 eth_driver 结构体实例如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">eth_driver</span><span class="token plain"> rte_igb_pmd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_igb_pmd"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id_table </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pci_id_igb_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">drv_flags </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_PCI_DRV_NEED_IGB_UIO</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">eth_dev_init </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> eth_igb_dev_init</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_private_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">e1000_adapter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>由于 eth_driver 结构体的第一个元素为 rte_pci_driver 结构，可以很容易的将一个 eth_driver 结构地址转化为一个 rte_pci_driver 结构地址（通过强转）</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rte_pci_driver-结构">rte_pci_driver 结构<a class="hash-link" href="#rte_pci_driver-结构" title="标题的直接链接">​</a></h3><p>rte_pci_driver 结构是对 pci 驱动的抽象，其定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * A structure describing a PCI driver.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_pci_driver</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">TAILQ_ENTRY</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_pci_driver</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Next in list. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                       </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Driver name. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">pci_devinit_t</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">devinit</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                 </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Device init. function. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_pci_id</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">id_table</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; ID table, NULL terminated. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint32_t</span><span class="token plain"> drv_flags</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                     </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Flags contolling handling of device. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>rte_pci_driver 的 next 字段用于将注册的 pci 驱动串联起来，devinit 函数用于设备初始化。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rte_pci_driver-结构体中的-devinit-函数">rte_pci_driver 结构体中的 devinit 函数<a class="hash-link" href="#rte_pci_driver-结构体中的-devinit-函数" title="标题的直接链接">​</a></h3><p>igb 驱动实现的 rte_pci_driver 结构中并没有设定 devinit 字段，这个字段在 dpdk 程序显式调用 rte_igb_pmd_init 注册 igb 驱动的时候被赋值。</p><p>rte_igb_pmd_init 函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_igb_pmd_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_eth_driver_register</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rte_igb_pmd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>rte_eth_driver_register 函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_eth_driver_register</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">eth_driver</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">eth_drv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    eth_drv</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pci_drv</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">devinit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rte_eth_dev_init</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_eal_pci_register</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">eth_drv</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pci_drv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如上代码能够说明 rte_pci_driver 中的 devinit 函数在驱动显示注册时被赋值为 rte_eth_dev_init 函数，那么 <strong>eth_driver 中注册的 eth_dev_init 函数在哪里被调用呢？</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rte_eth_dev_init-函数">rte_eth_dev_init 函数<a class="hash-link" href="#rte_eth_dev_init-函数" title="标题的直接链接">​</a></h3><p>eth_driver 结构体中注册的 eth_dev_init 函数在 rte_eth_dev_init 函数中被调用，rte_eth_dev_init 函数的代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_eth_dev_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_pci_driver</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pci_drv</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_pci_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pci_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">eth_driver</span><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">eth_drv</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">eth_dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> diag</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    eth_drv </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">eth_driver</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">pci_drv</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    eth_dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_allocate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eth_dev </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENOMEM</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rte_eal_process_type</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_PROC_PRIMARY</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        eth_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_private </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_zmalloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ethdev private structure"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  eth_drv</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_private_size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  CACHE_LINE_SIZE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eth_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_private </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENOMEM</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    eth_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pci_dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pci_dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    eth_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">driver </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> eth_drv</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    eth_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_mbuf_alloc_failed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* init user callbacks */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">TAILQ_INIT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eth_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">callbacks</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * Set the default maximum frame size.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    eth_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">max_frame_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETHER_MAX_LEN</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* Invoke PMD device initialization function */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    diag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">eth_drv</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">eth_dev_init</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eth_drv</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> eth_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">diag </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">PMD_DEBUG_TRACE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"driver %s: eth_dev_init(vendor_id=0x%u device_id=0x%x)"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">" failed\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pci_drv</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> pci_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vendor_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> pci_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">device_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rte_eal_process_type</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_PROC_PRIMARY</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eth_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_private</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nb_ports</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> diag</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此函数中首先为当前的 pci 设备分配一个 rte_eth_dev 结构，然后使用 eth_drv 结构体中定义的 dev_private_size 字段来创建驱动内部数据结构。</p><p>此后，继续初始化 rte_eth_dev 结构体中的字段，最后调用 eth_driver 结构体中的 eth_dev_init 函数指针指向的函数，完成接口底层初始化过程。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="以一个-igb-网卡接口来串起-dpdk-v123-r0-版本接口初始化的整个过程">以一个 igb 网卡接口来串起 dpdk v1.2.3 r0 版本接口初始化的整个过程<a class="hash-link" href="#以一个-igb-网卡接口来串起-dpdk-v123-r0-版本接口初始化的整个过程" title="标题的直接链接">​</a></h3><p>假定某 linux 系统中有一个 igb 网卡，它只有两个口，这两个口的 pci 号分别为 0000:01:00.0、0000:01:00.1，0000:01:00.0 这个口由内核驱动接管，0000:01:00.1 这个口用于 dpdk 转包（确认 igb_uio 网卡支持此网卡）。</p><p>假定 igb_uio 驱动正常加载，大页内存正常配置，分析模型基于 primary 进程。</p><p>下面是具体过程：</p><ol><li><p>将 0000:01:00.1 从 igb 驱动解绑</p></li><li><p>将 0000:01:00.1 写入到 /sys 目录中 igb_uio 的 bind 文件中，绑定接口到 igb_uio，绑定后 /dev/uio0 文件被创建，/sys 目录中相应的文件被创建，uio map 地址相关文件被创建，示例内容如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># pwd</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/sys/bus/pci/drivers/igb_uio/0000:01:00.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># cat ./uio/uio0/maps/map0/addr ./uio/uio0/maps/map0/name  ./uio/uio0/maps/map0/size ./uio/uio0/maps/map0/offset</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0xfebf3000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BAR1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>dpdk 程序调用 rte_eal_init 初始化，扫描 /sys/bus/pci/devices 目录，解析子目录 0000:01:00.1 中的文件，填充到一个新创建的 rte_pci_device 结构体中，填充完成后将此结构体链入到 device_list 设备链表中。0000:01:00.1 目录中的重要文件含义见下表：</p><table><thead><tr><th>file</th><th>function</th></tr></thead><tbody><tr><td>class</td><td>PCI class (ascii, ro)</td></tr><tr><td>config</td><td>PCI config space (binary, rw)</td></tr><tr><td>device</td><td>PCI device (ascii, ro)</td></tr><tr><td>enable</td><td>Whether the device is enabled (ascii, rw)</td></tr><tr><td>irq</td><td>IRQ number (ascii, ro)</td></tr><tr><td>local_cpus</td><td>nearby CPU mask (cpumask, ro)</td></tr><tr><td>remove</td><td>remove device from kernel's list (ascii, wo)</td></tr><tr><td>resource</td><td>PCI resource host addresses (ascii, ro)</td></tr><tr><td>resource0..N</td><td>PCI resource N, if present (binary, mmap, rw<!-- -->[1]<!-- -->)</td></tr><tr><td>resource0_wc..N_wc</td><td>PCI WC map resource N, if prefetchable (binary, mmap)</td></tr><tr><td>rom</td><td>PCI ROM resource, if present (binary, ro)</td></tr><tr><td>subsystem_device</td><td>PCI subsystem device (ascii, ro)</td></tr><tr><td>subsystem_vendor</td><td>PCI subsystem vendor (ascii, ro)</td></tr><tr><td>vendor</td><td>PCI vendor (ascii, ro)</td></tr></tbody></table></li><li><p>dpdk 程序执行 rte_igb_pmd_init 注册 igb 驱动，rte_igb_pmd 结构体中 pci_drv 结构的 devinit 函数指针被设置为 rte_eth_dev_init 函数。</p></li><li><p>dpdk 程序调用 rte_eal_pci_probe 函数完成驱动 probe 过程，rte_eal_pci_probe 函数依次遍历 device_list 链表，获取到 0000:01:00.1 接口填充的 rte_pci_device 结构体，然后调用 pci_probe_all_drivers 函数完成驱动 probe 过程。</p></li><li><p>pci_probe_all_drivers 函数遍历 driver_list 链表，首先判断当前设备是否被加入到黑名单，是则跳过此设备，这里由于程序执行时没有配置黑名单，不会走入这个逻辑。</p></li><li><p>pci_probe_all_drivers 函数获取到注册的 igb 驱动的 rte_pci_driver 结构，使用此结构与 rte_pci_device 结构为参数调用 rte_eal_pci_probe_one_driver 函数</p></li><li><p>rte_eal_pci_probe_one_driver 函数使用 rte_pci_device 结构体中保存的设备的 vendor id 与 device id 在 pci_id_igb_map 列表中进行匹配，成功匹配后调用 pci_uio_map_resource 来 mmap pci resource 地址到用户态中。</p></li><li><p>pci_uio_map_resource 首先找到并解析 /sys/bus/pci/drivers/igb_uio/0000:01:00.0/uio/uio0/maps/map0/ 下的 offset 与 size 文件，获取 pci resource 的偏移与大小，解析到 offset 为 0x0，size 为 0x1000，打开 /dev/uio0 文件，通过 mmap 映射 pci resource 到用户态中。</p></li><li><p>mmap 成功后得到的虚拟地址填充到 rte_pci_device 中的 mem_resource.addr 中，然后创建一个 uio_res 结构，保存映射后的虚拟地址与 offset、size，并填充 path 与 pci_addr 唯一标识到 uio_res 结构，最后将此结构链入到 uio_res_list 链表中。</p></li><li><p>再次回到 rte_eal_pci_probe_one_driver 中，调用 pci_drv 中的 devinit 函数，即 rte_eth_dev_init 函数。</p></li><li><p>rte_eth_dev_init 函数填充当前接口的 rte_eth_dev 结构体后调用 eth_igb_dev_init 函数。</p></li><li><p>eth_igb_dev_init 函数继续初始化 rte_eth_dev 结构中与驱动相关的重要数据结构，将 rte_eth_dev_init 函数中创建的驱动内部数据结构地址 eth_dev-&gt;data-&gt;dev_private 转化为 e1000_adapter 结构，并获取 e1000_adpater 结构体中 e1000_hw 的地址，完成后将第 10 步中 mmap 到的 pci resource 地址赋值给 hw-&gt;hw_addr 结构，此后读写网卡寄存器都是以这个 hw_addr 为基地址完成的。</p></li><li><p>eth_igb_dev_init 完成硬件初始化过程并注册中断回调函数。</p></li><li><p>dpdk 程序继续调用 rte_ethdev.c 中实现的网卡控制接口，配置网卡的收发队列并将接口 up 起来</p></li><li><p>dpdk 程序完成接口的配置后，派发自己实现的 loop 函数到每个使能的 lcore 线程上，执行收发包过程。</p></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="总结-v123-r0-版本用户态驱动框架关键知识与隐含问题">总结 v1.2.3 r0 版本用户态驱动框架关键知识与隐含问题<a class="hash-link" href="#总结-v123-r0-版本用户态驱动框架关键知识与隐含问题" title="标题的直接链接">​</a></h3><ol><li>v1.2.3 r0 版本通过 mmap /dev/uio 文件来映射 pci resource 资源</li><li>v1.2.3 r0 版本需要显式调用每个驱动的注册函数，扩展性较差，这种架构下每添加一个新类别的驱动，dpdk 程序需要修改源码后重新编译</li><li>rte_eth_driver、rte_pci_driver 中只有初始化函数，没有解初始化函数，缺少主动释放资源的过程</li><li>此版本仅支持 pci 驱动，没有抽象出 bus 层，bus 层功能零散分布在扫描 pci 设备与 probe 设备过程中，不太合理</li><li>缺少 ethtool、ifconfig 等 linux 中传统网络接口控制命令的替代工具</li></ol><p>以上几个问题在后续版本中渐渐完善，下面我将对后续版本中的一些关键修改进行描述。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-v140r0-版本">dpdk v1.4.0r0 版本<a class="hash-link" href="#dpdk-v140r0-版本" title="标题的直接链接">​</a></h2><p>此版本解决了显式调用每个驱动注册函数的问题，向外界提供了 rte_pmd_init_all 接口，适配新的驱动时，不需要修改上层程序的代码，只需要重新链接新的 dpdk 即可。</p><p>rte_pmd_init_all 函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_pmd_init_all</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENODEV</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_LIBRTE_IGB_PMD</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_igb_pmd_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PMD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot init igb PMD\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_igbvf_pmd_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PMD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot init igbvf PMD\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property comment" style="color:#999988;font-style:italic">/* RTE_LIBRTE_IGB_PMD */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_LIBRTE_EM_PMD</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_em_pmd_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PMD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot init em PMD\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property comment" style="color:#999988;font-style:italic">/* RTE_LIBRTE_EM_PMD */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_LIBRTE_IXGBE_PMD</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_ixgbe_pmd_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PMD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot init ixgbe PMD\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_ixgbevf_pmd_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PMD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot init ixgbevf PMD\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property comment" style="color:#999988;font-style:italic">/* RTE_LIBRTE_IXGBE_PMD */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENODEV</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PMD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"No PMD(s) are configured\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个版本增加了对 e1000 与 igb vf、ixgbe vf 驱动的支持，pci resource 地址仍旧通过 mmap /dev/uioX 文件来完成。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-v150r0-版本">dpdk v1.5.0r0 版本<a class="hash-link" href="#dpdk-v150r0-版本" title="标题的直接链接">​</a></h2><p>此版本增加了更多的 pmd 驱动，增加了对诸如 pcap 等非 pci 网卡驱动的支持。非 pci 网卡驱动有单独的初始化函数 rte_eal_non_pci_ethdev_init，此函数在 rte_eal_init 函数中被调用。</p><p>其源码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_eal_non_pci_ethdev_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint8_t</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> NUM_DEV_TYPES</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> RTE_MAX_ETHPORTS</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">params</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> buf</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">rte_snprintf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"%s%"</span><span class="token plain">PRIu8</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    dev_types</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_prefix</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">eal_dev_is_whitelisted</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">params</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                dev_types</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">init_fn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> params</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到它实际是通过遍历 dev_types 这个数组来初始化的，其它的参数通过命令行获取。</p><p>dev_types 数组代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">device_init</span><span class="token plain"> dev_types</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_LIBRTE_PMD_RING</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_prefix </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_RING_PARAM_NAME</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">init_fn </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rte_pmd_ring_init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_LIBRTE_PMD_PCAP</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_prefix </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_PCAP_PARAM_NAME</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">init_fn </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rte_pmd_pcap_init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_prefix </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"-nodev-"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">init_fn </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dev_prefix 用于标识 vdev 驱动，init_fn 是驱动的初始化函数。这样的实现存在的问题是 vdev 与 pci 等物理网卡驱动的注册与初始化过程没有统一，需要一个新的抽象层次来解决这个问题。</p><p>同时，这个版本引入了 kni 模块，当使用了 kni 模块后，支持通过 ethtool、ifconfig 这些标准命令控制网卡接口，弥补了现有工具的不足，同时也打通了 dpdk 程序与内核协议栈的交互过程。</p><p>kni 支持 ethtool 获取数据实质上是维护了一套内核态的驱动，同时为了避免与用户态同时使用造成问题，对内核驱动进行了一系列定制化修改，带来新功能的同时也引入了新的问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-v170">dpdk v1.7.0<a class="hash-link" href="#dpdk-v170" title="标题的直接链接">​</a></h2><p>v1.7.0 对用户态驱动架构进行了较大幅度的调整，抽象出了一个 rte_driver 结构来屏蔽 vdev 与 pdev 的差别，统一了注册过程。</p><p>同时也剔除了显式调用驱动注册函数的实现，改为通过 gcc 的 constructor 属性在 main 函数执行前自动注册，同时 probe 的逻辑也合并到了 rte_eal_init 函数中调用，上层程序对底层驱动的注册与 probe 过程完全不感知。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rte_driver-结构">rte_driver 结构<a class="hash-link" href="#rte_driver-结构" title="标题的直接链接">​</a></h3><p>rte_driver 结构的定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_driver</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">TAILQ_ENTRY</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_driver</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Next in list. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token class-name">pmd_type</span><span class="token plain"> type</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; PMD Driver type */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                   </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Driver name. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">rte_dev_init_t</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">init</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Device init. function. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>next 字段将不同的 rte_driver 链起来，type 字段用于区分 PMD 驱动的类型，如 PDEV、VDEV、BDEV，init 函数是对老版本每个驱动的注册函数的抽象。</p><p>igb pmd 驱动实例化的结构如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">3061</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_driver</span><span class="token plain"> pmd_igb_drv </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3062</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> PMD_PDEV</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3063</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">init </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rte_igb_pmd_init</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3064</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>设定 type 为 PMD_PDEV 表示这是一个物理网卡驱动，init 函数指向 rte_igb_pmd_init，rte_igb_pmd_init 本身完成自老版本继承的 eth_driver 驱动的注册，这里为了实现与 VDEV 驱动注册过程的统一，在每个 PDEV 驱动中使用 eth_driver 驱动的注册接口实例化一个 rte_driver 结构，将此结构在 main 函数之前注册到 dev_driver_list 链表中。</p><p>当 main 函数执行时，dev_driver_list 链表中保存了所有注册的 rte_driver 驱动，这些 rte_driver 驱动能够分为三个类别：</p><ol><li>PDEV 标志的 pci 物理设备驱动实例化的 rte_driver</li><li>VDEV 标志的虚拟设备驱动实例化的 rte_driver</li><li>BDEV 标志 bond 虚拟设备驱动实例化的 rte_driver</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="vdev-类驱动">VDEV 类驱动<a class="hash-link" href="#vdev-类驱动" title="标题的直接链接">​</a></h3><p>VDEV 类驱动的代表是 pcap 驱动，其 rte_driver 结构如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_driver</span><span class="token plain"> pmd_pcap_drv </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"eth_pcap"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> PMD_VDEV</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">init </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rte_pmd_pcap_devinit</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>type 为 PMD_VDEV 表示这是个虚拟网卡驱动，rte_pmd_pcap_devinit 函数实际上就是此驱动的初始化函数，并不需要再进行任何的注册过程。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pdev-类驱动">PDEV 类驱动<a class="hash-link" href="#pdev-类驱动" title="标题的直接链接">​</a></h3><p>PDEV 类驱动的代表是 igb 驱动，这类驱动实例化的 rte_driver 结构中的 init 函数本身又是一个注册 eth_driver 驱动的函数，这就将原来 PDEV 类驱动的注册过程复杂化了，是统一接口带来的一些坏处。</p><p>这时候 PDEV 类驱动的注册过程可以总结为如下步骤：</p><ol><li>实例化 rte_driver 结构，并将 init 函数设定为 eth_driver 函数的注册函数</li><li>通过 PMD_REGISTER_DRIVER 宏注册 rte_driver 结构，此结构在 main 函数执行前被注册到 dev_driver_list 链表中</li><li>rte_eal_init 中遍历 dev_driver_list 链表调用 PDEV 驱动中注册 eth_driver 结构的函数，完成与老版本相同的注册流程</li></ol><p>PMD_REGISTER_DRIVER 宏的原理详见：<a href="https://blog.csdn.net/Longyu_wlz/article/details/113725959?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161961368916780357248787%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=161961368916780357248787&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-113725959.pc_v2_rank_blog_default&amp;utm_term=%E6%9E%84%E9%80%A0" target="_blank" rel="noopener noreferrer">gcc constructor 属性修饰的构造函数未被链接问题</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="bdev-类驱动">BDEV 类驱动<a class="hash-link" href="#bdev-类驱动" title="标题的直接链接">​</a></h3><p>1.7.0 中实现了 bond 虚拟接口驱动，bond 驱动完全是软件实现，但是最初的版本需要将 bond 驱动初始化过程放在 pci 设备 probe 之后来完成其功能，这种特殊的依赖关系催生了 BDEV 类驱动，不过这只是一个中间的过渡版本，后面的版本解决了这个问题，BDEV 与 VDEV 初始化过程得到了统一。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rte_eal_dev_init-函数">rte_eal_dev_init 函数<a class="hash-link" href="#rte_eal_dev_init-函数" title="标题的直接链接">​</a></h3><p>1.7.0 版本实现了驱动的自动注册过程，这一过程可以分为两个阶段，第一个阶段是构造函数执行阶段，第二阶段是 pci 驱动的注册过程。</p><p>第二阶段的注册过程与驱动的 probe 过程都合并到了 rte_eal_init 函数中，上层程序完全不感知。</p><p>rte_eal_init 函数调用 rte_eal_dev_init 函数完成 VDEV 设备的初始化以及 pci 驱动的注册过程，由于 BOND 驱动的特殊性，rte_eal_dev_init 也被划分为了两个阶段。</p><p>PMD_INIT_PRE_PCI_PROBE 阶段初始化那些不依赖 pci 网卡的 VDEV 设备，这一阶段在 pci 设备 probe 之前执行，PMD_INIT_POST_PCI_PROBE 阶段仅用于 bond 设备初始化。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="igb_uio-中移除-pci-id-table">igb_uio 中移除 pci id table<a class="hash-link" href="#igb_uio-中移除-pci-id-table" title="标题的直接链接">​</a></h3><p>1.7.0 版本中 igb_uio 模块注册的 pci 驱动移除了 pci id table，此时绑定网卡到 igb_uio 需要先将网卡的 vendor id 与 device id 拼接得到的字符串写入到 igb_uio 在 /sys 子目录中的 new_id 文件中才能进行绑定。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="vfio-模块的支持">VFIO 模块的支持<a class="hash-link" href="#vfio-模块的支持" title="标题的直接链接">​</a></h3><p>v1.7.0 除了支持 igb_uio 这种标准的 uio 映射 pci 资源空间与中断到用户态外，也支持 vfio 模块。</p><p>我对 vfio 这块没有深入研究，不进一步描述了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="v180">v1.8.0<a class="hash-link" href="#v180" title="标题的直接链接">​</a></h2><p>此版本解决了 bond 功能的限制，统一了所有 VDEV 的初始化过程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-1604">dpdk-16.04<a class="hash-link" href="#dpdk-1604" title="标题的直接链接">​</a></h2><p>dpdk-16.04 用户态驱动架构主体继续沿用 v1.8.0 版本代码，在统一 linux 平台与 bsd 平台 uio 函数的过程中，修改了 pci resource 的映射逻辑，不再通过 mmap /dev/uiox 文件来完成。</p><p>具体的原理可以阅读 <a href="https://blog.csdn.net/Longyu_wlz/article/details/115956761?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">dpdk-16.04 igb_uio 模块分析</a> 。</p><p>dpdk-16.04 中针对标准 viritio 驱动访问 io 端口的需求实现了 rte_eal_pci_ioport_map 等 ioport 相关的函数接口，当 virtio 网卡被绑定到 igb_uio 时，ioport 的基地址通过访问 /sys 目录中 virtio 设备子目录中 uio 子目录中的 port 接口来获取。</p><p>vtpci_init 函数中调用 legacy_virtio_resource_init 函数来 map virtio ioport，此过程实际上是通过调用 rte_eal_pci_ioport_map 函数完成的。</p><p>此函数源码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_eal_pci_ioport_map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_pci_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> bar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_pci_ioport</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">p</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kdrv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">VFIO_PRESENT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_KDRV_VFIO</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">pci_vfio_is_enabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_vfio_ioport_map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_KDRV_IGB_UIO</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_uio_ioport_map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_KDRV_UIO_GENERIC</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">if</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">defined</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">RTE_ARCH_X86</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_ioport_map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_uio_ioport_map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_KDRV_NONE</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">if</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">defined</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">RTE_ARCH_X86</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_ioport_map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bar</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当 virtio 绑定到 igb_uio 的时候调用 pci_uio_ioport_map 来获取 ioport 的基地址，pci_uio_ioport_map 通过访问并解析 /sys/bus/pci/devices/0000:xx:xx.x/uio/uioX/portio/portX/start 文件来完成，start 文件的值即为 portio 的基地址。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-17x-bus-抽象层的引入">dpdk 17.x bus 抽象层的引入<a class="hash-link" href="#dpdk-17x-bus-抽象层的引入" title="标题的直接链接">​</a></h2><p>dpdk 17.x 版本最初合入了 nxp 公司的 fsl-mc bus driver，在此基础上，bus 抽象层不断完善，最终 pci、vdev bus 也得到了支持，用户态驱动架构的使用场景进一步拓宽，旧的架构被重构，新框架复杂性进一步增加。</p><p>目前还没有深入研究，未来单独写一篇博客描述新版本 bus 框架下用户态驱动的架构。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>本文从老版本 dpdk 着手，描述了在版本演进过程中 dpdk 用户态驱动架构的演变过程。</p><p>用户态驱动架构是 dpdk 非常核心的设计，对它的研究是我们与设计者对话的过程。从本文的分析中能够看出这一套框架并不是从一开始就这样复杂，就能够兼容多种场景并具备高度的可扩展性，这些元素是在程序的迭代中不断优化的。不同的架构有自己支持的特定场景，我们也应该以变化的角度来看待不同版本的优劣之处。</p><p>dpdk 的应用场景就是一种环境，环境的变化催化了程序内部架构的不断重构，我们不也在经历类似的过程吗？核心只是环境不同罢了！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 程序性能问题排查的一般流程]]></title>
        <id>/dpdk/dpdk 程序性能问题排查的一般流程</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 程序性能问题排查的一般流程"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[dpdk 程序性能问题排查]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-程序性能问题排查">dpdk 程序性能问题排查<a class="hash-link" href="#dpdk-程序性能问题排查" title="标题的直接链接">​</a></h2><ol><li>确定网卡类型与性能要求，与硬件组沟通确认网卡性能基线数据，基线数据符合要求则执行下面的步骤</li><li>使用 perf 确定当前使用的收发包函数，未使用向量收发包函数，开启向量收发包函数后问题得到解决则终止</li><li>确定当前收发包线程绑核情况，修改 grub 配置，添加 isolcpus、nohz_full、rcu_nocbs 配置，隔离收发包线程绑定核后重新测试，达到要求则终止</li><li>修改 irq 亲和性后重新测试，达到要求则终止</li><li>重复 3 与 4 过程，绑定不同的核，采集绑定到奇数核，偶数核，相邻核上性能数据，获取收发包统计，查看 imissed 字段与 nombuf 字段</li><li>观测第 5 步收集到的信息，判断是否在绑定某个核时性能较优，设定最优的绑核情况</li><li>将网卡更换到不同的槽位，采集性能数据，验证是否存在性能差异</li><li>杀掉无关进程，排查是否其它进程影响，无影响则继续向下排查</li><li>执行上述步骤仍旧达不到要求时，开启多队列，问题得到解决则终止</li><li>执行上述步骤无效后，观测测试数据中 imissed 较高则调大 rx、tx 描述符数量，达到要求则终止</li><li>第 8 步无效后，执行 perf、vtune 采集性能热点，从软件侧优化</li></ol>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[接口 up、down 失败问题排查]]></title>
        <id>/dpdk/dpdk 程序接口 down、up 问题定位的一般流程</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 程序接口 down、up 问题定位的一般流程"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[接口 up 失败问题]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="接口-up-失败问题">接口 up 失败问题<a class="hash-link" href="#接口-up-失败问题" title="标题的直接链接">​</a></h2><ol><li>排查硬件接线情况</li><li>确认网卡是否 bypass 卡，检查 bypass 状态</li><li>收集 ifconfig x/x、ethtool x/x、ethtool -i x/x、ethtool -S x/x、ethtool -d x/x 信息</li><li>查看 dmesg 信息是否有异常</li><li>判断接口对应关系是否一致</li><li>观察接口灯状态</li><li>判断是否软件问题：mbuf 泄露导致问题</li><li>软件排查无效后查看光模块型号，判断光模块型号是否兼容</li><li>判断光模块型号没有问题后，将接口绑定到官方驱动进行测试</li><li>官方驱动不能正常工作则判定为硬件问题，官方驱动能够正常则判断为驱动问题</li></ol><p>备注信息：当接口已经处于 up 状态时，要成功 up，必须先执行 down 操作。</p><h1>接口 down 失败问题</h1><p>接口 down 问题一般表现为执行了 down 接口后网卡 link 灯还是亮的、down 了接口后，获取到的接口链路状态还是 up 的。</p><ol><li>确定网卡型号与对端设备及接口与对端灯的当前状态</li><li>收集 ifconfig x/x、ethtool x/x、ethtool -i x/x、ethtool -S x/x、ethtool -d x/x 信息</li><li>查看 dmesg 信息是否有异常</li><li>查看 dpdk 程序接口日志信息是否有异常</li><li>查看接口对应关系是否一致</li><li>上述操作没有异常后，重新执行 up、down 复现问题，硬件问题一般能够必现</li><li>问题必现后，查看 dpdk 程序是否使能 lsc 中断，使能则关闭重试，未使能继续下一步</li><li>有条件则使用 dpdk_proc_info 程序收集光模块型号信息，判断是否是兼容的光模块，无条件则执行第 8 步</li><li>将 down 不掉的网卡接口绑定到官方驱动测试，判断是否有相同问题</li><li>官方驱动也有相同问题时，排除单个网卡的影响，官方驱动没有问题时，对比驱动代码</li><li>在多张卡上绑定官方驱动能够复现问题后，协同厂商处理</li></ol>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk 程序收发包问题排查]]></title>
        <id>/dpdk/dpdk 程序收发包问题排查的一般流程</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 程序收发包问题排查的一般流程"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[接口不收包问题排查]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="接口不收包问题排查">接口不收包问题排查<a class="hash-link" href="#接口不收包问题排查" title="标题的直接链接">​</a></h2><p>1.确认网卡类型与异常接口</p><p>2.收集 ethtool -i x/x、ifconfig x/x、ethtool x/x、ethtool -d x/x、ethtool -S x/x 信息</p><p>3.确认接口连线是否正常，接口是否 up，接口处于 down 状态不能说明收包存在异常</p><p>4.确认对端是否在发流，对端没有发流则不能说明存在异常</p><p>5.dmesg 信息中是否有下面类似的信息：</p><div class="language-dmesg codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dmesg codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    dmar: DMAR:[DMA Read] Request device [01:00.0] fault addr 37ae5000 DMAR:[fault reason 02] Present bit in context entry is clear </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>   device pci 号是 dpdk 程序使用的网卡接口的 pci 号，符合这个问题的特征是<strong>从一开始就不能收包，而且是必现的</strong>，有这个前提则修改 grug.cfg 文件，内核 cmdline 中添加 intel_iommu=off 配置后重试。</p><p>6.判断 ethtool -d dump 的寄存器信息中是否有异常如控制寄存器全 F，有异常则判定为硬件问题，可绑定官方驱动进一步排查</p><p>7.判断接口的混淆模式是否开启，当接口 up 部分失败时，混淆模式不会被开启，这时网卡会丢掉没有发给自己的报文</p><p>8.使用 dpdk_proc_info 判断接口的 RX-nombuf 字段是否一直增加，当存在 mbuf 泄露时，申请 mbuf 失败则无法收包</p><p>9.多次执行 ethtool -d dump 寄存器，查看网卡 TAIL 与 HEAD 指针的变化情况，当 HEAD 值 &gt; TAIL 值时，队列 hung 住，无法收包</p><p>10.使用 gdb dump 收包队列信息、接收描述符信息查找异常点</p><p>11.hung 住的问题需要注意问题出现的环境，是打了一段时间的流后出现的，还是杀 dpdk 程序出现的</p><p>12.确认是杀 dpdk 程序出现的则检查程序参数，打了一段时间的流后则重点排查是否异常流量导致队列 hung 住</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="接口不发包问题排查">接口不发包问题排查<a class="hash-link" href="#接口不发包问题排查" title="标题的直接链接">​</a></h2><p>1.确认网卡类型与异常接口</p><p>2.收集 ethtool -i x/x、ifconfig x/x、ethtool x/x、ethtool -d x/x、ethtool -S x/x 信息</p><p>3.确认接口连线是否正常，接口是否 up，接口处于 down 状态不能发包是正常情况</p><p>4.确认接口有流量转出，tx_drop 等字段在增加</p><p>5.dmesg 信息中是否有下面类似的信息：</p><div class="language-dmesg codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dmesg codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    dmar: DMAR:[DMA Read] Request device [01:00.0] fault addr 37ae5000 DMAR:[fault reason 02] Present bit in context entry is clear </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p> device pci 号是 dpdk 程序使用的网卡接口的 pci 号，符合这个问题的特征是从一开始就不能收包，而且是必现的，有这个前提则修改 grug.conf 文件，内核 cmdline 中添加 intel_iommu=off 配置后重试。</p><p>6.判断 ethtool -d dump 的寄存器信息中是否有异常如控制寄存器全 F，有异常则判定为硬件问题，可绑定官方驱动进一步排查</p><p>9.多次执行 ethtool -d dump 寄存器，查看网卡 tx TAIL 与 HEAD 指针的变化情况，当 HEAD 值 &gt; TAIL 值时，队列 hung 住，无法发包</p><p>10.使用 gdb dump 发包队列信息、发送描述符信息查找异常点</p><p>11.hung 住的问题需要注意问题出现的环境，是打了一段时间的流后出现的，还是杀 dpdk 程序出现的</p><p>12.确认是杀 dpdk 程序出现的则检查程序参数，打了一段时间的流后则重点排查是否异常流量导致队列 hung 住</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 程序绑不同的核性能有明显差异问题分析]]></title>
        <id>/dpdk/dpdk 程序绑不同的核性能有明显差异问题分析</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 程序绑不同的核性能有明显差异问题分析"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="标题的直接链接">​</a></h2><p>dpdk 程序会将<strong>收发包线程绑定到指定的 cpu 核上</strong>，在多核环境中执行就要配置需要使用的核。在性能测试的时候，发现当收发包线程绑定到 0 核、1 核对应的 cpu 上后，<strong>性能会有明显的下降</strong>，而绑定到 0 核、1 核之后的核上却没有这个问题。</p><p>在排查这个问题的时候发现，<strong>系统中的一些中断只在 0 核上有统计计数</strong>，表明其中断处理程序只在 0 核上执行，当 dpdk 程序也使用 0 核进行收发包的时候，这些中断处理程序就会与 dpdk 程序共享 cpu 核，从而导致 dpdk 程序性能下降。</p><p>在定位这个问题中，有对 irq smp_affinity 的设定过程，通过设定多个中断的 irq smp_affinity 让其在 0 核与 1 核之后的核上运行，重新测试后有明显的改善但是还是差一点，继续定位发现 0 核上有很多的 soft irq 程序在运行。</p><p>在本文中我将探讨一下 irq smp_affinity 的知识，同时引出 soft irq 的内容。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内核文档中与-irq-smp_affinity-相关的信息">内核文档中与 irq smp_affinity 相关的信息<a class="hash-link" href="#内核文档中与-irq-smp_affinity-相关的信息" title="标题的直接链接">​</a></h2><p>一手资料源自内核 Documentation 目录中，摘录如下：</p><div class="language-manual codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-manual codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SMP IRQ affinity</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/proc/irq/IRQ#/smp_affinity and /proc/irq/IRQ#/smp_affinity_list specify</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">which target CPUs are permitted for a given IRQ source.  It's a bitmask</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(smp_affinity) or cpu list (smp_affinity_list) of allowed CPUs.  It's not</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">allowed to turn off all CPUs, and if an IRQ controller does not support</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">IRQ affinity then the value will not change from the default of all cpus.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/proc/irq/default_smp_affinity specifies default affinity mask that applies</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">to all non-active IRQs. Once IRQ is allocated/activated its affinity bitmask</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">will be set to the default mask. It can then be changed as described above.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Default mask is 0xffffffff.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Here is an example of limiting that same irq (44) to cpus 1024 to 1031::</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        [root@moon 44]# echo 1024-1031 &gt; smp_affinity_list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        [root@moon 44]# cat smp_affinity_list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        1024-1031</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Note that to do this with a bitmask would require 32 bitmasks of zero</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">to follow the pertinent one.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>smp_affinity 设定了单个中断被允许执行的 cpu 掩码，内核会以中断号为标识符在 /proc/irq/ 为每一个中断创建一个子目录，我们可以通过读写 /proc/irq/IRQ 子目录中的文件来控制每一个中断允许被执行的 cpu 列表。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="一个示例">一个示例<a class="hash-link" href="#一个示例" title="标题的直接链接">​</a></h2><p>这里我以 iwlwifi 无线网卡设备的中断来演示如何查看并修改 irq smp_affinity，达到让设定的中断服务程序在指定的 cpu 核上执行的目的。</p><p>首先通过访问 /proc/interrupts 确认 iwlwifi 的中断计数在增加，操作记录如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:20:20:25</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14</span><span class="token plain"> $ </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'141:'</span><span class="token plain"> /proc/interrupts </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">141</span><span class="token plain">:     </span><span class="token number" style="color:#36acaa">486315</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">     </span><span class="token number" style="color:#36acaa">596832</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  IR-PCI-MSI </span><span class="token number" style="color:#36acaa">333824</span><span class="token plain">-edge      iwlwifi: default queue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:20:21:07</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14</span><span class="token plain"> $ </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'141:'</span><span class="token plain"> /proc/interrupts </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">141</span><span class="token plain">:     </span><span class="token number" style="color:#36acaa">486405</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">     </span><span class="token number" style="color:#36acaa">596832</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  IR-PCI-MSI </span><span class="token number" style="color:#36acaa">333824</span><span class="token plain">-edge      iwlwifi: default queue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:20:21:08</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14</span><span class="token plain"> $ </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'141:'</span><span class="token plain"> /proc/interrupts </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">141</span><span class="token plain">:     </span><span class="token number" style="color:#36acaa">486703</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">     </span><span class="token number" style="color:#36acaa">596832</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  IR-PCI-MSI </span><span class="token number" style="color:#36acaa">333824</span><span class="token plain">-edge      iwlwifi: default queue</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的操作查了三次 141 号中断的统计计数，输出信息表明中断服务程序在 0 核上与 3 核上执行，141 号中断的 smp_affinity 内容如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:20:27:01</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14</span><span class="token plain"> $ </span><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> /proc/irq/141/smp_affinity</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ff</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从上面的内容可以确定，<strong>141 号中断的中断服务程序被允许在前 8 个核上运行，但是中断统计计数的变化情况表明，它只在 0 核与 3 核上执行。</strong></p><p>下面我通过向 /proc/irq/141/smp_affinity 中写入值来修改中断的 cpu 亲和性，<strong>指定只允许 141 中断服务程序在 4 核上运行。</strong></p><p>操作记录如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:20:29:44</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14</span><span class="token plain"> $ </span><span class="token function" style="color:#d73a49">su</span><span class="token plain"> -c </span><span class="token string" style="color:#e3116c">' echo '</span><span class="token number" style="color:#36acaa">10</span><span class="token string" style="color:#e3116c">' &gt; /proc/irq/141/smp_affinity'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">密码：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:20:29:56</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14</span><span class="token plain"> $ </span><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> /proc/irq/141/smp_affinity</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>写入 proc 下的文件需要有 root 权限，<strong>smp_affinity 是以十六进制的形式传递数据的，每一位表示一个 cpu 核，10 表示只允许在 4 核上执行</strong>。</p><p>第二行命令查询到的结果表明写入 10 到 141 中断的 smp_affinity 文件成功，继续查看 /proc/interrupts 来确定是否真正生效。</p><p>操作记录如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:20:30:02</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14</span><span class="token plain"> $ </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'141:'</span><span class="token plain"> /proc/interrupts </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">141</span><span class="token plain">:     </span><span class="token number" style="color:#36acaa">520162</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">     </span><span class="token number" style="color:#36acaa">596832</span><span class="token plain">       </span><span class="token number" style="color:#36acaa">1465</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  IR-PCI-MSI </span><span class="token number" style="color:#36acaa">333824</span><span class="token plain">-edge      iwlwifi: default queue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:20:30:28</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14</span><span class="token plain"> $ </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'141:'</span><span class="token plain"> /proc/interrupts </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">141</span><span class="token plain">:     </span><span class="token number" style="color:#36acaa">520162</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">     </span><span class="token number" style="color:#36acaa">596832</span><span class="token plain">       </span><span class="token number" style="color:#36acaa">1639</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  IR-PCI-MSI </span><span class="token number" style="color:#36acaa">333824</span><span class="token plain">-edge      iwlwifi: default queue</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:20:30:31</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14</span><span class="token plain"> $ </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'141:'</span><span class="token plain"> /proc/interrupts </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">141</span><span class="token plain">:     </span><span class="token number" style="color:#36acaa">520162</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">     </span><span class="token number" style="color:#36acaa">596832</span><span class="token plain">       </span><span class="token number" style="color:#36acaa">1805</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  IR-PCI-MSI </span><span class="token number" style="color:#36acaa">333824</span><span class="token plain">-edge      iwlwifi: default queue</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到 0 核与 3 核上的中断计数不再增加，4 核上的中断计数在增加表明<strong>设定生效</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="默认-irq_mask-下的中断执行情况">默认 irq_mask 下的中断执行情况<a class="hash-link" href="#默认-irq_mask-下的中断执行情况" title="标题的直接链接">​</a></h2><p>上面的示例中选择 iwlwifi 的中断是有意为之的，在修改其中断亲和性前，查看 smp_affinity 确认使用的是默认的 irq_mask，值为全 F，表示中断服务程序可以在每一个核上运行，理想情况是<strong>每个核上都有统计数据且负载均衡</strong>，但是实际执行情况却是只在 0 核与 3 核上运行。</p><p>中断程序本身执行的代码少的可怜，只有当中断频繁到来的时候其影响才能表现出来，但是中断服务程序中会触发 soft irq，soft irq 做了很多工作且没有 irq_smp 来设定，网上搜索有说它会在被触发的核上执行，照这样来说那 <strong>soft irq 也会随着 irq_smp 的改变而联动改变，但实际测试发现并没有这种效果</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="soft-irq-服务程序执行的-cpu">soft irq 服务程序执行的 cpu<a class="hash-link" href="#soft-irq-服务程序执行的-cpu" title="标题的直接链接">​</a></h2><p>前言中我有描述过，在定位 dpdk 程序绑定到 0 核与 1 核上性能明显下降问题时，通过设定 smp_irq，性能有所提高，但是还是比使用后面的核低一些，<strong>perf 查看发现 0 核上有较多的 softirq 负载</strong>，这些 softirq 将会与测试程序一起共享 0 核，也会造成 dpdk 程序性能下降。</p><p><strong>那么 softirq 在哪个 cpu 上执行呢，它有与 irq smp_affinity 类似的设定接口吗？</strong></p><p>网上搜索了一下获取到了下面的信息：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">softirq 选择执行 cpu 的原则是在哪个 cpu 触发就在哪个 cpu 上执行</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>softirq 会在中断服务程序中触发，而 <strong>smp_affinity</strong> 掩码决定了中断服务程序的执行的 cpu 核，如果上面的描述成立，那么<strong>只要修改了某个中断的 smp_affinity，此中断触发的 softirq 的执行 cpu 也应该随之变化</strong>，而<strong>实际情况是它没有变化</strong>，这里就存在问题。</p><p>一段时候后我重新想了想这个问题，有下面两个方面的怀疑：</p><ol><li><p>网上的说法不可信</p><p>我只简单看过 softirq 的代码，对具体的原理并不清楚，网上的说法存疑！</p></li><li><p>我们的观测方法存在问题</p><p>观测到 softirq 在某个核上执行，但是具体执行的 softirq 是哪个中断的 softirq 并没有深究</p></li></ol><p>softirq 的工作过程有时间了要研究研究！扩展了这个知识，或许这里的问题便有了答案！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[问题描述]]></title>
        <id>/dpdk/dpdk 程序绑核失败问题：EAL: pthread_setaffinity_np failed</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 程序绑核失败问题：EAL: pthread_setaffinity_np failed"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[在某系统中，运行原生 dpdk 示例程序会报如下错误：]]></summary>
        <content type="html"><![CDATA[<p>在某系统中，运行原生 dpdk 示例程序会报如下错误：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: pthread_setaffinity_np failed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PANIC </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> eal_thread_loop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cannot </span><span class="token builtin class-name">set</span><span class="token plain"> affinity</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>将当前进程的 cgroup 切换为系统默认的 cgroup 组就能够解决此问题，但是<strong>为什么要这样做呢？本篇文章中我将对这个问题进行描述。</strong></p><h1>strace 跟踪程序执行</h1><p>strace 跟踪，得到如下相关信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20758</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> sched_setaffinity</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">20758</span><span class="token plain">, </span><span class="token number" style="color:#36acaa">128</span><span class="token plain">, </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">unfinished </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20750</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">12</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">unfinished </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20758</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. sched_setaffinity resumed</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20750</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. close resumed</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">       </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20758</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> access</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/sys/devices/system/node/node0/cpu1"</span><span class="token plain">, F_OK </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">unfinished </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20750</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> pipe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">unfinished </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20758</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. access resumed</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20750</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. pipe resumed</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">12</span><span class="token plain">, </span><span class="token number" style="color:#36acaa">13</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20758</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> access</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/sys/devices/system/node/node0/cpu1"</span><span class="token plain">, F_OK </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">unfinished </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20750</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> pipe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">unfinished </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20758</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. access resumed</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20750</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. pipe resumed</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">14</span><span class="token plain">, </span><span class="token number" style="color:#36acaa">15</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20758</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain">, </span><span class="token string" style="color:#e3116c">"EAL: lcore 1 is ready (tid=f6902"</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">., </span><span class="token number" style="color:#36acaa">48</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">unfinished </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20750</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> mmap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">NULL, </span><span class="token number" style="color:#36acaa">8392704</span><span class="token plain">, PROT_READ</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">PROT_WRITE, MAP_PRIVATE</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">MAP_ANONYMOUS</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">MAP_STACK, -1, 0EAL: lcore </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> is ready </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">f6902700</span><span class="token punctuation" style="color:#393A34">;</span><span class="token assign-left variable" style="color:#36acaa">cpuset</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20759</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> gettid</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">unfinished </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20760</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> set_robust_list</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">0x7ffff59009e0, </span><span class="token number" style="color:#36acaa">24</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">unfinished </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20759</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. gettid resumed</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">20759</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20760</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. set_robust_list resumed</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20759</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> sched_setaffinity</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">20759</span><span class="token plain">, </span><span class="token number" style="color:#36acaa">128</span><span class="token plain">, </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">unfinished </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20760</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> gettid</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">unfinished </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pid </span><span class="token number" style="color:#36acaa">20759</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. sched_setaffinity resumed</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> -1 EINVAL </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Invalid argument</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的内容有两个关键点：</p><ol><li>20758 线程设置 cpu 亲和性为 1 核成功</li><li>20759 线程设置 cpu 亲和性为 2 失败，sched_setaffinity 系统调用返回值为 EINVAL</li><li>两个线程都是通过 sched_setaffinity 线程来设置 cpu 亲和性</li></ol><p>sched_setaffinity 系统调用的【返回值】是一个关键信息，man sched_setaffinity 查看返回值的具体含义。</p><h1>man sched_setaffinity</h1><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EINVAL The affinity bit mask mask contains no processors that are currently physically on the system and  permitted  to  the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              thread  according  to  any  restrictions that may be imposed by cpuset cgroups or the </span><span class="token string" style="color:#e3116c">"cpuset"</span><span class="token plain"> mechanism described </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              cpuset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EINVAL </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sched_getaffinity</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> and, </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> kernels before </span><span class="token number" style="color:#36acaa">2.6</span><span class="token plain">.9, sched_setaffinity</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">))</span><span class="token plain"> cpusetsize is smaller than the  size  of  the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              affinity mask used by the kernel.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我这里的情况符合第一种描述，同时确定设置的 cpu 核是存在的，这样问题就指向了 <strong>cpuset(7)</strong>。</p><h1>man 7 cpuset</h1><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Every  process  </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> the system belongs to exactly one cpuset.  A process is confined to run only on the CPUs </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> the cpuset it</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">belongs to, and to allocate memory only on the memory nodes </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> that cpuset.  When a process fork</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">s, the child  process  is</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">placed  </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain">  the same cpuset as its parent.  With sufficient privilege, a process may be moved from one cpuset to another and</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">the allowed CPUs and memory nodes of an existing cpuset may be changed.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">When the system begins booting, a single cpuset is defined that includes all CPUs and memory nodes on the  system,  and  all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">processes  are  </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> that cpuset.  During the boot process, or later during normal system operation, other cpusets may be cre‐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ated, as subdirectories of this </span><span class="token function" style="color:#d73a49">top</span><span class="token plain"> cpuset, under the control of the system administrator, and processes may  be  placed  </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">these other cpusets.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Cpusets  are  integrated  with  the sched_setaffinity</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> scheduling affinity mechanism and the mbind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> and set_mempolicy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">memory-placement mechanisms </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> the kernel.  Neither of these mechanisms </span><span class="token builtin class-name">let</span><span class="token plain"> a process </span><span class="token function" style="color:#d73a49">make</span><span class="token plain"> use of a CPU or memory </span><span class="token function" style="color:#d73a49">node</span><span class="token plain">  that</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">is  not  allowed by that process</span><span class="token string" style="color:#e3116c">'s cpuset.  If changes to a process'</span><span class="token plain">s cpuset placement conflict with these other mechanisms,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"> cpuset placement is enforced even </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> it means overriding these other mechanisms.  The kernel accomplishes this overrid‐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ing  by  silently restricting the CPUs and memory nodes requested by these other mechanisms to those allowed by the invoking</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">process</span><span class="token string" style="color:#e3116c">'s cpuset.  This can result in these other calls returning an error, if for example, such a call ends  up  requesting</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">an empty set of CPUs or memory nodes, after that request is restricted to the invoking process'</span><span class="token plain">s cpuset.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>总结得出如下几点关键信息：</p><ol><li>linux 系统中的每一个进程都归属于【唯一的】一个 cpuset，程序被限定为<strong>只能</strong>在归属 cpuset 组允许的 cpu 上执行，也只能从归属 cpuset 组允许的内存节点申请内存</li><li>子进程默认【继承】父进程的 cpuset 配置</li><li>系统启动时，包含所有 cpu 核与内存节点的 cpuset 被创建，此时所有的进程都归属于这个 cpuset，其它后续创建的 cpuset 都位于此 cpuset 的子目录中，这个 cpuset 被称为 【top cpuset】</li><li>当 cpuset 与其它的 cpu、内存分配机制冲突时，cpuset 配置会默认【覆盖】其它机制的配置，内核会限定进程只能使用所加入的 cpuset 允许的 cpu 核与内存节点</li></ol><h1>重新描述问题</h1><p>根据上面的信息能够确定问题为<strong>执行的 dpdk 程序所在的 cpuset 不允许程序在 2 号核上执行</strong>。查看父进程归属的 cgroup 内容如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root-10:10:27:33</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># cat /proc/$$/cgroup</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">11</span><span class="token plain">:freezer:/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10</span><span class="token plain">:cpu,cpuacct:/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">9</span><span class="token plain">:pids:/user.slice/user-1000.slice/session-2.scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">8</span><span class="token plain">:cpuset:/Isolate_Cpus_Service</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7</span><span class="token plain">:net_cls,net_prio:/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">6</span><span class="token plain">:rdma:/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">5</span><span class="token plain">:memory:/user.slice/user-1000.slice/session-2.scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token plain">:devices:/user.slice</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token plain">:blkio:/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token plain">:perf_event:/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token plain">:name</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">systemd:/user.slice/user-1000.slice/session-2.scope</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0</span><span class="token plain">::/user.slice/user-1000.slice/session-2.scope</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到，父进程归属的 cpuset 为 Isolate_Cpus_Service，此 cpuset 允许执行的 cpu 核如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root-10:10:27:44</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># cat /sys/fs/cgroup/cpuset/Isolate_Cpus_Service/cpuset.cpus</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0</span><span class="token plain">-1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>能够确定，<strong>它只允许程序在 0 核跟 1 核执行</strong>，且<strong>内核中 cpuset 的优先级【高于】 sched_setaffinity</strong>，这样使用 sched_setaffinity 设置线程 cpu 亲和性为 2 核的时候就会失败！</p><h1>不修改 dpdk 程序让程序能够执行的方法</h1><p>有时候不方便修改 dpdk 程序，此时可以通过修改父进程（终端 bash 程序）所属的 cpuset 允许的 cpu 核、将父进程的 cpuset 【切换】为 top cpuset 来解决此问题。</p><p>将父进程的 cpuset 切换为 top cpuset，可以执行如下命令：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$$</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /sys/fs/cgroup/cpuset/tasks</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>修改父进程所在的 cpuset 允许的 cpu 核与 top cpuset 一致，可以执行如下命令：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> /sys/fs/cgroup/cpuset/cpuset.cpus </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /sys/fs/cgroup/cpuset/Isolate_Cpus_Service/cpuset.cpus</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h1>为什么要进行 cpu 隔离</h1><p>dpdk 程序在进行 2544 测性能的时候，<strong>当收发包线程所在的 cpu 核上有其它用户态进程也被调度运行时就会产生抖动</strong>，从而造成<strong>丢包</strong>，导致 <strong>2544 的性能变差</strong>，为了消除这种影响，需要对用户态程序进行 cpu 隔离。</p><h1>cpu 核隔离的对象</h1><p>cpu 核隔离针对所有的用户态程序，这种隔离的目的是为了<strong>让 dpdk 程序独占某个 cpu 核</strong>。</p><p>dpdk 程序【缺省】也是被执行了 cpu 隔离的，为此需要将 dpdk 程序归属的 cpuset 设置为 top cpuset，以<strong>允许</strong> dpdk 程序使用<strong>所有的</strong> cpu 核与内存节点。</p><h1>有没有其它 cpu 隔离的方法？</h1><p>除了上面的方法外，我们也可以通过内核启动参数来实现，例如在 grub.conf 中，在内核引导参数中添加 isolcpus=xxx 的配置，然后重启系统就能够生效。</p><p>但是这种方式的操作成本较高，一旦内核启动参数修改存在问题可能无法进入系统，推荐专业人士操作。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 问题分析：不兼容光模块导致 dpdk 程序运行失败问题定位]]></title>
        <id>/dpdk/dpdk 问题分析：不兼容光模块导致 dpdk 程序运行失败问题定位</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 问题分析：不兼容光模块导致 dpdk 程序运行失败问题定位"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>82599 万兆网卡，一个正常工作，另外一个口不能正常工作，初始化失败，导致 dpdk 程序不能正常启动。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题排查过程">问题排查过程<a class="hash-link" href="#问题排查过程" title="标题的直接链接">​</a></h2><ol><li>检查程序使用的配置文件</li><li>检查 /dev/uioX 设备文件</li><li>检查 dmesg 信息</li></ol><p>排查了上面的三点内容，没有发现异常。首先使用 ethool 收集异常接口的信息，然后准备用官方驱动测试。</p><p>在使用官方驱动测试之前，我想到了可能是光模块的问题，但是客户现场没有支持的同事，且我们没有工具直接获取光模块信息，这一点暂时不能排查。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用-l2fwd-测试">使用 l2fwd 测试<a class="hash-link" href="#使用-l2fwd-测试" title="标题的直接链接">​</a></h2><p>在初步的排查没有定位到问题后，我想使用 l2fwd 程序测试了一下，排查下软件问题。</p><p>运行 l2fwd 后，注意到 l2fwd 启动中有打印探测到的光模块类型信息，记录如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">PMD: eth_ixgbe_dev_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">: MAC: </span><span class="token number" style="color:#36acaa">2</span><span class="token plain">, PHY: </span><span class="token number" style="color:#36acaa">15</span><span class="token plain">, SFP+: </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PMD: eth_ixgbe_dev_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">: port </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">vendorID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x8086 </span><span class="token assign-left variable" style="color:#36acaa">deviceID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x10fb</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:04:00.1 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: </span><span class="token number" style="color:#36acaa">8086</span><span class="token plain">:10fb rte_ixgbe_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x4001af234000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x4001af254000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PMD: eth_ixgbe_dev_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">: MAC: </span><span class="token number" style="color:#36acaa">2</span><span class="token plain">, PHY: </span><span class="token number" style="color:#36acaa">17</span><span class="token plain">, SFP+: </span><span class="token number" style="color:#36acaa">14</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PMD: eth_ixgbe_dev_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">: port </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">vendorID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x8086 </span><span class="token assign-left variable" style="color:#36acaa">deviceID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x10fb</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>port 5 就是出问题的接口，ixgbe 初始化打印出了 SFP+ 的值为 14，这个 14 是在 sfp_type 枚举结构中定义的，此结构内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token class-name">ixgbe_sfp_type</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_da_cu </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_sr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_lr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_da_cu_core0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_da_cu_core1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_srlr_core0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_srlr_core1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_da_act_lmt_core0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_da_act_lmt_core1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_1g_cu_core0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_1g_cu_core1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_1g_sx_core0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_1g_sx_core1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">12</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_1g_lx_core0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">13</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_1g_lx_core1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">14</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_1g_lha_core0 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">15</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_1g_lha_core1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_not_present </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_sfp_type_unknown </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFF</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>14 对应的是 <code>ixgbe_sfp_type_1g_lx_core1</code>看这个名称应该是个千兆的光模块。</p><p>继续在代码中搜索，发现在 ixgbe_identify_sfp_module_generic 中识别 sfp 模块类型的时候有下面相关代码：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/20201212105203219.png" alt="在这里插入图片描述" class="img_ev3q">
这个代码基本上能够确定 dpdk 程序不能正常运行的原因，这些信息明确指向光模块，于是对这个问题有了如下结论：</p><p>这个问题为在<strong>万兆光口上接了一个千兆的光模块导致万兆接口初始化失败</strong>。</p><p>最终确定的问题与上面的结论一致！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>其实光模块的问题我已经遇到好多次了，客户现场偶尔会有这种问题，前期遇到这类问题，需要花不少的时间来定位。</p><p>针对这种问题，我们梳理了公司导入的光模块，输出了 excel 表格，当问题出现时，<strong>首先获取客户现场使用的光模块型号，然后查 excel 表格就能立刻得出结论</strong>。</p><p>输出一个光模块型号列表花了<strong>一个小时左右</strong>，但梳理出这个流程后，下一次遇到相同问题时分分钟就能够解决了，无疑提<strong>高了我们解决问题的效率</strong>。</p><p>其实这里还可以进一步优化，可以写一个<strong>能够直接获取光模块型号等信息的工具</strong>，这样就能够打破前场的某些限制条件。</p><p>进一步再想，其实可以搞一个整合这个获取光模块型号信息的工具与兼容光模块 excel 列表的工具。这个工具首先<strong>使用获取光模块型号信息的工具获取接口的模块信息</strong>，然后<strong>使用某种方式获取兼容的光模块型号列表</strong>，<strong>直接判断模块是否支持并输出结果</strong>。</p><p>有了这种工具光模块问题解决时间可能能够控制在 10 分钟以内，比起之前的几周、几天，这种效率不可同日而语！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 驱动移植叩开 kni 模块那些黑暗的角落]]></title>
        <id>/dpdk/dpdk 驱动移植叩开 kni 模块那些黑暗的角落</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 驱动移植叩开 kni 模块那些黑暗的角落"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="标题的直接链接">​</a></h2><p>kni 模块是早期 dpdk 版本中一个非常重要的功能，它充当了用户态驱动与内核协议栈之间的桥梁，让 dpdk 程序能够上送流量到内核协议栈，同时也支持使用ethtool、ifconfig 等重要的网络管理命令。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="kni-支持-ethtool-带来的问题">kni 支持 ethtool 带来的问题<a class="hash-link" href="#kni-支持-ethtool-带来的问题" title="标题的直接链接">​</a></h2><p>kni 为了实现 ethtool 获取网卡信息的功能，对 igb、ixgbe 等系列网卡的官方驱动进行修改，意味着 dpdk 内部维护着<strong>两套驱动代码</strong>，一套是<strong>用户态驱动代码</strong>，另一套是 kni 模块中的<strong>内核驱动代码</strong>。这样的情况提高了维护的成本，同时也更容易带来问题。</p><p>高版本 dpdk 中 kni 模块已经<strong>移除了内核驱动的代码</strong>，不再支持 ethtool 获取诸多网卡信息，可是也没有其它替代 ethtool 的工具提供，不由地让人感慨套路之深！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么要修改-kni">为什么要修改 kni?<a class="hash-link" href="#为什么要修改-kni" title="标题的直接链接">​</a></h2><p>既然高版本已经干掉了 kni 的大部分功能，那我们应该追随高版本的发展方向。奈何公司内部使用的 dpdk 版本为 16.04，许多产品仍旧使用 kni 模块来通过ethtool 获取信息，最近遇到了需要适配 x553 新网卡的问题，为了<strong>避免产品代码改动</strong>，需要适配 kni，只能与 kni 短兵相接了！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="新网卡的型号">新网卡的型号<a class="hash-link" href="#新网卡的型号" title="标题的直接链接">​</a></h2><p>新网卡为 x553 网卡，属于 ixgbe 网卡系列，dpdk 16.04 并不支持此款网卡。<strong>pmd 驱动代码从高版本合入，kni 中的代码从 ixgbe-5.8.1 内核驱动合入</strong>。</p><p>下文对适配过程中遇到的一些具体的问题进行记录</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-添加新的-device-id">1. 添加新的 device id<a class="hash-link" href="#1-添加新的-device-id" title="标题的直接链接">​</a></h3><p>dpdk-16.04 支持的网卡型号在 <strong>rte_pci_dev_ids.h</strong> 头文件中被定义，适配新网卡需要<strong>在 rte_pci_dev_ids.h 中添加相应的项目</strong>。</p><p>kni 中使用官方驱动适配，正常方式应该是使用 <strong>pci_device_table</strong> 来定义支持的网卡型号，可是这个 pci_device_table 并没有被使用。</p><p><strong>kni_ioctl_create</strong> 函数中<strong>也通过包含 rte_pci_dev_ids.h 来匹配网卡</strong>，这与pmd 保持一致。</p><p>x553 属于 ixgbe 网卡，<strong>dpdk-16.04 kni</strong> 驱动中在 <strong>ixgbe_pci_tbl</strong> 中定义支持的网卡型号，这里的定义表明<strong>适配的 ixgbe 驱动支持的网卡型号</strong>，阅读代码发现 <strong>ixgbe_pci_tbl</strong> 表中支持的网卡型号与 <strong>rte_pci_dev_ids.h</strong> 中定义的 ixgbe 网卡型号并<strong>不一致</strong>，是其中的一个<strong>子集</strong>。</p><p>当 <strong>rte_pci_dev_ids.h</strong> 中添加了新的 <strong>ixgbe</strong> 网卡，却没有适配 kni 时，在 dpdk 程序初始化的时候仍旧会执行 ixgbe 驱动的 probe 函数，就可能造成问题，</p><p>为此首先在 <strong>ixgbe_pci_tbl 中添加新网卡项</strong>目，然后在 <strong>probe 函数中也使用当前设备的 vendor id 与 device id 在 ixgbe_pci_tbl 中匹配</strong>，匹配成功则执行后续流程，失败则直接返回。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ixgbe_init_shared_code-函数">ixgbe_init_shared_code 函数<a class="hash-link" href="#ixgbe_init_shared_code-函数" title="标题的直接链接">​</a></h3><p>kni 适配中重点修改 <strong>ixgbe_init_shared_code</strong> 函数，此函数中关键过程如下：</p><ol><li>根据 vendor id 与 device id 设置 mac_type</li><li>根据 mac_type 调用不同的初始化函数</li></ol><p>针对 x553 网卡，初始化过程如下：</p><ol><li>ixgbe_set_mac_type 中设定 mac_type 为 ixgbe_mac_X550EM_a</li><li>调用 ixgbe_init_ops_X550EM_a 函数完成初始化过程</li></ol><p>ixgbe_init_ops_X550EM_a 函数调用层次如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ixgbe_init_ops_X550EM_a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ixgbe_init_ops_X550EM</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ixgbe_init_ops_X550</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ixgbe_init_ops_X540</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ixgbe_init_phy_ops_generic</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ixgbe_init_ops_generic</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在初始化过程中完成对 <strong>phy、mac、eeprom</strong> 等结构虚函数表的赋值，一些函数的<strong>赋值过程可能有多次</strong>！</p><p>完成其它函数的适配后，使用 kni 程序进行测试，结果发现系统崩溃了，一通分析发现问题与网卡的 <strong>reset</strong> 函数有关。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ixgbe_reset_hw_82599-函数中的注释">ixgbe_reset_hw_82599 函数中的注释<a class="hash-link" href="#ixgbe_reset_hw_82599-函数中的注释" title="标题的直接链接">​</a></h3><p>首先找到一个<strong>正常的版本</strong>进行<strong>对比</strong>，82599 测试过能够正常工作，于是阅读 <strong>ixgbe_reset_hw_82599</strong> 函数，发现它的大部分内容都被注释掉了，注释的截止位置如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Store the permanent mac address */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ops</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get_mac_addr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">perm_addr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>直接完全注释 <strong>ixgbe_reset_hw_X550em</strong> 后测试发现，ifconfig 看到的接口信息中 <strong>mac</strong> 地址不正常，于是参照 <strong>ixgbe_reset_hw_82599</strong> 的代码进行修改，注释掉 <strong>get_mac_addr</strong> 之前的代码，测试正常。</p><p>问题在于网卡在 dpdk 程序调用 <strong>rte_eal_init</strong> 的时候<strong>已经被初始化</strong>了，并且已经被用户态程序使用，kni 中<strong>重新初始化正在被使用的网卡</strong>就会导致异常。</p><p>阅读其它代码，也能够看到注释的项目，大部分内容都跟硬件操作有关，且注释格式凌乱，像某种非法地带～</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ixgbe_get_settings-函数的修改">ixgbe_get_settings 函数的修改<a class="hash-link" href="#ixgbe_get_settings-函数的修改" title="标题的直接链接">​</a></h3><p>初始化过程搞定后，运行 kni 程序，然后执行 ethtool 进行测试，发现输出的链路模式不正确，想到应该要适配 <strong>ixgbe_get_settings</strong> 函数。</p><p><strong>ixgbe_get_settings</strong> 中的细节非常多，为了避免造成问题，对 x553 型号的网
卡单独判断，使用新的 <strong>ixgbe_get_settings</strong> 函数。</p><p>执行 ethtool 的测试结果如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Settings </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> vEth0_0:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Supported ports: </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> TP </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Supported </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"> modes:   10baseT/Full</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                100baseT/Full</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                1000baseT/Full</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Supported pause frame use: Symmetric</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Supports auto-negotiation: Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Advertised </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"> modes:  10baseT/Full</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                100baseT/Full</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                1000baseT/Full</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Advertised pause frame use: Symmetric</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Advertised auto-negotiation: Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Speed: Unknown</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Duplex: Full</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Port: Twisted Pair</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PHYAD: </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Transceiver: external</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Auto-negotiation: on</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        MDI-X: Unknown</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Supports Wake-on: d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Wake-on: d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Current message level: 0x00000007 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                               drv probe </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Link detected: </span><span class="token function" style="color:#d73a49">yes</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Link detected 的输出结果为 yes，而 Speed 的值却为 Unknown，这看上去就不太对，不过支持的链路模式与接口类型都正确了。</p><p>阅读 ixgbe_get_settings 函数代码，发现了如下语句：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">332</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">in_interrupt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">333</span><span class="token plain">         hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ops</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">check_link</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">link_speed</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">link_up</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">334</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">335</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> 336          * this case is a special workaround for RHEL5 bonding</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> 337          * that calls this routine from interrupt context</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> 338          */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">339</span><span class="token plain">         link_speed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> adapter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">link_speed</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">340</span><span class="token plain">         link_up </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> adapter</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">link_up</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">341</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>大多数情况下都会走到 if 判断中，调用 <strong>check_link</strong> 来获取当前网卡的状态，
基于这个点进行修改，能够获取到速率了！</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="check_link-同时调用的问题">check_link 同时调用的问题？<a class="hash-link" href="#check_link-同时调用的问题" title="标题的直接链接">​</a></h3><p>在解决上述问题的过程中，我想到了一个问题:当关闭网卡 lsc 中断时，dpdk 程序中调用 <strong>rte_eth_link_get_nowait</strong> 获取状态也会调用到 ixgbe 的 check_link 函数，同时业务脚本中调用 <strong>ethtool</strong> 获取网卡状态也会调用 <strong>check_link</strong> 函数，可能存在同时调用的问题。</p><p>阅读代码确认，ixgbe 驱动的 <strong>check_link</strong> 函数实质上是通过获取 <strong>IXGBE_LINKS</strong> 寄存器来确定接口状态的，这个寄存器手册中没有说明不能同时读取，理论上没有太大问题！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>新网卡的适配带来了 dpdk 升级的问题，这是产品的痛点。为了解决这个痛点常常要做一些移植工作，这些移植工作总结起来有如下几个类别：</p><ol><li>dpdk 高版本驱动、功能移植到低版本</li><li>内核驱动移植到 kni</li><li>内核驱动移植到 pmd 中</li></ol><p>这些工作是一个深入研究 dpdk 的机会，其难点在于理清楚某功能、网卡从初始化到被使用的全过程，对这些过程越了解，做起这些工作来越有底气！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk 多线程流水线]]></title>
        <id>/dpdk/dpdk-16.04 eal lcore 多线程机制分析</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 eal lcore 多线程机制分析"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[dpdk 抽象的 eal 环境在初始化的时候会探测系统上可用的 cpu 核，为每个核创建一个线程，并初始化相应的数据结构。]]></summary>
        <content type="html"><![CDATA[<p>dpdk 抽象的 eal 环境在初始化的时候会探测系统上可用的 cpu 核，为每个核创建一个线程，并初始化相应的数据结构。</p><p>一般来说，多线程创建的时候传入的 start_routine 函数指针就限定了多线程程序执行的入口，并且当程序调用 pthread_create 成功后线程就开始执行。</p><p>对于 dpdk 来说在初始化 eal 环境时，<strong>并不确定针对每个核创建的线程将要执行哪些任务</strong>，这些任务的确定<strong>推迟到 dpdk 程序编码中</strong>，这是 dpdk 不同于常见多线程处理模型的特点。</p><p>为此，dpdk 提供接口让 dpdk 程序将需要执行的任务分发到 dpdk 内部为每个逻辑核创建的线程上，可以称为 dpdk 多线程流水线机制。</p><p>分发任务后又引入了新的问题，即这些分发的任务什么时候执行？其执行终止的状态该如何控制等等，这些都是 dpdk 多线程流水线机制需要解决的问题。</p><p>本文将从以上问题开始探讨，基于 dpdk-16.04 的 linuxapp 实现，逐步分析 dpdk 多线程流水线机制的工作原理。</p><h1>如何动态的分发任务到多线程中？</h1><p>上文已经提及，使用 pthread_create 创建的线程，一经创建成功便从 pthread_create 函数的 start_routine 参数指定的函数处开始执行。dpdk 为每个逻辑核创建的线程都指定了一个<strong>统一的入口</strong>，即 <strong>eal_thread_loop</strong> 函数，此函数负责执行下发到每个逻辑核线程的函数。</p><p>dpdk 程序下发的函数可以看做是针对逻辑核线程的配置，那这个配置在 dpdk 中有怎样的形式呢？</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="lcore_config-结构">lcore_config 结构<a class="hash-link" href="#lcore_config-结构" title="标题的直接链接">​</a></h2><p>dpdk 内部抽象出的 lcore_config 结构定义了每个逻辑核线程的配置及一些私有的变量，其定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * Structure storing internal configuration (per-lcore)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">lcore_config</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> detected</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; true if lcore was detected */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">pthread_t</span><span class="token plain"> thread_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; pthread identifier */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pipe_master2slave</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; communication pipe with master */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pipe_slave2master</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; communication pipe with master */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">lcore_function_t</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; function to call */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> arg</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; argument of function */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; return value of function */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token class-name">rte_lcore_state_t</span><span class="token plain"> state</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; lcore state */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> socket_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; physical socket id for this lcore */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> core_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; core number on socket for this lcore */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> core_index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; relative index, starting from 0 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">rte_cpuset_t</span><span class="token plain"> cpuset</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; cpu set which the lcore affinity to */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这些数据结构可以分为如下几类：</p><ol><li>标识绑定到的线程的成员</li><li>用于控制、描述 lcore 线程执行状态的成员</li><li>代表分发到 lcore 线程中的执行单元的成员</li><li>用于描述 cpu 亲和性及 numa 节点的成员</li></ol><p>上述不同类别的成员一起抽象出了 dpdk 下发到每个 lcore 线程的配置，<strong>dpdk 内部维护了一个 lcore_config 结构体数组，每个使能的逻辑核都会占据这个数组中的一项。</strong></p><p>下面我针对 lcore_config 结构的几个类别的成员进行分析。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="lcore_config-中标识绑定到的线程的成员">lcore_config 中标识绑定到的线程的成员<a class="hash-link" href="#lcore_config-中标识绑定到的线程的成员" title="标题的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> detected</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; true if lcore was detected */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">pthread_t</span><span class="token plain"> thread_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; pthread identifier */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>detected 标志这个 lcore 是否可用，thread_id 代表绑定到当前 lcore_config 上的线程 id。</p><p>thread_id 不足为奇，dpdk 在创建需要的逻辑核线程时为 thread_id 赋值，但<strong>为何要创建一个 detected 成员呢</strong>？</p><p>由于 dpdk 程序在运行前<strong>并不确定系统上的逻辑核数目</strong>，但是它内部实现为需要提前分配每个逻辑核的 lcore_config 结构的方式，而分配多少个逻辑核的 lcore_config 就成为了一个必须的参数，为此 dpdk 预设了一个参数，<strong>默认支持 128 个逻辑核，同时这项配置也导出到 .config 中让用户动态配置</strong>。</p><p>这样当 dpdk 程序运行时，需要根据运行环境的实际逻辑核来设定特定的 lcore_config 结构，这就需要标识出哪些 lcore_config 结构是可用的，这就是 detected 成员的功能。</p><p>dpdk 通过在 rte_eal_init 函数中调用 rte_eal_cpu_init 函数来初始化预设的每个 lcore_config 结构中的 detected 字段，此外 cpuset、 core_id 、 socket_id 也都在这个函数中被设定。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="用于控制描述-lcore-线程执行状态的成员">用于控制、描述 lcore 线程执行状态的成员<a class="hash-link" href="#用于控制描述-lcore-线程执行状态的成员" title="标题的直接链接">​</a></h3><p>dpdk 需要分发执行单元到 lcore 线程中，这就涉及到与每个 lcore 线程的交互，需要控制执行单元执行的时机，并能够通过某个内部成员表示出每个 lcore 线程的当前状态。</p><p>如上功能对应 lcore_config 中的如下成员：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pipe_master2slave</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; communication pipe with master */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pipe_slave2master</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; communication pipe with master */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token class-name">rte_lcore_state_t</span><span class="token plain"> state</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; lcore state */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>pipe_master2slave 与 pipe_slave2master 建立起了主线程与每个 lcore 逻辑线程之间的通信管道。</p><p><strong>为什么要创建两个匿名管道呢？</strong></p><p>pipe 是半双工的进程间通信方式，它的工作原理如下：
<img loading="lazy" src="https://img-blog.csdnimg.cn/20210506214520105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" class="img_ev3q">
一般来说，pipe 的一端负责读，一端负责写，数据的流动是单向的。dpdk 为了实现 master 线程与 slave 线程之间的<strong>双向通信</strong>就为每个 lcore 线程创建了<strong>两个</strong>匿名管道。</p><p>state 变量表示 lcore 线程的状态，有如下几种类型：</p><ol><li>WAIT 状态，等待下发任务</li><li>RUNNING 状态，正在执行下发的任务</li><li>FINISHED 状态，下发任务执行完成</li></ol><p>rte_eal_init 创建每个逻辑核线程时，将 state 设置为 WAIT 状态，表示线程等待任务下发。</p><p>rte_eal_init 中的相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_LCORE_FOREACH_SLAVE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">         * create communication pipes between master thread</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">         * and children</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">         */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">pipe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pipe_master2slave</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cannot create pipe\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">pipe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pipe_slave2master</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cannot create pipe\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">state </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> WAIT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* create a thread for each lcore */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pthread_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">thread_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     eal_thread_loop</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cannot create thread\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Set thread_name for aid in debugging. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">snprintf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">thread_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_MAX_THREAD_NAME_LEN</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"lcore-slave-%d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_thread_setname</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">thread_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        thread_name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EAL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token string" style="color:#e3116c">"Cannot set name for lcore thread\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述代码为每个逻辑核创建两个匿名管道，并将 lcore_config 数组中的对应项目的 state 变量设定为 WAIT 状态，然后调用 pthread_create 创建逻辑核线程，将 thread_id 保存在 lcore_config 数组中当前项目的 thread_id 中，并指定线程入口为 eal_thread_loop。最后通过 rte_thread_setname 设置线程的名称，<strong>每个逻辑核线程在这里被称为 slave 线程</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="代表分发到-lcore-线程中的执行单元的成员">代表分发到 lcore 线程中的执行单元的成员<a class="hash-link" href="#代表分发到-lcore-线程中的执行单元的成员" title="标题的直接链接">​</a></h3><p>lcore_config 结构的如下成员描述了下发到 lcore 线程中的执行单元：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">lcore_function_t</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; function to call */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> arg</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; argument of function */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; return value of function */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>f 指向待执行的任务单元，arg 指向任务单元附属的参数，ret 保存执行单元执行的返回值。</p><p><strong>eal_common_launch.c</strong> 中实现了下发任务与获取逻辑核状态的接口，下发任务通过调用 <strong>rte_eal_mp_remote_launch</strong> 函数来完成。</p><p>此函数的代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_eal_mp_remote_launch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">f</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">arg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token class-name">rte_rmt_call_master_t</span><span class="token plain"> call_master</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> lcore_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> master </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_get_master_lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* check state of lcores */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_LCORE_FOREACH_SLAVE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">state </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> WAIT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EBUSY</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* send messages to cores */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_LCORE_FOREACH_SLAVE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_eal_remote_launch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">f</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> arg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lcore_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">call_master </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> CALL_MASTER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">master</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">f</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">master</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">state </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> FINISHED</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此函数将任务分发到每个逻辑核线程上，分发前先检查每个逻辑核线程的状态，没有处于 WAIT 状态表明逻辑核线程已经有任务正在执行，函数直接返回。</p><p>当逻辑核线程空闲时，遍历每个逻辑核，调用 rte_eal_remote_launch 将 f 参数代表的执行单元分发到相应的逻辑核线程中。</p><p>rte_eal_remote_launch 函数的主要逻辑如下：</p><ol><li>获取 rte_eal_init 中为当前逻辑核线程创建的匿名管道，master 到 slave 的管道为 m2s，slave 到 master 的管道为 s2m。</li><li>判断 slave 线程是否处于 WAIT 状态，否，则返回 -EBUSY。</li><li>将 f 与 arg 参数设定到当前逻辑核线程对应的 lcore_config 项目的 f 与 arg 成员上。</li><li>通过 m2s 向 slave 线程的管道写入字符 '0'。</li><li>从 s2m 管道读取 slave 线程向 master 线程回复的 ack，收到回复则成功返回，未收到回复、其它异常情况则直接终止程序。</li></ol><p>rte_eal_remote_launch 函数执行完成后，返回到 rte_eal_mp_remote_launch 函数中，判断 <strong>call_master</strong> 参数是否为 <strong>CALL_MASTER</strong>，是则在当前线程上调用 f 函数并保存返回值到 master 线程对应的 lcore_config 结构的 ret 变量中，执行完成后将 master 线程对应的 lcore_config 数组中的 state 变量设定为 FINISHED。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="用于描述线程-cpu-亲和性及-numa-节点的成员">用于描述线程 cpu 亲和性及 numa 节点的成员<a class="hash-link" href="#用于描述线程-cpu-亲和性及-numa-节点的成员" title="标题的直接链接">​</a></h3><p>相关数据成员如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> socket_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; physical socket id for this lcore */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> core_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; core number on socket for this lcore */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> core_index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; relative index, starting from 0 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">rte_cpuset_t</span><span class="token plain"> cpuset</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; cpu set which the lcore affinity to */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>socket_id 表示逻辑核所在的物理 numa id，core_id 表示当前逻辑核所在的 numa 节点上的核数，core_index 表示从 0 开始的核下标，cpuset 表示当前逻辑核的 cpu 亲和性设置。</p><p>socket_id、core_id、core_index、cpuset 在 rte_eal_init 函数的子函数调用中被初始化，cpuset 在 eal_thread_loop 函数中被设定到对应的线程上。</p><p>eal_thread_loop 函数源码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/* main loop of threads */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">__attribute__</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">noreturn</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">eal_thread_loop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">__attribute__</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">unused</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> n</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> lcore_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">pthread_t</span><span class="token plain"> thread_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> m2s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s2m</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> cpuset</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">RTE_CPU_AFFINITY_STR_LEN</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    thread_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pthread_self</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* retrieve our lcore_id from the configuration structure */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_LCORE_FOREACH_SLAVE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">thread_id </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">thread_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_id </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_MAX_LCORE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"cannot retrieve lcore id\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    m2s </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pipe_master2slave</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s2m </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pipe_slave2master</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* set the lcore ID in per-lcore memory area */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_PER_LCORE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_lcore_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lcore_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* set CPU affinity */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">eal_thread_set_affinity</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"cannot set affinity\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">eal_thread_dump_affinity</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cpuset</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_CPU_AFFINITY_STR_LEN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">DEBUG</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EAL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"lcore %u is ready (tid=%x;cpuset=[%s%s])\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lcore_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">thread_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cpuset</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"..."</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* read on our pipe to get commands */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">fct_arg</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* wait command */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            n </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">m2s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">n </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> errno </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> EINTR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">n </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"cannot read on configuration pipe\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">state </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RUNNING</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* send ack */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        n </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">n </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">n </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> errno </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> EINTR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            n </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s2m</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">n </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"cannot write on configuration pipe\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">f </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"NULL function pointer\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* call the function and store the return value */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fct_arg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">arg</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">f</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fct_arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_wmb</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lcore_config</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">state </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> FINISHED</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* never reached */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* pthread_exit(NULL); */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* return NULL; */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此函数的关键过程如下：</p><ol><li><p>获取当前线程的 thread_id</p></li><li><p>使用获取到的 thread_id 在 lcore_config 数组中匹配，确定对应的 lcore_id，lcore_id 不合法则终止程序，合法则获取 m2s（主线程到从线程的匿名管道）与 s2m （从线程到主线程的匿名管道）</p></li><li><p>设定每线程变量 per_lcore__lcore_id，设定后调用 pthread 库的函数设定当前线程的 cpu 亲和性</p></li><li><p>dump 当前线程的 cpu 亲和性</p></li><li><p>从 m2s 读取主线程发送的数据，失败则直接终止程序，成功则继续执行下一步</p></li><li><p>设定当前线程 lcore_config 结构中的 state 变量为 RUNNING，标志下发任务即将执行</p></li><li><p>通过 s2m 向主线程发送 ack，失败则直接终止程序，成功则继续执行下一步</p></li><li><p>判断当前线程 lcore_config 结构中的 f 变量值是否为空，为空则终止程序，不为空则继续执行下一步</p></li><li><p>调用当前线程 lcore_config 结构中设定的 f 函数，并保存其返回值到 lcore_config 结构中的 ret 变量中，最后将 lcore_config 结构中的 state 变量设定为 FINISHED 标志下发任务执行完成。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用每线程数据-lcore_id-的意义">使用每线程数据 lcore_id 的意义<a class="hash-link" href="#使用每线程数据-lcore_id-的意义" title="标题的直接链接">​</a></h3><p>dpdk 定义了每线程数据 lcore_id，这个 lcore_id 是每个线程的本地数据，它被用于快速获取 lcore_config 数组、其它全局数组中，当前线程占据的元素。</p></li></ol><p>最初创建逻辑核线程时，每个 lcore_config 数组中不同项目的 thread_id 中保存了绑定到的线程的 id 号。dpdk 需要在逻辑核线程的执行函数中获取当前线程对应的 lcore_config 结构，如果每次都遍历 lcore_config 数组来确定，效率很差，同时每个逻辑核对应的 lcore_config 结构已经创建并关联后就是确定的，不会再变化。</p><p>按照我的理解，基于这两点原因，dpdk 定义了每线程数据 lcore_id，在 eal_thread_loop 函数中为这个每线程 id 赋值，赋值完成后，在每个线程中就可以以 lcore_id 为下标来获取到诸如 lcore_config 这种每个线程的结构。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么不将-lcore_config-结构也定义为每线程数据">为什么不将 lcore_config 结构也定义为每线程数据？<a class="hash-link" href="#为什么不将-lcore_config-结构也定义为每线程数据" title="标题的直接链接">​</a></h2><p>按照上文的描述，每个逻辑核线程都需要分配一个 lcore_config 结构，那为什么要通过全局数组，能否将 lcore_config 结构也定义为一个每线程数据来实现呢？</p><p>仔细想想这是不合理的，lcore_config 结构中的一些成员如执行单元相关的成员需要在其它线程中被访问并赋值，而在其它线程中访问到的 lcore_config 结构是本线程的 tls 变量，这样就设定不了其它线程的 lcore_config 结构的成员，故而不能将 lcore_config 结构定义为每线程数据。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-16.04 eal 初始化 log 信息解析]]></title>
        <id>/dpdk/dpdk-16.04 eal 初始化 log 信息解析</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 eal 初始化 log 信息解析"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="标题的直接链接">​</a></h2><p>最近一年左右我解决了很多 dpdk 程序相关的问题，这些问题中有一些问题能够从程序运行的输出信息中找到原因，可由于对这部分信息的重视程度不够，东绕西绕才能找出真正的问题，其效率无疑【非常低下】。</p><p>同时也遇到过产品的同事咨询 dpdk 程序输出信息的问题，一些问题自己也无法解释，场面一度【十分尴尬】。</p><p>鉴于以上两点内容，我在本篇文章中基于 dpdk-16.04 l2fwd 描述下 dpdk 程序输出信息的不同含义，作为记录的同时也希望能为定位问题提供【参考】。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="设备环境信息">设备环境信息<a class="hash-link" href="#设备环境信息" title="标题的直接链接">​</a></h2><p>我使用本地的虚拟机测试，下面是一些相关的环境信息：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-cpu-核与-numa-信息">1. cpu 核与 numa 信息<a class="hash-link" href="#1-cpu-核与-numa-信息" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@virt-debian10:~/$ lscpu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Architecture:        x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CPU op-mode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">:      </span><span class="token number" style="color:#36acaa">32</span><span class="token plain">-bit, </span><span class="token number" style="color:#36acaa">64</span><span class="token plain">-bit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Byte Order:          Little Endian</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Address sizes:       </span><span class="token number" style="color:#36acaa">40</span><span class="token plain"> bits physical, </span><span class="token number" style="color:#36acaa">48</span><span class="token plain"> bits virtual</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CPU</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">:              </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">On-line CPU</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> list: </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">-3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Thread</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> per core:  </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Core</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> per socket:  </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Socket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">:           </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NUMA node</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">:        </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Vendor ID:           GenuineIntel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CPU family:          </span><span class="token number" style="color:#36acaa">6</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Model:               </span><span class="token number" style="color:#36acaa">94</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Model name:          Intel Core Processor </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Skylake, IBRS</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Stepping:            </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CPU MHz:             </span><span class="token number" style="color:#36acaa">1800.000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BogoMIPS:            </span><span class="token number" style="color:#36acaa">3600.00</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Virtualization:      VT-x</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hypervisor vendor:   KVM</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Virtualization type: full</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">L1d cache:           32K</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">L1i cache:           32K</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">L2 cache:            4096K</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">L3 cache:            16384K</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NUMA node0 CPU</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">:   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">-3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology cpuid tsc_known_freq pni pclmulqdq vmx ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault invpcid_single pti ssbd ibrs ibpb tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid mpx rdseed adx smap clflushopt xsaveopt xsavec xgetbv1 xsaves arat umip</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我使用的虚机为单核 4 线程，有 1 个 numa 节点，cpu 频率为 1.8G。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-hugepage-信息">2. hugepage 信息<a class="hash-link" href="#2-hugepage-信息" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@virt-debian10:~$ </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> -i </span><span class="token string" style="color:#e3116c">'huge'</span><span class="token plain"> /proc/meminfo </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">AnonHugePages:      </span><span class="token number" style="color:#36acaa">2048</span><span class="token plain"> kB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ShmemHugePages:        </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> kB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HugePages_Total:     </span><span class="token number" style="color:#36acaa">512</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HugePages_Free:      </span><span class="token number" style="color:#36acaa">512</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HugePages_Rsvd:        </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HugePages_Surp:        </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hugepagesize:       </span><span class="token number" style="color:#36acaa">2048</span><span class="token plain"> kB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hugetlb:         </span><span class="token number" style="color:#36acaa">1048576</span><span class="token plain"> kB</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>虚机设定了 512 个 2M 大小的 hugepage 并挂载 hugetlbfs。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-接口绑定信息">3. 接口绑定信息<a class="hash-link" href="#3-接口绑定信息" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@virt-debian10:~$ dpdk-devbind.py -s </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Network devices using DPDK-compatible driver</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:04:00.0 </span><span class="token string" style="color:#e3116c">'82574L Gigabit Network Connection'</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">drv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">igb_uio </span><span class="token assign-left variable" style="color:#36acaa">unused</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">e1000e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:08:00.0 </span><span class="token string" style="color:#e3116c">'82574L Gigabit Network Connection'</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">drv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">igb_uio </span><span class="token assign-left variable" style="color:#36acaa">unused</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">e1000e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:09:00.0 </span><span class="token string" style="color:#e3116c">'82574L Gigabit Network Connection'</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">drv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">igb_uio </span><span class="token assign-left variable" style="color:#36acaa">unused</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">e1000e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Network devices using kernel driver</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:01:00.0 </span><span class="token string" style="color:#e3116c">'Virtio network device'</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">if</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">enp1s0 </span><span class="token assign-left variable" style="color:#36acaa">drv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">virtio-pci </span><span class="token assign-left variable" style="color:#36acaa">unused</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">virtio_pci,igb_uio *Active*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Other network devices</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">none</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>管理口使用 virtio 网卡，其它三个业务口使用 e1000e 网卡并绑定到 igb_uio 驱动中。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-dpdk-版本与测试程序">4. dpdk 版本与测试程序<a class="hash-link" href="#4-dpdk-版本与测试程序" title="标题的直接链接">​</a></h3><p>dpdk 版本：dpdk-16.04
dpdk 测试程序：dpdk 示例程序——l2fwd</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="l2fwd-执行输出信息">l2fwd 执行输出信息<a class="hash-link" href="#l2fwd-执行输出信息" title="标题的直接链接">​</a></h2><p>执行命令如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> ./l2fwd -- -p0x1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>l2fwd 程序执行的输出信息如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Support maximum </span><span class="token number" style="color:#36acaa">128</span><span class="token plain"> logical core</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> by configuration.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: No </span><span class="token function" style="color:#d73a49">free</span><span class="token plain"> hugepages reported </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> hugepages-1048576kB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Probing VFIO support</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Module /sys/module/vfio_pci not found</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> error </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">No such </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> or directory</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: VFIO modules not loaded, skipping VFIO support</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Setting up child physically contiguous memory</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400005000000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x9000000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400005200000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x9000000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0xc00000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x40000e200000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0xc00000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x20c00000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x40000ee00000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x20c00000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x14800000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x40002fa00000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x14800000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044200000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044400000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044600000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044800000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x400000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044a00000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x400000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044e00000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Requesting </span><span class="token number" style="color:#36acaa">512</span><span class="token plain"> pages of size 2MB from socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: TSC frequency is ~1800013 KHz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: WARNING: cpu flags </span><span class="token assign-left variable" style="color:#36acaa">constant_tsc</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">yes </span><span class="token assign-left variable" style="color:#36acaa">nonstop_tsc</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">no -</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> using unreliable clock cycles </span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Master lcore </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> is ready </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">794d43c0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token assign-left variable" style="color:#36acaa">cpuset</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: lcore </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> is ready </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">78cd1700</span><span class="token punctuation" style="color:#393A34">;</span><span class="token assign-left variable" style="color:#36acaa">cpuset</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: lcore </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> is ready </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">784d0700</span><span class="token punctuation" style="color:#393A34">;</span><span class="token assign-left variable" style="color:#36acaa">cpuset</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: lcore </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> is ready </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">77ccf700</span><span class="token punctuation" style="color:#393A34">;</span><span class="token assign-left variable" style="color:#36acaa">cpuset</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:01:00.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: 1af4:1041 rte_virtio_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   Not managed by a supported kernel driver, skipped</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:04:00.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: </span><span class="token number" style="color:#36acaa">8086</span><span class="token plain">:10d3 rte_em_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x400045000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x400045020000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x400045040000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PMD: eth_em_dev_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">: port_id </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">vendorID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x8086 </span><span class="token assign-left variable" style="color:#36acaa">deviceID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x10d3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:08:00.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: </span><span class="token number" style="color:#36acaa">8086</span><span class="token plain">:10d3 rte_em_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x400045044000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x400045064000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x400045084000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PMD: eth_em_dev_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">: port_id </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">vendorID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x8086 </span><span class="token assign-left variable" style="color:#36acaa">deviceID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x10d3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:09:00.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: </span><span class="token number" style="color:#36acaa">8086</span><span class="token plain">:10d3 rte_em_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x400045088000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x4000450a8000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x4000450c8000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PMD: eth_em_dev_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">: port_id </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">vendorID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x8086 </span><span class="token assign-left variable" style="color:#36acaa">deviceID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x10d3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--------------</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nil</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>有了完整的输出信息后，下面根据不同的功能拆分进行描述。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-cpu-核与-numa-的关系">1. cpu 核与 numa 的关系<a class="hash-link" href="#1-cpu-核与-numa-的关系" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected lcore </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> as core </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on socket </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Support maximum </span><span class="token number" style="color:#36acaa">128</span><span class="token plain"> logical core</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> by configuration.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试环境为 4 核单 numa 结构，numa 在上述输出中对应的信息为 <strong>socket 0</strong>，0 表示第一个 numa 节点。</p><p>在这个环境中，l2fwd 检测到四个逻辑核，这四个核都位于一个 cpu 上。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-映射的-hugepage-种类与大小">2. 映射的 hugepage 种类与大小<a class="hash-link" href="#2-映射的-hugepage-种类与大小" title="标题的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> No free hugepages reported in hugepages</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1048576</span><span class="token plain">kB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Requesting </span><span class="token number" style="color:#36acaa">512</span><span class="token plain"> pages of size </span><span class="token number" style="color:#36acaa">2</span><span class="token plain">MB from socket </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk 支持多种不同大小的 hugepage size，常见的有 2M、512M、1G 等类型，具体支持哪种 hugepage size 与内核配置有关。</p><p>上述输出的第一行表明，当前系统中未创建 1G 的 hugepage 大页，第二行输出表明 hugepage 从 numa 0 中映射了 512 个 2M 的大页，共计 1G 空间。</p><p>我在 <a href="https://blog.csdn.net/Longyu_wlz/article/details/113561592?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">Failed to mmap 2 MB hugepages 与 max_map_count limit</a> 中描述了大页数量过多导致映射失败的一个问题。dpdk-16.04 会在程序初始化的时候映射所有的大页，即便存在 -m 参数限定，仍旧会先映射所有的大页。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-vfio-相关功能初始化">3. vfio 相关功能初始化<a class="hash-link" href="#3-vfio-相关功能初始化" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Probing VFIO support</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Module /sys/module/vfio_pci not found</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> error </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">No such </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> or directory</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: VFIO modules not loaded, skipping VFIO support</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk-16.04 支持 vfio 方式映射网卡到用户态中，dpdk 通过 vfio_pci 内核模块是否加载来判断是否使能 VFIO 模块。</p><p>当 vfio_pci 模块加载后，重新执行 dpdk 程序输出信息如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Probing VFIO support</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   IOMMU type </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Type </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> is supported</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   IOMMU type </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">No</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">IOMMU</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> is not supported</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> VFIO support initialized</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这些信息表明 dpdk 内部 vfio 模块成功初始化。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-使用-hugepage-初始化的-heap-内存信息">3. 使用 hugepage 初始化的 heap 内存信息<a class="hash-link" href="#3-使用-hugepage-初始化的-heap-内存信息" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Setting up child physically contiguous memory</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400005000000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x9000000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400005200000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x9000000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0xc00000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x40000e200000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0xc00000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x20c00000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x40000ee00000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x20c00000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x14800000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x40002fa00000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x14800000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044200000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044400000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044600000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044800000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x400000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044a00000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x400000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Ask a virtual area of 0x200000 bytes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Virtual area found at 0x400044e00000 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> 0x200000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Requesting </span><span class="token number" style="color:#36acaa">512</span><span class="token plain"> pages of size 2MB from socket </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk 内部的 heap 使用 hugepage 内存来分配空间，上述输出描述了初始化 heap 的过程。Ask a virtual area of xxx bytes 表明了申请虚拟内存空间的大小，申请的内存总大小为 1G。</p><p>上述输出中 Ask a virtual area of xxx 输出多次，这表明内核分配的 hugepage 内存相对分散。</p><p>上述输出中初始化的最大内存区域为 549453824 字节（524M），这决定了程序能够申请的单个内存的上限，当 dpdk 程序报错信息表明与申请内存空间有关时，不妨比对下申请空间的大小与这里提到的单个内存的上限。</p><p>一般来说在系统运行后通过写入 /sys 目录中的文件来分配大页则容易出现大页不连续分布的情况，这时即便增加大页的数目也可能因为内存空间的分散而遇到相同的问题，一般将预留的大页数目写入到内核引导参数中，在内核初始化过程中就预留好大页内存，避免因后期内存的使用而产生不同大小的离散空间。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-识别到的频率信息">4. 识别到的频率信息<a class="hash-link" href="#4-识别到的频率信息" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: TSC frequency is ~1800013 KHz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: WARNING: cpu flags </span><span class="token assign-left variable" style="color:#36acaa">constant_tsc</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">yes </span><span class="token assign-left variable" style="color:#36acaa">nonstop_tsc</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">no -</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> using unreliable clock cycles </span><span class="token operator" style="color:#393A34">!</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>第一行输出表明 dpdk 探测到 cpu 频率在 1.8G 左右，与上文描述过的虚拟机配置接近。这里的频率用于 dpdk 内部延时计算，dpdk 内部需要维护内部定时器时间，同时网卡硬件初始化中也需要按照时序要求而延时，且对精度有一定的要求。</p><p>第二行的信息表明系统使用了不可靠的时钟周期，这个输出通过获取 /proc/cpuinfo 中的 cpu flags 参数确定。其中提到的两个与时钟相关的名词解释如下：</p><blockquote><p>constant_tsc: TSC ticks at a constant rate
nonstop_tsc: TSC does not stop in C states</p></blockquote><p>constant_tsc 表明时钟周期按照固定的频率触发，nonstop_tsc 表明时钟不会在　ACPI 切换为 C 状态的时候停止。</p><p>在我测试用的虚拟机中，支持 constant_tsc 而不支持 nonstop_tsc，故而输出使用不可靠时钟源的信息。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-master-线程所在-cpu-核">5. master 线程所在 cpu 核<a class="hash-link" href="#5-master-线程所在-cpu-核" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Master lcore </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> is ready </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">794d43c0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token assign-left variable" style="color:#36acaa">cpuset</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此行输出表明 dpdk 使用 lcorea 0 作为 master 线程，cpuset 表明 master 线程被绑定到 0 核上。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-非-master-线程的-cpuset-信息">6. 非 master 线程的 cpuset 信息<a class="hash-link" href="#6-非-master-线程的-cpuset-信息" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: lcore </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> is ready </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">78cd1700</span><span class="token punctuation" style="color:#393A34">;</span><span class="token assign-left variable" style="color:#36acaa">cpuset</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: lcore </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> is ready </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">784d0700</span><span class="token punctuation" style="color:#393A34">;</span><span class="token assign-left variable" style="color:#36acaa">cpuset</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: lcore </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> is ready </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">77ccf700</span><span class="token punctuation" style="color:#393A34">;</span><span class="token assign-left variable" style="color:#36acaa">cpuset</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述输出表明创建了三个非 master 线程，这些线程分别被绑定到 1、2、3 核上。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="7-识别到了哪些网卡接口类型">7. 识别到了哪些网卡接口类型<a class="hash-link" href="#7-识别到了哪些网卡接口类型" title="标题的直接链接">​</a></h3><p>dpdk 在初始化过程中会扫描 pci 设备并 probe，可以分为如下两个类别的信息：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-未绑定到用户态驱动的-pci-设备">1. 未绑定到用户态驱动的 pci 设备<a class="hash-link" href="#1-未绑定到用户态驱动的-pci-设备" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:01:00.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: 1af4:1041 rte_virtio_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   Not managed by a supported kernel driver, skipped</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk 会扫描所有的 pci 设备，建立 pci 设备链表，并尝试 probe 设备。第一行输出中 0000:01:00.0 表示一个 pci 设备，NUMA socket 值为 -1 表明没有获取到设备所在的 numa 节点信息。</p><p>第二行输出表明 dpdk 尝试 probe 设备，1af4:1041 是设备的 vendor id 与 device id，rte_virtio_pmd 表示 dpdk 匹配到的设备驱动名称，这是一个 virtio 网卡接口。</p><p>第三行输出信息表明此接口未绑定到 dpdk 支持的用户态驱动中，probe 过程被跳过，dpdk 将不会使用该接口。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-绑定到用户态驱动的-pci-设备">2. 绑定到用户态驱动的 pci 设备<a class="hash-link" href="#2-绑定到用户态驱动的-pci-设备" title="标题的直接链接">​</a></h3><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:04:00.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: </span><span class="token number" style="color:#36acaa">8086</span><span class="token plain">:10d3 rte_em_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x400045000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x400045020000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   PCI memory mapped at 0x400045040000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PMD: eth_em_dev_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">: port_id </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">vendorID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x8086 </span><span class="token assign-left variable" style="color:#36acaa">deviceID</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x10d3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>前两行的信息上文已经解释过，这个接口是 e1000e 网卡，支持的驱动为 rte_em_pmd 驱动，第 3~5 行输出 pci 内存映射地址，这些地址用于后续网卡的初始化工作。</p><p>最后一行信息中 PMD: 表明信息输出模块位于 PMD 驱动中，eth_em_dev_init 是此驱动的初始化函数。port_id 是 dpdk 内部对 probe 接口的标识，此接口的 id 为 0，最后输出的 vendorID 与 deviceID 与第二行的输出相同。</p><p>dpdk 程序初始化过程中会对扫描到的 pci 号从小到大进行排序，port_id 依次递增。</p><p>这些输出信息表明了 dpdk 程序识别并 probe 了哪些接口，当你添加新网卡时，初始化信息看不到对应的接口输出信息，可以从如下两个方面进行排查：</p><ol><li>dpdk 是否支持新网卡（查看 lib/librte_eal/common/include/rte_pci_dev_ids.h）</li><li>dpdk 程序是否链接新网卡的 pmd 驱动库</li></ol><p>dpdk 使用 gcc 的 constructor 来注册不同的 pmd 驱动，使用静态库时没有链接相关的库则不会支持相应的网卡。更详细的信息请访问 <a href="https://blog.csdn.net/Longyu_wlz/article/details/113725959?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">gcc constructor 属性修饰的构造函数未被链接问题</a>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>程序运行时常常会有一些<strong>输出信息</strong>，这些输出信息却常常被忽略。这些信息并不是多余的内容，其中可能隐藏着问题的蛛丝马迹。</p><p>经常出现的场景是，要定位某问题时，找不到程序的输出信息，或者找到了输出信息，却不懂输出信息的含义，遑论从中找到疑点。</p><p>回过头想想，其实输出信息一直都在那里，正如问题一直都在那里一样，你能否发现它并带有好奇心去研究它却因人而异了！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-16.04 igb crc length 统计问题]]></title>
        <id>/dpdk/dpdk-16.04 igb crc length 统计问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 igb crc length 统计问题"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>i350 igb 电口，调用 dpdk rte_eth_stats_get 获取到的接口发包字节统计，每个包少了 crc len 长度，导致根据此统计计算的 bps 不准确。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题分析">问题分析<a class="hash-link" href="#问题分析" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="底层驱动获取网卡收发包字节统计数据">底层驱动获取网卡收发包字节统计数据<a class="hash-link" href="#底层驱动获取网卡收发包字节统计数据" title="标题的直接链接">​</a></h3><p>igb 驱动底层统计函数为 eth_igb_stats_get 函数，此函数通过读取网卡统计相关寄存器实现功能。向上层返回的收发包字节统计代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    rte_stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ibytes   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gorc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rte_stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">obytes   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gotc</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>底层读寄存器处的代码逻辑如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/* Workaround CRC bytes included in size, take away 4 bytes/packet */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gorc </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_GORCL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gorc </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint64_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_GORCH</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gorc </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gprc </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> old_gprc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> ETHER_CRC_LEN</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gotc </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_GOTCL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gotc </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint64_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_GOTCH</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gotc </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gptc </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> old_gptc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> ETHER_CRC_LEN</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在上述逻辑中，每个收发的报文都【减掉 crc len 长度】字节，代码的注释表明这部分逻辑正是为了规避 CRC 字节被计算到每个报文长度中的问题。</p><p>dpdk 内部有一个针对网卡是否 strip crc 的配置功能——<strong>hw_strip_crc</strong>，默认为 0，表明网卡不 strip crc，设置为 1 表明网卡使能 strip crc 功能。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hw_strip_crc-在-igb-驱动中的影响">hw_strip_crc 在 igb 驱动中的影响<a class="hash-link" href="#hw_strip_crc-在-igb-驱动中的影响" title="标题的直接链接">​</a></h3><p><strong>1. 对硬件的影响</strong></p><p>   在 up 接口的时候，使用 igb 网卡时，dpdk 会调用 <strong>eth_igb_rx_init</strong> 函数，在这个函数中有对 <strong>hw_strip_crc</strong> 进行判断，根据判断的结果设定硬件状态。</p><p>   相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* Setup the Receive Control Register. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hw_strip_crc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    rctl </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> E1000_RCTL_SECRC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Strip Ethernet CRC. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">/* set STRCRC bit in all queues */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> e1000_i350 </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> e1000_i210 </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> e1000_i211 </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> e1000_i354</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nb_rx_queues</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    rxq </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_queues</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    </span><span class="token class-name">uint32_t</span><span class="token plain"> dvmolr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                            </span><span class="token function" style="color:#d73a49">E1000_DVMOLR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rxq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">reg_idx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    dvmolr </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> E1000_DVMOLR_STRCRC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    </span><span class="token function" style="color:#d73a49">E1000_WRITE_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_DVMOLR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rxq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">reg_idx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dvmolr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    rctl </span><span class="token operator" style="color:#393A34">&amp;=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">~</span><span class="token plain">E1000_RCTL_SECRC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Do not Strip Ethernet CRC. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token comment" style="color:#999988;font-style:italic">/* clear STRCRC bit in all queues */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> e1000_i350 </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> e1000_i210 </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> e1000_i211 </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> e1000_i354</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nb_rx_queues</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    rxq </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_queues</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    </span><span class="token class-name">uint32_t</span><span class="token plain"> dvmolr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                            </span><span class="token function" style="color:#d73a49">E1000_DVMOLR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rxq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">reg_idx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    dvmolr </span><span class="token operator" style="color:#393A34">&amp;=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">~</span><span class="token plain">E1000_DVMOLR_STRCRC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    </span><span class="token function" style="color:#d73a49">E1000_WRITE_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_DVMOLR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rxq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">reg_idx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dvmolr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述逻辑表明，igb 网卡 dpdk pmd 驱动中，hw_strip_crc 的配置将会被用于设定网卡【接收控制寄存器】与每个【收包队列的配置寄存器】。</p><p>我们的程序默认是关闭 <strong>hw_strip_crc</strong> 的，在这种情况下网卡不 strip crc，同时获取收包字节统计的时候为每个收到的包减掉 crc 长度，这个行为与注释内容一致。但是当 hw_strip_crc 使能后，收包字节统计中仍旧为每个包减掉 crc 长度，这里存在问题。</p><p>   <strong>初步的解释是网卡 strip crc 并不会在硬件侧减掉每个包的 crc 长度，包的字节统计与 hw_strip_crc 功能是否使能并无关系。</strong></p><p>   使用 testpmd 测试：</p><ol><li><p>关闭 crc strip</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">   testpmd</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     io packet forwarding </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> CRC stripping disabled </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> packets</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">burst</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">32</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     nb forwarding cores</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> nb forwarding ports</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     RX queues</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> RX desc</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">128</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> RX free threshold</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">32</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     RX threshold registers</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> pthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> hthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> wthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     TX queues</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> TX desc</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">512</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> TX free threshold</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     TX threshold registers</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> pthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> hthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> wthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">16</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     TX RS bit threshold</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> TXQ flags</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   testpmd</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> show port stats all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     ######################## NIC statistics </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> port </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  ########################</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">packets</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">missed</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">bytes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">errors</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">nombuf</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">packets</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">errors</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">bytes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     ############################################################################</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   testpmd</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> show port stats all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     ######################## NIC statistics </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> port </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  ########################</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">packets</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">          RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">missed</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">bytes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">180</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">errors</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">nombuf</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">packets</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">          TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">errors</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">bytes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">180</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     ############################################################################</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>  对端发出 3 个 64-byte 的包，crc_len 长度被减掉。
</p></li><li><p>开启 crc strip</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> testpmd</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   io packet forwarding </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> CRC stripping enabled </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> packets</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">burst</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">32</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   nb forwarding cores</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> nb forwarding ports</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   RX queues</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> RX desc</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">128</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> RX free threshold</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">32</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   RX threshold registers</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> pthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> hthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> wthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   TX queues</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> TX desc</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">512</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> TX free threshold</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   TX threshold registers</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> pthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> hthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> wthresh</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">16</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   TX RS bit threshold</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> TXQ flags</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> testpmd</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> show port stats </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ######################## NIC statistics </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> port </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  ########################</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">packets</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain">          RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">missed</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">bytes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">360</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">errors</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">nombuf</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">packets</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain">          TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">errors</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">bytes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">360</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ############################################################################</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> testpmd</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> show port stats </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ######################## NIC statistics </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> port </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  ########################</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">packets</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token plain">          RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">missed</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">bytes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">540</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">errors</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   RX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">nombuf</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">packets</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token plain">          TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">errors</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">          TX</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">bytes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">540</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ############################################################################</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对端发出 3 个 64-byte 的包，crc_len 长度被减掉，与关闭 crc strip 的效果一致表明猜测合理。
</p></li></ol><p><strong>2. 对软件的影响</strong></p><p>   在 eth_igb_rx_init  函数中有如下代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> rxq</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">crc_len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint8_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hw_strip_crc </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                         </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> ETHER_CRC_LEN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>   此代码使用 hw_strip_crc 配置判断，收包队列中是否减掉 crc_len。
hw_strip_crc 开启时，rxq-&gt;crc_len 长度赋值为 0 表明不需要减掉此部分长度，此部分工作由网卡完成。
hw_strip_crc 关闭时，rxq-&gt;crc_len 赋值为 ETHER_CRC_LEN 来在收包逻辑中减掉 crc_len 长度，这里最终计算得出的报文长度会填充到报文所在 mbuf 的 pkt_len 字段中。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="发包时-crc-len-的处理">发包时 crc len 的处理<a class="hash-link" href="#发包时-crc-len-的处理" title="标题的直接链接">​</a></h3><p>发包的时候需要填充报文的 CRC，没有特别的处理。igb dpdk pmd 驱动中在发包字节统计中减掉每个发出包的 CRC 长度。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="解决方案">解决方案<a class="hash-link" href="#解决方案" title="标题的直接链接">​</a></h2><p>修改 igb 网卡获取网卡统计代码，取消减掉每个发出包的 crc len 的逻辑。修改 patch 如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ndex</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> drivers</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">net</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">e1000</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_ethdev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> drivers</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">net</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">e1000</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_ethdev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c     </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> drivers</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">net</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">e1000</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_ethdev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1729</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">12</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1729</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">13</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Both registers clear on the read of the high dword */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* Workaround CRC bytes included in size, take away 4 bytes/packet */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/* included CRC length to fix igb netcard bps leak */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gorc </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_GORCL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gorc </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint64_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_GORCH</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">-</span><span class="token plain">        stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gorc </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gprc </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> old_gprc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> ETHER_CRC_LEN</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/* stats-&gt;gorc -= (stats-&gt;gprc - old_gprc) * ETHER_CRC_LEN; */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gotc </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_GOTCL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gotc </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint64_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_GOTCH</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">-</span><span class="token plain">       stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gotc </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">gptc </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> old_gptc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> ETHER_CRC_LEN</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/* stats-&gt;gotc -= (stats-&gt;gptc - old_gptc) * ETHER_CRC_LEN; */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rnbc </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_RNBC</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        stats</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ruc </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">E1000_READ_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_RUC</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="其它网卡如何处理-hw_strip_crc-配置的">其它网卡如何处理 hw_strip_crc 配置的？<a class="hash-link" href="#其它网卡如何处理-hw_strip_crc-配置的" title="标题的直接链接">​</a></h2><p>ixgbe: 与 Igb 处理过程一致，硬件 + 软件</p><p>i40e: 只用来设置 rxq-&gt;crc_len，没有硬件相关配置</p><p>ice: 同 i40e</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-16.04 igb_uio 模块分析]]></title>
        <id>/dpdk/dpdk-16.04 igb_uio 模块分析</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 igb_uio 模块分析"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[igb_uio 是 dpdk 内部实现的将网卡映射到用户态的内核模块，它是 uio 模块的一个实例。]]></summary>
        <content type="html"><![CDATA[<p>igb_uio 是 dpdk 内部实现的将网卡映射到用户态的内核模块，它是 uio 模块的一个实例。</p><p>igb_uio 是一种 pci 驱动，将网卡绑定到 igb_uio 隔离了网卡的内核驱动，同时 igb_uio 完成网卡中断内核态初始化并将中断信号映射到用户态。</p><p>igb_uio 与 uio 模块密切相关，我将从 uio 模块着手分析 igb_uio 模块的工作原理。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="uio-模块分析">uio 模块分析<a class="hash-link" href="#uio-模块分析" title="标题的直接链接">​</a></h2><p>uio 是一种<strong>字符设备驱动</strong>，在此驱动中注册了单独的 <strong>file_operations 函数表</strong>，uio 设备可以看做是一种独立的设备类型。</p><p><strong>file_operations</strong> 函数内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">file_operations</span><span class="token plain"> uio_fops </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">owner      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> THIS_MODULE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">open       </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_open</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">release    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_release</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">read       </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_read</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">write      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_write</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mmap       </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_mmap</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">poll       </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_poll</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">fasync     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_fasync</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">llseek     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> noop_llseek</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>该函树表在 <strong>uio_major_init</strong> 中初始化 <strong>cdev</strong> 结构体时使用，相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    cdev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> THIS_MODULE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cdev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ops </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">uio_fops</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">kobject_set_name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">cdev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kobj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"%s"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cdev_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cdev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> uio_dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> UIO_MAX_DEVICES</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们对 /dev/uioxx 文件的操作最终都会对应到<strong>对 uio_fops 的不同方法的调用上</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="uio_info-结构体及其实例化过程">uio_info 结构体及其实例化过程<a class="hash-link" href="#uio_info-结构体及其实例化过程" title="标题的直接链接">​</a></h2><p><strong>uio</strong> 模块中的 <strong>idev</strong> 变量是一个指向 <strong>struct uio_device</strong> 的指针，<strong>struct uio_device</strong> 中又包含 一个指向 <strong>struct uio_info</strong> 的指针，<strong>struct uio_info</strong> 结构体内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_device</span><span class="token plain">   </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">uio_dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain">      </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain">      </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">version</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_mem</span><span class="token plain">      mem</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">MAX_UIO_MAPS</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_port</span><span class="token plain">     port</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">MAX_UIO_PORT_REGIONS</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain">            irq</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain">       irq_flags</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain">            </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">priv</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">irqreturn_t</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">handler</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> irq</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">mmap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">vm_area_struct</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">vma</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">open</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">inode</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">inode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">release</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">inode</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">inode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">irqcontrol</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s32 irq_on</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>每一个 uio 设备都会<strong>实例化</strong>一个 uio_info 结构体，<strong>uio 驱动自身不会实例化 uio_info</strong> 结构体，它只提供一个<strong>框架</strong>，可以在其它模块中调用 <strong>uio_register_device</strong> 来<strong>实例化 uio_info 结构体</strong>，在 dpdk 中，常见方式是在<strong>驱动绑定 igb_uio</strong> 的时候调用 <strong>uio_register_device</strong> 进行实例化。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="igb_uioc-中初始化当前设备-uio_info-结构过程">igb_uio.c 中初始化当前设备 uio_info 结构过程<a class="hash-link" href="#igb_uioc-中初始化当前设备-uio_info-结构过程" title="标题的直接链接">​</a></h2><p>可以在 igb_uio.c 的 <strong>probe</strong> 函数 <strong>igbuio_pci_probe</strong> 中找到实例化的相关代码，摘录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">410</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* remap IO memory */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">411</span><span class="token plain">     err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igbuio_setup_bars</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">428</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* fill uio infos */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">429</span><span class="token plain">     udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"igb_uio"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">430</span><span class="token plain">     udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"0.1"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">431</span><span class="token plain">     udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">handler </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> igbuio_pci_irqhandler</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">432</span><span class="token plain">     udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">irqcontrol </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> igbuio_pci_irqcontrol</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">433</span><span class="token plain"> #ifdef CONFIG_XEN_DOM0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">434</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* check if the driver run on Xen Dom0 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">435</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">xen_initial_domain</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">436</span><span class="token plain">         udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mmap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> igbuio_dom0_pci_mmap</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">437</span><span class="token plain"> #endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">438</span><span class="token plain">     udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">priv </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> udev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">478</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* register uio driver */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">479</span><span class="token plain">     err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uio_register_device</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>411 行调用 igbuio_setup_bars 映射 pci 设备 bar 中的内存区域，此函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">332</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">333</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igbuio_setup_bars</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">334</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">335</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> iom</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> iop</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">336</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> flags</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">337</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">bar_names</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">PCI_STD_RESOURCE_END </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">338</span><span class="token plain">         </span><span class="token string" style="color:#e3116c">"BAR0"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">339</span><span class="token plain">         </span><span class="token string" style="color:#e3116c">"BAR1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">340</span><span class="token plain">         </span><span class="token string" style="color:#e3116c">"BAR2"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">341</span><span class="token plain">         </span><span class="token string" style="color:#e3116c">"BAR3"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">342</span><span class="token plain">         </span><span class="token string" style="color:#e3116c">"BAR4"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">343</span><span class="token plain">         </span><span class="token string" style="color:#e3116c">"BAR5"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">344</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">345</span><span class="token plain">     </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">346</span><span class="token plain">     iom </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">347</span><span class="token plain">     iop </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">348</span><span class="token plain">     </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">349</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ARRAY_SIZE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">bar_names</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">350</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">pci_resource_len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">351</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">pci_resource_start</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">352</span><span class="token plain">             flags </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_resource_flags</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">353</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flags </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> IORESOURCE_MEM</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">354</span><span class="token plain">                 ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igbuio_pci_setup_iomem</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> iom</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">355</span><span class="token plain">                                  i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bar_names</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">356</span><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">357</span><span class="token plain">                     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">358</span><span class="token plain">                 iom</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">359</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flags </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> IORESOURCE_IO</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">360</span><span class="token plain">                 ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igbuio_pci_setup_ioport</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> iop</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">361</span><span class="token plain">                                   i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bar_names</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">362</span><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">363</span><span class="token plain">                     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">364</span><span class="token plain">                 iop</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">365</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">366</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">367</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">368</span><span class="token plain">     </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">369</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">iom </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENOENT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">370</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>它将 pci 设备每个 bar 的内存空间映射到 uio_info 结构中，可以分为两个类别：</p><ol><li>IORESOURCE_MEM</li><li>IORESOURCE_IO</li></ol><p>每个 bar 的 IORESOURCE_MEM 内存信息填充 uio_info 中的 mem 字段，相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">289</span><span class="token plain">     info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mem</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">290</span><span class="token plain">     info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mem</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">addr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">291</span><span class="token plain">     info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mem</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">internal_addr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> internal_addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">292</span><span class="token plain">     info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mem</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">293</span><span class="token plain">     info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mem</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">memtype </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> UIO_MEM_PHYS</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>n 从 0 开始，代表每一块独立的内存区域。</p><p>每个 bar 的 IORESOURCE_IO 内存信息填充 uio_info 中的 port 字段，相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">312</span><span class="token plain">     info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">port</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">313</span><span class="token plain">     info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">port</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">314</span><span class="token plain">     info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">port</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">315</span><span class="token plain">     info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">port</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">porttype </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> UIO_PORT_X86</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>n 从 0 开始累加，代表每一块有效的 io 内存区域，igb_uio 中映射的 pci bar 的内存区域并不会被直接使用，在程序执行 mmap 映射 /dev/uioX 设备内存时 info 结构中的 mem 与 port 字段的值被使用，通过这样的方式将网卡的 pci 物理地址映射为用户态空间的虚拟地址。</p><p><strong>研究 dpdk-16.04 内部代码却发现它映射网卡 pci resource 地址，并不通过这种方式，实际是通过访问每个 pci 设备在 /sys 目录树下生成的 resource 文件获取 pci 内存资源信息，然后依次 mmap 每个 pci 内存资源对应的 resourceX 文件，这里执行的 mmap 将 resource 文件中的物理地址映射为用户态程序中的虚拟地址！</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="uio_info-结构体中-mem-与-port-io-字段在-igb_uio-中填充的信息存在的意义">uio_info 结构体中 mem 与 port io 字段在 igb_uio 中填充的信息存在的意义<a class="hash-link" href="#uio_info-结构体中-mem-与-port-io-字段在-igb_uio-中填充的信息存在的意义" title="标题的直接链接">​</a></h2><p>阅读 uio 模块代码，发现每个 uio 设备示例化过程中，会调用 <strong>uio_dev_add_attributes</strong> 创建 <strong>maps 与 portio sysfs 属性</strong>，网卡绑定到 igb_uio 后，我们可以通过访问 sysfs 目录中当前 pci 设备 uio maps 与 uio portio 文件来获取到网卡的 pci bar 中的物理内存信息。</p><p>示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># pwd</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/sys/bus/pci/drivers/igb_uio/0000:00:06.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># cat ./uio/uio2/maps/map0/addr ./uio/uio2/maps/map0/name  ./uio/uio2/maps/map0/size</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0xfebf3000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BAR1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x1000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># cat ./uio/uio2/portio/port0/start ./uio/uio2/portio/port0/name  ./uio/uio2/portio/port0/size ./uio/uio2/portio/port0/porttype</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0xc080</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BAR0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port_x86</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如上信息说明 00:06.0 pci 接口，其有效 IORESOURCE_MEM 位于 BAR1 中，物理地址是 0xfebf3000，长度是 0x1000，有效 IORESOURCE_IO 位于 BAR0 中，物理地址是 0xc080，长度为 0x20，类型为 port_x86。</p><p>获取 resource 文件信息如下：</p><div class="language-bssh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bssh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> [root] # cat ./resource</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x000000000000c080 0x000000000000c09f 0x0000000000040101</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x00000000febf3000 0x00000000febf3fff 0x0000000000040200</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x00000000feb80000 0x00000000febbffff 0x000000000004e200</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>resource 文件信息每一行表示一个 pci 资源空间，dpdk 中只使用了前 6 个资源空间。每一个资源空间的第一列为起始物理地址，第二列为终止物理地址，第三列为 flag 标志。</p><p>其内容与 uio 生成的 maps 文件及 portio 文件的输出信息是一致的！实际上我们也可用通过 mmap /dev/uioX 来完成 pci 设备内存资源映射到用户态的工作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="如何通过-mmap-devuiox-文件来映射网卡-pci-内存资源">如何通过 mmap /dev/uiox 文件来映射网卡 pci 内存资源<a class="hash-link" href="#如何通过-mmap-devuiox-文件来映射网卡-pci-内存资源" title="标题的直接链接">​</a></h2><p>上文提到过，mmap /dev/uiox 需要通过 uio 生成的 maps 文件完成，从内核文档中找到与 maps 文件相关的如下信息：</p><p>Each <code>mapX/</code> directory contains four read-only files that show attributes of the memory:</p><ul><li><code>name</code>: A string identifier for this mapping. This is optional, the string can be empty. Drivers can set this to make it easier for userspace to find the correct mapping.</li><li><code>addr</code>: The address of memory that can be mapped.</li><li><code>size</code>: The size, in bytes, of the memory pointed to by addr.</li><li><code>offset</code>: The offset, in bytes, that has to be added to the pointer returned by <code>mmap()</code> to get to the actual device memory. This is important if the device’s memory is not page aligned. Remember that pointers returned by <code>mmap()</code> are always page aligned, so it is good style to always add this offset.</li></ul><p>From userspace, the different mappings are distinguished by adjusting the <code>offset</code> parameter of the <code>mmap()</code> call. To map the memory of mapping N, you have to use N times the page size as your offset:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">offset = N * getpagesize();</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>不同的 pci 内存区域通过 offset 来区分，这就保证了当存在两个 pci 资源内存大小一致情况时的正常处理。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="igb_uio-模块的初始化与解初始化函数">igb_uio 模块的初始化与解初始化函数<a class="hash-link" href="#igb_uio-模块的初始化与解初始化函数" title="标题的直接链接">​</a></h2><p>igb_uio 模块的初始化与解初始化函数调用语句如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">568</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">module_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">igbuio_pci_init_module</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">569</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">module_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">igbuio_pci_exit_module</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>igb_uio 模块可以看做是一个 pci 驱动的实例，其流程与 pci 驱动初始化过程类似，它实例化了一个 id_table 为空的 pci 驱动，在绑定网卡到 igb_uio 前需要先写入网卡的 vendor id 与 device id 到 igb_uio 驱动的 new_id 文件，动态扩充 igb_uio 支持的 pci 设备型号，这与常见的 pci 驱动有所区别。</p><p>igb_uio pci 驱动实例及初始化代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">543</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_driver</span><span class="token plain"> igbuio_pci_driver </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">544</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"igb_uio"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">545</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id_table </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">546</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">probe </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> igbuio_pci_probe</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">547</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">remove </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> igbuio_pci_remove</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">548</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">549</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">550</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> __init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">551</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igbuio_pci_init_module</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">552</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">553</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">554</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">555</span><span class="token plain">     ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igbuio_config_intr_mode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">intr_mode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">556</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">557</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">558</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">559</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_register_driver</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">igbuio_pci_driver</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">560</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">561</span><span class="token plain"> </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>igbuio_config_intr_mode 配置模块使用的中断模型，intr_mode 是 igb_uio 模块定义的一个模块参数，在加载模块的时候提供，没有指定时，默认使用 MSIX 中断模型。</p><p>559 行注册了 igbuio pci 设备，与之对应在解初始化函数中移除注册的 pci 驱动，函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">562</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> __exit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">563</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igbuio_pci_exit_module</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">564</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">565</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">pci_unregister_driver</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">igbuio_pci_driver</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">566</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="网卡绑定到-igb_uio-时-probe-的过程">网卡绑定到 igb_uio 时 probe 的过程<a class="hash-link" href="#网卡绑定到-igb_uio-时-probe-的过程" title="标题的直接链接">​</a></h2><p>当网卡绑定到 igb_uio 时会执行 probe 操作，代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">377</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igbuio_pci_probe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_device_id</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">378</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">379</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_uio_pci_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">udev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">380</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">msix_entry</span><span class="token plain"> msix_entry</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">381</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> err</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">382</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">383</span><span class="token plain">     udev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kzalloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_uio_pci_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> GFP_KERNEL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">384</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">udev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">385</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENOMEM</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">386</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">387</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">388      * enable device: ask low-level code to enable I/O and</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">389      * memory</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">390      */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">391</span><span class="token plain">     err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_enable_device</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">392</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">393</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">dev_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot enable PCI device\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">394</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> fail_free</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">395</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">396</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">397</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">398      * reserve device's PCI memory regions for use by this</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">399      * module</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">400      */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">401</span><span class="token plain">     err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_request_regions</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"igb_uio"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">402</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">403</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">dev_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot request regions\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">404</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> fail_disable</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">405</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">406</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">407</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* enable bus mastering on the device */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">408</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">pci_set_master</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">410</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* remap IO memory */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">411</span><span class="token plain">     err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igbuio_setup_bars</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">412</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">413</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> fail_release_iomem</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">414</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">415</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* set 64-bit DMA mask */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">416</span><span class="token plain">     err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_set_dma_mask</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token function" style="color:#d73a49">DMA_BIT_MASK</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">417</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">418</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">dev_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot set DMA mask\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">419</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> fail_release_iomem</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">420</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">421</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">422</span><span class="token plain">     err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_set_consistent_dma_mask</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">DMA_BIT_MASK</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">423</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">424</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">dev_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot set consistent DMA mask\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">425</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> fail_release_iomem</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">426</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">427</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">439</span><span class="token plain">     udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pdev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">440</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">441</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">igbuio_intr_mode_preferred</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">442</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_INTR_MODE_MSIX</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">443</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Only 1 msi-x vector needed */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">444</span><span class="token plain">         msix_entry</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">445</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">pci_enable_msix</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">msix_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">446</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">dev_dbg</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"using MSI-X"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">447</span><span class="token plain">             udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">irq </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> msix_entry</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vector</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">448</span><span class="token plain">             udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_INTR_MODE_MSIX</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">449</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">450</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">451</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* fall back to INTX */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">452</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_INTR_MODE_LEGACY</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">453</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">pci_intx_mask_supported</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">454</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">dev_dbg</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"using INTX"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">455</span><span class="token plain">             udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">irq_flags </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> IRQF_SHARED</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">456</span><span class="token plain">             udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">irq </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">irq</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">457</span><span class="token plain">             udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_INTR_MODE_LEGACY</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">458</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">459</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">460</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">dev_notice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"PCI INTX mask not supported\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">461</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* fall back to no IRQ */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">462</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_INTR_MODE_NONE</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">463</span><span class="token plain">         udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_INTR_MODE_NONE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">464</span><span class="token plain">         udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">irq </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">465</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">466</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">467</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">468</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">dev_err</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"invalid IRQ mode %u"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">469</span><span class="token plain">             igbuio_intr_mode_preferred</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">470</span><span class="token plain">         err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">471</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> fail_release_iomem</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">472</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">473</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">474</span><span class="token plain">     err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sysfs_create_group</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">kobj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev_attr_grp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">475</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">476</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> fail_release_iomem</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">477</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">480</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">481</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> fail_remove_group</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">482</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">483</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">pci_set_drvdata</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> udev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">484</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">485</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">dev_info</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"uio device registered with irq %lx\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">486</span><span class="token plain">          udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">irq</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">487</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">488</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">489</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">490</span><span class="token plain"> fail_remove_group</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">491</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">sysfs_remove_group</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">kobj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev_attr_grp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">492</span><span class="token plain"> fail_release_iomem</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">493</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">igbuio_pci_release_iomem</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">494</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_INTR_MODE_MSIX</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">495</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">pci_disable_msix</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pdev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">496</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">pci_release_regions</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">497</span><span class="token plain"> fail_disable</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">498</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">pci_disable_device</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">499</span><span class="token plain"> fail_free</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">500</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">kfree</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">udev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">501</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">502</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> err</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">503</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>383 行创建了一个 rte_uio_pci_dev 结构体实例，387~408 行使能 pci 设备并保留设备的 pci 内存区域到 igb_uio 模块中并使能总线控制。</p><p>411 行调用 igbuio_setup_bars 映射 pci 设备的 6 个 bar，并将内存地址及长度保存到 rte_uio_pci_dev 结构体的 info 字段中，详细信息见上文。</p><p>415~426 行设置 dma mask 信息，跳过了 uio_info 结构体初始化过程，这部分代码在探讨 uio 的时候描述。</p><p>441~472 行判断 igb_uio 使用的中断模型，根据不同的中断模型申请使能并填充中断信息。474 行创建了 igb_uio 内部的 sysfs 属性，这之后 483 行调用 pci_set_drvdata 将 udev 设置为 pci 设备的私有数据。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-与-uio-设备文件的交互过程">dpdk 与 uio 设备文件的交互过程<a class="hash-link" href="#dpdk-与-uio-设备文件的交互过程" title="标题的直接链接">​</a></h2><p>dpdk 通过访问 uio 设备文件来完成物理网卡内核态的中断交互过程，阻塞式读取、epoll uio 文件来监听是否有中断事件，当中断到来后，read、epoll 系统调用返回，用户态中断回调函数执行完成后清除相应的中断标志位。</p><p>绑定网卡到 igb_uio 时，实例化一个 uio 设备的过程中会申请 request_irq，并传入了中断回调函数 uio_interrupt，这是 uio 能够捕获到中断信号的关键！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="标准-uio-设备控制中断过程">标准 UIO 设备控制中断过程<a class="hash-link" href="#标准-uio-设备控制中断过程" title="标题的直接链接">​</a></h2><p>对于标准的 uio 设备，通过<strong>向设备文件中写入 1</strong> 来<strong>使能</strong>中断，与之类似<strong>关闭中断</strong>的过程是<strong>向设备文件</strong>中<strong>写入 0</strong>。</p><p>使用 uio 映射网卡到用户态时，网卡驱动会调用 <strong>uio_intr_enable</strong> 函数来使能 uio uio 中断。其代码摘录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">uio_intr_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_intr_handle</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">intr_handle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">intr_handle</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EAL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"Error enabling interrupts for fd %d (%s)\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            intr_handle</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strerror</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">errno</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到，这个函数通过写 1 到 uio 设备文件中来完成使能中断的过程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="写入-uio-设备文件有怎样的影响">写入 uio 设备文件有怎样的影响？<a class="hash-link" href="#写入-uio-设备文件有怎样的影响" title="标题的直接链接">​</a></h2><p>uio_write 是<strong>写入 uio 设备文件时</strong>内核中<strong>最终调用到</strong>的写入函数，其代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token class-name">ssize_t</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uio_write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">file</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">filep</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> __user </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">size_t</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">loff_t</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ppos</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_listener</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">listener </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> filep</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">private_data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">idev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> listener</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">ssize_t</span><span class="token plain"> retval</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s32 irq_on</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">copy_from_user</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">irq_on</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> buf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EFAULT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">mutex_lock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        retval </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">irq</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        retval </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EIO</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">irqcontrol</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        retval </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENOSYS</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    retval </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">irqcontrol</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> irq_on</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">out</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">mutex_unlock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> retval </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> retval </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到它从<strong>用户态</strong>获取到 <strong>irq_on</strong> 这个变量的值，为 1 对应要使能中断，为 0 则表示关闭中断，在获取了这个参数后，它首先<strong>占用互斥锁</strong>，然后调用 info 结构体中实例化的 <strong>irqcontrol</strong> 子函数来完成工作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="write-写入-uio-设备文件的完整过程">write 写入 uio 设备文件的完整过程<a class="hash-link" href="#write-写入-uio-设备文件的完整过程" title="标题的直接链接">​</a></h2><p>上文中我已经提到过使用 write 系统调用写入 uio 设备文件最终将会调用到 <strong>info 结构体</strong>中实例化的 <strong>irqcontrol 子函数</strong>来完成工作，igb_uio 就提供了这样一个函数。</p><p>也就是说在<strong>绑定网卡到 igb_uio 时</strong>，<strong>写入</strong>接口对应的 <strong>uio 设备文件</strong>时将会调用 igb_uio 中实例化的 <strong>info-&gt;irqcontrol</strong> 函数来<strong>控制中断状态</strong>。</p><p>这里提到的 <strong>irqcontrol</strong> 的实例化函数，在 igb_uio 中对应的就是 <strong>igbuio_pci_irqcontrol</strong> 函数。其代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">igbuio_pci_irqcontrol</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s32 irq_state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_uio_pci_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">udev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">priv</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pdev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pdev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">pci_cfg_access_lock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pdev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_INTR_MODE_LEGACY</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">pci_intx</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pdev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">irq_state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_INTR_MODE_MSIX</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">msi_desc</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">if</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">LINUX_VERSION_CODE </span><span class="token macro property expression operator" style="color:#393A34">&lt;</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">KERNEL_VERSION</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression number" style="color:#36acaa">4</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">3</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">0</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">list_for_each_entry</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pdev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">msi_list</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">igbuio_msix_mask_irq</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> irq_state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">list_for_each_entry</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pdev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">msi_list</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">igbuio_msix_mask_irq</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> irq_state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">pci_cfg_access_unlock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pdev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里需要<strong>访问 pci 配置空间</strong>，根据不同的<strong>中断类型</strong>来控制中断状态。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="write-过程图示">write 过程图示<a class="hash-link" href="#write-过程图示" title="标题的直接链接">​</a></h2><p><img loading="lazy" src="https://img-blog.csdnimg.cn/20210421152518118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" class="img_ev3q"></p><p>dpdk 程序在初始化网卡时会写入网卡接口对应的 uio 文件来使能中断，当中断使能后，一旦有中断到来，uio_interrupt 中断回调会被执行。</p><p>此回调函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * uio_interrupt - hardware interrupt handler</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @irq: IRQ number, can be UIO_IRQ_CYCLIC for cyclic timer</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> * @dev_id: Pointer to the devices uio_device structure</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token class-name">irqreturn_t</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uio_interrupt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> irq</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">idev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">dev_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">irqreturn_t</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">handler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">irq</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> IRQ_HANDLED</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">uio_event_notify</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>它首先调用了 uio_info 中的 handler 函数，对 igb_uio 来说，此函数是 igbuio_pci_irqhandler，其源码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">207</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">208  * This is interrupt handler which will check if the interrupt is for the right device.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">209  * If yes, disable it here and will be enable later.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">210  */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">211</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token class-name">irqreturn_t</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">212</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igbuio_pci_irqhandler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> irq</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">213</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">214</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_uio_pci_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">udev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">priv</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">215</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">216</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Legacy mode need to mask in hardware */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">217</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_INTR_MODE_LEGACY </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">218</span><span class="token plain">         </span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">pci_check_and_mask_intx</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pdev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">219</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> IRQ_NONE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">220</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">221</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Message signal mode, no share IRQ and automasked */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">222</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> IRQ_HANDLED</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">223</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对于 Legacy 中断模式，需要设置硬件掩码值，我只关注返回 IRQ_HANDLED 的流程。当 handler 函数调用完成后，如果返回值是 IRQ_HANDLED，则调用 uio_event_notify 唤醒阻塞在 uio 设备等待队列中的进程，以通知用户态程序中断到达。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-程序中监听中断事件的过程">dpdk 程序中监听中断事件的过程<a class="hash-link" href="#dpdk-程序中监听中断事件的过程" title="标题的直接链接">​</a></h2><p>dpdk 单独创建了一个中断线程负责监听并处理中断事件，其主要过程如下：</p><ol><li>创建 epoll_event</li><li>遍历中断源列表，添加每一个需要监听的 uio 设备事件的 uio 文件描述符到 epoll_event 中</li><li>调用 epoll_wait 监听事件，监听到事件后调用 eal_intr_process_interrupts 调用相关的中断回调函数</li></ol>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-16.04 l2fwd 源码分析]]></title>
        <id>/dpdk/dpdk-16.04 l2fwd 源码分析</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 l2fwd 源码分析"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[l2fwd 是 dpdk 二层转发示例，它会将一个口收到的报文经过相邻口转发出去，在日常测试中经常用到。]]></summary>
        <content type="html"><![CDATA[<p>l2fwd 是 dpdk 二层转发示例，它会将一个口收到的报文经过相邻口转发出去，在日常测试中经常用到。</p><p>下面我从源码入手，分析下 l2fwd 内部的工作原理。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="l2fwd-初始化-eal-并解析参数">l2fwd 初始化 eal 并解析参数<a class="hash-link" href="#l2fwd-初始化-eal-并解析参数" title="标题的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">516</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">517</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">argv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">518</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">519</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">lcore_queue_conf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">qconf</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">520</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_dev_info</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">521</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">522</span><span class="token plain">     </span><span class="token class-name">uint8_t</span><span class="token plain"> nb_ports</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">523</span><span class="token plain">     </span><span class="token class-name">uint8_t</span><span class="token plain"> nb_ports_available</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">524</span><span class="token plain">     </span><span class="token class-name">uint8_t</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> last_port</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">525</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> lcore_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rx_lcore_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">526</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> nb_ports_in_mask </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">527</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">528</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* init EAL */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">529</span><span class="token plain">     ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eal_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> argv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">530</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">531</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Invalid EAL arguments\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">532</span><span class="token plain">     argc </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">533</span><span class="token plain">     argv </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">534</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">535</span><span class="token plain">     force_quit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">536</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">signal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">SIGINT</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> signal_handler</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">537</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">signal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">SIGTERM</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> signal_handler</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">538</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">539</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* parse application arguments (after the EAL ones) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">540</span><span class="token plain">     ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">l2fwd_parse_args</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> argv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">541</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">542</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Invalid L2FWD arguments\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>第 529 行调用 rte_eal_init 初始化 eal 环境，由于 rte_eal_init 中会对 dpdk 内部的参数进行解析，l2fwd 需要调整 argc 与 argv 的位置以解析 l2fwd 自定义的参数。</p><p>第 535 将 force_quit 变量设置为 false，536 ~ 537 行注册了 SIGINT 与 SIGTERM 的信号处理函数 signal_handler，此函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">506</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">507</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">signal_handler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> signum</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">508</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">509</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">signum </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> SIGINT </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> signum </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> SIGTERM</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">510</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"\n\nSignal %d received, preparing to exit...\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">511</span><span class="token plain">                 signum</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">512</span><span class="token plain">         force_quit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">513</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">514</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>signal_handler 函数向终端打印准备退出的信息，并且将 force_quit 设置为 true，当收发包线程检测到 force_quit 为 true 后主动退出，程序主动终止，退出前会释放占用的接口，使用如下代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">709</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> nb_ports</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">710</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l2fwd_enabled_port_mask </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">711</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">712</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Closing port %d..."</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">713</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">rte_eth_dev_stop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">714</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">rte_eth_dev_close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">715</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">" Done\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">716</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">717</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Bye...\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在 for 循环中判断当前接口是否是 l2fwd 使能的接口，是则打印信息信息并 stop 与 close 接口，否则跳过接口。</p><p>第 540 行调用的 l2fwd_parse_args 解析 l2fwd 内部定义的参数，这些参数在 <code>--</code>之后输入，与 dpdk 内部参数隔离开。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="l2fwd_parse_args-函数">l2fwd_parse_args 函数<a class="hash-link" href="#l2fwd_parse_args-函数" title="标题的直接链接">​</a></h2><p>l2fwd 支持三个参数，-p 参数使用十六进制掩码表示要使能的接口，每一位表示一个接口；-q 参数用于指定每个核上的队列数目；-T 参数用于指定时间周期，不太常用。</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">380</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Parse the argument given in the command line of the application */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">381</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">382</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">l2fwd_parse_args</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">argv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">383</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">384</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> opt</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">385</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">argvopt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">386</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> option_index</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">387</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">prgname </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> argv</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">388</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">option</span><span class="token plain"> lgopts</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">389</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">{</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">390</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">391</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">392</span><span class="token plain">     argvopt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> argv</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">393</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">394</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">opt </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getopt_long</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> argvopt</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"p:q:T:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">395</span><span class="token plain">                   lgopts</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">option_index</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">EOF</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">396</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">397</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">opt</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">398</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* portmask */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">399</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'p'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">400</span><span class="token plain">             l2fwd_enabled_port_mask </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">l2fwd_parse_portmask</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">optarg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">401</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l2fwd_enabled_port_mask </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">402</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"invalid portmask\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">403</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">l2fwd_usage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prgname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">404</span><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">405</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">406</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">407</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">408</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* nqueue */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">409</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'q'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">410</span><span class="token plain">             l2fwd_rx_queue_per_lcore </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">l2fwd_parse_nqueue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">optarg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">411</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l2fwd_rx_queue_per_lcore </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">412</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"invalid queue number\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">413</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">l2fwd_usage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prgname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">414</span><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">415</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">416</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">417</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">418</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* timer period */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">419</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token char">'T'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">420</span><span class="token plain">             timer_period </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">l2fwd_parse_timer_period</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">optarg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> TIMER_MILLISECOND</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">421</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timer_period </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">422</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"invalid timer period\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">423</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">l2fwd_usage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prgname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">424</span><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">425</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">426</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">427</span><span class="token plain">             </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">428</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* long options */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">429</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">430</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">l2fwd_usage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prgname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">431</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">432</span><span class="token plain">             </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">433</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">434</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">l2fwd_usage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">prgname</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">435</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">436</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">437</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">438</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">439</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">optind </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">440</span><span class="token plain">         argv</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">optind</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> prgname</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">441</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">442</span><span class="token plain">     ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> optind</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">443</span><span class="token plain">     optind </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* reset getopt lib */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">444</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>第 532 与 533 行对 argc 与 argv 进行了调整，l2fwd 得以正常解析内部参数。l2fwd_parse_args 调用关系见下图：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/20210419211237930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" class="img_ev3q">
l2fwd 通过 getopt_long 依次解析每个参数，optarg 指向参数的值，通过调用 strtoul、strtol 来解析参数值并存储到相应的变量中。</p><p>参数解析完成后，l2fwd_enabled_port_mask 变量保存 l2fwd 程序要使能的接口，l2fwd_rx_queue_per_lcore 变量保存每一个逻辑核上的 rx 队列数目，timer_period 保存 drain 的时间。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="创建-pktmbuf-pool-并-reset-l2fwd_dst_ports-结构体">创建 pktmbuf pool 并 reset l2fwd_dst_ports 结构体<a class="hash-link" href="#创建-pktmbuf-pool-并-reset-l2fwd_dst_ports-结构体" title="标题的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">544</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* create the mbuf pool */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">545</span><span class="token plain">     l2fwd_pktmbuf_pool </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_pktmbuf_pool_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"mbuf_pool"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NB_MBUF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">32</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">546</span><span class="token plain">         </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_MBUF_DEFAULT_BUF_SIZE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_socket_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">547</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l2fwd_pktmbuf_pool </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">548</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot init mbuf pool\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">549</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">550</span><span class="token plain">     nb_ports </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">551</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nb_ports </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">552</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"No Ethernet ports - bye\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">553</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">554</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nb_ports </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> RTE_MAX_ETHPORTS</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">555</span><span class="token plain">         nb_ports </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_MAX_ETHPORTS</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">556</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">557</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* reset l2fwd_dst_ports */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">558</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> RTE_MAX_ETHPORTS</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">559</span><span class="token plain">         l2fwd_dst_ports</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">560</span><span class="token plain">     last_port </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>第 545 行创建了 l2fwd 的 pktmbuf 内存池，pktmbuf 统一在 pktmbuf 内存池中分配回收，当创建失败后 l2fwd 打印失败信息并退出。</p><p>550~556 行获取可用的接口数量，当数量为 0 时打印失败信息后退出，当数量大于 config 中配置的最大接口数目时，将 nb_ports 重置为支持的最大接口数目。</p><p>557~560 行 reset 了 l2fwd_dst_ports，此数组用于保存相邻转发接口的关系，在收发包线程中被访问用于确定发包使用的端口号。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="初始化转发端口关系数组">初始化转发端口关系数组<a class="hash-link" href="#初始化转发端口关系数组" title="标题的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">562</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">563      * Each logical core is assigned a dedicated TX queue on each port.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">564      */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">565</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> nb_ports</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">566</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* skip ports that are not enabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">567</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l2fwd_enabled_port_mask </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">568</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">569</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">570</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nb_ports_in_mask </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">571</span><span class="token plain">             l2fwd_dst_ports</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> last_port</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">572</span><span class="token plain">             l2fwd_dst_ports</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">last_port</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">573</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">574</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">575</span><span class="token plain">             last_port </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">576</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">577</span><span class="token plain">         nb_ports_in_mask</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">578</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">579</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">rte_eth_dev_info_get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">580</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">581</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nb_ports_in_mask </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">582</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Notice: odd number of ports in portmask.\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">583</span><span class="token plain">         l2fwd_dst_ports</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">last_port</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> last_port</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">584</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>565~584 完成 l2fwd_dst_ports 端口的关联表，<strong>确定每个使能端口的发包端口</strong>。当使能的端口数目为偶数时，<strong>上一个口使用下一个口发包，下一个口使用上一个口发包</strong>，当使能的端口数目为奇数时，<strong>最后的单个口发包使用当前口</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="初始化每个-lcore-上绑定的收包端口关系数组">初始化每个 lcore 上绑定的收包端口关系数组<a class="hash-link" href="#初始化每个-lcore-上绑定的收包端口关系数组" title="标题的直接链接">​</a></h2><p>l2fwd 支持在单个 lcore 上绑定多个口进行收包，为此 l2fwd 定义了 lcore_queue_conf 结构体，此结构体的数量为系统支持的 lcore 的最大值。</p><p>相关代码如下：</p><div class="language-ｃ codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ｃ codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">101 static unsigned int l2fwd_rx_queue_per_lcore = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">102 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">103 #define MAX_RX_QUEUE_PER_LCORE 16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">104 #define MAX_TX_QUEUE_PER_PORT 16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">105 struct lcore_queue_conf {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">106     unsigned n_rx_port;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">107     unsigned rx_port_list[MAX_RX_QUEUE_PER_LCORE];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">108 } __rte_cache_aligned;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">109 struct lcore_queue_conf lcore_queue_conf[RTE_MAX_LCORE];  </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>n_rx_port 代表一个 lcore_queue_conf 中绑定的收包端口数目，rx_port_list 中保存 lcore_queue_conf 中的每一个收包端口的 portid。</p><p>第 109 行定义 RTE_MAX_LCORE 的作用在于通过使用 lcore_id 这种每线程数据来隔离每个 lcore 的 queue_conf 配置。</p><p>lcore_queue_conf 初始化代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">586</span><span class="token plain">     rx_lcore_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">587</span><span class="token plain">     qconf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">588</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">589</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Initialize the port/queue configuration of each logical core */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">590</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> nb_ports</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">591</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* skip ports that are not enabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">592</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l2fwd_enabled_port_mask </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">593</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">594</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">595</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* get the lcore_id for this port */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">596</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rte_lcore_is_enabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rx_lcore_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">597</span><span class="token plain">                lcore_queue_conf</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">rx_lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">n_rx_port </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">598</span><span class="token plain">                l2fwd_rx_queue_per_lcore</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">599</span><span class="token plain">             rx_lcore_id</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">600</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rx_lcore_id </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> RTE_MAX_LCORE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">601</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Not enough cores\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">602</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">603</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">604</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">qconf </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">lcore_queue_conf</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">rx_lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">605</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">/* Assigned a new logical core in the loop above. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">606</span><span class="token plain">             qconf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">lcore_queue_conf</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">rx_lcore_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">607</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">608</span><span class="token plain">         qconf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_port_list</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">qconf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">n_rx_port</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">609</span><span class="token plain">         qconf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">n_rx_port</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">610</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Lcore %u: RX port %u\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rx_lcore_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">611</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">612</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">613</span><span class="token plain">     nb_ports_available </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nb_ports</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>596 ~ 603 行为当前 port 找到一个可用的 lcore_id，当 lcore_id 被使能，且此 lcore_id 对应的 queue_conf 中绑定的收包接口数目不等于 l2fwd_rx_queue_per_lcore（解析参数设定的每个核上的队列数目）时，此 lcore_id 可用。</p><p>不满足如上要求时，lcore_id 递增，当 lcore_id 的数目超过系统支持的最大 lcore 数目时，程序打印异常信息并退出。</p><p>604~606 行获取当前接口使用的 lcore 对应的 lcore_queue_conf 结构体地址，608~610 行将当前的 portid 赋值给 lcore_queue_conf 结构体中 rx_port_list 数组中的对应项目，然后对 n_rx_port 加 1，表示此 lcore_queue_conf 中绑定的端口数目又增加了一个。</p><p>l2fwd 默认在一个 lcore 上绑定一个接口，这样使能了几个接口就需要相应数目的 lcore，当 lcore 不足时就会因为无法分配 lcore 而退出。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="初始化每一个使能的接口">初始化每一个使能的接口<a class="hash-link" href="#初始化每一个使能的接口" title="标题的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">613</span><span class="token plain">     nb_ports_available </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nb_ports</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">614</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">615</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Initialise each port */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">616</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> nb_ports</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">617</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* skip ports that are not enabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">618</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l2fwd_enabled_port_mask </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">619</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Skipping disabled port %u\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">620</span><span class="token plain">             nb_ports_available</span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">621</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">622</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">623</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* init port */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">624</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Initializing port %u... "</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">625</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">fflush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">stdout</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">626</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_configure</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">port_conf</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">627</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">628</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot configure device: err=%d, port=%u\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">629</span><span class="token plain">                   ret</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">630</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">631</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">rte_eth_macaddr_get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">l2fwd_ports_eth_addr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">632</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">633</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* init one RX queue */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">634</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">fflush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">stdout</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">635</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_rx_queue_setup</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nb_rxd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">636</span><span class="token plain">                          </span><span class="token function" style="color:#d73a49">rte_eth_dev_socket_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">637</span><span class="token plain">                          </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">638</span><span class="token plain">                          l2fwd_pktmbuf_pool</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">639</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">640</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_eth_rx_queue_setup:err=%d, port=%u\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">641</span><span class="token plain">                   ret</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">642</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">643</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* init one TX queue on each port */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">644</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">fflush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">stdout</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">645</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_tx_queue_setup</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> nb_txd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">646</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">rte_eth_dev_socket_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">647</span><span class="token plain">                 </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">648</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">649</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_eth_tx_queue_setup:err=%d, port=%u\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">650</span><span class="token plain">                 ret</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">651</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">652</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Initialize TX buffers */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">653</span><span class="token plain">         tx_buffer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_zmalloc_socket</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"tx_buffer"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">654</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">RTE_ETH_TX_BUFFER_SIZE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">MAX_PKT_BURST</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">655</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">rte_eth_dev_socket_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">656</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tx_buffer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">660</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">rte_eth_tx_buffer_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tx_buffer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> MAX_PKT_BURST</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">661</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">662</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_tx_buffer_set_err_callback</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tx_buffer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">663</span><span class="token plain">                 rte_eth_tx_buffer_count_callback</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">664</span><span class="token plain">                 </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">port_statistics</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dropped</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">665</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">666</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot set error callback for "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">667</span><span class="token plain">                         </span><span class="token string" style="color:#e3116c">"tx buffer on port %u\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">668</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">669</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Start device */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">670</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_start</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">671</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">672</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_eth_dev_start:err=%d, port=%u\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">673</span><span class="token plain">                   ret</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">674</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">675</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"done: \n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">676</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">677</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">rte_eth_promiscuous_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">678</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">679</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Port %u, MAC address: %02X:%02X:%02X:%02X:%02X:%02X\n\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">680</span><span class="token plain">                 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">681</span><span class="token plain">                 l2fwd_ports_eth_addr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">addr_bytes</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">682</span><span class="token plain">                 l2fwd_ports_eth_addr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">addr_bytes</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">683</span><span class="token plain">                 l2fwd_ports_eth_addr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">addr_bytes</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">684</span><span class="token plain">                 l2fwd_ports_eth_addr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">addr_bytes</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">685</span><span class="token plain">                 l2fwd_ports_eth_addr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">addr_bytes</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">686</span><span class="token plain">                 l2fwd_ports_eth_addr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">addr_bytes</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">687</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">688</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* initialize port stats */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">689</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">port_statistics</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_statistics</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">690</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>第 613 行将 nb_port_available 变量的值设置为 nb_ports，其值代表 dpdk 可用的接口数目，检测到一个 dpdk 可用而 l2fwd 却没使能的接口，都将 nb_port_available 的值减一，当 for 循环遍历完成后，判断 nb_port_available 的值，如果变为 0，说明没有使能一个接口，打印报错信息并退出，相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">692</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">nb_ports_available</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">693</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">rte_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_FAILURE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">694</span><span class="token plain">             </span><span class="token string" style="color:#e3116c">"All available ports are disabled. Please set portmask.\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">695</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">   </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当至少有一个接口使能时，623 行之后的逻辑会被执行。626 行调用 rte_eth_dev_configure 配置使用一个收发队列，且设置 port_conf。</p><p>631 行获取当前接口的 mac 地址并填充到 l2fwd_ports_eth_addr 数组中当前接口占用的表项中，这一 mac 地址在 l2fwd_simple_forward 函数修改报文的源 mac 地址时被使用，是典型的空间换时间的案例。</p><p>633 ～650 行初始化 rx queue 与 tx queue，设置每个 queue 上的描述符数目及使用的 pktmbuf 内存池，当设置失败时打印异常信息后退出。</p><p>652~668 行初始化当前 port 的 rte_eth_dev_tx_buffer 结构，此结构定义如下：</p><div class="language-ｃ codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ｃ codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">struct rte_eth_dev_tx_buffer {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buffer_tx_error_fn error_callback;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void *error_userdata;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uint16_t size;           /**&lt; Size of buffer for buffered tx */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uint16_t length;         /**&lt; Number of packets in the array */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    struct rte_mbuf *pkts[];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    /**&lt; Pending packets to be sent on explicit flush or when full */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">};</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到 pkts 数组没有设定大小，第 653 行调用 rte_zmalloc_socket 的时候，传递的大小为 RTE_ETH_TX_BUFFER_SIZE(MAX_PKT_BURST)。</p><p>RTE_ETH_TX_BUFFER_SIZE 的定义如下：</p><p>#define RTE_ETH_TX_BUFFER_SIZE(sz) \
(sizeof(struct rte_eth_dev_tx_buffer) + (sz) <em> sizeof(struct rte_mbuf </em>))</p><p>可以发现它额外创建了 MAX_PKT_BURST 个指针，pkts 就指向这一额外内存区域，能够直接获取填充的 mbuf 地址。</p><p>第 660 行初始化 tx_buffer，注意此函数的第二个参数，这个参数指定了一个阀值，<strong>当 tx_buffer 中的包数目低于此阀值时 rte_eth_tx_buffer 不会立刻发包出去，类似于缓冲功能</strong>。 </p><p>同时需要说明的是 rte_eth_tx_buffer_init 会注册一个默认的回调函数 rte_eth_tx_buffer_drop_callback，此回调函数会<strong>调用 rte_pktmbuf_free 将没有成功发送出去的包释放掉，缺少这一过程会导致 mbuf 泄露！</strong></p><p>662~668 行重新注册了一个回调函数，此回调函数在调用 rte_pktmbuf_free 释放未成功发送的报文后会将未成功发送的报文数目加到每个接口的 dropped 字段上。</p><p>669~689 行首先 start 接口，然后开启混淆模式，输出当前接口的 mac 地址并清空 l2fwd 的接口统计数据。</p><p>start 接口时会 up 接口，只有当接口处于 up 状态才能正常收发包，在收发包之前需要检查接口链路状态。</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">697</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">check_all_ports_link_status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nb_ports</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> l2fwd_enabled_port_mask</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>697 行就是检查接口 link 状态的逻辑，check_all_ports_link_status 会在 9s 内不断调用 rte_eth_link_get_nowait 获取每一个接口的 link 状态，当所有使能接口都 up、timeout 时，函数会设置 print_flag 变量为 1，打印接口状态信息后返回。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="在每个-lcore-上运行-l2fwd_launch_one_lcore-函数">在每个 lcore 上运行 l2fwd_launch_one_lcore 函数<a class="hash-link" href="#在每个-lcore-上运行-l2fwd_launch_one_lcore-函数" title="标题的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">699</span><span class="token plain">     ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">700</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* launch per-lcore init on every lcore */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">701</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">rte_eal_mp_remote_launch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l2fwd_launch_one_lcore</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> CALL_MASTER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">702</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">RTE_LCORE_FOREACH_SLAVE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">703</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rte_eal_wait_lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">704</span><span class="token plain">             ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">705</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">706</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">707</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>701 行调用 rte_eal_mp_remote_launch 在每个使能的 lcore 上初始化将要运行的函数，设定每个 lcore 对应的 lcore_config 数据结构，并立即执行。</p><p>702~707 行依次获取每个 slave lcore 线程的状态，当 rte_eal_wait_lcore 函数返回值小于 0 时跳出循环。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="收发包线程的执行过程">收发包线程的执行过程<a class="hash-link" href="#收发包线程的执行过程" title="标题的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">311</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">312</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">l2fwd_launch_one_lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">__attribute__</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">unused</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dummy</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                                                              </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">313</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">314</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">l2fwd_main_loop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">315</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">316</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>l2fwd_lanuch_one_lcore 会在每一个收发包线程上执行，它通过调用 l2fwd_main_loop 完成工作。</p><div class="language-ｃ codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ｃ codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">213 /* main processing loop */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">214 static void</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">215 l2fwd_main_loop(void)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">216 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">217     struct rte_mbuf *pkts_burst[MAX_PKT_BURST];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">218     struct rte_mbuf *m;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">219     int sent;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">220     unsigned lcore_id;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">221     uint64_t prev_tsc, diff_tsc, cur_tsc, timer_tsc;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">222     unsigned i, j, portid, nb_rx;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">223     struct lcore_queue_conf *qconf;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">224     const uint64_t drain_tsc = (rte_get_tsc_hz() + US_PER_S - 1) / US_PER_S *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">225             BURST_TX_DRAIN_US;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">226     struct rte_eth_dev_tx_buffer *buffer;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">227 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">228     prev_tsc = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">229     timer_tsc = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">230 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">231     lcore_id = rte_lcore_id();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">232     qconf = &amp;lcore_queue_conf[lcore_id];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">233 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">234     if (qconf-&gt;n_rx_port == 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">235         RTE_LOG(INFO, L2FWD, "lcore %u has nothing to do\n", lcore_id);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">236         return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">237     }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">238 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">239     RTE_LOG(INFO, L2FWD, "entering main loop on lcore %u\n", lcore_id);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">240 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">241     for (i = 0; i &lt; qconf-&gt;n_rx_port; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">242 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">243         portid = qconf-&gt;rx_port_list[i];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">244         RTE_LOG(INFO, L2FWD, " -- lcoreid=%u portid=%u\n", lcore_id,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">245             portid);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">246 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">247     }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>231 行获取到当前线程的 lcore_id，232 行使用获取到的 lcore_id，获取到 lcore_queue_conf 中的表项。</p><p>234 行判断当前 lcore 绑定的收包端口数目，为 0 表示不收包，这一般是 master 线程。</p><p>241~247 行打印当前 lcore 绑定的每个端口号的 port_id。完成了这些操作后，进入到 while 循环中，注意循环终止条件为 force_quit 为 true，当 l2fwd 收到 SIGINT、SIGTERM 信号时就会将 force_quit 设置为 true，收发包线程检测到后就会退出循环。</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">249</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">force_quit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">250</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">251</span><span class="token plain">         cur_tsc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_rdtsc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">252</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">253</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">254          * TX burst queue drain</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">255          */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">256</span><span class="token plain">         diff_tsc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cur_tsc </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> prev_tsc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">257</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">unlikely</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">diff_tsc </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> drain_tsc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">258</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">259</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> qconf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">n_rx_port</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">260</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">261</span><span class="token plain">                 portid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l2fwd_dst_ports</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">qconf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_port_list</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">262</span><span class="token plain">                 buffer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tx_buffer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">263</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">264</span><span class="token plain">                 sent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_tx_buffer_flush</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> buffer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">265</span><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">266</span><span class="token plain">                     port_statistics</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tx </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> sent</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">267</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">268</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">269</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">270</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">/* if timer is enabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">271</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timer_period </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">272</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">273</span><span class="token plain">                 </span><span class="token comment" style="color:#999988;font-style:italic">/* advance the timer */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">274</span><span class="token plain">                 timer_tsc </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> diff_tsc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">275</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">276</span><span class="token plain">                 </span><span class="token comment" style="color:#999988;font-style:italic">/* if timer has reached its timeout */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">277</span><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">unlikely</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">timer_tsc </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint64_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> timer_period</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">278</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">279</span><span class="token plain">                     </span><span class="token comment" style="color:#999988;font-style:italic">/* do this only on master core */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">280</span><span class="token plain">                     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lcore_id </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_get_master_lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">281</span><span class="token plain">                         </span><span class="token function" style="color:#d73a49">print_stats</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">282</span><span class="token plain">                         </span><span class="token comment" style="color:#999988;font-style:italic">/* reset the timer */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">283</span><span class="token plain">                         timer_tsc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">284</span><span class="token plain">                     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">285</span><span class="token plain">                 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">286</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">287</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">288</span><span class="token plain">             prev_tsc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cur_tsc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">289</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">291</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">292          * Read packet from RX queues</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">293          */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">294</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> qconf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">n_rx_port</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">295</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">296</span><span class="token plain">             portid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> qconf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_port_list</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">297</span><span class="token plain">             nb_rx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_rx_burst</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint8_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">298</span><span class="token plain">                          pkts_burst</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> MAX_PKT_BURST</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">299</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">300</span><span class="token plain">             port_statistics</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> nb_rx</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">301</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">302</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> nb_rx</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">303</span><span class="token plain">                 m </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pkts_burst</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">304</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">rte_prefetch0</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">rte_pktmbuf_mtod</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">m</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">305</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">l2fwd_simple_forward</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">m</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">306</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">307</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">308</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">309</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>收发包线程第一次执行时会先执行 294~307 行这个循环，此循环依次在当前 lcore 绑定的端口上收包，收到包后先增加 port_statistics 中的 rx 统计，然后对收到的每个报文调用 l2fwd_simple_forward。</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">188</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">189</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">l2fwd_simple_forward</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">m</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">190</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">191</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ether_hdr</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">eth</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">192</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">tmp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">193</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> dst_port</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">194</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> sent</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">195</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_dev_tx_buffer</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">buffer</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">196</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">197</span><span class="token plain">     dst_port </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> l2fwd_dst_ports</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">198</span><span class="token plain">     eth </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_pktmbuf_mtod</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">m</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ether_hdr</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">199</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">200</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* 02:00:00:00:00:xx */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">201</span><span class="token plain">     tmp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">eth</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">d_addr</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">addr_bytes</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">202</span><span class="token plain">     </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint64_t</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">tmp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x000000000002</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint64_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">dst_port </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">40</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">203</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">204</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* src addr */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">205</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">ether_addr_copy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">l2fwd_ports_eth_addr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">dst_port</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">eth</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">s_addr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">206</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">207</span><span class="token plain">     buffer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tx_buffer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">dst_port</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">208</span><span class="token plain">     sent </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_tx_buffer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dst_port</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> buffer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> m</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">209</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sent</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">210</span><span class="token plain">         port_statistics</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">dst_port</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tx </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> sent</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">211</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>l2fwd_simple_forward 函数中首先获取当前接口的转发接口，然后将转发接口的 mac 地址填充到报文的源 mac 地址处。</p><p>填充完成的报文通过调用 rte_eth_tx_buffer 投递到当前 lcore 的 tx_buffer 中，当 tx_buffer 中的报文数目小于门限值（32）的时候报文不会立刻发送出去。</p><p>为此 l2fwd 设定了一个 drain 延时，它的时间是 100 us，由于 l2fwd 使用 tsc 来计时，224 行将 100us 转化为了 tsc 周期数目。</p><p>251 行首先记录当前的 tsc 时间，减去上一次记录的时间就得到了延时，当延时大于 100us 的时候，遍历当前 lcore 上绑定的每一个端口，调用 rte_eth_tx_buffer_flush 来立刻发出 buffer 中的报文，然后增加发包统计。</p><p>270~287 行首先判断 timer_period 是否使能，当使能时，调整定时器的值（timer_tsc 的值），当 timer_tsc 的值大于等于 timer_period 表示一个周期到达，280~284 行判断当前线程是否是管理线程，是管理线程则调用 print_stats 输出统计，然后清空 timer_tsc 重新计数。</p><p>288 行更新上一次的 tsc 时间，这就完成了整个过程！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[问题描述]]></title>
        <id>/dpdk/dpdk-16.04 rte_kni 模块与内核内存泄露问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 rte_kni 模块与内核内存泄露问题"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[某设备运行 dpdk 程序，free 的内存空间在逐渐下降。]]></summary>
        <content type="html"><![CDATA[<p>某设备运行 dpdk 程序，free 的内存空间在逐渐下降。</p><p>第一次查看：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token comment" style="color:#999988;font-style:italic"># free -h</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">total        used        </span><span class="token function" style="color:#d73a49">free</span><span class="token plain">      shared  buff/cache   available</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Mem:           </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">.6G        </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">.5G        425M        403M        </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">.7G        534M</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Swap:            0B          0B          0B</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>几分钟后查看：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token comment" style="color:#999988;font-style:italic"># free -h</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">total        used        </span><span class="token function" style="color:#d73a49">free</span><span class="token plain">      shared  buff/cache   available</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Mem:           </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">.6G        </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">.2G        425M        403M        </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">.4G        534M</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Swap:            0B          0B          0B</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>持续观察确定 free 的内存在【持续降低】。</p><h1>问题定位过程</h1><ol><li>使用 top 查看用户态程序的占用的内存空间，未发现明显异常</li><li>执行 echo 3 &gt; /proc/sys/vm/drop_caches 清除缓存，free 的空间仍旧没有增加</li><li>观察 /proc/slabinfo 发现 kmalloc-8192 这种类型的 slab 空间一直在增加</li></ol><p>第一次查看：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kmalloc-8192      </span><span class="token number" style="color:#36acaa">128016</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">128016</span><span class="token plain">   </span><span class="token number" style="color:#36acaa">8192</span><span class="token plain">    </span><span class="token number" style="color:#36acaa">4</span><span class="token plain">    </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> </span><span class="token builtin class-name">:</span><span class="token plain"> tunables    </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">    </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">    </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token builtin class-name">:</span><span class="token plain"> slabdata  </span><span class="token number" style="color:#36acaa">32004</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">32004</span><span class="token plain">      </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>几分钟后查看：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">kmalloc-8192 </span><span class="token number" style="color:#36acaa">135760</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">135760</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8192</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> </span><span class="token builtin class-name">:</span><span class="token plain"> tunables </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token builtin class-name">:</span><span class="token plain"> slabdata </span><span class="token number" style="color:#36acaa">33940</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">33940</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>怀疑就是 kmalloc-8192 导致的问题。</p><h1>跟踪 kmalloc-8192 的 alloc 与 free 过程</h1><p>执行如下命令开启内核 kmalloc-8192 类 slab 对象的 <strong>trace</strong> 功能：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /sys/kernel/slab/kmalloc-8192/trace</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>几十秒后查看 dmesg 信息，看到如下内容：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444309</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> TRACE kmalloc-8192 alloc 0xffff88001a0d8000 </span><span class="token assign-left variable" style="color:#36acaa">inuse</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">fp</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x          </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444342</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> Call Trace:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444355</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff826cbd7c</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> dump_stack+0x63/0x7f</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444362</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff826ca45</span><span class="token operator file-descriptor important" style="color:#393A34">4</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> alloc_debug_processing+0xb1/0x105</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444368</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff826ca84a</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> __slab_alloc+0x3a2/0x40f</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444375</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff825a7d4c</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? kzalloc+0xf/0x11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444383</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff826d379</span><span class="token operator file-descriptor important" style="color:#393A34">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? _raw_spin_unlock_irqrestore+0x1a/0x2d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444389</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8258eb5</span><span class="token operator file-descriptor important" style="color:#393A34">5</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? pci_conf1_read+0xdb/0xf3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444394</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff825a7d4c</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? kzalloc+0xf/0x11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444401</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff82139fad</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> __kmalloc+0xf5/0x156</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444409</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff825c4f0b</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? eth_mac_addr+0x28/0x28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444413</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff825a7d4c</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> kzalloc+0xf/0x11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444419</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff825ae85</span><span class="token operator file-descriptor important" style="color:#393A34">0</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> alloc_netdev_mqs+0x80/0x2d9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444425</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff825c507</span><span class="token operator file-descriptor important" style="color:#393A34">5</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> alloc_etherdev_mqs+0x1c/0x1e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444463</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffffa005884</span><span class="token operator file-descriptor important" style="color:#393A34">0</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> igb_kni_probe+0x64/0xa56 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">rte_kni</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444471</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff82402fdf</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? put_device+0x12/0x14</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444478</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff82305dda</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? pci_get_dev_by_id+0x71/0x79</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444483</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff82305e1</span><span class="token operator file-descriptor important" style="color:#393A34">6</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? pci_get_subsys+0x34/0x3b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444507</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffffa003567e</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> kni_ioctl_create+0x32d/0x5a1 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">rte_kni</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444531</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffffa003592</span><span class="token operator file-descriptor important" style="color:#393A34">4</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> kni_ioctl+0x32/0x3b </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">rte_kni</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444539</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff82156a0</span><span class="token operator file-descriptor important" style="color:#393A34">5</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> do_vfs_ioctl+0x351/0x415</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444546</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8215e90</span><span class="token operator file-descriptor important" style="color:#393A34">5</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? __fget+0x66/0x70</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444552</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff82156b1</span><span class="token operator file-descriptor important" style="color:#393A34">4</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> SyS_ioctl+0x4b/0x76</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90556.444558</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff826d3f8</span><span class="token operator file-descriptor important" style="color:#393A34">9</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> system_call_fastpath+0x16/0x1b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的信息表明此处的 alloc 是在 kni 接口初始化时执行的。同时也看到了其它模块的打印，reiserfs 的一个打印信息如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">90560.232045</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> TRACE kmalloc-8192 alloc 0xffff88001a0da000 </span><span class="token assign-left variable" style="color:#36acaa">inuse</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">fp</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x          </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232083</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> Call Trace:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232096</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff826cbd7c</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> dump_stack+0x63/0x7f</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232103</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff826ca45</span><span class="token operator file-descriptor important" style="color:#393A34">4</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> alloc_debug_processing+0xb1/0x105</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232109</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff826ca84a</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> __slab_alloc+0x3a2/0x40f</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232117</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff821adca</span><span class="token operator file-descriptor important" style="color:#393A34">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? fix_nodes+0x188/0x1b1d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232124</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8216bb0</span><span class="token operator file-descriptor important" style="color:#393A34">1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? touch_buffer+0xd/0xf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232130</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8216c4eb</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? __find_get_block+0x1e5/0x1f7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232136</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff821adca</span><span class="token operator file-descriptor important" style="color:#393A34">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? fix_nodes+0x188/0x1b1d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232143</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff82139fad</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> __kmalloc+0xf5/0x156</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232149</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff821adca</span><span class="token operator file-descriptor important" style="color:#393A34">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> fix_nodes+0x188/0x1b1d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232156</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8210b43b</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? mark_page_accessed+0xf/0xc5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232161</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8216bb0</span><span class="token operator file-descriptor important" style="color:#393A34">1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? touch_buffer+0xd/0xf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232167</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8210b43b</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? mark_page_accessed+0xf/0xc5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232172</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8216bb0</span><span class="token operator file-descriptor important" style="color:#393A34">1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? touch_buffer+0xd/0xf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232178</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff821bdd3</span><span class="token operator file-descriptor important" style="color:#393A34">9</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? journal_mark_dirty+0x62/0x25f</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232185</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff821b95f</span><span class="token operator file-descriptor important" style="color:#393A34">1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> reiserfs_insert_item+0x1ba/0x247</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232196</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff821b167</span><span class="token operator file-descriptor important" style="color:#393A34">5</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> add_save_link+0x170/0x1b8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232202</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff826d1ccf</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? mutex_unlock+0x11/0x13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232209</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff821a8a2b</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> reiserfs_truncate_file+0x197/0x278</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232215</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8210c34</span><span class="token operator file-descriptor important" style="color:#393A34">1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? truncate_pagecache+0x4d/0x54</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232221</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff821abc4a</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> reiserfs_setattr+0x2e2/0x311</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232228</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8218c40</span><span class="token operator file-descriptor important" style="color:#393A34">5</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? __dquot_initialize+0x20/0x14c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232236</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff820ac76</span><span class="token operator file-descriptor important" style="color:#393A34">6</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? preempt_count_add+0x75/0x88</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232241</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff820ac6c</span><span class="token operator file-descriptor important" style="color:#393A34">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? get_parent_ip+0xd/0x3c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232248</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8215e09</span><span class="token operator file-descriptor important" style="color:#393A34">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> notify_change+0x1e2/0x2c6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232255</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8214709</span><span class="token operator file-descriptor important" style="color:#393A34">6</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> do_truncate+0x64/0x89</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232262</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff82153f2c</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> do_last.isra.46+0x976/0x9a5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232269</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8215417</span><span class="token operator file-descriptor important" style="color:#393A34">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> path_openat+0x217/0x4ab</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232275</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8215547d</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> do_filp_open+0x35/0x7a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232281</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff826d376</span><span class="token operator file-descriptor important" style="color:#393A34">5</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? _raw_spin_unlock+0x12/0x25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232287</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8215ee1f</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ? __alloc_fd+0xe5/0xf4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232293</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff8214830f</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> do_sys_open+0x6b/0xfa</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232298</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff821483b</span><span class="token operator file-descriptor important" style="color:#393A34">7</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> SyS_open+0x19/0x1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232303</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">ffffffff826d3f8</span><span class="token operator file-descriptor important" style="color:#393A34">9</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> system_call_fastpath+0x16/0x1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">90560.232321</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> TRACE kmalloc-8192 </span><span class="token function" style="color:#d73a49">free</span><span class="token plain"> 0xffff88001a0da000 </span><span class="token assign-left variable" style="color:#36acaa">inuse</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">fp</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0xffff88001a0dc000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>它与 kni 模块 alloc 空间打印的堆栈信息的区别在于最后一行，即 TRACE <strong>kmalloc-8192 free 0xffff88001a0da000 .......</strong>，此行表明【释放】了 8192 大小的空间，而 kni 模块的打印中没有释放的打印，表明只在创建。</p><h1>为什么 kni 模块在一直创建 netdev 呢？</h1><p>使用 kni 模块的程序只在【初始化】的过程中才会创建 netdev，程序死亡后 netdev 会释放，那上面说的没有释放是否是因为程序一直在运行？</p><p>查看程序状态发现，程序竟然在一直重启，同时 kmalloc-8192 的数量在以固定的数目缓慢增长，重命名程序后不再增长，<strong>能够确定是 rte_kni 内部模块存在内存泄露问题</strong>。</p><h1>rte_kni.ko 代码分析</h1><p>阅读 rte_kni.ko 源码发现，在 <strong>igb_kni_probe</strong> 函数中会调用 <strong>alloc_etherdev_mq</strong> 创建一个 <strong>netdev</strong>，此外 <strong>kni_ioctl_create</strong> 中也会创建一个 <strong>netdev</strong>，而在【释放】逻辑中，<strong>kni_dev_remove</strong> 中只释放了 <strong>kni_ioctl_create</strong>  中创建的 <strong>netdev</strong>，【没有释放】 e1000、igb、ixgbe xxx_kni_probe 中创建的 netdev 结构，导致内存泄露。</p><h1>解决方案</h1><p>在 e1000、igb、ixgbe 的 xxx_kni_probe 中创建的 netdev 结构会被填充到 kni_dev 结构的 <strong>lad_dev</strong> 字段中，只需要在 kni_dev_remove 函数中判断 lad_dev 字段是否为空，不为空则调用 free_netdev 释放即可。</p><p>修改后的 kni_dev_remove 函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">kni_dev_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENODEV</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">lad_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free_netdev</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">lad_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">net_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">unregister_netdev</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">net_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free_netdev</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">net_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h1>验证方案</h1><p>使用 <strong>ftrace</strong> 跟踪<strong>内核函数调用</strong>来验证修改有效，使用 ftrace 跟踪 kni 程序初始化时调用 alloc_netdev_mqs 以及死亡时调用 free_netdev 的过程来验证问题得到解决。</p><p>kni 程序运行命令如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token comment" style="color:#999988;font-style:italic"># ./kni  -- -p0x3 --config="(0,0,1),(1,1,1)"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>ftrace 跟踪到 alloc_netdev_mqs 函数调用情况如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># tracer: function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># entries-in-buffer/entries-written: 4/4   #P:4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                              _-----=&gt; irqs-off</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                             / _----=&gt; need-resched</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            | / _---=&gt; hardirq/softirq</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            || / _--=&gt; preempt-depth</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            ||| /     delay</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#              | |       |   ||||       |         |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-11436 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">1906.033365</span><span class="token plain">: alloc_netdev_mqs </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-kni_ioctl_create</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-11436 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">1906.033435</span><span class="token plain">: alloc_netdev_mqs </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-alloc_etherdev_mqs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-11436 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">1906.220368</span><span class="token plain">: alloc_netdev_mqs </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-kni_ioctl_create</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-11436 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">1906.220440</span><span class="token plain">: alloc_netdev_mqs </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-alloc_etherdev_mqs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>杀死 kni 程序后，ftrace 跟踪到 free_netdev 调用情况如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> Develop</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">cat ./trace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># tracer: function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># entries-in-buffer/entries-written: 2/2   #P:4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                              _-----=&gt; irqs-off</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                             / _----=&gt; need-resched</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            | / _---=&gt; hardirq/softirq</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            || / _--=&gt; preempt-depth</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            ||| /     delay</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#              | |       |   ||||       |         |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-11436 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">1990.960338</span><span class="token plain">: free_netdev </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-kni_dev_remove</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-11436 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">1990.986674</span><span class="token plain">: free_netdev </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-kni_dev_remove</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>能够看到这里申请了四次，但是只释放了两次，泄露了两个 netdev 结构（每个口泄露一个），符合预期。</p><p>重新加载修改后的 rte_kni.ko 文件后测试记录如下：</p><p>ftrace 跟踪到 alloc_netdev_mqs 函数调用情况如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> Develop</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">cat ./trace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># tracer: function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># entries-in-buffer/entries-written: 8/8   #P:4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                              _-----=&gt; irqs-off</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                             / _----=&gt; need-resched</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            | / _---=&gt; hardirq/softirq</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            || / _--=&gt; preempt-depth</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            ||| /     delay</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#              | |       |   ||||       |         |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-13861 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">2951.871499</span><span class="token plain">: alloc_netdev_mqs </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-kni_ioctl_create</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-13861 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">2951.871571</span><span class="token plain">: alloc_netdev_mqs </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-alloc_etherdev_mqs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-13861 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">2952.059302</span><span class="token plain">: alloc_netdev_mqs </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-kni_ioctl_create</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-13861 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">2952.059372</span><span class="token plain">: alloc_netdev_mqs </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-alloc_etherdev_mqs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>杀掉 kni 程序后，ftrace 跟踪到 free_netdev 调用情况如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># tracer: function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># entries-in-buffer/entries-written: 4/4   #P:4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                              _-----=&gt; irqs-off</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                             / _----=&gt; need-resched</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            | / _---=&gt; hardirq/softirq</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            || / _--=&gt; preempt-depth</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#                            ||| /     delay</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#              | |       |   ||||       |         |</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-13861 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">3000.154817</span><span class="token plain">: free_netdev </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-kni_dev_remove</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-13861 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">3000.165235</span><span class="token plain">: free_netdev </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-kni_dev_remove</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-13861 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">3000.181801</span><span class="token plain">: free_netdev </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-kni_dev_remove</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             kni-13861 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">000</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">3000.190228</span><span class="token plain">: free_netdev </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">-kni_dev_remove</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>修复后申请了四次，释放了四次，符合预期。</p><h1>总结</h1><p>前期已经解决过一些 rte_kni.ko 模块的问题，但是这次暴露出的问题表明其中仍旧潜藏着一些问题。</p><p>高版本的趋势是先【剥离】 rte_kni.ko 模块的 ethtool 功能，最终【完全抛弃】，这是正确的方向。</p><p>rte_kni.ko 模块的 ethtool 功能本身就是一个【过渡功能】，【稳定性堪忧】，我们也应当追随潮流弃用 rte_kni.ko 的 ethtool 功能。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-16.04 rte_kni 模块分析]]></title>
        <id>/dpdk/dpdk-16.04 rte_kni 模块分析</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 rte_kni 模块分析"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="标题的直接链接">​</a></h2><p>rte_kni 模块充当了用户态驱动与内核协议栈之间的桥梁，让 dpdk 程序能够上送流量到内核协议栈，同时也支持使用 ethtool、ifconfig 等重要的网络管理命令来控制接口状态。</p><p><strong>rte_kni 模块可以看作是一个虚拟的网卡驱动，符合网卡驱动的常见特征，其收发包过程却与网卡驱动有很大的差别，接口控制过程也不同于普通的网卡驱动，它涉及与 pmd 中频繁的交互工作，这是 rte_kni 功能的重点。</strong></p><p><strong>rte_kni 实现了一个虚拟网卡驱动，不存在网卡 probe 过程，故而不能直接初始化。同时 kni 虚拟网卡的初始化也依赖诸多用户态提供的参数，不符合正常虚拟网卡驱动流程。</strong></p><p>基于这些因素，rte_kni 还实现了一个字符驱动，<strong>通过字符驱动的 open、ioctl、release 来控制虚拟网卡接口的创建、释放过程，而虚拟接口依赖的诸多参数也能通过 ioctl 来提供。</strong></p><p>同时为了支持 ethtool 命令获取数据，rte_kni 也模拟了网卡驱动初始化的过程并注册 ethtool_ops 结构体，这一部分的代码在高版本已经被移除。基于这点，本文集中叙述 rte_kni 虚拟网卡初始化与收发包的过程及与 pmd 交互的原理，ethtool 相关代码不在本文的探讨范围内。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="rte_kni-模块的目录结构">rte_kni 模块的目录结构<a class="hash-link" href="#rte_kni-模块的目录结构" title="标题的直接链接">​</a></h2><p>rte_kni 模块目录结构如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Makefile  compat.h  </span><span class="token function" style="color:#d73a49">ethtool</span><span class="token plain">  kni_dev.h  kni_ethtool.c  kni_fifo.h  kni_misc.c  kni_net.c  kni_vhost.c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol><li><p>Makefile 文件为 rte_kni 编译脚本</p></li><li><p>compat.h 文件用于适配不同版本内核的一些接口</p></li><li><p>ethtool 目录中存放适配 igb、ixgbe 网卡 ethtool 功能的代码</p></li><li><p>kni_dev.h 中定义 kni device 等重要结构体</p></li><li><p>kni_ethtool.c 中定义 kni_ethtool_ops 结构体，此结构体中的方法封装了对 lad_dev-&gt;ethtool_ops 中方法的调用</p></li><li><p>kni_fifo.h 中定义共享队列的初始化、count、get、put 接口</p></li><li><p>kni_misc.c 中实现 kni 字符设备，以及操作这些字符设备文件的方法，如 open、ioctl 方法等</p></li><li><p>kni_net.c 中实现 kni 虚拟网络设备驱动</p></li><li><p>kni_vhost.c 是针对 vhost 的定制，不在本文探讨范围内</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="kni-模块初始化过程">kni 模块初始化过程<a class="hash-link" href="#kni-模块初始化过程" title="标题的直接链接">​</a></h2><p>kni 模块初始化函数为 kni_init，其源码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">155</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> __init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">156</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">157</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">158</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> rc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">159</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">160</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">KNI_PRINT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"######## DPDK kni module loading ########\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">161</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">162</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">kni_parse_kthread_mode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">163</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Invalid parameter for kthread_mode\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">164</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">165</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">166</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">167</span><span class="token plain"> #</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> LINUX_VERSION_CODE </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">KERNEL_VERSION</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">168</span><span class="token plain">     rc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">register_pernet_subsys</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_net_ops</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">169</span><span class="token plain"> #</span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">170</span><span class="token plain">     rc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">register_pernet_gen_subsys</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_net_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_net_ops</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">171</span><span class="token plain"> #endif </span><span class="token comment" style="color:#999988;font-style:italic">/* LINUX_VERSION_CODE &gt; KERNEL_VERSION(2, 6, 32) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">172</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">173</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EPERM</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">174</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">175</span><span class="token plain">     rc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">misc_register</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_misc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">176</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rc </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">177</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Misc registration failed\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">178</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">179</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">180</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">181</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Configure the lo mode according to the input parameter */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">182</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">kni_net_config_lo_mode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">lo_mode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">183</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">184</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">KNI_PRINT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"######## DPDK kni module loaded  ########\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">185</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">186</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">187</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">188</span><span class="token plain"> out</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">189</span><span class="token plain"> #</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> LINUX_VERSION_CODE </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">KERNEL_VERSION</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">190</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">unregister_pernet_subsys</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_net_ops</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">191</span><span class="token plain"> #</span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">192</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">register_pernet_gen_subsys</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_net_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_net_ops</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">193</span><span class="token plain"> #endif </span><span class="token comment" style="color:#999988;font-style:italic">/* LINUX_VERSION_CODE &gt; KERNEL_VERSION(2, 6, 32) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">194</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> rc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">195</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此函数首先解析 kthread_mode 模块参数，根据参数设置 multiple_kthread_on、g_kni_net_rx 变量的值。</p><p>此后注册 kni 网络命名空间设备，kni_net_ops 中实例化的 kni_init_net 函数会在每个网络命名空间创建的时候被调用，创建一个 kni_net 结构，并初始化相应的数据结构，然后注册。</p><p>与此类似，kni_net_ops 中实例化的 kni_exit_net 函数在每个网络命令空间销毁时被调用，它会 free kni_net 结构。</p><p>175 行注册 kni misc 设备，成功后继续调用 kni_net_config_lo_mode 解析 lo_mode 模块参数，配置不同的 kni 收包函数，不太常用，不进行分析。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="kni-misc-驱动的原理">kni misc 驱动的原理<a class="hash-link" href="#kni-misc-驱动的原理" title="标题的直接链接">​</a></h2><p>kni misc 驱动实例化了一个 miscdevice 结构体， 此结构体中的 name 字段用于标识 kni misc 驱动，minor 字段指定设备 minor 号动态分配，fops 表示绑定在此设备文件上的文件操作方法。</p><ol><li>kni_open 会在打开 /dev/kni 文件的时候被调用</li><li>kni_release 会在关闭 /dev/kni 文件的时候被调用</li><li>kni_ioctl 与 kni_compat_ioctl 在通过 ioctl 控制 /dev/kni 文件时被调用</li></ol><p>实例化的数据结构定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">73</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">file_operations</span><span class="token plain"> kni_fops </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">74</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> THIS_MODULE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">75</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">open </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> kni_open</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">76</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">release </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> kni_release</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">77</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">unlocked_ioctl </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">kni_ioctl</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">78</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">compat_ioctl </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">kni_compat_ioctl</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">79</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">80</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">81</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">miscdevice</span><span class="token plain"> kni_misc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">82</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">minor </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> MISC_DYNAMIC_MINOR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">83</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> KNI_DEVICE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">84</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">fops </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_fops</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">85</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>kni misc 设备使用时，用户态程序首先 open /dev/kni，然后执行 ioctl 并传递 RTE_KNI_IOCTL_CREATE 选项创建 kni 虚拟接口，然后正常运行，退出前继续调用 ioctl 并传递 RTE_KNI_IOCTL_RELEASE 释放 kni 虚拟接口，最后调用 close /dev/kni 来释放 kni 设备。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="kni_open">kni_open<a class="hash-link" href="#kni_open" title="标题的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">231</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">232</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">inode</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">inode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">file</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">file</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">233</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">234</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">net </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nsproxy</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">net_ns</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">235</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_net</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">knet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">net_generic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> kni_net_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">236</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">237</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* kni device can be opened by one user only per netns */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">238</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">test_and_set_bit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KNI_DEV_IN_USE_BIT_NUM</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">device_in_use</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">239</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EBUSY</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">240</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">241</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Create kernel thread for single mode */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">242</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">multiple_kthread_on </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">243</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_PRINT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Single kernel thread for all KNI devices\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">244</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Create kernel thread for RX */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">245</span><span class="token plain">         knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_kthread </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kthread_run</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni_thread_single</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">knet</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">246</span><span class="token plain">                         </span><span class="token string" style="color:#e3116c">"kni_single"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">247</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">IS_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_kthread</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">248</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Unable to create kernel threaed\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">249</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PTR_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_kthread</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">250</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">251</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">252</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_PRINT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Multiple kernel thread mode enabled\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">253</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">254</span><span class="token plain">     file</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">private_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_net</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">255</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">KNI_PRINT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/dev/kni opened\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">256</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">257</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">258</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>238 行首先判断 kni_net 结构体中的 device_in_use 字段的值，确保每一个命名空间内只被一个用户占用。</p><p>241~252 行创建 kni 内核态线程，此线程用于 kni 收包，kthread_run 函数返回的线程描述符存储到 kni_net 结构体中的 kni_thread 字段中。</p><p>254 行将 kni net 结构体地址存储到当前进程 file 结构的 private_data 字段中，此字段在 kni_release 中被访问，kni_release 通过获取到 file 结构中预先存储的 kni net 结构来释放创建的内核线程与 kni 虚拟接口，释放完成后清除 kni_net 结构中的 device_in_use 字段表示此 kni 设备空闲。</p><p>kni_release 函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">254</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">255</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_release</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">inode</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">inode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">file</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">file</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">256</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">257</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">net </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> file</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">private_data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">258</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_net</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">knet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">net_generic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> kni_net_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">259</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">260</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">261</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Stop kernel thread for single mode */</span><span class="token plain">                                                                                                                             </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">262</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">multiple_kthread_on </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">263</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Stop kernel thread */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">264</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">kthread_stop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_kthread</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">265</span><span class="token plain">         knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_kthread </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">266</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">267</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">268</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">down_write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">269</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">list_for_each_entry_safe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_head</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">270</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Stop kernel thread for multiple mode */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">271</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">multiple_kthread_on </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">272</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">kthread_stop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">273</span><span class="token plain">             dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">274</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">275</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">276</span><span class="token plain"> #ifdef RTE_KNI_VHOST</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">277</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">kni_vhost_backend_release</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">278</span><span class="token plain"> #endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">279</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">kni_dev_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">280</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">list_del</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">281</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">282</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">up_write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">283</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">284</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Clear the bit of device in use */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">285</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">clear_bit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KNI_DEV_IN_USE_BIT_NUM</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">device_in_use</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">286</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">287</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">put_net</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">288</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">KNI_PRINT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/dev/kni closed\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">289</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">290</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">291</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="kni_ioctl-函数">kni_ioctl 函数<a class="hash-link" href="#kni_ioctl-函数" title="标题的直接链接">​</a></h3><p>kni_ioctl 函数控制 kni 虚拟网卡接口的创建与注销过程，其代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">628</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">629</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_ioctl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">inode</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">inode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">630</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ioctl_num</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">631</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> ioctl_param</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">632</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">633</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">634</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">net </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">nsproxy</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">net_ns</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">635</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">636</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">KNI_DBG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"IOCTL num=0x%0x param=0x%0lx\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ioctl_num</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ioctl_param</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">637</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">638</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">639      * Switch according to the ioctl called</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">640      */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">641</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">_IOC_NR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ioctl_num</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">642</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_IOC_NR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RTE_KNI_IOCTL_TEST</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">643</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* For test only, not used */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">644</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">645</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_IOC_NR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RTE_KNI_IOCTL_CREATE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">646</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_ioctl_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ioctl_num</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ioctl_param</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">647</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">648</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_IOC_NR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RTE_KNI_IOCTL_RELEASE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">649</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_ioctl_release</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ioctl_num</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ioctl_param</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">650</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">651</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">652</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_DBG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"IOCTL default\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">653</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">654</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">655</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">656</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">657</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>它根据 ioctl_num 来分发处理逻辑，RTE_KNI_IOCTL_TEST 仅用于测试，不执行任何逻辑，RTE_KNI_IOCTL_CREATE、RTE_KNI_IOCTL_RELEASE 分别用于创建、销毁 kni 虚拟网卡。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="kni_ioctl_create-函数">kni_ioctl_create 函数<a class="hash-link" href="#kni_ioctl_create-函数" title="标题的直接链接">​</a></h3><p>kni_ioctl_create 函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">389</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">390</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_ioctl_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">391</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ioctl_num</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> ioctl_param</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">392</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">393</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_net</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">knet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">net_generic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> kni_net_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">394</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">395</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_kni_device_info</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">396</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pci </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">397</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">found_pci </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">398</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">net_dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">399</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">lad_dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">400</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">kni</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">401</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">402</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">printk</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KERN_INFO </span><span class="token string" style="color:#e3116c">"KNI: Creating kni...\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">403</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Check the buffer size, to avoid warning */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">404</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">_IOC_SIZE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ioctl_num</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">405</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">406</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">407</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Copy kni info from user space */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">408</span><span class="token plain">     ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">copy_from_user</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">ioctl_param</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">409</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">410</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"copy_from_user in kni_ioctl_create"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">411</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EIO</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">412</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">413</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">414</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">415      * Check if the cpu core id is valid for binding,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">416      * for multiple kernel thread mode.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">417      */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">418</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">multiple_kthread_on </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">force_bind </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">419</span><span class="token plain">                 </span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">cpu_online</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">core_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">420</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"cpu %u is not online\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">core_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">421</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">422</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">423</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">424</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Check if it has been created */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">425</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">down_read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">426</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">list_for_each_entry_safe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_head</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">427</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">kni_check_param</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">428</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">up_read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">429</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">430</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">431</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">432</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">up_read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">433</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">434</span><span class="token plain">     net_dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">alloc_netdev</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">435</span><span class="token plain"> #ifdef NET_NAME_UNKNOWN</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">436</span><span class="token plain">                             NET_NAME_UNKNOWN</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">437</span><span class="token plain"> #endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">438</span><span class="token plain">                             kni_net_init</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">439</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net_dev </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">440</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"error allocating device \"%s\"\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">441</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EBUSY</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">442</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">443</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">444</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">dev_net_set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net_dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> net</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">445</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">446</span><span class="token plain">     kni </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">netdev_priv</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">447</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">448</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">net_dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> net_dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">449</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">group_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">group_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">450</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">core_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">core_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">451</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">strncpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_KNI_NAMESIZE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">452</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">453</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Translate user space info into kernel space info */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">454</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">tx_q </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">phys_to_virt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tx_phys</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">455</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_q </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">phys_to_virt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_phys</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">456</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">alloc_q </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">phys_to_virt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">alloc_phys</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">457</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">free_q </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">phys_to_virt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">free_phys</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">459</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">req_q </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">phys_to_virt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">req_phys</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">460</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">resp_q </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">phys_to_virt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">resp_phys</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">461</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">sync_va </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sync_va</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">462</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">sync_kva </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">phys_to_virt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sync_phys</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">463</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">464</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_kva </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">phys_to_virt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mbuf_phys</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">465</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_va </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mbuf_va</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">466</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">467</span><span class="token plain"> #ifdef RTE_KNI_VHOST</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">468</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">vhost_queue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">469</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">vq_status </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> BE_STOP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">470</span><span class="token plain"> #endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">471</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mbuf_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">472</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">497</span><span class="token plain">     pci </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_get_device</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vendor_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">device_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">499</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Support Ethtool */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">500</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pci</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">501</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_PRINT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"pci_bus: %02x:%02x:%02x \n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">502</span><span class="token plain">                     pci</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">bus</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">503</span><span class="token plain">                     </span><span class="token function" style="color:#d73a49">PCI_SLOT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pci</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">devfn</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">504</span><span class="token plain">                     </span><span class="token function" style="color:#d73a49">PCI_FUNC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pci</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">devfn</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">505</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">506</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pci</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">bus</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">number </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">bus</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">507</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">PCI_SLOT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pci</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">devfn</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">devid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">508</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">PCI_FUNC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pci</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">devfn</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">function</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">509</span><span class="token plain">             found_pci </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pci</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">510</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">device_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">511</span><span class="token plain">             #define </span><span class="token function" style="color:#d73a49">RTE_PCI_DEV_ID_DECL_IGB</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vend</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">512</span><span class="token plain">             #include </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_pci_dev_ids</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">h</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">513</span><span class="token plain">                 ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igb_kni_probe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">found_pci</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">lad_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">514</span><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">520</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">521</span><span class="token plain">                 ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">522</span><span class="token plain">                 </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">523</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">524</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">525</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">KNI_DBG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"PCI found: pci=0x%p, lad_dev=0x%p\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">526</span><span class="token plain">                             pci</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lad_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">527</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">528</span><span class="token plain">                 kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">lad_dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> lad_dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">529</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">kni_set_ethtool_ops</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">net_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">530</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">531</span><span class="token plain">                 </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Device not supported by ethtool"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">532</span><span class="token plain">                 kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">lad_dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">533</span><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">534</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">535</span><span class="token plain">             kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pci_dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> found_pci</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">536</span><span class="token plain">             kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">device_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">device_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">537</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">538</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">539</span><span class="token plain">         pci </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">pci_get_device</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vendor_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">540</span><span class="token plain">                 dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">device_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pci</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">541</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">                                                                                                                                                                    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">542</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pci</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">543</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">pci_dev_put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pci</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">544</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">545</span><span class="token plain">     ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">register_netdev</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">546</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">547</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"error %i registering device \"%s\"\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">548</span><span class="token plain">                     ret</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">549</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">kni_dev_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">550</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENODEV</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">551</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">552</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">553</span><span class="token plain"> #ifdef RTE_KNI_VHOST</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">554</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">kni_vhost_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">555</span><span class="token plain"> #endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">556</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">557</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">558      * Create a new kernel thread for multiple mode, set its core affinity,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">559      * and finally wake it up.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">560      */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">561</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">multiple_kthread_on</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">562</span><span class="token plain">         kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kthread_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni_thread_multiple</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">563</span><span class="token plain">                           </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">kni</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">564</span><span class="token plain">                           </span><span class="token string" style="color:#e3116c">"kni_%s"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">565</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">IS_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">566</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">kni_dev_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">567</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ECANCELED</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">568</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">569</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">force_bind</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">570</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">kthread_bind</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">core_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">571</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">wake_up_process</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">572</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">573</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">574</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">down_write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">575</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">list_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">list</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_head</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">576</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">up_write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">577</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">578</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">579</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>kni_ioctl_create 主要逻辑如下：</p><ol><li>从用户态拷贝 rte_kni_device_info 结构，填充到 dev_info 中</li><li>判断 multiple_thread 模式是否开启，开启时则当设定了 dev_info 的 force_bind 选项后检查 dev_info 中设定的 core_id 是否合法，不合法则立即返回</li><li>获取 kni_net 结构中 kni_list_lock 信号量，遍历 kni_net 的 kni_list_head 链表，检查待创建的接口是否已经被创建过，是则释放信号量并返回</li><li>释放信号量并调用 alloc_netdev 创建一个 kni_net  netdev 接口，dev_info 的 name 字段为 netdev 的名称，kni_net_init 用于初始化此 netdev 结构中 kni 的私有变量</li><li>建立 kni netdev 结构与 net 结构的关联，填充 kni_dev 中的字段，填充 txq、rxq 等共享 fifo 地址时调用 phys_to_virt 将物理地址转化为内核的虚拟地址使用</li><li>循环调用 pci_get_device 依次遍历 pci 设备，当 pci 号与 dev_info 中配置的 pci 号一致时，根据 device id 来选择 probe 函数</li><li>device id 与 rte_pci_dev_ids.h 中定义的 igb、ixgbe 网卡匹配时，调用 igb_kni_probe、ixgbe_kni_probe 接口完成类似网卡驱动 probe 的过程，正常 probe 会继续创建一个 netdev 结构，此结构被存储到 lad_dev 中返回，此 lad_dev 的值最终被保存到 kni_net 结构中的 lad_dev 字段中，probe 成功后，kni 会设定 kni_net 中 net_dev 的 ethtool_ops 字段，此字段封装了对 lad_dev-&gt;ethtool_ops 中方法的调用。网卡不支持 ethtool 的时候 lad_dev 为空</li><li>当 pci 有效时，调用 pci_dev_put 释放 pci </li><li>调用 register_netdev 注册 kni net_device 结构，失败则调用 kni_dev_remove 移除虚拟接口</li><li>multiple_thread 模式开启后，创建回调函数为 kni_thread_multiple  的内核线程并在 dev_info 中的 force_bind 字段设定时，绑定线程到指定的核上</li><li>获取 kni_net 结构中的 kni_list_lock 信号量，注册 kni 设备到 kni_list_head 链表中，最后释放信号量</li></ol><p>kni 在遍历 pci 列表并 probe 驱动的时候，使用了一个技巧，它在 probe igb 网卡时使用的代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">511</span><span class="token plain">             #define </span><span class="token function" style="color:#d73a49">RTE_PCI_DEV_ID_DECL_IGB</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vend</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">512</span><span class="token plain">             #include </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_pci_dev_ids</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">h</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">513</span><span class="token plain">                 ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">igb_kni_probe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">found_pci</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">lad_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>首先定义了一个 RTE_PCI_DEV_ID_DECL_IGB 宏，此宏使用 dev 参数，预处理后则为 case (0201): 这种格式，它正好是一个以设备 id 为条件的 case 选项，包含了 rte_pci_dev_ids.h 后，所有的支持的 igb 网卡都会生成相关的 case，而这些 case 的主体函数都是 igb_kni_probe，这就是这里的机关。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="rte_kni-虚拟网络接口的收包函数">rte_kni 虚拟网络接口的收包函数<a class="hash-link" href="#rte_kni-虚拟网络接口的收包函数" title="标题的直接链接">​</a></h2><p>rte_kni 创建的虚拟网络接口支持多个收包函数，下面我以 kni_net_rx_normal 这个普通的函数为例，探讨这里的过程。</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">128</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">129</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_net_rx_normal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">kni</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">130</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">131</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">132</span><span class="token plain">     </span><span class="token class-name">uint32_t</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">133</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> num_rx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> num_fq</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">134</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_kni_mbuf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">kva</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">135</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_kni_mbuf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">va</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">MBUF_BURST_SZ</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">136</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> data_kva</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">137</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">138</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">sk_buff</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">skb</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">139</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">net_dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">140</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">141</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Get the number of free entries in free_q */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">142</span><span class="token plain">     num_fq </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_fifo_free_count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">free_q</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">143</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">num_fq </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">144</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* No room on the free_q, bail out */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">145</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">146</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">147</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">148</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Calculate the number of entries to dequeue from rx_q */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">149</span><span class="token plain">     num_rx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">min</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">num_fq</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">MBUF_BURST_SZ</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">150</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">151</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Burst dequeue from rx_q */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">152</span><span class="token plain">     num_rx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_fifo_get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_q</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">va</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> num_rx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">153</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">num_rx </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">154</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">155</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">156</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Transfer received packets to netif */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">157</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> num_rx</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">158</span><span class="token plain">         kva </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">va</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_va </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_kva</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">159</span><span class="token plain">         len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> kva</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data_len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">160</span><span class="token plain">         data_kva </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> kva</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_addr </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> kva</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data_off </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_va</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">161</span><span class="token plain">                 </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_kva</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">162</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">163</span><span class="token plain">         skb </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">dev_alloc_skb</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">len </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">164</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">skb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">165</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Out of mem, dropping pkts\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">166</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">/* Update statistics */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">167</span><span class="token plain">             kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">stats</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_dropped</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">168</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">169</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">170</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">/* Align IP on 16B boundary */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">171</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">skb_reserve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">skb</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">172</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">memcpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">skb_put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">skb</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> data_kva</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">173</span><span class="token plain">             skb</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">174</span><span class="token plain">             skb</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">protocol </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">eth_type_trans</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">skb</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">175</span><span class="token plain">             skb</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ip_summed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> CHECKSUM_UNNECESSARY</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">176</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">177</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">/* Call netif interface */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">178</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">netif_rx_ni</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">skb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">179</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">180</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">/* Update statistics */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">181</span><span class="token plain">             kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">stats</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_bytes </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">182</span><span class="token plain">             kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">stats</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_packets</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">183</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">184</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">185</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">186</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Burst enqueue mbufs into free_q */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">187</span><span class="token plain">     ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_fifo_put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">free_q</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">va</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> num_rx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">188</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> num_rx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">189</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Failing should not happen */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">190</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Fail to enqueue entries into free_q\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">191</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此函数的主要逻辑如下：</p><ol><li>判断 free_q 中是否有空间，无则直接返回，有则继续下一步</li><li>确定能够从 rx_q 中出队列的数目，此数目是 free_q 中的空闲数目与 burst 大小的最小值</li><li>调用 kni_fifo_get 从 rx_q 队列中获取 num_rx 个 mbuf 的地址，数量为 0 则返回</li><li>对于每个出队列的 mbuf，创建 sk_buff 结构，复制 mbuf 中的报文到 sk_buff 中并填充相关的字段，通过 netif_rx_ni 投递到内核协议栈并增加 kni 内部统计</li><li>将 mbuf 释放到 free_q 队列中</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="rte_kni-虚拟网络接口的发包函数">rte_kni 虚拟网络接口的发包函数<a class="hash-link" href="#rte_kni-虚拟网络接口的发包函数" title="标题的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">390</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">391</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_net_tx</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">sk_buff</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">skb</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">392</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">393</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">394</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">395</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">kni </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">netdev_priv</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">396</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_kni_mbuf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pkt_kva </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">397</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_kni_mbuf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pkt_va </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">398</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">399</span><span class="token plain">     dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">trans_start </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> jiffies</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* save the timestamp */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">400</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">401</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Check if the length of skb is less than mbuf size */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">402</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">skb</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">len </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">403</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> drop</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">404</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">405</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">406      * Check if it has at least one free entry in tx_q and</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">407      * one entry in alloc_q.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">408      */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">409</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">kni_fifo_free_count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">tx_q</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">410</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">kni_fifo_count</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">alloc_q</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">411</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">412          * If no free entry in tx_q or no entry in alloc_q,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">413          * drops skb and goes out.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">414          */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">415</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> drop</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">416</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">417</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">418</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* dequeue a mbuf from alloc_q */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">419</span><span class="token plain">     ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_fifo_get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">alloc_q</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pkt_va</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">420</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">likely</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">421</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">data_kva</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">422</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">423</span><span class="token plain">         pkt_kva </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">pkt_va </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_va </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_kva</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">424</span><span class="token plain">         data_kva </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pkt_kva</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_addr </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> pkt_kva</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data_off </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_va</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">425</span><span class="token plain">                 </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mbuf_kva</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">426</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">427</span><span class="token plain">         len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> skb</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">428</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">memcpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data_kva</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> skb</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">429</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">unlikely</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">len </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> ETH_ZLEN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">430</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data_kva </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ETH_ZLEN </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">           </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">431</span><span class="token plain">             len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_ZLEN</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">432</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">433</span><span class="token plain">         pkt_kva</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pkt_len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">434</span><span class="token plain">         pkt_kva</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data_len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">435</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">436</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* enqueue mbuf into tx_q */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">437</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_fifo_put</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">tx_q</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pkt_va</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">438</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">unlikely</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">439</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">/* Failing should not happen */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">440</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Fail to enqueue mbuf into tx_q\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">441</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> drop</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">442</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">443</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">444</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Failing should not happen */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">445</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Fail to dequeue mbuf from alloc_q\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">446</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> drop</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">447</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">448</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">449</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Free skb and update statistics */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">450</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">dev_kfree_skb</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">skb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">451</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">stats</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tx_bytes </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> len</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">452</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">stats</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tx_packets</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">453</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">454</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> NETDEV_TX_OK</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">455</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">456</span><span class="token plain"> drop</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">457</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Free skb and update statistics */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">458</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">dev_kfree_skb</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">skb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">459</span><span class="token plain">     kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">stats</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tx_dropped</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">460</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">461</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> NETDEV_TX_OK</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">462</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当内核协议栈要通过 kni 接口发包时，会调用到 kni_net_tx 函数，此函数的主要逻辑如下：</p><ol><li>判断 alloc_q 与 tx_q 中是否有空闲项目，无空闲项目则丢弃 sk_buff 并增加统计</li><li>从 alloc_q 中获取一个 mbuf 地址，获取失败则丢弃 sk_buff 并增加统计</li><li>获取到 mbuf 地址后将 sk_buff 中的报文填充到 mbuf 中然后放到 tx_q 队列中</li><li>释放 sk_buff 结构并增加统计</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="rte_kni-虚拟接口收发包中-mbuf-的流动过程">rte_kni 虚拟接口收发包中 mbuf 的流动过程<a class="hash-link" href="#rte_kni-虚拟接口收发包中-mbuf-的流动过程" title="标题的直接链接">​</a></h2><p>下图形象的表示出了 kni 虚拟接口收发过程中 mbuf 的流动，摘自 dpdk 官网：
<img loading="lazy" src="https://img-blog.csdnimg.cn/20210422084914778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" class="img_ev3q"></p><p>可以参考 <a href="https://blog.csdn.net/Longyu_wlz/article/details/115918403?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">dpdk-16.04 kni 示例程序分析</a> 来学习。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="释放-kni-虚拟接口的过程">释放 kni 虚拟接口的过程<a class="hash-link" href="#释放-kni-虚拟接口的过程" title="标题的直接链接">​</a></h2><p>释放 kni 虚拟接口时，用户态程序调用 ioctl 并传递 RTE_KNI_IOCTL_RELEASE 参数，内核态中会调用 kni_ioctl_release 函数，此函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">581</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">582</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_ioctl_release</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">583</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ioctl_num</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> ioctl_param</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">584</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">585</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_net</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">knet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">net_generic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> kni_net_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">586</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">587</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">588</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_kni_device_info</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">589</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">590</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">_IOC_SIZE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ioctl_num</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">591</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">592</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">593</span><span class="token plain">     ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">copy_from_user</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">ioctl_param</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">594</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">595</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">KNI_ERR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"copy_from_user in kni_ioctl_release"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">596</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EIO</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">597</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">598</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">599</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Release the network device according to its name */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">600</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">strlen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">601</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">602</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">603</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">down_write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">604</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">list_for_each_entry_safe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_head</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">605</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">strncmp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_KNI_NAMESIZE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">606</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">607</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">608</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">multiple_kthread_on </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">609</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">kthread_stop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">610</span><span class="token plain">             dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">611</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">612</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">613</span><span class="token plain"> #ifdef RTE_KNI_VHOST</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">614</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">kni_vhost_backend_release</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">615</span><span class="token plain"> #endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">616</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">kni_dev_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">617</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">list_del</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">618</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">619</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">620</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">621</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">up_write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">622</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">printk</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KERN_INFO </span><span class="token string" style="color:#e3116c">"KNI: %s release kni named %s\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">623</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Successfully"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Unsuccessfully"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev_info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">624</span><span class="token plain">         </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">625</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">626</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此函数的主要逻辑如下：</p><ol><li>从用户态复制参数到 dev_info 结构体中</li><li>获取 kni_net 结构体的 kni_list_lock 信号量，遍历 kni_list_head 链表，使用 dev_info.name 来匹配，匹配成功后释放 kni 设备中创建的内核线程，调用 kni_dev_remove 执行网卡相关数据结构的释放过程</li><li>将当前设备从 kni_net 链表中移除</li><li>释放完成后，释放获取到的 kni_list_lock 信号量</li></ol><p>kni_dev_remove 与 kni_ioctl_create 有相同之处，它首先匹配驱动，匹配到后则调用网卡的 xx_kni_remove 函数来释放 xx_kni_probe 函数中创建的相关数据结构，此后当 kni 设备中 net_dev 存在时，unregister net_dev 并释放此结构。</p><p>kni_dev_remove 代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">347</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">348</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_dev_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">349</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">350</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">351</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENODEV</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">352</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">353</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">device_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">354</span><span class="token plain">     #define </span><span class="token function" style="color:#d73a49">RTE_PCI_DEV_ID_DECL_IGB</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vend</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">355</span><span class="token plain">     #include </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_pci_dev_ids</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">h</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">356</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">igb_kni_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pci_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">357</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">358</span><span class="token plain">     #define </span><span class="token function" style="color:#d73a49">RTE_PCI_DEV_ID_DECL_IXGBE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vend</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">359</span><span class="token plain">     #include </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_pci_dev_ids</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">h</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">360</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">ixgbe_kni_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pci_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">361</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">362</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">363</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">364</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">365</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">366</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">net_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">367</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">unregister_netdev</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">net_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">368</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">free_netdev</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">net_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">369</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">370</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">371</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">372</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在执行了上述过程后，程序通过 close /dev/kni 来释放 kni 设备文件，此过程在内核中通过调用 kni_release 函数来完成，其代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">254</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">255</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_release</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">inode</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">inode</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">file</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">file</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">256</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">257</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">net </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> file</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">private_data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">258</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_net</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">knet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">net_generic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> kni_net_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">259</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">kni_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">260</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">261</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Stop kernel thread for single mode */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">262</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">multiple_kthread_on </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">263</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Stop kernel thread */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">264</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">kthread_stop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_kthread</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">265</span><span class="token plain">         knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_kthread </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">266</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">267</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">268</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">down_write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">269</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">list_for_each_entry_safe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_head</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">270</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Stop kernel thread for multiple mode */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">271</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">multiple_kthread_on </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">272</span><span class="token plain">             </span><span class="token function" style="color:#d73a49">kthread_stop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">273</span><span class="token plain">             dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pthread </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">274</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">275</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">276</span><span class="token plain"> #ifdef RTE_KNI_VHOST</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">277</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">kni_vhost_backend_release</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">278</span><span class="token plain"> #endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">279</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">kni_dev_remove</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">280</span><span class="token plain">         </span><span class="token function" style="color:#d73a49">list_del</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">281</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">282</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">up_write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kni_list_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">283</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">284</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Clear the bit of device in use */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">285</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">clear_bit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KNI_DEV_IN_USE_BIT_NUM</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">knet</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">device_in_use</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">286</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">287</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">put_net</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">288</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">KNI_PRINT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/dev/kni closed\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">289</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">290</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">291</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其过程类似 kni_ioctl_release，却增加了对 kni_net 中创建的内核线程的释放过程，并将 kni_net 中的 device_in_use 置位，表明设备空闲，然后调用 put_net 递减 net 结构的引用计数，打印信息后退出。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么-dpdk-程序被强制杀死的时候-kni-接口被释放">为什么 dpdk 程序被强制杀死的时候 kni 接口被释放？<a class="hash-link" href="#为什么-dpdk-程序被强制杀死的时候-kni-接口被释放" title="标题的直接链接">​</a></h2><p>当 dpdk 程序被强制杀死时，内核会回收文件描述符，调用 kni_release 来释放 kni 虚拟网卡设备。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="rte_kni-模块的解初始化函数">rte_kni 模块的解初始化函数<a class="hash-link" href="#rte_kni-模块的解初始化函数" title="标题的直接链接">​</a></h2><p>rte_kni 模块的解初始化函数为 kni_exit，此函数中首先解除 kni misc 设备注册信息，然后解除注册的每网络命令空间的 kni_net_ops 操作。</p><p>其代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">197</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> __exit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">198</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                                                                                                                                                           </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">199</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">200</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">misc_deregister</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_misc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">201</span><span class="token plain"> #</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> LINUX_VERSION_CODE </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">KERNEL_VERSION</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">202</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">unregister_pernet_subsys</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_net_ops</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">203</span><span class="token plain"> #</span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">204</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">register_pernet_gen_subsys</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_net_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_net_ops</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">205</span><span class="token plain"> #endif </span><span class="token comment" style="color:#999988;font-style:italic">/* LINUX_VERSION_CODE &gt; KERNEL_VERSION(2, 6, 32) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">206</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">KNI_PRINT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"####### DPDK kni module unloaded  #######\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">207</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled 接口问题]]></title>
        <id>/dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled 接口问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 rte_spinlock.h rte_cpu_get_flag_enabled 接口问题"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>dpdk-16.04 适配 vpp 测试过程中，执行 vpp 程序遇到了如下报错内容：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">load_one_plugin:145: /lib/vpp_plugins/router.so: undefined symbol: rte_cpu_get_flag_enabled</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">load_one_plugin:146: Failed to load plugin </span><span class="token string" style="color:#e3116c">'router.so'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>报错信息表明未找到 rte_cpu_get_flag_enabled 这个符号的定义，使用 nm 查看 router.so 中相关的符号信息，得到了如下内容：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">                 U rte_cpu_get_flag_enabled</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00000000000037a0 t rte_rtm_init</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>确定 rte_cpu_get_flag_enabled 函数确实没有定义!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="rte_cpu_get_flag_enabled-在哪里被定义">rte_cpu_get_flag_enabled 在哪里被定义？<a class="hash-link" href="#rte_cpu_get_flag_enabled-在哪里被定义" title="标题的直接链接">​</a></h2><p>在 dpdk 16.04 源码中搜索发现这个函数在下面几个文件中都有定义。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./lib/librte_eal/common/arch/tile/rte_cpuflags.c:44:rte_cpu_get_flag_enabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__attribute__</span><span class="token variable punctuation" style="color:#393A34">((</span><span class="token variable" style="color:#36acaa">unused</span><span class="token variable punctuation" style="color:#393A34">))</span><span class="token plain"> enum rte_cpu_flag_t feature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./lib/librte_eal/common/arch/x86/rte_cpuflags.c:187:rte_cpu_get_flag_enabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">enum rte_cpu_flag_t feature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./lib/librte_eal/common/arch/arm/rte_cpuflags.c:157:rte_cpu_get_flag_enabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">enum rte_cpu_flag_t feature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./lib/librte_eal/common/arch/ppc_64/rte_cpuflags.c:125:rte_cpu_get_flag_enabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">enum rte_cpu_flag_t feature</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我编译的版本为 x86-64 架构，对应 <strong>./lib/librte_eal/common/arch/x86/rte_cpuflags.c</strong> 文件，同时我编译的目标架构为 linux 系统，Makefile 中的编译语句如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">./lib/librte_eal/linuxapp/eal/Makefile:104:SRCS-</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable" style="color:#36acaa">CONFIG_RTE_EXEC_ENV_LINUXAPP</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> rte_cpuflags.c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>能够确定 <strong>rte_cpu_get_flag_enabled</strong> 函数被编译到了 librte_eal.a 中，只有链接了这个库应该能够找到这个符号。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么-rte_cpu_get_flag_enabled-未被链接">为什么 rte_cpu_get_flag_enabled 未被链接？<a class="hash-link" href="#为什么-rte_cpu_get_flag_enabled-未被链接" title="标题的直接链接">​</a></h2><p>首先检查编译参数，发现编译参数中没有链接 librte_eal.a，这能够解释 rte_cpu_get_flag_enabled 函数找不到定义的问题，但是这个函数又在哪里被调用呢？</p><p>在 router.so 代码中搜索，<strong>没有发现调用点</strong>，颇有些意外。想到这个函数可能是在 dpdk 函数中被调用，搜索发现它原来是在 <strong>rte_rtm_init</strong> 函数中被调用。x86 架构中，其定义位于 <strong>./lib/librte_eal/common/include/arch/x86/rte_spinlock.h</strong> 文件中。</p><p>rte_spinlock.h 文件中的相关源码摘录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token class-name">uint8_t</span><span class="token plain"> rtm_supported</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* cache the flag to avoid the overhead</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                                 of the rte_cpu_get_flag_enabled function */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">__attribute__</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">constructor</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_rtm_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rtm_supported </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_cpu_get_flag_enabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RTE_CPUFLAG_RTM</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_tm_supported</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_cpu_get_flag_enabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RTE_CPUFLAG_RTM</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> rtm_supported</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个头文件中的定义内容有如下几个特别之处：</p><ol><li>在头文件中定义了一个静态变量 rtm_supported</li><li>rte_rtm_init 被声明为一个内联函数+构造函数，将会在 main 函数执行前被调用</li><li>rte_rtm_init 中调用了一个非内联函数 rte_cpu_get_flag_enabled</li></ol><p>在头文件中定义静态变量，则只要包含了这个头文件都会有一个 rtm_supported 的定义，不过由于<strong>变量类型为静态变量，有局部作用域因而没有造成问题</strong>。</p><p>rte_rtm_init 在头文件中定义并被声明为<strong>构造函数</strong>，则只要<strong>包含了这个头文件</strong>就会链接 <strong>rte_rtm_init</strong>。有 <strong>inline</strong> 的修饰加完整的定义，也能够这样玩。</p><p>可是在这里， <strong>rte_rtm_init</strong> 中却调用了一个非内联函数 <strong>rte_cpu_get_flag_enabled</strong>，而 <strong>rte_cpu_get_flag_enabled</strong> 却需要链接 <strong>librte_eal.a</strong> 才能找到实际的定义，这就存在一种隐式的依赖。即<strong>包含了 rte_spinlock.h 就必须链接 librte_eal.a</strong>。</p><p>router.so 中存在包含了 <strong>rte_spinlock.h</strong> 的情况，却没有链接 <strong>librte_eal.a</strong>，就踩到了这个坑！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="如何解决问题">如何解决问题？<a class="hash-link" href="#如何解决问题" title="标题的直接链接">​</a></h2><p>dpdk 16.04 是一个比较老的版本，这个问题可能在高版本已经被修复了。于是查看 git log，找到了如下提交内容：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">commit a088b5ea35e78d3866d492ed5e8c8f47118696a6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Author: Damjan Marion </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">damarion@cisco.com</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Date:   Thu Jul </span><span class="token number" style="color:#36acaa">14</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">15</span><span class="token plain">:27:29 </span><span class="token number" style="color:#36acaa">2016</span><span class="token plain"> +0200</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    spinlock: move constructor out of x86 header </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Having constructor </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> the header </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> is generally</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    a bad idea, as it will eventually be implanted to 3rd party</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    library.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    In this </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> it causes linking issues with 3rd party libraries</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    when an application is not linked to dpdk, due to missing</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    symbol called by constructor.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Fixes: ba7468997ea6 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"spinlock: add HTM lock elision for x86"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Signed-off-by: Damjan Marion </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">damarion@cisco.com</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Reviewed-by: Jan Viktorin </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">viktorin@rehivetech.com</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Signed-off-by: Thomas Monjalon </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">thomas.monjalon@6wind.com</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从时间上看在 16.07 版本就修复了这个问题，仅仅在 16.04 发布的 3 个月后！！</p><p>关键修改内容是添加一个 rte_spinlock.c 文件，将头文件中定义的静态变量与 rte_rtm_init 构造函数放到 .c 中。</p><p>相关代码摘录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdint.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">"rte_cpuflags.h"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">uint8_t</span><span class="token plain"> rte_rtm_supported</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* cache the flag to avoid the overhead</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                             of the rte_cpu_get_flag_enabled function */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">__attribute__</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">constructor</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_rtm_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       rte_rtm_supported </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_cpu_get_flag_enabled</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RTE_CPUFLAG_RTM</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从高版本导出 patch 然后打上，问题得到解决！！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>问题一直都存在，而你能否发现它却另当别论！发现问题，解决问题，我们才能不断成长。发现不了新的问题，可能是完全掌握，也可能是一知半解。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[编译相关配置添加]]></title>
        <id>/dpdk/dpdk-16.04 扩展新网卡驱动过程</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 扩展新网卡驱动过程"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[1. 确定网卡的 vendor id 与 device id，在 rtepcidev_ids.h 中添加新的设备定义]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-确定网卡的-vendor-id-与-device-id在-rte_pci_dev_idsh-中添加新的设备定义">1. 确定网卡的 vendor id 与 device id，在 rte_pci_dev_ids.h 中添加新的设备定义<a class="hash-link" href="#1-确定网卡的-vendor-id-与-device-id在-rte_pci_dev_idsh-中添加新的设备定义" title="标题的直接链接">​</a></h2><p>示例信息如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifndef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_PCI_DEV_ID_DECL_ICE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">RTE_PCI_DEV_ID_DECL_ICE</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">vend</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> dev</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">RTE_PCI_DEV_ID_DECL_ICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">PCI_VENDOR_ID_INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ICE_DEV_ID_PF</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">RTE_PCI_DEV_ID_DECL_ICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">PCI_VENDOR_ID_INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ICE_DEV_ID_SDI_FM10420_QDA2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">undef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_PCI_DEV_ID_DECL_ICE</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-在-driversnet-目录中创建驱动子目录">2. 在 drivers/net/ 目录中创建驱动子目录<a class="hash-link" href="#2-在-driversnet-目录中创建驱动子目录" title="标题的直接链接">​</a></h2><p>示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> drivers/net/ice/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-修改-mkrteappmk-文件添加一个链接项目">3. 修改 mk/rte.app.mk 文件，添加一个链接项目<a class="hash-link" href="#3-修改-mkrteappmk-文件添加一个链接项目" title="标题的直接链接">​</a></h2><p>示例如下：</p><div class="language-Makefile codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-Makefile codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">_LDLIBS-$(CONFIG_RTE_LIBRTE_ICE_PMD)       += -lrte_pmd_ice</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-修改-driversnetmakefile-文件添加新驱动目录">4. 修改 drivers/net/Makefile 文件，添加新驱动目录<a class="hash-link" href="#4-修改-driversnetmakefile-文件添加新驱动目录" title="标题的直接链接">​</a></h2><p>示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">DIRS-</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable" style="color:#36acaa">CONFIG_RTE_LIBRTE_ICE_PMD</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain">     </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> ice</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-configcommon_base-中添加新的网卡驱动配置项目">5. config/common_base 中添加新的网卡驱动配置项目<a class="hash-link" href="#5-configcommon_base-中添加新的网卡驱动配置项目" title="标题的直接链接">​</a></h2><p>示例如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">Compile burst</span><span class="token macro property expression operator" style="color:#393A34">-</span><span class="token macro property expression" style="color:#36acaa">oriented ICE PMD driver</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa"></span><span class="token macro property expression" style="color:#36acaa">CONFIG_RTE_LIBRTE_ICE_PMD</span><span class="token macro property expression operator" style="color:#393A34">=</span><span class="token macro property expression" style="color:#36acaa">y</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CONFIG_RTE_LIBRTE_ICE_DEBUG_RX</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CONFIG_RTE_LIBRTE_ICE_DEBUG_TX</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CONFIG_RTE_LIBRTE_ICE_DEBUG_TX_FREE</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CONFIG_RTE_ICE_INC_VECTOR</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">n</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-重新生成-rte_targetconfig-中的配置文件">6. 重新生成 $RTE_TARGET/.config 中的配置文件<a class="hash-link" href="#6-重新生成-rte_targetconfig-中的配置文件" title="标题的直接链接">​</a></h2><h1>驱动需要实现的内容</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-driversnetxx-目录中添加相关的-makefile">1. drivers/net/xx 目录中添加相关的 Makefile<a class="hash-link" href="#1-driversnetxx-目录中添加相关的-makefile" title="标题的直接链接">​</a></h2><p>示例如下：</p><div class="language-mk codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-mk codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># SPDX-License-Identifier: BSD-3-Clause</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Copyright(c) 2018 Intel Corporation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">include $(RTE_SDK)/mk/rte.vars.mk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># library name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LIB = librte_pmd_ice.a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CFLAGS += -O3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CFLAGS += $(WERROR_FLAGS)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CFLAGS += -DALLOW_EXPERIMENTAL_API</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LDLIBS += -lrte_eal -lrte_mbuf -lrte_ethdev -lrte_kvargs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LDLIBS += -lrte_bus_pci -lrte_mempool -lrte_hash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EXPORT_MAP := rte_pmd_ice_version.map</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Add extra flags for base driver files (also known as shared code)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># to disable warnings</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ifeq ($(CONFIG_RTE_TOOLCHAIN_ICC),y)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CFLAGS_BASE_DRIVER +=</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">else ifeq ($(CONFIG_RTE_TOOLCHAIN_CLANG),y)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CFLAGS_BASE_DRIVER += -Wno-unused-parameter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CFLAGS_BASE_DRIVER += -Wno-unused-variable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CFLAGS_BASE_DRIVER += -Wno-unused-parameter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CFLAGS_BASE_DRIVER += -Wno-unused-variable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ifeq ($(shell test $(GCC_VERSION) -ge 44 &amp;&amp; echo 1), 1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CFLAGS_BASE_DRIVER += -Wno-unused-but-set-variable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endif</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">OBJS_BASE_DRIVER=$(patsubst %.c,%.o,$(notdir $(wildcard $(SRCDIR)/base/*.c)))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$(foreach obj, $(OBJS_BASE_DRIVER), $(eval CFLAGS_$(obj)+=$(CFLAGS_BASE_DRIVER)))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VPATH += $(SRCDIR)/base</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># all source are stored in SRCS-y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_controlq.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_common.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_sched.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_switch.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_nvm.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_flex_pipe.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_flow.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_ethdev.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SRCS-$(CONFIG_RTE_LIBRTE_ICE_PMD) += ice_rxtx.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">include $(RTE_SDK)/mk/rte.lib.mk</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-对接-dpdk-pmd-pci-驱动框架">2. 对接 DPDK PMD pci 驱动框架<a class="hash-link" href="#2-对接-dpdk-pmd-pci-驱动框架" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-驱动注册接口">1. 驱动注册接口<a class="hash-link" href="#1-驱动注册接口" title="标题的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">PMD_REGISTER_DRIVER</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_xxx_driver</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="实现-rte_xxx_driver-结构体">实现 rte_xxx_driver 结构体<a class="hash-link" href="#实现-rte_xxx_driver-结构体" title="标题的直接链接">​</a></h3><p>示例内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_driver</span><span class="token plain"> rte_ice_driver </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> PMD_PDEV</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">init </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rte_ice_pmd_init</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="实现-struct-eth_driver-结构体定义">实现 struct eth_driver 结构体定义<a class="hash-link" href="#实现-struct-eth_driver-结构体定义" title="标题的直接链接">​</a></h3><p>示例内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">eth_driver</span><span class="token plain"> rte_ice_pmd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pci_drv </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_ice_pmd"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id_table </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pci_id_ice_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">drv_flags </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_PCI_DRV_NEED_MAPPING </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> RTE_PCI_DRV_INTR_LSC </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            RTE_PCI_DRV_DETACHABLE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">eth_dev_init </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_dev_init</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">eth_dev_uninit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_dev_uninit</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_private_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ice_adapter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="驱动初始化接口与-dpdk-pci-框架的对接">驱动初始化接口与 dpdk pci 框架的对接<a class="hash-link" href="#驱动初始化接口与-dpdk-pci-框架的对接" title="标题的直接链接">​</a></h2><p>驱动实例化的 eth_driver 结构中，eth_dev_init 函数完成与 dpdk pci 框架对接过程。当接口 match 到一个驱动时，调用驱动 eth_driver 结构中的 eth_dev_init 函数前 pci 框架完成了如下任务：</p><ol><li>当前接口的 pci 信息已经保存到了一个 rte_pci_device 结构中</li><li>当前接口的前 6 个 bar 空间的物理地址已经被映射为用户态虚拟地址</li><li>当前接口已经分配了一个 rte_eth_dev 结构并建立起与对应 rte_pci_device 结构的关联</li><li>当前接口对应的 rte_eth_dev 结构的 data 结构被分配并进行了一些初始化</li><li>当前接口分配的 rte_eth_dev 结构中 data 结构体的 dev_private 变量区域被创建</li><li>当前接口分配的 rte_eth_dev 结构中的链路回调函数链表被初始化</li><li>当前接口的默认 mtu 被设置</li></ol><p>每一种驱动实例化的 eth_dev_init 函数正是基于上面这些环境完成与 pci 框架的对接，关键过程如下：</p><ol><li>将 dev-&gt;data-&gt;dev_private 地址转化为驱动内部结构地址</li><li>注册驱动实例化的 eth_dev_ops 到 dev-&gt;dev_ops 中，对接 ethdev 层提供的外部接口</li><li>将寄存器所在的 bar 的虚拟地址吸入到驱动内部数据结构的某个变量中，intel 的网卡一般叫做 hw_addr</li><li>使用 dev-&gt;pci_dev 中的字段填充驱动内部数据结构</li><li>根据当前接口的 device id，确定具体的 mac 类型</li><li>初始化驱动内部分层对象虚函数表，如 eeprom_operations、mac_operations、phy_operations、link_operations、mbx_operations 等函数表</li><li>执行接口 reset 后执行其它硬件初始化操作</li><li>注册中断回调函数后使能中断	</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-eth_dev_ops-驱动底层接口实现">3. eth_dev_ops 驱动底层接口实现<a class="hash-link" href="#3-eth_dev_ops-驱动底层接口实现" title="标题的直接链接">​</a></h2><p>需要实现一个 xxx_eth_dev_ops，这些驱动由 rte_ethdev.c 中封装的接口调用。</p><p>示例内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">eth_dev_ops</span><span class="token plain"> ice_eth_dev_ops </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_configure                </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_dev_configure</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_start                    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_dev_start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_stop                     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_dev_stop</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_close                    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_dev_close</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_queue_start               </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_rx_queue_start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_queue_stop                </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_rx_queue_stop</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tx_queue_start               </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_tx_queue_start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tx_queue_stop                </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_tx_queue_stop</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_queue_setup               </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_rx_queue_setup</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_queue_release             </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_rx_queue_release</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tx_queue_setup               </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_tx_queue_setup</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tx_queue_release             </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_tx_queue_release</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_infos_get                </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_dev_info_get</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_supported_ptypes_get     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_dev_supported_ptypes_get</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_update                  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_link_update</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mtu_set                      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_mtu_set</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mac_addr_set                 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_macaddr_set</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mac_addr_add                 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_macaddr_add</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mac_addr_remove              </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_macaddr_remove</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vlan_filter_set              </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_vlan_filter_set</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vlan_offload_set             </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_vlan_offload_set</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vlan_tpid_set                </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_vlan_tpid_set</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">reta_update                  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_rss_reta_update</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">reta_query                   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_rss_reta_query</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_hash_update              </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_rss_hash_update</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_hash_conf_get            </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_rss_hash_conf_get</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">promiscuous_enable           </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_promisc_enable</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">promiscuous_disable          </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_promisc_disable</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">allmulticast_enable          </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_allmulti_enable</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">allmulticast_disable         </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_allmulti_disable</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_queue_intr_enable         </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_rx_queue_intr_enable</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_queue_intr_disable        </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_rx_queue_intr_disable</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_eeprom_length            </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_get_eeprom_length</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_eeprom                   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_get_eeprom</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stats_get                    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_stats_get</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">stats_reset                  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_stats_reset</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">xstats_get                   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_xstats_get</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">xstats_reset                 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ice_stats_reset</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>主要功能划分如下：</p><table><thead><tr><th>功能</th><th>函数</th></tr></thead><tbody><tr><td>接口配置</td><td>dev_configure</td></tr><tr><td>接口 down、up</td><td>dev_start、dev_stop</td></tr><tr><td>接口释放</td><td>dev_close</td></tr><tr><td>接收、发送队列配置</td><td>rx/tx_queue_start、rx/tx_queue_stop、rx/tx_queue_setup、rx/tx_queue_release</td></tr><tr><td>获取接口的默认配置值</td><td>dev_infos_get</td></tr><tr><td>获取接口当前链路状态</td><td>link_update</td></tr><tr><td>设置接口 mtu</td><td>mtu_set</td></tr><tr><td>mac 地址的设置、添加、删除</td><td>mac_addr_set/add/remove</td></tr><tr><td>vlan 过滤、卸载、tpid 设置</td><td>vlan_filter_set、vlan_offload_set、vlan_tpid_set</td></tr><tr><td>接口 hash key 获取与配置</td><td>rss_hash_update、rss_hash_update</td></tr><tr><td>混淆模式、多播广播模式的开启与关闭</td><td>promiscuous_enable/disable 、allmulticast_enable/disable</td></tr><tr><td>收发队列中断配置</td><td>rx/tx_queue_intr_enable</td></tr><tr><td>网卡 eeprom 内容获取</td><td>get_eeprom_length、get_eeprom</td></tr><tr><td>接口收发统计信息获取与清零</td><td>stats_get/reset、xstats_get/reset</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-实现网卡收发包接口">4. 实现网卡收发包接口<a class="hash-link" href="#4-实现网卡收发包接口" title="标题的直接链接">​</a></h2><p>收包接口示例：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">uint16_t</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">ice_recv_pkts</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rx_queue</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rx_pkts</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token class-name">uint16_t</span><span class="token plain"> nb_pkts</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>发包接口示例：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">uint16_t</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">ice_xmit_pkts</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">tx_queue</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mbuf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">tx_pkts</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">uint16_t</span><span class="token plain"> nb_pkts</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>收发包接口通过填充当前接口分配的 rte_eth_dev 结构中的 rxa_pkt_burst、tx_pkt_burst 完成。存在多套收发包接口时，一般通过一个 xxx_set_rx/tx_function 函数来探测当前配置应该使用的收发包函数实例。</p><p>不同的发包函数有各自依赖的配置，这些配置必须独立。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-poll-mode-收发包的原理">dpdk poll mode 收发包的原理<a class="hash-link" href="#dpdk-poll-mode-收发包的原理" title="标题的直接链接">​</a></h2><p>dpdk poll mode 依赖 dma 来完成报文从网卡到主机内存及反向过程，在描述前先从 ldd3 中翻译如下信息：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="user-virtual-addresses">User virtual addresses<a class="hash-link" href="#user-virtual-addresses" title="标题的直接链接">​</a></h3><p>用户态虚拟地址是用户态程序可见的普通地址。用户地址有 32-bit、64-bit 长度，依赖具体的硬件架构，每一种处理器都有自己的虚拟地址空间。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="physical-addresses">Physical addresses<a class="hash-link" href="#physical-addresses" title="标题的直接链接">​</a></h3><p>这个地址用于处理器与系统内存之间的交互。物理地址是 32、64 位宽度的，一些 32 位系统在一些情况下也能够使用更大的物理地址。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="bus-addresses">Bus addresses<a class="hash-link" href="#bus-addresses" title="标题的直接链接">​</a></h3><p>这个地址在外设总线与内存之间被使用。通常情况下，它与处理器使用的物理地址一致，但是并不是所有情况都是这样。一些架构支持 IOMMU 机制，通过 IOMMU 完成一个总线与主机内存间访问地址的重映射。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dma-数据传输的两种类别">dma 数据传输的两种类别<a class="hash-link" href="#dma-数据传输的两种类别" title="标题的直接链接">​</a></h3><ol><li>软件同步请求数据</li><li>硬件异步推送数据到系统中</li></ol><p>软件同步请求数据主要过程如下：</p><ol><li>当一个程序调用 read 时，驱动中的方法盛情一个 DMA 缓冲区并控制硬件将数据传输到这个缓冲区中。进程进入睡眠状态。</li><li>硬件将数据写入到 DMA 缓冲区中，完成后触发一个中断信号。</li><li>中断处理程序获取到输入数据，清除中断标志并且唤醒进程，这时进程就能够读取数据了。</li></ol><p>硬件异步推送数据到系统中的主要过程如下：</p><ol><li>硬件触发一个中断信号声明新的数据已经到达</li><li>中断处理程序创建一个缓冲区并告诉硬件该将新的数据传输到哪里</li><li>外设将数据写入到缓冲区中，完成后出发另外一个中断信号</li><li>中断处理程序分发新数据，唤醒相关进程并完成其它流程处理</li></ol><p>一个异步方法的变体在网卡中被广泛使用。这些网卡预期看到一个环形缓冲区（又称为一个 DMA ring buffer）在内存中建立并与处理器共享，每一个收到的报文都被放到下一个 ring 中可用的 buffer 中，并触发一个中断信号。</p><p>此后，驱动负责将网络报文投递到内核的其它模块中并且将一个新的 DMA buffer 放到 ring 中。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dma-buffer-的问题">DMA buffer 的问题<a class="hash-link" href="#dma-buffer-的问题" title="标题的直接链接">​</a></h3><p>DMA buffer 存在的一个主要问题是，当其大小大于一个物理页时，由于设备数据传输使用 ISA、PCI 系统总线，他们都使用物理地址，因此分配的空间必须在物理内存中占据连续的页。奇特的是这一规则并不适用于 SBus，SBus 在外设总线上使用虚拟地址。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="bus-addresses-1">Bus Addresses<a class="hash-link" href="#bus-addresses-1" title="标题的直接链接">​</a></h3><p>使用DMA的设备驱动程序必须与连接到接口总线的硬件进行通信，它使用物理地址，而程序代码使用虚拟地址。 事实上，情况比这稍微复杂一些。 基于 DMA 的硬件使用总线地址而非物理地址。尽管 ISA 和 PCI 总线地址在 PC 上就是普通的物理地址，这一点并不适用于每一个平台。</p><p>在尝试使用 DMA 之前必须回答的第一个问题是给定的设备是否能够在当前主机上执行这样的操作。许多设备由于各种原因，所能寻址的内存范围有限。默认情况下，内核假设你的设备能够对任意 32-bit 地址执行 DMA 操作。如果这个假设不成立，你需要通过调用 dma_set_mask 通知内核真实的地址位数限制。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pci-代码的两种-dma-映射类型">pci 代码的两种 DMA 映射类型<a class="hash-link" href="#pci-代码的两种-dma-映射类型" title="标题的直接链接">​</a></h3><p>PCI代码区分两种DMA映射类型，按照 DMA 缓冲区的生命周期进行区分。</p><ol><li>一致性DMA映射</li></ol><p>这些映射通常存在于驱动程序的生命周期中。必须有一个一致的缓冲区同时用于 CPU 和外围设备。因此，相干映射必须存在于一致性 cache 内存区域中。</p><ol start="2"><li>流式DMA映射</li></ol><p>流映射通常为单个操作设置。一些架构允许在使用流映射时进行多种优化，但是这些映射也受到一组更严格规则的约束来控制访问。内核开发人员建议优先使用流映射而非一致性映射。</p><p>这一建议基于如下两个原因：</p><ol><li>在支持映射寄存器的系统上，每个 DMA 映射在总线上使用一个或多个寄存器。一致性映射有一个非常长的生命周期，在不使用的时候也一直独占这些寄存器。</li><li>在一些硬件上，流映射可以使用一致性映射不支持的方式进行优化。</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-poll-mode-通过-dma-收发包">dpdk poll mode 通过 DMA 收发包<a class="hash-link" href="#dpdk-poll-mode-通过-dma-收发包" title="标题的直接链接">​</a></h3><p>有了上面对 DMA 的认识后，开始描述 dpdk 通过 PMD 对 DMA 使用及收发包的关键过程。</p><ol><li>网卡接口绑定到 igb_uio，设置接口 dma_mask 并通知内核</li><li>调用  rte_eth_dma_zone_reserve 创建每个队列上的收发硬件描述符 dma 区域，申请出的区域在物理页上连续</li><li>根据网卡手册初始化描述符中的必要字段，并将申请到的用于收发描述符的 dma 区域的起始地址转化为物理地址保存到队列结构的某个字段中</li><li>将收发描述符起始地址的物理地址及总长度写入到寄存器中并将保存描述符头尾位置的寄存器值清零</li><li>为每一个收包队列申请 nb_rx_desc 个 mbuf，对 mbuf 执行相应的初始化后将 mbuf dataroom 所在的区域的物理地址写入到每个接收描述符的字段中 </li><li>设置接收、发送描述符控制寄存器、设置接收、发送控制寄存器等等必要的寄存器，开启收发包</li></ol><p>备注：上述过程中不包含其它依赖的硬件操作，这些操作需要按照网卡 datasheet 来配置</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="网卡与驱动侧收包过程">网卡与驱动侧收包过程<a class="hash-link" href="#网卡与驱动侧收包过程" title="标题的直接链接">​</a></h4><p>当网卡收到包后，phy 与 mac 层有相对复杂的处理过程。一个正常的报文通过了这些处理过程后，最终被存放到网卡的 fifo 中，此后网卡侧关键过程如下：</p><ol><li>网卡 mac 层获取到当前硬件可用的 rx 描述符的位置，获取到描述符中预先配置的 mbuf dataroom 的物理地址，触发一个 DMA 操作，将报文从网卡 fifo 中拷贝到 mbuf dataroom 指向的物理地址中，这是零拷贝的基础。</li><li>网卡更新内部维持描述符位置状态的寄存器</li><li>网卡重复这样的过程，直到获取不到一个空闲的描述符</li></ol><p>当描述符都被填充满后新到的包如何处理依赖网卡芯片的设计。</p><p>dpdk 驱动侧收包过程：</p><ol><li>程序主动调用驱动中实现的收包函数，获取当前软件可用的描述符的位置，判断描述符中标志存在报文的变量，当判断通过后处理报文</li><li>获取软件维护的当前已经填充了报文的描述符对应的 mbuf 的地址，将描述符中的字段映射到 mbuf 头中的字段中，然后申请一个新的 mbuf 继续填入到 rx ring 中，最后更新网卡维持描述符位置的某个寄存器通知硬件。</li><li>dpdk 向上层程序返回收到的包的个数及保存 mbuf 地址的指针数组</li></ol><p>这里存在一个问题：当驱动侧获取到一个填充了报文的描述符后，驱动会创建一个新的 mbuf 并将其 dataroom 的物理地址填充到当前的描述符中的相关字段中，如果硬件不能更新这个描述符中标志已经收到报文的变量，就需要软件设置。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="网卡与驱动侧发包过程">网卡与驱动侧发包过程<a class="hash-link" href="#网卡与驱动侧发包过程" title="标题的直接链接">​</a></h4><ol><li>dpdk 程序填充待发送的报文，通过调用 rte_eth_tx_burst 发送</li><li>网卡驱动底层的发包函数依次遍历上层传入的报文，获取空闲的 tx 描述符，并使用 mbuf 头中的字段填充描述符</li><li>填充描述符的关键在于将 mbuf dataroom 区域起始地址的物理地址写入到 tx 描述符中</li><li>最后更新网卡中维护发送描述符位置的寄存器通知网卡有新的报文需要发送</li><li>网卡获取到绑定了报文的发送描述符，将报文拷贝到发送 fifo 中后经过一系列硬件操作后发送出去，发送完成后更新必要的寄存器值</li></ol><h1>总结</h1><p>dpdk pmd 新驱动的开发相对困难，一方面由驱动框架的复杂性决定，一方面由网卡驱动自身的复杂性决定。本文中梳理了开发一个新的网卡驱动的主要过程，重点放在如何与 dpdk pci 框架、收发包框架对接上，这是本文的重点。实际上，一个网卡驱动的开发是非常复杂的，可关键的过程也就那几步，能够认识这几步并搞清楚其内部的原理，这才是向核心靠拢的过程。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-16.04 根目录中 .git 目录对编译参数的影响]]></title>
        <id>/dpdk/dpdk-16.04 根目录中 .git 目录对编译参数的影响</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 根目录中 .git 目录对编译参数的影响"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>在公司内部维护的 dpdk-16.04 目录中开发新功能时，编译遇到如下报错信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">dpdk-16.04/lib/librte_eal/linuxapp/eal/eal_timer.c: In </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> ‘get_tsc_freq’:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dpdk-16.04/lib/librte_eal/linuxapp/eal/eal_timer.c:288:10: error: unused variable ‘test’ </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">-Werror</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">unused-variable</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   double </span><span class="token builtin class-name">test</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1.5</span><span class="token plain">/1.1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          ^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cc1: all warnings being treated as errors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  CC rte_malloc.o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">: *** </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">eal_timer.o</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> Error </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">: *** Waiting </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> unfinished jobs</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  CC malloc_elem.o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  CC malloc_heap.o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dpdk-16.04/lib/librte_eal/linuxapp/eal/eal_pci.c:442:6: error: no previous prototype </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> ‘adjust_logic_pci_scan’ </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">-Werror</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">missing-prototypes</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> void adjust_logic_pci_scan</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cc1: all warnings being treated as errors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">: *** </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">eal_pci.o</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> Error </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dpdk-16.04/lib/librte_eal/common/malloc_heap.c: In </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> ‘rte_eal_malloc_heap_init’:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dpdk-16.04/lib/librte_eal/common/malloc_heap.c:232:3: error: </span><span class="token function" style="color:#d73a49">format</span><span class="token plain"> ‘%d’ expects argument of </span><span class="token builtin class-name">type</span><span class="token plain"> ‘int’, but argument </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> has </span><span class="token builtin class-name">type</span><span class="token plain"> ‘size_t’ </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">-Werror</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">format</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%s,%d,len=%d,pg=%d</span><span class="token string entity" style="color:#36acaa">\n</span><span class="token string" style="color:#e3116c">"</span><span class="token plain">,__FUNCTION__,__LINE__,ms-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">len,ms-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">hugepage_sz</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>仔细查看这些报错信息确定真正的问题是<strong>警告被作为了错误处理</strong>，一开始感觉有些奇怪，觉得不应该出这种问题，于是先对比正常编译的流程与出问题的编译流程中编译参数的区别。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="成功与失败的数据对比">成功与失败的数据对比<a class="hash-link" href="#成功与失败的数据对比" title="标题的直接链接">​</a></h2><p>使用 make V=1 来编译，打印命令行信息。</p><p>成功编译时的命令行参数：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">gcc -Wp,-MD,./.malloc_heap.o.d.tmp -m64 -pthread -fPIC  -march=core2 -DRTE_MACHINE_CPUFLAG_SSE -DRTE_MACHINE_CPUFLAG_SSE2 -DRTE_MACHINE_CPUFLAG_SSE3 -DRTE_MACHINE_CPUFLAG_SSSE3  -Idpdk-16.04/x86_64-native-linuxapp-gcc/include -include dpdk-16.04/x86_64-native-linuxapp-gcc/include/rte_config.h -Idpdk-16.04/lib/librte_eal/linuxapp/eal/include -Idpdk-16.04/lib/librte_eal/common -Idpdk-16.04/lib/librte_eal/common/include -Idpdk-16.04/lib/librte_ring -Idpdk-16.04/lib/librte_mempool -Idpdk-16.04/lib/librte_ivshmem -W -Wall -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wold-style-definition -Wpointer-arith -Wcast-align -Wnested-externs -Wcast-qual -Wformat-nonliteral -Wformat-security -Wundef -Wwrite-strings -O3   -o malloc_heap.o -c dpdk-16.04/lib/librte_eal/common/malloc_heap.c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>编译失败时的命令行参数：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">gcc -Wp,-MD,./.malloc_heap.o.d.tmp -m64 -pthread -fPIC  -march=core2 -DRTE_MACHINE_CPUFLAG_SSE -DRTE_MACHINE_CPUFLAG_SSE2 -DRTE_MACHINE_CPUFLAG_SSE3 -DRTE_MACHINE_CPUFLAG_SSSE3  -Idpdk-16.04/x86_64-native-linuxapp-gcc/include -include dpdk-16.04/x86_64-native-linuxapp-gcc/include/rte_config.h -Idpdk-16.04/lib/librte_eal/linuxapp/eal/include -Idpdk-16.04/lib/librte_eal/common -Idpdk-16.04/lib/librte_eal/common/include -Idpdk-16.04/lib/librte_ring -Idpdk-16.04/lib/librte_mempool -Idpdk-16.04/lib/librte_ivshmem -W -Wall -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wold-style-definition -Wpointer-arith -Wcast-align -Wnested-externs -Wcast-qual -Wformat-nonliteral -Wformat-security -Wundef -Wwrite-strings -Werror -O3   -o malloc_heap.o -c dpdk-16.04/lib/librte_eal/common/malloc_heap.c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对比发现编译失败时的命令行参数多了如下选项：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">-Werror</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>gcc 官方手册中对 -Werror 的解释内容如下：</p><blockquote><p>-Werror Make all warnings into errors.</p></blockquote><p>当开启了这个选项后所有的 warnings 都会被当作错误处理从而导致编译终止。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么修改导致了编译参数变化">什么修改导致了编译参数变化？<a class="hash-link" href="#什么修改导致了编译参数变化" title="标题的直接链接">​</a></h2><p>排查如下可能的项目：</p><ol><li>源码修改无关联</li><li>未修改环境变量</li><li>未修改 mk 目录中编译脚本</li><li>config 文件未修改</li></ol><p>经过这一通排查后没有找到问题，懵逼了几分钟后我想到了一个看上去没有关联的点——在内部维护的 dpdk-16.04 根目录中初始化 git 仓库。</p><p>我们的 dpdk-16.04 使用 svn 管理，为了开发方便，我就用 git 来管理代码修改。</p><p>重命名 .git 目录后，重新编译成功！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-1604-根目录中-git-目录对编译参数的影响">dpdk-16.04 根目录中 .git 目录对编译参数的影响<a class="hash-link" href="#dpdk-1604-根目录中-git-目录对编译参数的影响" title="标题的直接链接">​</a></h2><p>确定了问题后，继续追问根本原因。直接在 mk 目录中使用 grep 搜索 .git，果然找到了相关的内容。</p><p>mk/rte.vars.mk 中如下语句会判断 .git 目录是否存在来设定 RTE_DEVEL_BUILD 变量。</p><div class="language-Makefile codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-Makefile codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># developer build automatically enabled in a git tree</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ifneq ($(wildcard $(RTE_SDK)/.git),)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RTE_DEVEL_BUILD := y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endif</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>RTE_DEVEL_BUILD 变量在 toolchain/gcc/rte.vars.mk 中被判断，当为 y 的时候就在 WERROR_FLAGS 中添加 -Werror 参数。相关代码如下：</p><div class="language-Makefile codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-Makefile codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ifeq ($(RTE_DEVEL_BUILD),y)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WERROR_FLAGS += -Werror</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">endif</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>很多时候问题一直都存在，只不过你并不一定能够发现它。当问题有一天跳出来，可能会让你大吃一惊。遇到一个问题时，在解决问题的同时尽可能向下挖掘，在这一过程中也许你能够发现新的问题，继续追问这些问题你将收获更多的成长。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-16.04 监听 uio 文件检测中断的示例 demo 与内部实现解析]]></title>
        <id>/dpdk/dpdk-16.04 监听 uio 文件检测中断的示例 demo 与内部实现解析</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 监听 uio 文件检测中断的示例 demo 与内部实现解析"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="标题的直接链接">​</a></h2><p>在 <a href="https://blog.csdn.net/Longyu_wlz/article/details/121443906" target="_blank" rel="noopener noreferrer">Eal:Error reading from file descriptor 33: Input/output error</a> 这篇文章中，我描述了 VMWARE 环境中 dpdk 程序使用 82545EM 虚拟网卡时，一直打印 Input/output error 的问题。</p><p>这个问题最终通过修改 igb_uio 的代码修复，修复后我不禁在想用户态是怎样工作的？以前大概知道是通过 epoll 来监控 uio 文件的，却并不清楚具体的流程。</p><p>在本文中，我使用 dpdk-16.04 中断线程模拟 demo 来进一步研究 dpdk 通过 uio 文件监控网卡中断事件的关键过程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-监听-uio-文件检测中断的示例-demo">dpdk 监听 uio 文件检测中断的示例 demo<a class="hash-link" href="#dpdk-监听-uio-文件检测中断的示例-demo" title="标题的直接链接">​</a></h2><p>demo 运行机器内核信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@debian:~/epoll$ </span><span class="token function" style="color:#d73a49">uname</span><span class="token plain"> -a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Linux debian </span><span class="token number" style="color:#36acaa">4.19</span><span class="token plain">.0-18-amd64 </span><span class="token comment" style="color:#999988;font-style:italic">#1 SMP Debian 4.19.208-1 (2021-09-29) x86_64 GNU/Linux</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>网卡绑定信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@debian:~/epoll$ </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> python </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">/dpdk-16.04/tools/dpdk_nic_bind.py -s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Network devices using DPDK-compatible driver</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:02:05.0 </span><span class="token string" style="color:#e3116c">'82545EM Gigabit Ethernet Controller (Copper)'</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">drv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">igb_uio </span><span class="token assign-left variable" style="color:#36acaa">unused</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">e1000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>为了解决编译问题，对 dpdk-16.04 igb_uio.c 代码做了如下修改：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_uio</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_uio</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">librte_eal</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_uio</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">igb_uio</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">442</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">7</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">442</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">7</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_INTR_MODE_MSIX</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">/* Only 1 msi-x vector needed */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                msix_entry</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">entry </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">-</span><span class="token plain">               </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">pci_enable_msix</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">msix_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">               </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">pci_enable_msix_range</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">msix_entry</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>demo 程序摘自 dpdk-16.04 并进行了一些简化，源码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdarg.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;errno.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;sys/epoll.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;string.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;sys/types.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;sys/stat.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;fcntl.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;unistd.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdlib.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">eal_intr_handle_interrupts</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pfd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> totalfds</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">rte_panic</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">.</span><span class="token macro property expression punctuation" style="color:#393A34">.</span><span class="token macro property expression punctuation" style="color:#393A34">.</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">rte_panic_</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression constant" style="color:#36acaa">__func__</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> __VA_ARGS__</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">"dummy"</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">rte_panic_</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">func</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> format</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">.</span><span class="token macro property expression punctuation" style="color:#393A34">.</span><span class="token macro property expression punctuation" style="color:#393A34">.</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">__rte_panic</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">func</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> format </span><span class="token macro property string" style="color:#e3116c">"%.0s"</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> __VA_ARGS__</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/* call abort(), it will generate a coredump if enabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">__rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">funcname</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">format</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  va_list ap</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">va_start</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ap</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> format</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">vprintf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">format</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">va_end</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">abort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">epoll_uio_file</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">epoll_event</span><span class="token plain"> ev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> numfds </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* create epoll fd */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pfd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">epoll_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pfd </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cannot create epoll instance\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">events </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> EPOLLIN </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> EPOLLPRI</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">fd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fd</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">epoll_ctl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pfd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EPOLL_CTL_ADD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> fd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">ev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Error adding fd %d epoll_ctl, %s\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                fd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strerror</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">errno</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      numfds</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* serve the interrupt */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">eal_intr_handle_interrupts</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pfd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> numfds</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * when we return, we need to rebuild the</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * list of fds to monitor.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pfd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">EAL_INTR_EPOLL_WAIT_FOREVER</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression operator" style="color:#393A34">-</span><span class="token macro property expression number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">eal_intr_handle_interrupts</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> pfd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> totalfds</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">epoll_event</span><span class="token plain"> events</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">totalfds</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> nfds </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> bytes_read</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> buf</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1024</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nfds </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">epoll_wait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pfd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> events</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> totalfds</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      EAL_INTR_EPOLL_WAIT_FOREVER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* epoll_wait fail */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nfds </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">errno </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> EINTR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"epoll_wait returns with fail\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* epoll_wait timeout, will never happens here */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nfds </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* epoll_wait has at least one fd ready to read */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bytes_read </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bytes_read </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">events</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">fd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bytes_read</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">bytes_read </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">errno </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> EINTR </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> errno </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> EWOULDBLOCK</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Error reading from file "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token string" style="color:#e3116c">"descriptor %d: %s\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              events</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">fd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token function" style="color:#d73a49">strerror</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">errno</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">UIO_PATH</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">"/dev/uio0"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fd</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  fd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">UIO_PATH</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> O_RDWR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fd </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"open %s failed\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> UIO_PATH</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">epoll_uio_file</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述 demo 的关键流程如下：</p><ol><li>打开绑定到 igb_uio 驱动的网卡接口生成的 uio 文件</li><li>使用 1 中打开 uio 文件获取的 fd 为参数调用 epoll_uio_file 函数</li><li>epoll_uio_file 函数创建一个 epoll 事件，并将传入的 fd 添加到监控列表中</li><li>epoll_uio_file 随后调用 eal_intr_handle_interrupts 函数，eal_intr_handle_interrupts 函数中调用 epoll_wait 监控事件，当有事件发生时，调用 read 函数读取事件内容</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="demo-运行信息">demo 运行信息<a class="hash-link" href="#demo-运行信息" title="标题的直接链接">​</a></h2><p>运行结果 log 信息如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Error reading from file descriptor </span><span class="token number" style="color:#36acaa">3</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Input</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">output error</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error reading from file descriptor </span><span class="token number" style="color:#36acaa">3</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Input</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">output error</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error reading from file descriptor </span><span class="token number" style="color:#36acaa">3</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Input</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">output error</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error reading from file descriptor </span><span class="token number" style="color:#36acaa">3</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Input</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">output error</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error reading from file descriptor </span><span class="token number" style="color:#36acaa">3</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Input</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">output error</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error reading from file descriptor </span><span class="token number" style="color:#36acaa">3</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Input</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">output error</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>输出信息表明复现出了与 <a href="https://blog.csdn.net/Longyu_wlz/article/details/121443906" target="_blank" rel="noopener noreferrer">Eal:Error reading from file descriptor 33: Input/output error</a> 一样的问题。</p><p><strong>strace 跟踪信息如下：</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">openat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">AT_FDCWD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/dev/uio0"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> O_RDWR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">epoll_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                         </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">epoll_ctl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EPOLL_CTL_ADD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">EPOLLIN</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">EPOLLPRI</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">u32</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> u64</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">epoll_wait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">EPOLLIN</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">EPOLLPRI</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">EPOLLERR</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">EPOLLHUP</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">u32</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> u64</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x7ffcdaac3480</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">              </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">EIO</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Input</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">output error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">fstat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">st_mode</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">S_IFCHR</span><span class="token operator" style="color:#393A34">|</span><span class="token number" style="color:#36acaa">0620</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> st_rdev</span><span class="token operator" style="color:#393A34">=</span><span class="token function" style="color:#d73a49">makedev</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0x88</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">brk</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                               </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x562f29f41000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">brk</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0x562f29f62000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">                     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x562f29f62000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Error reading from file descript"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">57</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">57</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">epoll_wait</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">EPOLLIN</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">EPOLLPRI</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">EPOLLERR</span><span class="token operator" style="color:#393A34">|</span><span class="token plain">EPOLLHUP</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">u32</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> u64</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x7ffcdaac3480</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">              </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">EIO</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Input</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">output error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Error reading from file descript"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">57</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">57</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-1604-监听-uio-文件检测中断的一些功能与实现">dpdk-16.04 监听 uio 文件检测中断的一些功能与实现<a class="hash-link" href="#dpdk-1604-监听-uio-文件检测中断的一些功能与实现" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-一个接口支持注册多个中断回调">1. 一个接口支持注册多个中断回调<a class="hash-link" href="#1-一个接口支持注册多个中断回调" title="标题的直接链接">​</a></h3><p>每个中断源之间使用链表链起来，每个中断源还有有一个中断回调链表，一个中断回调的定义是回调函数+参数，多个中断回调使用链表链起来。</p><p>中断回调与中断源结构的定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_intr_callback</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">TAILQ_ENTRY</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_intr_callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rte_intr_callback_fn cb_fn</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; callback address */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">cb_arg</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; parameter for callback */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_intr_source</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">TAILQ_ENTRY</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_intr_source</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> next</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_intr_handle</span><span class="token plain"> intr_handle</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; interrupt handle */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_intr_cb_list</span><span class="token plain"> callbacks</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; user callbacks */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint32_t</span><span class="token plain"> active</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk-16.04 没有检查中断回调的唯一性，存在注册多个相同中断回调的情况。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-支持高效的事件监控及时捕获处理中断事件">2. 支持高效的事件监控，及时捕获处理中断事件<a class="hash-link" href="#2-支持高效的事件监控及时捕获处理中断事件" title="标题的直接链接">​</a></h3><p>dpdk-16.04 使用 epoll 来监控中断事件，注册中断时，pci 网卡绑定到 igb_uio 生成的 uio 文件的句柄会被添加到 epoll 事件中，注册完成后通过 epoll_wait 来监控是否有中断触发。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-支持中断事件动态注册与销毁">3. 支持中断事件动态注册与销毁<a class="hash-link" href="#3-支持中断事件动态注册与销毁" title="标题的直接链接">​</a></h3><p>dpdk-16.04 创建了一个 pipe 用于重新构建中断监听事件。pipe 的 read 端也被添加到 epoll 事件中，在注册中断完成后会向 pipe 的 write 端写入数据，中断处理线程监控到 pipe read 端有数据，则重新构建中断事件。
同样当在销毁一个中断事件的最后也会向 pipe 的 write 端写入数据，通知中断处理线程，重新构建事件监听列表。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-16.04 虚拟化环境 virtio 网卡 secondary 进程段错误问题分析定位]]></title>
        <id>/dpdk/dpdk-16.04 虚拟化环境 virtio 网卡 secondary 进程段错误问题分析定位</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 虚拟化环境 virtio 网卡 secondary 进程段错误问题分析定位"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[环境信息]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="环境信息">环境信息<a class="hash-link" href="#环境信息" title="标题的直接链接">​</a></h2><p><strong>虚机环境</strong>：KVM x86 虚机环境</p><p>虚机的配置的网卡：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">00:03.0 Ethernet controller: Red Hat, Inc Virtio network device</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00:04.0 Ethernet controller: Red Hat, Inc Virtio network device</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00:09.0 Ethernet controller: Red Hat, Inc Virtio network device</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00:0a.0 Ethernet controller: Red Hat, Inc Virtio network device</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00:0b.0 Ethernet controller: Red Hat, Inc Virtio network device</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>网口功能</strong>：00:03.0 作为管理口，其余四个口绑定到 igb_uio 作为业务口。</p><p><strong>dpdk 版本：dpdk-16.04</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>运行 l2fwd 后，运行 dpdk_proc_info 获取信息，获取信息的时候出现段错误。</p><p><strong>段错误信息：</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Thread </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"dpdk_proc_info"</span><span class="token plain"> received signal SIGSEGV, Segmentation fault.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x00007ffff691856f </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> vtpci_with_feature </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x0, </span><span class="token assign-left variable" style="color:#36acaa">bit</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">15</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at /home/longyu/dpdk-16.04/drivers/net/virtio/virtio_pci.h:295</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">295</span><span class="token plain">     /home/longyu/dpdk-16.04/drivers/net/virtio/virtio_pci.h: No such </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> or directory.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> bt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#0  0x00007ffff691856f in vtpci_with_feature (hw=0x0, bit=15)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at /home/longyu/dpdk-16.04/drivers/net/virtio/virtio_pci.h:295</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#1  0x00007ffff691a835 in rx_func_get (</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">eth_dev</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x69d0c0 </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_eth_devices+6582</span><span class="token operator file-descriptor important" style="color:#393A34">4</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at /home/longyu/dpdk-16.04/drivers/net/virtio/virtio_ethdev.c:1160</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#2  0x00007ffff691ab13 in eth_virtio_dev_init (</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">eth_dev</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x69d0c0 </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_eth_devices+6582</span><span class="token operator file-descriptor important" style="color:#393A34">4</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at /home/longyu/dpdk-16.04/drivers/net/virtio/virtio_ethdev.c:1287</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#3  0x00007ffff600ad69 in rte_eth_dev_init (</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">pci_drv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x7ffff6c9eae0 </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_virtio_pmd</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">, </span><span class="token assign-left variable" style="color:#36acaa">pci_dev</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x2772b20</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at /home/longyu/dpdk-16.04/lib/librte_ether/rte_ethdev.c:302</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#4  0x00007ffff604c628 in rte_eal_pci_probe_one_driver (</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">dr</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x7ffff6c9eae0 </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_virtio_pmd</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">, </span><span class="token assign-left variable" style="color:#36acaa">dev</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x2772b20</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at /home/longyu/dpdk-16.04/lib/librte_eal/common/eal_common_pci.c:199</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#5  0x00007ffff604c88a in pci_probe_all_drivers (dev=0x2772b20)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at /home/longyu/dpdk-16.04/lib/librte_eal/common/eal_common_pci.c:275</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk_proc_info 初始化中的重要信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: lcore </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> is ready </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tid</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">f1b6d700</span><span class="token punctuation" style="color:#393A34">;</span><span class="token assign-left variable" style="color:#36acaa">cpuset</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:00:03.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: 1af4:1000 rte_virtio_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:00:04.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: 1af4:1000 rte_virtio_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:00:09.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: 1af4:1000 rte_virtio_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:00:0a.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: 1af4:1000 rte_virtio_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:00:0b.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: 1af4:1000 rte_virtio_pmd</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题分析">问题分析<a class="hash-link" href="#问题分析" title="标题的直接链接">​</a></h2><p>dpdk_proc_info 作为 secondary 进程，在初始化的时候<strong>把 00:03.0 管理口也作为普通的业务口初始化了</strong>，没有<strong>跳过 virtio 管理口</strong>。</p><p><strong>在 l2fwd 中只初始化了四个业务口</strong>，<strong>secondary</strong> 进程在初始化到第五个口时，由于 l2fwd 并<strong>没有创建</strong>第五个业务口的 hw 数据结构，导致<strong>获取到的共享数据结构为 NULL，访问此字段触发段错误</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="相关的函数调用">相关的函数调用<a class="hash-link" href="#相关的函数调用" title="标题的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rte_eal_init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rte_eal_pci_probe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pci_probe_all_drivers</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            rte_eal_pci_probe_one_driver</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                rte_eth_dev_init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    rte_eth_dev_allocate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        eth_virtio_dev_init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            rx_func_get </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>重点研究下 rte_eth_dev_allocate 函数，其代码如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">struct rte_eth_dev *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_dev_allocate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">const char *name, enum rte_eth_dev_type </span><span class="token builtin class-name">type</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    uint8_t port_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    struct rte_eth_dev *eth_dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rte_eth_dev_find_free_port</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_MAX_ETHPORTS</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        RTE_PMD_DEBUG_TRACE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Reached maximum number of Ethernet ports</span><span class="token string entity" style="color:#36acaa">\n</span><span class="token string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin class-name">return</span><span class="token plain"> NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_eth_dev_data </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rte_eth_dev_data_alloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_eth_dev_allocated</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        RTE_PMD_DEBUG_TRACE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Ethernet Device with name %s already allocated!</span><span class="token string entity" style="color:#36acaa">\n</span><span class="token string" style="color:#e3116c">"</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin class-name">return</span><span class="token plain"> NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    eth_dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rte_eth_devices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    eth_dev-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rte_eth_dev_data</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nb_ports++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">return</span><span class="token plain"> eth_dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>rte_eth_dev_allocate 函数用于<strong>分配 ethdev 结构</strong>，<strong>每个 ethdev 结构</strong>会<strong>关联</strong>到一个 <strong>struct rte_eth_dev_data 数据指针</strong>，primary 进程在初始化的时候会分配一块 <strong>RTE_MAX_ETHPORTS</strong> 个 rte_eth_dev_data 数据结构，并将其清零。</p><p>rte_eth_dev_data_alloc 函数完成每个 port struct rte_eth_dev_data 结构的创建，其代码如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">static void</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_eth_dev_data_alloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    const unsigned flags </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    const struct rte_memzone *mz</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_eal_process_type</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_PROC_PRIMARY</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mz </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rte_memzone_reserve</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">MZ_RTE_ETH_DEV_DATA,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                RTE_MAX_ETHPORTS * sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">*rte_eth_dev_data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                rte_socket_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">, flags</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            mz </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rte_memzone_lookup</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">MZ_RTE_ETH_DEV_DATA</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mz </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cannot allocate memzone for ethernet port data</span><span class="token string entity" style="color:#36acaa">\n</span><span class="token string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rte_eth_dev_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> mz-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_eal_process_type</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_PROC_PRIMARY</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_eth_dev_data, </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                RTE_MAX_ETHPORTS * sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">*rte_eth_dev_data</span><span class="token punctuation" style="color:#393A34">))</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>secondary 进程通过 <strong>rte_memzone_lookup</strong> 直接 <strong>attach</strong> 到 <strong>primary 进程中创建</strong>的字段中，直接共享使用。这意味着在 <strong>secondary 进程运行的时候 RTE_MAX_ETHPORTS 个 eth_dev 的 rte_eth_dev_data 结构都被创建完成</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="我的问题">我的问题<a class="hash-link" href="#我的问题" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-为什么-secondary-进程-probe-网口的时候没有跳过绑定到官方驱动的-virtio-网卡">1. 为什么 secondary 进程 probe 网口的时候没有跳过绑定到官方驱动的 virtio 网卡？<a class="hash-link" href="#1-为什么-secondary-进程-probe-网口的时候没有跳过绑定到官方驱动的-virtio-网卡" title="标题的直接链接">​</a></h3><p><strong>rte_eal_pci_probe_one_driver</strong> 中当 <strong>match</strong> 到一个 <strong>pci</strong> 驱动时，当驱动的 <strong>rte_pci_driver 结构的 drv_flags</strong> 设置了 <strong>RTE_PCI_DRV_NEED_MAPPING</strong> 标志后，<strong>rte_eal_pci_map_device</strong> 函数会被调用，此函数会判断接口绑定到的驱动类型，绑定到管理口的接口 rte_eal_pci_map_device 函数会打印信息并返回错误，随后<strong>rte_eal_pci_probe_one_driver 函数中会直接返回，跳过当前接口</strong>。</p><p><strong>virtio</strong> 驱动的 <strong>rte_pci_driver</strong> 结构中并<strong>没有设定这个标志</strong>，导致不能在这一步识别到。<strong>常见的物理网卡诸如 igb、ixgbe、i40e 都设置了这个标志，不存在这个问题。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-primary-进程在哪里检测到接口未绑定到-dpdk-支持的驱动中">2. primary 进程在哪里检测到接口未绑定到 dpdk 支持的驱动中？<a class="hash-link" href="#2-primary-进程在哪里检测到接口未绑定到-dpdk-支持的驱动中" title="标题的直接链接">​</a></h3><p>primary 进程在调用 <strong>eth_virtio_dev_init</strong> 初始化接口的时候，在子函数调用中会执行与 <strong>rte_eal_pci_map_device</strong> 过程。</p><p>相关函数调用：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">eth_virtio_dev_init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    vtpci_init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        virtio_read_caps</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            rte_eal_pci_map_device</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>vtpci_init</strong> 函数的子函数调用中映射网卡的 pci 资源空间失败，进而导致 <strong>eth_virtio_dev_init</strong> 返回 1。</p><p><strong>这里的返回值非常关键，当返回值大于 0 时，函数调用返回到 pci_probe_all_drivers 中，此函数检测到返回值大于 0 则继续初始化后续接口</strong>，如果<strong>返回值小于 0，函数返回到 rte_eal_pci_probe 中，打印 Requested device xxxx cannot be used 后程序终止</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="解决方案">解决方案<a class="hash-link" href="#解决方案" title="标题的直接链接">​</a></h2><p>修复 patch ：</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Index</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> drivers</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">net</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">virtio</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">virtio_ethdev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> drivers</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">net</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">virtio</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">virtio_ethdev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">c</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">revision </span><span class="token number" style="color:#36acaa">666666</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> drivers</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">net</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">virtio</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">virtio_ethdev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">c</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">working copy</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1266</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1266</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">26</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">check_device_driver</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_pci_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kdrv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_KDRV_VFIO</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_KDRV_IGB_UIO</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_KDRV_UIO_GENERIC</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">               ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">               </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">               </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">DEBUG</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EAL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">                       </span><span class="token string" style="color:#e3116c">"  Not managed by a supported kernel driver, skipped\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">               ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">               </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">  * This function is based on probe() function in virtio_pci.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">  * It returns 0 on success.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">@@ -1284,6 +1304,14 @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        eth_dev-&gt;tx_pkt_burst = &amp;virtio_xmit_pkts;</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        if (rte_eal_process_type() == RTE_PROC_SECONDARY) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">+               int ret;</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">+               pci_dev = eth_dev-&gt;pci_dev;</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">+</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">+               ret = check_device_driver(pci_dev);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">+</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">+               if (unlikely(ret))</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">+                       return EINVAL;</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">+</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                rx_func_get(eth_dev);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                return 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此 patch 在 <strong>eth_virtio_dev_init</strong> 中添加在 SECONDARY 进程中判断 pci 接口是否绑定到 dpdk 支持的驱动中，判断失败则返回 EINVAL（<strong>必须返回正数用于上层逻辑处理</strong>）。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="测试记录">测试记录<a class="hash-link" href="#测试记录" title="标题的直接链接">​</a></h2><p>修改后，重新执行 dpdk_proc_info 进程，打印如下：</p><div class="language-cpp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-cpp codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> PCI device </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">03.0</span><span class="token plain"> on NUMA socket </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   probe driver</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">af4</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">1000</span><span class="token plain"> rte_virtio_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   Not managed by a supported kernel driver</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> skipped</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> PCI device </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">04.0</span><span class="token plain"> on NUMA socket </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   probe driver</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">af4</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">1000</span><span class="token plain"> rte_virtio_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> PCI device </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">09.0</span><span class="token plain"> on NUMA socket </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   probe driver</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">af4</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">1000</span><span class="token plain"> rte_virtio_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> PCI device </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on NUMA socket </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   probe driver</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">af4</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">1000</span><span class="token plain"> rte_virtio_pmd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> PCI device </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">.</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> on NUMA socket </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   probe driver</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">af4</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">1000</span><span class="token plain"> rte_virtio_pmd</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到修改后管理口被<strong>跳过</strong>，<strong>问题得到解决</strong>。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-16.04 解初始化过程]]></title>
        <id>/dpdk/dpdk-16.04 解初始化过程</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 解初始化过程"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[dpdk-16.04 程序解初始化过程]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-1604-程序解初始化过程">dpdk-16.04 程序解初始化过程<a class="hash-link" href="#dpdk-1604-程序解初始化过程" title="标题的直接链接">​</a></h2><p>dpdk-16.04 解初始化过程相对简单，这里以 l2fwd 程序的退出过程来分析。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="l2fwd-程序退出过程">l2fwd 程序退出过程<a class="hash-link" href="#l2fwd-程序退出过程" title="标题的直接链接">​</a></h2><p>l2fwd 程序正常退出代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> nb_ports</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> portid</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">l2fwd_enabled_port_mask </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Closing port %d..."</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_eth_dev_stop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_eth_dev_close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">" Done\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述逻辑对每个已经使能的接口依次执行如下操作：</p><ol><li>stop 接口</li><li>close 接口</li></ol><p>l2fwd 程序在收发包线程的循环中不断判断 force_quit 变量的值，当此值不为 0 时，收发包线程主动终止，主线程中检测到收发包线程终止后，释放 dpdk 占用的接口。</p><p>rte_eth_dev_stop 与 rte_eth_dev_close 是对网卡底层 dev_ops 调用的封装层，这里我以 igb 网卡为例说明下其中的一些细节。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="igb-网卡实例化的-dev_stop-函数">igb 网卡实例化的 dev_stop 函数<a class="hash-link" href="#igb-网卡实例化的-dev_stop-函数" title="标题的直接链接">​</a></h2><p>igb 网卡驱动实例化的 dev_stop 函数为 eth_igb_stop，此函数的主要逻辑如下：</p><ol><li><p>调用 igb_intr_disable 写寄存器使能每个中断的掩码，关闭硬件中断</p></li><li><p>调用 rte_intr_disable 同步关闭内核态网卡接口中断，对于使用 uio 与 igb_uio 这种方式来说，它会向 /dev/uioX 文件中写入 0 来调用 igb_uio 中的 igbuio_pci_irqcontrol 函数</p></li><li><p>调用 igb_pf_reset_hw reset 网卡接口，将硬件状态还原到初始状态</p></li><li><p>关闭 phy 的电源</p></li><li><p>释放每个 tx_queue、rx_queue 上 sw_ring 占用的 mbuf，并将队列与描述符重新初始化</p></li><li><p>修改 link 接口体，将 link 软件状态设置为 0，表示接口 down</p></li><li><p>移除当前接口上设定的所有 flex_filter、ntuple_filter 配置</p></li><li><p>重新注册默认的中断处理函数</p></li><li><p>从中断线程的 epoll 列表中移除当前接口使用的 /dev/uioX 文件描述符</p></li><li><p>释放中断向量号数组</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="igb-网卡实例化的-dev_close-函数">igb 网卡实例化的 dev_close 函数<a class="hash-link" href="#igb-网卡实例化的-dev_close-函数" title="标题的直接链接">​</a></h2><p>igb 网卡驱动实例化的 dev_close 函数为 eth_igb_close，此函数的主要逻辑如下：</p><ol><li>调用 eth_igb_stop stop 接口</li><li>reset phy 并执行其它相关的硬件 reset 操作</li><li>释放每个 rx_queue、tx_queue 上申请的动态内存，如所有的 rx_desc 与 tx_desc，所有的 sw_ring 及 rx_queue、tx_queue 结构体</li><li>释放中断向量数组</li><li>修改 link 接口体，将 link 软件状态设置为 0，表示接口 down</li></ol><p>写到这里我发现 eth_igb_close 中调用了 eth_igb_stop，那为啥还需要调用 rte_eth_dev_stop 呢？</p><p>首先把 rte_eth_dev_stop 函数的代码贴到下面：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_eth_dev_stop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint8_t</span><span class="token plain"> port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_ETH_VALID_PORTID_OR_RET</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rte_eth_devices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_FUNC_PTR_OR_RET</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_ops</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_stop</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_started </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_PMD_DEBUG_TRACE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Device with port_id=%"</span><span class="token plain"> PRIu8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">" already stopped\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_started </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_ops</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_stop</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>能够看到 rte_eth_dev_stop 除了调用底层网卡驱动实现的 dev_stop 之外，还要设定 dev-&gt;data-&gt;dev_started 变量的值，该值是 dpdk 内部变量，独立于每个物理网卡，这就是要在 rte_eth_dev_close 函数调用前调用一次 rte_eth_dev_stop 的原因。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="rte_eth_dev_close-函数">rte_eth_dev_close 函数<a class="hash-link" href="#rte_eth_dev_close-函数" title="标题的直接链接">​</a></h2><p>dev-&gt;data 中的 rx_queues、tx_queues 中保存网卡每个收发队列的地址，是 dpdk 在初始化接口的时候申请的，此结构是驱动独立的，因此由 dev_ops 的封装层来释放，释放逻辑在 rte_eth_dev_close 中，代码如下:</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_eth_dev_close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint8_t</span><span class="token plain"> port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_ETH_VALID_PORTID_OR_RET</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rte_eth_devices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_FUNC_PTR_OR_RET</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_ops</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_close</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_started </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_ops</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_close</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_queues</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_queues </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">tx_queues</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">tx_queues </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里释放了如下两个项目的资源：</p><ol><li><p>rx_queues （存放每个 rx_queue 的地址）</p></li><li><p>tx_queues (存放每个 tx_queue 的地址)</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dev-data-dev_private-结构的释放">dev-&gt;data-&gt;dev_private 结构的释放<a class="hash-link" href="#dev-data-dev_private-结构的释放" title="标题的直接链接">​</a></h2><p>dpdk 的 pmd pci 驱动存在一些内部的数据结构，这部分数据结构的大小在注册驱动的时候通过 eth_driver 中的 dev_private_size 字段来设定，dpdk probe 接口的时候会申请相应大小的数据结构，驱动内部通过访问 dev-&gt;data-&gt;dev_private 来使用这些结构。</p><p>igb 网卡的 eth_driver 内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">eth_driver</span><span class="token plain"> rte_igb_pmd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pci_drv </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"rte_igb_pmd"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id_table </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pci_id_igb_map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">drv_flags </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_PCI_DRV_NEED_MAPPING </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> RTE_PCI_DRV_INTR_LSC </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            RTE_PCI_DRV_DETACHABLE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">eth_dev_init </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> eth_igb_dev_init</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">eth_dev_uninit </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> eth_igb_dev_uninit</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dev_private_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">e1000_adapter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>igb 网卡声明了需要创建 e1000_adapter 这个结构体大小的私有空间，此空间只在底层驱动中使用。<strong>那这个空间在哪里被释放呢？</strong></p><p>上文中描述的 l2fwd 的退出逻辑并不会释放 dev_private 接口，通过阅读代码发现，这一结构只有当程序调用了 rte_eth_dev_detach 函数的时候才会被释放，故而这部分逻辑不在 dpdk 程序的解初始化过程中，它实际上是<strong>由内核回收</strong>的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="pci-设备的-unmap">pci 设备的 unmap<a class="hash-link" href="#pci-设备的-unmap" title="标题的直接链接">​</a></h2><p>与 dev_private 结构类似的还有 pci 设备资源的 unmap 过程，此过程也只在 rte_eth_dev_detach 函数被调用的时候才会执行，也是由内核回收的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-程序异常终止时资源会释放吗">dpdk 程序异常终止时资源会释放吗？<a class="hash-link" href="#dpdk-程序异常终止时资源会释放吗" title="标题的直接链接">​</a></h2><p>上文中我们描述的一些动态空间的释放过程是程序正常退出时才会执行的，当程序异常终止，如收到 SIGKILL 信号被内核强制杀死时，这部分逻辑不会被执行，那么如何确保这些资源被释放呢？</p><p>实际上这些资源是由内核回收的，这才保证了程序异常终止时不至于出现资源泄露！</p><p>kni 程序由于会在内核中创建一些数据结构，它的资源回收需要额外处理，这部分工作是在 rte_kni 模块中完成的。<strong>当 kni 程序异常终止时，内核会回收进程的描述符，调用相应的 close 函数，对 /dev/kni 文件来说它就是 kni_release 函数，此函数负责释放内核中创建的动态接口如 netdev 等资源</strong></p><p>kni 程序正常终止时会调用 ioctl 并传递 RTE_KNI_IOCTL_RELEASE 参数，rte_kni 模块中会调用 kni_ioctl_release </p><p>来释放资源，阅读代码就可以<strong>发现 kni_ioctl_release 执行的过程是 kni_release 函数的一个子集</strong>，毕竟当程序异常终止时 ioctl 不会被调用，内核也无法协助处理，这时内核回收 /dev/kni 文件对应的描述符时调用 kni_release 就能够回收所有资源，避免出现部分资源的泄露问题！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-16.04 配置与编译过程分析]]></title>
        <id>/dpdk/dpdk-16.04 配置与编译过程分析</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-16.04 配置与编译过程分析"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[dpdk .config 文件的生成过程]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-config-文件的生成过程">dpdk .config 文件的生成过程<a class="hash-link" href="#dpdk-config-文件的生成过程" title="标题的直接链接">​</a></h2><p>dpdk 有内部的 .config 文件，编译前需要先创建不同架构 .config 配置文件与 build 目录。</p><p>dpdk 源码目录 config 子目录存放用于生成 .config 文件的源文件，目录内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">common_base                            defconfig_i686</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">native</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcc     defconfig_x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">native</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">bsdapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">common_bsdapp                          defconfig_i686</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">native</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">icc     defconfig_x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">native</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">clang</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">common_linuxapp                        defconfig_ppc_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">power8</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcc   defconfig_x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">native</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">defconfig_arm64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">armv8a</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcc    defconfig_tile</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">tilegx</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcc     defconfig_x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">native</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">icc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">defconfig_arm64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">thunderx</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcc  defconfig_x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ivshmem</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcc  defconfig_x86_x32</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">native</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">defconfig_arm64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">xgene1</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcc    defconfig_x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ivshmem</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">icc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">defconfig_arm</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">armv7a</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linuxapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcc      defconfig_x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">native</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">bsdapp</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">clang</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>common_base 文件为基本配置，common_bsdapp 与 common_linuxapp 代表 dpdk 支持的两种大的系统：</p><ol><li>bsd 系统</li><li>linux 系统</li></ol><p><strong>defconfig_xx 配置选项配置编译架构，工具链名称，defconfig_xx 包含 common_bsdapp、common_lnuxapp 的配置项目，common_bsdapp、common_linuxapp 包含 common_base 的配置项目。</strong></p><p>以 x86_64-native-linuxapp-gcc 为例，要生成 x86_64-native-linuxapp-gcc 的配置文件，可以在 dpdk 源码跟目录中执行如下命令：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">make</span><span class="token plain"> config </span><span class="token assign-left variable" style="color:#36acaa">O</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">./x86_64-native-linuxapp-gcc </span><span class="token assign-left variable" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">x86_64-native-linuxapp-gcc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行成功后会生成 x86_64-native-linuxapp-gcc 目录，此目录的内容如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">.</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">  build  .config  .config.orig  .depdirs  include  Makefile</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol><li>bulid 为编译过程中中间文件保存目录</li><li>.config 文件是生成的配置文件内容，.config.orig 是配置文件的备份</li><li>include 目录中为生成的 rte_config.h 文件</li><li>.depdirs 中为不同模块的依赖关系</li><li>Makfile 为构建使用的编译脚本</li></ol><p>.config 文件通过指定 -x assembler-with-cpp 参数调用 cc（gcc） 来生成，示例命令如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> cc -E -undef -P -x assembler-with-cpp -ffreestanding -o /home/longyu/dpdk-16.04/.config /home/longyu/dpdk-16.04/config/defconfig_x86_64-native-linuxapp-gcc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-rte_config-文件的生成过程">dpdk rte_config 文件的生成过程<a class="hash-link" href="#dpdk-rte_config-文件的生成过程" title="标题的直接链接">​</a></h2><p>.config 文件维护了 dpdk 内部组件的配置，实际编译中会根据 .config 内容来生成 rte_config.h 文件，实际的配置通过头文件中的宏定义值达成。</p><p><strong>rte_config.h 头文件通过调用 scripts/gen-config.h.sh 来生成，此脚本的输出信息被重定向为 rte_config.h，脚本内容为几个 echo 与 sed 替换命令。</strong></p><p>需要说明的是，当 .config 文件更新后，重新生成 rte_config.h 之前会编译生成的中间文件目录。</p><p>.config 与 rte_config.h 文件的生成过程由 mk/rte.sdkconfig.mk 文件控制，可以阅读这个文件获取更详细的信息。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-完整构建过程">dpdk 完整构建过程<a class="hash-link" href="#dpdk-完整构建过程" title="标题的直接链接">​</a></h2><p>1.构建 mk/rte.sdkconfig.mk 中的 checkconfig 目标，检查是否需要重新生成配置文件</p><p>2.构建 mk/rte.sdkconfig.mk 中的 headerconfig 目标，生成 rte_config.h </p><p>3.构建 depdirs 目标，在编译目标目录中生成 .depdirs 文件</p><p>4.构建 mk/rte.sdkbuild.mk all 配置，rte.sdkbuild 中首先包含 .depdirs 文件，根据依赖关系确定编译的优先级顺序</p><p>5.在编译前，首先包含 mk/rte.vars.mk 文件，此文件进而包含 mk/target/generic/rte.vars.mk，mk/target/generic/rte.vars.mk 进而包含 toolchain/$(RTE_TOOLCHAIN)/rte.vars.mk 下面的头文件配置编译工具链，dpdk 中工具链前缀通过 CROSS 变量控制。</p><p>6.根据 Makefile 在 build 目录中生成 .xxx.o.d、.xxx.o.cmd 文件，创建 Makefile 中声明的 SYMLINK 头文件，执行编译过程，编译完成后执行 install 安装目标文件</p><p>dpdk 构建系统有几个不同的类别，如 lib、module、app、extlib、extapp 等等几个对象类别，lib 是一个常见的类别，其源码主要过程如下：</p><ol><li>包含 mk/internal/rte.xx-pre.mk 文件，执行编译前的设定</li><li>针对 lib 类别编译目标自身的设定</li><li>包含 mk/intermal/rte.xx-post.mk 文件，执行编译后的设定</li></ol><p>其它的类别对象的构建过程大同小异，不展开说明！</p><p>dpdk 的构建过程比较灵活，支持单独编译每一种目标类型！要添加自己的编译参数，可以设定 EXTRA_CFLAGS 变量。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-19.11 armv8 l2fwd 在某 arm 内核上无法运行问题]]></title>
        <id>/dpdk/dpdk-19.11 armv8 l2fwd 在某 arm 内核上无法运行问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-19.11 armv8 l2fwd 在某 arm 内核上无法运行问题"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>编译 dpdk-19.11 arm 版本的 l2fwd，在指定的 arm 内核上运行，有如下报错信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected </span><span class="token number" style="color:#36acaa">16</span><span class="token plain"> lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> NUMA nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Multi-process socket /var/run/dpdk/rte/mp_socket</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Selected IOVA mode </span><span class="token string" style="color:#e3116c">'PA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Probing VFIO support</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: error allocating rte services array</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: FATAL: rte_service_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> failed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: rte_service_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> failed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Error - exiting with code: </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Cause: Invalid EAL arguments</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>关键报错：</p><p><strong>EAL: error allocating rte services array</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="确认问题">确认问题<a class="hash-link" href="#确认问题" title="标题的直接链接">​</a></h2><ol><li>hugepage 正常配置，hugetlbfs 正常挂载</li><li>dpdk-16.04 的 l2fwd 能够正常运行</li></ol><p>查看代码确认问题为<strong>在创建 rte services 数组的时候申请内存失败</strong>！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="strace-跟踪获取到的结果">strace 跟踪获取到的结果<a class="hash-link" href="#strace-跟踪获取到的结果" title="标题的直接链接">​</a></h2><p>strace 跟踪 l2fwd 程序执行，摘录如下关键过程：</p><div class="language-strace codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-strace codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">openat(AT_FDCWD, "/dev/hugepages", O_RDONLY) = 23</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flock(23, LOCK_EX)                      = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">openat(AT_FDCWD, "/dev/hugepages/rtemap_0", O_RDWR|O_CREAT, 0600) = 24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flock(24, LOCK_SH|LOCK_NB)              = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ftruncate(24, 2097152)                  = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mmap(0x100200000, 2097152, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_FIXED|MAP_POPULATE, 24, 0) = 0x100200000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rt_sigprocmask(SIG_BLOCK, NULL, [], 8)  = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">openat(AT_FDCWD, "/proc/self/pagemap", O_RDONLY) = 25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lseek(25, 8392704, SEEK_SET)            = 8392704</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">read(25, "\0\0z\0\0\0\0\241", 8)        = 8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">close(25)                               = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">get_mempolicy(0x7fffffce24, NULL, 0, 0x100200000, MPOL_F_NODE|MPOL_F_ADDR) = -1 ENOSYS (Function not implemented)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">munmap(0x100200000, 2097152)            = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mmap(0x100200000, 2097152, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x100200000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flock(24, LOCK_EX|LOCK_NB)              = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">unlinkat(AT_FDCWD, "/dev/hugepages/rtemap_0", 0) = 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">close(24)                               = 0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述系统调用在映射第一个大页，明显的异常内容如下：</p><div class="language-strace codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-strace codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">get_mempolicy(0x7fffffce24, NULL, 0, 0x100200000, MPOL_F_NODE|MPOL_F_ADDR) = -1 ENOSYS (Function not implemented)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此信息表明当前内核不支持 <strong>get_mempolicy</strong> 系统调用。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="提问环节">提问环节<a class="hash-link" href="#提问环节" title="标题的直接链接">​</a></h2><ol><li><p>get_mempolicy 在哪里被调用？</p><p>阅读代码确认在映射大页的过程中会调用 get_mempolicy，当失败后会使用默认值。</p></li><li><p>是否有配置关闭相关逻辑？
CONFIG_RTE_EAL_NUMA_AWARE_HUGEPAGES 能够用来控制这部分代码逻辑。</p></li><li><p>get_mempolicy 调用失败为什么不退出？
调用失败后会使用缺省值！</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="get_mempolicy-是干嘛的">get_mempolicy 是干嘛的？<a class="hash-link" href="#get_mempolicy-是干嘛的" title="标题的直接链接">​</a></h2><p>man get_mempolicy 的部分信息如下：</p><div class="language-manual codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-manual codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">GET_MEMPOLICY(2)                                   Linux Programmer's Manual                                   GET_MEMPOLICY(2)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">NAME</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       get_mempolicy - retrieve NUMA memory policy for a thread</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">SYNOPSIS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       #include &lt;numaif.h&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       long get_mempolicy(int *mode, unsigned long *nodemask,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                         unsigned long maxnode, void *addr,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                         unsigned long flags);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       Link with -lnuma.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="解决方法">解决方法<a class="hash-link" href="#解决方法" title="标题的直接链接">​</a></h2><p>armv8 的 .config 文件中关闭　<strong>CONFIG_RTE_EAL_NUMA_AWARE_HUGEPAGES</strong> 配置后重新编译，测试正常。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="关闭-rte_eal_numa_aware_hugepages-的合理性">关闭 RTE_EAL_NUMA_AWARE_HUGEPAGES 的合理性<a class="hash-link" href="#关闭-rte_eal_numa_aware_hugepages-的合理性" title="标题的直接链接">​</a></h2><p>NUMA_AWARE_HUGEPAGES 的修改能够从 <a href="http://mails.dpdk.org/archives/dev/2017-June/068386.html" target="_blank" rel="noopener noreferrer">[dpdk-dev] [PATCH v7 1/2] mem: balanced allocation of hugepages</a> 中找到。</p><p>浏览 patch 内容，获取到如下信息：</p><div class="language-patch codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-patch codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">diff --git a/config/defconfig_arm64-armv8a-linuxapp-gcc b/config/defconfig_arm64-armv8a-linuxapp-gcc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">index 9f32766..2c67cdc 100644</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--- a/config/defconfig_arm64-armv8a-linuxapp-gcc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+++ b/config/defconfig_arm64-armv8a-linuxapp-gcc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ -47,6 +47,9 @@ CONFIG_RTE_TOOLCHAIN_GCC=y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> # to address minimum DMA alignment across all arm64 implementations.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> CONFIG_RTE_CACHE_LINE_SIZE=128</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+# Most ARMv8 systems doesn't support NUMA</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+CONFIG_RTE_EAL_NUMA_AWARE_HUGEPAGES=n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>大部分 ARMv8 系统并不支持 numa，缺省配置关闭。.config 中同步 ARMv8 的默认配置是合理的！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前言]]></title>
        <id>/dpdk/dpdk-19.11 支持接口配置速率双工的方法</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-19.11 支持接口配置速率双工的方法"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[常见的 igb 电口网卡有支持速率双工配置的需求，在 dpdk-19.11 中却没有配置网卡速率双工的接口，为此需要进行开发，实现方法需要通过研究不同网卡的驱动代码来确定。]]></summary>
        <content type="html"><![CDATA[<p>常见的 igb 电口网卡有支持速率双工配置的需求，在 dpdk-19.11 中却没有配置网卡速率双工的接口，为此需要进行开发，实现方法需要通过研究不同网卡的驱动代码来确定。</p><p>本文中以 igb 网卡驱动为例进行描述。</p><h1>研究 igb 网卡驱动</h1><p>dpdk-19.11 中的 igb 网卡驱动在执行 eth_igb_start up 接口的时候会配置速率双工。</p><p>相关的代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">1349</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* Setup link speed and duplex */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1350</span><span class="token plain">     speeds </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_speeds</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1351</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">speeds </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> ETH_LINK_SPEED_AUTONEG</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1352</span><span class="token plain">         hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">phy</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">autoneg_advertised </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> E1000_ALL_SPEED_DUPLEX</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1353</span><span class="token plain">         hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">autoneg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1354</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1355</span><span class="token plain">         num_speeds </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1356</span><span class="token plain">         autoneg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">speeds </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> ETH_LINK_SPEED_FIXED</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1357</span><span class="token plain">     </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1358</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Reset */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1359</span><span class="token plain">         hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">phy</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">autoneg_advertised </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1360</span><span class="token plain">         </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1361</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">speeds </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">~</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ETH_LINK_SPEED_10M_HD </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_LINK_SPEED_10M </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1362</span><span class="token plain">                 ETH_LINK_SPEED_100M_HD </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_LINK_SPEED_100M </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1363</span><span class="token plain">                 ETH_LINK_SPEED_1G </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_LINK_SPEED_FIXED</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1364</span><span class="token plain">             num_speeds </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1365</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> error_invalid_config</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1366</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1367</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">speeds </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> ETH_LINK_SPEED_10M_HD</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1368</span><span class="token plain">             hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">phy</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">autoneg_advertised </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> ADVERTISE_10_HALF</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1369</span><span class="token plain">             num_speeds</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1370</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1387</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">num_speeds </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">autoneg </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">num_speeds </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1388</span><span class="token plain">             </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> error_invalid_config</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1389</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1390</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/* Set/reset the mac.autoneg based on the link speed,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">1391          * fixed or not</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">1392          */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1393</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">autoneg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1394</span><span class="token plain">             hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">autoneg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1395</span><span class="token plain">             hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">forced_speed_duplex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1396</span><span class="token plain">                     hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">phy</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">autoneg_advertised</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1397</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1398</span><span class="token plain">             hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">autoneg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1399</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1402</span><span class="token plain">     </span><span class="token function" style="color:#d73a49">e1000_setup_link</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述代码的主要逻辑如下：</p><ol><li>获取 dev-&gt;data-&gt;dev_conf.link_speeds 变量中设置的 link_speeds，获取速率双工配置状态</li><li>根据 link_speeds 变量的值设置驱动内部变量如 hw-&gt;phy.autoneg_advertised、hw-&gt;mac.autoneg、hw-&gt;mac.forced_speed_duplex 的值</li><li>调用 e1000_setup_link 配置设置的速率双工</li></ol><p>按照上面的流程，我们只需要设置 dev-&gt;data-&gt;dev_conf.link_speeds 的值，然后重新将接口 up 起来就能够实现速率双工配置了。</p><h1>测试验证过程</h1><p>经过上文的分析，已经确定了 igb 网卡速率双工配置的方法，需要验证可行性。
可以在 e1000_setup_link 函数调用前执行如下代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">autoneg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">forced_speed_duplex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ADVERTISE_100_FULL</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这两行代码配置接口速率双工为强制 100M 全双工，修改代码后使用 kni 程序测试，对端接口绑定到内核驱动上，测试有效！</p><h1>igb 网卡默认的速率双工配置</h1><p>设置方案确定后，不能忘了 igb 网卡默认的速率双工配置项目。一般来说，在 rte_eth_dev_configure 未通过 dev_conf 设定 link_speeds 的值则默认为 0。</p><p>eth_igb_dev_init 函数中的如下代码配置接口使用自协商模式，并指定协商速率为所有支持的速率与双工模式。</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">793</span><span class="token plain">     hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">autoneg </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">794</span><span class="token plain">     hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">phy</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">autoneg_wait_to_complete </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">795</span><span class="token plain">     hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">phy</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">autoneg_advertised </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> E1000_ALL_SPEED_DUPLEX</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h1>dpdk-19.11 获取接口支持的速率双工配置</h1><p>在设置速率双工前，可以添加一些检查，检查待设置的模式当前网卡是否支持。可以通过调用 rte_eth_dev_info_get 函数来获取 dev_info 结构来实现，dev_info 结构中的 speed_capa 字段代表了当前网卡支持的速率双工配置。</p><p>对 igb 网卡来说，speed_capa 字段通过 eth_igb_infos_get 函数的如下代码来填充：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">2286</span><span class="token plain">     dev_info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">speed_capa </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_LINK_SPEED_10M_HD </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_LINK_SPEED_10M </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2287</span><span class="token plain">             ETH_LINK_SPEED_100M_HD </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_LINK_SPEED_100M </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2288</span><span class="token plain">             ETH_LINK_SPEED_1G</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>获取到了之后就可以进行检查！</p><h1>总结</h1><p>本文以 igb 驱动为例描述了 dpdk-19.11 支持接口配置速率双工的方法，这一方法适用于多个驱动，是一个相对通用的方法。速率双工配置也是网卡驱动应当对外提供的常见功能，不过这里 dpdk 的处理过程有些特别，它将配置集中到对 dev-&gt;data-&gt;dev_conf.link_speeds 变量的设定上了！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk程序启动顺序引发的血案]]></title>
        <id>/dpdk/dpdk程序启动顺序引发的血案</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk程序启动顺序引发的血案"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>在某个特定的场景中，<strong>dpdk primary</strong> 进程在宿主机上运行，在 <strong>dpdk primary</strong> 进程运行前，宿主机上的<strong>某 A 程序</strong>负责创建 <strong>/dev/hugepages</strong> 目录并挂载 <strong>hugetlbfs</strong> 到此目录中。</p><p>同时在此宿主机上也以<strong>容器</strong>为基本单位指定特权模式运行其它的 <strong>dpdk secondary</strong> 进程，<strong>dpdk secondary</strong> 进程需要与 <strong>primary</strong> 进程共享的目录通过<strong>容器启动参数</strong>来映射。</p><p>容器的启动时机与 <strong>A 程序</strong>创建 /dev/hugepages 目录并挂载大页内存的时序没有严格保证。</p><p>在某次测试时，容器内的 dpdk secondary 进程初始化报了如下错误：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected </span><span class="token number" style="color:#36acaa">16</span><span class="token plain"> lcore</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> NUMA nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Multi-process socket /var/run/dpdk/rte/mp_socket</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Selected IOVA mode </span><span class="token string" style="color:#e3116c">'PA'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Probing VFIO support</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: error allocating rte services array</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: FATAL: rte_service_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> failed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: rte_service_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> failed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Error - exiting with code: </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Cause: Invalid EAL arguments</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述报错信息表面上看是内存获取失败，做了如下排查：</p><ol><li>容器内 hugetlbfs 挂载排查 -- 正常挂载</li><li>容器内 /dev/hugepages 目录中映射的大页内存内容排查 -- 内容均为 0x00</li><li>宿主机内 /dev/hugepages 目录中映射的大页内存内容排查 -- 内容正常</li></ol><p>问题指向容器映射的 <strong>/dev/hugepages</strong> 目录<strong>存在异常</strong>，进一步分析，怀疑容器在 <strong>A 程序</strong>创建 <strong>/dev/hugepages</strong> 目录前就已经启动。此时由于 <strong>/dev/hugepages</strong> 目录还没有创建，<strong>容器自动创建了该目录并成功启动</strong>，此后 A 程序在宿主机上挂载 hugetlbfs 到 /dev/hugepages 目录中，dpdk primary 进程正常运行，而容器内的 <strong>secondary</strong> 进程由于<strong>没有挂载 hugetlbfs</strong> 而无法启动。</p><p>那有哪些证据来支撑这个怀疑呢？</p><p>经过一些思考交流后，确认有如下信息就能够在一定程度上说明问题：</p><ol><li>容器内 /dev/hugepages 文件的创建时间</li><li>容器的启动时间</li><li>容器的启动时间早于 /dev/hugepages 文件的创建时间</li><li>在宿主机上 umount 掉 hugetlbfs 后查看 /dev/hugepages 的 inode 号并与容器内的对比</li></ol><p>那么问题来了：<strong>该如何获取 /dev/hugepages 目录的创建时间呢？</strong>
ctime 立刻涌出了脑海，可是过去的经验告诉我 ctime 根本不代表文件的创建时间，它的全称是 <strong>change time，而非 create time</strong>，也就是说我其实压根不知道该如何获取文件的创建时间。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="搜索互联网">搜索互联网<a class="hash-link" href="#搜索互联网" title="标题的直接链接">​</a></h2><p>使用关键词 “find file create time on linux” 搜索，找到如下链接</p><p><a href="https://unix.stackexchange.com/questions/20460/how-do-i-do-a-ls-and-then-sort-the-results-by-date-created" target="_blank" rel="noopener noreferrer">https://unix.stackexchange.com/questions/20460/how-do-i-do-a-ls-and-then-sort-the-results-by-date-created</a></p><p>此链接中描述了在 linux 中获取文件创建时间的方法，get 到了新的技能，同时我也完成了本篇文章的部分草稿。</p><p>在 linux 4.11 内核中，引入了一个 statx 系统调用，对于特定的文件系统如 ext4、xfs，支持通过 statx 结构的 stx_btime 字段获取文件的创建时间。</p><p>使用示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> ~ $ </span><span class="token function" style="color:#d73a49">stat</span><span class="token plain"> ./file_backup/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  File: ./file_backup/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Size: </span><span class="token number" style="color:#36acaa">4096</span><span class="token plain">        Blocks: </span><span class="token number" style="color:#36acaa">8</span><span class="token plain">          IO Block: </span><span class="token number" style="color:#36acaa">4096</span><span class="token plain">   directory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Device: 10308h/66312d   Inode: </span><span class="token number" style="color:#36acaa">1572919</span><span class="token plain">     Links: </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Access: </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">0755/drwxr-xr-x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">  Uid: </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1000</span><span class="token plain">/  longyu</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">   Gid: </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1001</span><span class="token plain">/ UNKNOWN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Access: </span><span class="token number" style="color:#36acaa">2022</span><span class="token plain">-04-18 </span><span class="token number" style="color:#36acaa">20</span><span class="token plain">:16:01.562883033 +0800</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Modify: </span><span class="token number" style="color:#36acaa">2021</span><span class="token plain">-02-10 </span><span class="token number" style="color:#36acaa">20</span><span class="token plain">:37:36.536293084 +0800</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Change: </span><span class="token number" style="color:#36acaa">2021</span><span class="token plain">-02-10 </span><span class="token number" style="color:#36acaa">20</span><span class="token plain">:37:36.536293084 +0800</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> Birth: </span><span class="token number" style="color:#36acaa">2019</span><span class="token plain">-12-06 </span><span class="token number" style="color:#36acaa">21</span><span class="token plain">:25:25.340826235 +0800</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述输出的最后一项 Birth 就代表文件的创建时间。整理这篇博客的时候我发现获取文件的创建时间在本文描述的问题中根本不可用，关键的问题在于 /dev/ 挂载点的文件系统为 devtmpfs，这个文件系统目前压根不支持获取文件的创建时间
！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="灵机一动">灵机一动<a class="hash-link" href="#灵机一动" title="标题的直接链接">​</a></h2><p>写的过程中突然想到其实有一个非常关键的证据能够证明上文的怀疑点，基于如下几个基础的认识：</p><ol><li>容器内的挂载点信息与宿主机是隔离的，这一点由 namespace 保证</li><li>容器尽管可能会创建 /dev/hugepages 目录，但是不会挂载 hugetlbfs </li><li>容器内未挂载 hugetlbfs，则在容器内访问 /proc/mounts 文件，其输出中一定检索不出来 hugetlbfs 的挂载点</li></ol><p>于是重新 check 了下容器内 /proc/mounts 文件内容，却发现存在 hugetlbfs 的挂载点，问题仿佛又走入了死胡同。</p><p>此后，我们继续确认了如下信息：</p><ol><li>宿主机上的 /dev/hugepages 目录的 inode 与容器内 /dev/hugepages 目录中的 inode 不一致</li><li>在宿主机上 umount 一次 hugetlbfs 后，宿主机与容器内 /dev/hugepages inode 号一致</li></ol><p>在上面操作的基础上，我们发现宿主机上 umount 一次 hugetlbfs 后 /proc/mounts 文件中还是有 hugetlbfs 的挂载点，也是在 /dev/hugepages 目录中，只不过挂载参数与之前的有些区别，这说明 <strong>hugetlbfs 在 /dev/hugepages 目录上被挂载了两次</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="谁挂载了-hugetlbfs">谁挂载了 hugetlbfs？<a class="hash-link" href="#谁挂载了-hugetlbfs" title="标题的直接链接">​</a></h2><p>将系统中的 mount 命令用一个 shell 脚本覆盖，在脚本中获取父进程的 pid 并通过访问 /proc/ 目录下的文件来记录信息，包含调用时间、 cmdline、comm 信息，修改完成后重启系统，启动完成后查看记录信息，发现有两个调用者：</p><ol><li>/sbin/init</li><li>某 A 程序</li></ol><p>这次仍旧能够复现问题，此时查看容器的启动时间，发现容器启动时间在<strong>两次 hugetlbfs 的挂载中间</strong>，而宿主机中 dpdk primary 进程的启动时间在<strong>第二次 hugetlbfs 挂载之后</strong>。</p><p>两次 hugetlbfs 的挂载属于历史代码继承，抛开这个问题，根本原因在与容器的启动时序不正常，它应该在第二次 hugetlbfs 挂载之后、dpdk primary 进程启动后再启动。</p><p><strong>修改启动时序</strong>，问题得到解决。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>本文是在解决问题后编写的总结，其实自己对一些关键的信息已经有些模糊，这算是一种事后的复盘与重演。</p><p>在写的过程中我发现了一些新的思路，虽然不能用于这一次问题定位，但是通过总结，我的思路更宽阔了。</p><p>最后我想提出一个问题：</p><p>对于自己未知的如何获取文件创建时间的知识，真的成为了阻碍问题推进的原因吗？</p><p>答案显而易见！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/ethtool 命令指定的网络设备名在哪里被使用？]]></title>
        <id>/dpdk/ethtool 命令指定的网络设备名在哪里被使用？</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/ethtool 命令指定的网络设备名在哪里被使用？"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[使用 ethtool 时需要指定一个网络接口名称，这个名字究竟是在哪里被使用的呢？]]></summary>
        <content type="html"><![CDATA[<p>使用 ethtool 时需要指定一个网络接口名称，这个名字究竟是在哪里被使用的呢？</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ethtool-命令中对网络设备名的使用">ethtool 命令中对网络设备名的使用<a class="hash-link" href="#ethtool-命令中对网络设备名的使用" title="标题的直接链接">​</a></h2><p>ethtool 程序会将用户指定的网络设备名拷贝到一个 ctx 中，这个  ctx 被用来构建 ioctl 执行的环境。从 ctx.devname ----&gt; ctx.ifr.ifr_name。</p><p>ctx.ifr 最终作为 ioctl 系统调用的参数传递给内核。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ifr_name-在内核中的什么地方被使用呢">ifr_name 在内核中的什么地方被使用呢<a class="hash-link" href="#ifr_name-在内核中的什么地方被使用呢" title="标题的直接链接">​</a></h2><p>在 dev_ioctl 中有如下代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> SIOCETHTOOL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">dev_load</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ifr</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ifr_name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rtnl_lock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">dev_ethtool</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ifr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rtnl_unlock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">colon</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">colon </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token char">':'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>ethtool 调用的 ioctl 最终是在上述代码中执行的。在上面的代码中 dev_load
首先使用 ifr_name 在网络设备接口不存在的情况下加载相应的模块，只有当用
户具有需要的权限之后才能加载成功。</p><p>这之后 ifr_name 在 dev_ethtool 中被再次使用。相关的代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">__dev_get_by_name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">net</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ifr</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ifr_name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里通过 ifr_name 来检索到对应的 netdev 设备。成功则会获取到一个 net_device 结构。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="net_device-结构中的-ethtool_ops-成员">net_device 结构中的 ethtool_ops 成员<a class="hash-link" href="#net_device-结构中的-ethtool_ops-成员" title="标题的直接链接">​</a></h2><p>在 net_device 结构中我们可以发现如下的成员：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_ops</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ethtool_ops</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>ethtool_ops 是 ethtool 类的虚函数表，ethtool 命令最终就是通过调用这个虚函数表中的函数来工作的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ethtool-与面向对象">ethtool 与面向对象<a class="hash-link" href="#ethtool-与面向对象" title="标题的直接链接">​</a></h2><p>这里也是面向对象思想的一个应用。</p><p>ethtool 可以看作一个超类，ethool_ops 这个虚函数表中定义了子类能够重载的函数集合。不同的 netdev 设备使用不同的驱动，驱动中实现自己的 ethtool 相关函数并填充到一个虚函数表中。在设备初始化的过程中通过 SET_ETHTOOL_OPS 这个宏来绑定不同的虚函数表，完成对 ethtool 子类的实例化。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="netcoreethtoolc">net/core/ethtool.c<a class="hash-link" href="#netcoreethtoolc" title="标题的直接链接">​</a></h2><p>内核源码 net/core/ethtool.c 中提供了一个适配层，实现了一系列 ethtool_xxx 函数，这些函数统一了 ethtool 的调用方式，它们并不关心 dev-&gt;ethtool_ops 到底被谁实现，只需要在函数指针存在的情况下调用即可，这样便屏蔽了不同 netdev 中 ethtool_ops 的区别，实现了类似 c++ 中的重载功能。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/gcc constructor 属性修饰的构造函数未被链接问题]]></title>
        <id>/dpdk/gcc constructor 属性修饰的构造函数未被链接问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/gcc constructor 属性修饰的构造函数未被链接问题"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[dpdk pmd 驱动的初始化过程]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-pmd-驱动的初始化过程">dpdk pmd 驱动的初始化过程<a class="hash-link" href="#dpdk-pmd-驱动的初始化过程" title="标题的直接链接">​</a></h2><p>dpdk 支持多个 pmd 驱动，pmd 驱动的种类随着时间的推移还在不断的扩展。为了避免添加新驱动对现有框架代码的修改，dpdk 对不同驱动的初始化过程进行了抽象，添加一个新的驱动只需要添加一个驱动注册的构造函数即可。</p><p>dpdk-16.04 中通过 PMD_REGISTER_DRIVER 宏来注册驱动，这个宏的实现如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">PMD_REGISTER_DRIVER</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">d</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa"></span><span class="token macro property expression keyword" style="color:#00009f">void</span><span class="token macro property expression" style="color:#36acaa"> devinitfn_ </span><span class="token macro property punctuation" style="color:#393A34">##</span><span class="token macro property expression function" style="color:#d73a49">d</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression keyword" style="color:#00009f">void</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">;</span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa"></span><span class="token macro property expression keyword" style="color:#00009f">void</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression keyword" style="color:#00009f">__attribute__</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">constructor</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> used</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> devinitfn_ </span><span class="token macro property punctuation" style="color:#393A34">##</span><span class="token macro property expression function" style="color:#d73a49">d</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression keyword" style="color:#00009f">void</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa"></span><span class="token macro property expression punctuation" style="color:#393A34">{</span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa">    </span><span class="token macro property expression function" style="color:#d73a49">rte_eal_driver_register</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression operator" style="color:#393A34">&amp;</span><span class="token macro property expression" style="color:#36acaa">d</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">;</span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa"></span><span class="token macro property expression punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>每一种网卡驱动实现一个 rte_driver 结构体，通过 PMD_REGISTER_DRIVER 来将这些结构体地址添加到 dev_driver_list 链表中就完成了驱动注册的过程。</p><p>一个具体的使用示例如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">PMD_REGISTER_DRIVER</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pmd_igb_drv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用上面这行代码就完成了 igb 驱动的初始化函数注册过程。</p><p>PMD_REGISTER_DRIVER 中使用 gcc constructor 属性来修饰驱动的初始化函数，其语义保证初始化函数在 main 函数之前执行。其功能简单来说就是将驱动的初始化函数从 main 函数、main 函数调用的子函数中移动到 main 函数前隐式调用，这样就避免了每添加一种新驱动就得修改 main 函数、main 函数调用的子函数的行为。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="复用-dpdk-驱动注册方法">复用 dpdk 驱动注册方法<a class="hash-link" href="#复用-dpdk-驱动注册方法" title="标题的直接链接">​</a></h2><p>当我在扩展 dpdk 的 proc_info 示例程序代码来 dump 一些关键的数据结构，如网卡收发队列、描述符信息、寄存器信息等内容时，由于每一种网卡的区别，我也需要对 dump 过程进行抽象，用一个结构体描述每一种网卡的 dump 过程，同时复用 dpdk 驱动注册方法，使用 constructor 属性来实现每一种网卡 dump 结构体的注册过程。</p><p>我使用如下代码来模拟这一功能的实现过程：</p><p>驱动初始化模拟代码 test.c ：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">REGISTER_DUMPOPS_DRIVER</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">d</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa"></span><span class="token macro property expression keyword" style="color:#00009f">void</span><span class="token macro property expression" style="color:#36acaa"> devinitfn_ </span><span class="token macro property punctuation" style="color:#393A34">##</span><span class="token macro property expression function" style="color:#d73a49">d</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression keyword" style="color:#00009f">void</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">;</span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa"></span><span class="token macro property expression keyword" style="color:#00009f">void</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression keyword" style="color:#00009f">__attribute__</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">constructor</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> used</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> devinitfn_ </span><span class="token macro property punctuation" style="color:#393A34">##</span><span class="token macro property expression function" style="color:#d73a49">d</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression keyword" style="color:#00009f">void</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa"></span><span class="token macro property expression punctuation" style="color:#393A34">{</span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa">        </span><span class="token macro property expression function" style="color:#d73a49">printf</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property string" style="color:#e3116c">"register dumpops\n"</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">;</span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa"></span><span class="token macro property expression punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">REGISTER_DUMPOPS_DRIVER</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">igb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">REGISTER_DUMPOPS_DRIVER</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i40e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试代码 hello.c：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>编译过程：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ gcc -c test.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ar -rc libtest.a test.o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ gcc -L </span><span class="token builtin class-name">.</span><span class="token plain"> -ltest hello.c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试过程：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ ./hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ nm ./hello </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> initfn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试发现构造函数未执行，nm 查看 hello 可执行文件没有链接初始化函数。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="constructor-属性修饰的构造函数的特点">constructor 属性修饰的构造函数的特点<a class="hash-link" href="#constructor-属性修饰的构造函数的特点" title="标题的直接链接">​</a></h2><p>在 <a href="https://blog.csdn.net/Longyu_wlz/article/details/109128395?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161259049716780255247950%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D&amp;request_id=161259049716780255247950&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-2-109128395.pc_v1_rank_blog_v1&amp;utm_term=constructor" target="_blank" rel="noopener noreferrer">gcc x64 环境中默认链接脚本分析之 preinit_array、constructor、destructor 相关分析</a> 这篇文章中我对 constructor 属性修饰函数背后的一些原理进行了描述，这些构造函数与普通函数的区别在于它不被直接引用，如果这些构造函数被编译到静态库中，就不会被链接到最终的可执行文件中。</p><p>按照上面的说法，dpdk 的示例程序应该也不会链接驱动初始化构造函数，但事实是 dpdk 能够成功链接，我怀疑可能与某些编译参数有关。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-示例程序能够成功链接-a-中驱动初始化函数的原因">dpdk 示例程序能够成功链接 .a 中驱动初始化函数的原因？<a class="hash-link" href="#dpdk-示例程序能够成功链接-a-中驱动初始化函数的原因" title="标题的直接链接">​</a></h2><p>编译 l2fwd，观察编译参数得到如下信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">gcc -m64 -pthread -fPIC  -march</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">core2 -DRTE_MACHINE_CPUFLAG_SSE -DRTE_MACHINE_CPUFLAG_SSE2 -DRTE_MACHINE_CPUFLAG_SSE3 -DRTE_MACHINE_CPUFLAG_SSSE3  -I/tmp/dpdk-16.04/examples/l2fwd/build/include -I/tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include -include /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include/rte_config.h -O3 -W -Wall -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wold-style-definition -Wpointer-arith -Wcast-align -Wnested-externs -Wcast-qual -Wformat-nonliteral -Wformat-security -Wundef -Wwrite-strings  -Wl,-Map</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">l2fwd.map,--cref -o l2fwd main.o -Wl,--no-as-needed -Wl,-export-dynamic -L/tmp/dpdk-16.04/examples/l2fwd/build/lib -L/tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/lib  -L/tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/lib -Wl,--whole-archive -Wl,-lrte_distributor -Wl,-lrte_reorder -Wl,-lrte_kni -Wl,-lrte_pipeline -Wl,-lrte_table -Wl,-lrte_port -Wl,-lrte_timer -Wl,-lrte_hash -Wl,-lrte_jobstats -Wl,-lrte_lpm -Wl,-lrte_power -Wl,-lrte_acl -Wl,-lrte_meter -Wl,-lrte_sched -Wl,-lrte_vhost -Wl,-lm -Wl,-lrt -Wl,--start-group -Wl,-lrte_kvargs -Wl,-lrte_mbuf -Wl,-lrte_ip_frag -Wl,-lethdev -Wl,-lrte_cryptodev -Wl,-lrte_mempool -Wl,-lrte_ring -Wl,-lrte_eal -Wl,-lrte_cmdline -Wl,-lrte_cfgfile -Wl,-lrte_pmd_bond -Wl,-lrte_pmd_vmxnet3_uio -Wl,-lrte_pmd_virtio -Wl,-lrte_pmd_cxgbe -Wl,-lrte_pmd_enic -Wl,-lrte_pmd_i40e -Wl,-lrte_pmd_ice -Wl,-lrte_pmd_fm10k -Wl,-lrte_pmd_ixgbe -Wl,-lrte_pmd_e1000 -Wl,-lrte_pmd_ena -Wl,-lrte_pmd_ngbe -Wl,-lrte_pmd_txgbe -Wl,-lrte_pmd_ring -Wl,-lrte_pmd_af_packet -Wl,-lrte_pmd_null -Wl,-lrte_pmd_null_crypto -Wl,-lrte_pmd_vhost -Wl,-ldl -Wl,--end-group -Wl,--no-whole-archive</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>排查确定相关的编译参数为 --whole-archive 与 --no-whole-archive，从 ld 命令的 manual 中找到了如下信息：</p><blockquote><p>--whole-archive<br>
<!-- -->For each archive mentioned on the command line after the --whole-archive option, include every object filein the archive in the link, rather than searching the archive for the required object files. This is normally used to turn an archive file into a shared library, forcing every object to be included in the resulting shared library.This option may be used more than once.</p><p>--no-whole-archive<br>
<!-- -->Turn off the effect of the --whole-archive option for subsequent archive files.</p></blockquote><p>--whole-archive 参数之后的库文件其中的所有对象都会被链接，而不是只链接那些需要的内容。--no-whole-archive 用来关闭 --whole-archive 功能。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="解决方法">解决方法<a class="hash-link" href="#解决方法" title="标题的直接链接">​</a></h2><p>既然 --whole-archive 会让链接器链接此参数之后的库文件中的所有对象，只需要将构造函数所在的静态库链接参数放到 --whole-archive 之后即可，同时为了避免对其它链接库的影响，指定 --no-whole-archive 来关闭 --no-whole-archive。</p><p>测试过程如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ gcc hello.c -o hello -L </span><span class="token builtin class-name">.</span><span class="token plain"> -Wl,--whole-archive -ltest -Wl,--no-whole-archive</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">register dumpops</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">register dumpops</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="一点点联想">一点点联想<a class="hash-link" href="#一点点联想" title="标题的直接链接">​</a></h2><p>在 <a href="https://blog.csdn.net/Longyu_wlz/article/details/82975871?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161259392816780262580112%252522%25252C%252522scm%252522%25253A%25252220140713.130102334.pc%25255Fblog.%252522%25257D&amp;request_id=161259392816780262580112&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-82975871.pc_v1_rank_blog_v1&amp;utm_term=rtthread" target="_blank" rel="noopener noreferrer">rt-thread 使用心得</a> 这篇文章中，我描述了一种类似的实现。</p><p>这种实现通过修改链接脚本完成。通过将初始化函数的地址放到指定的 section 中，并在链接脚本中在此 section 前后添加锚点实现。</p><p>初始化的时候遍历 section 中的所有函数指针，调用之就完成了初始化过程，这种方法常见于嵌入式实时系统初始化的实现中，在 pc 上很少使用。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/igb_uio.ko 的 md5sum 为啥又变化了？]]></title>
        <id>/dpdk/igb_uio.ko 的 md5sum 为啥又变化了？</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/igb_uio.ko 的 md5sum 为啥又变化了？"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>最近在合代码到 kni 模块后，重新编译发布 dpdk，发现 <strong>igb_uio.ko md5sum 也变化了</strong>。</p><p>这个问题也遇到过好多次，但是一直没有深究过。今天再次遇到了这个问题，这次就不能放过它了！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="没有变化的内容">没有变化的内容<a class="hash-link" href="#没有变化的内容" title="标题的直接链接">​</a></h2><p>针对 igb_uio.ko md5sum 变化的问题，可以确定如下条件保持不变：</p><ol><li>igb_uio.c 源码</li><li>内核头文件</li><li>编译器版本</li></ol><p>有了上面这三个条件，igb_uio.ko 讲道理不应该变化。可是它确确实实变化了，那又是什么因素影响呢？难道是 ko 中存在时间戳的原因？</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="用工具扩大输入信息来对比">用工具扩大输入信息来对比<a class="hash-link" href="#用工具扩大输入信息来对比" title="标题的直接链接">​</a></h2><p>由于 ko 文件格式是 elf 格式，我选择使用 objdump 与 readelf 来从两个 md5sum 不同的 igb_uio.ko 版本上获取更多的信息。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="objdump--d-对比">objdump -d 对比<a class="hash-link" href="#objdump--d-对比" title="标题的直接链接">​</a></h3><p>objdump -d 对比发现<strong>生成的反汇编指令完全一致</strong>！这<strong>符合代码没有修改这一条件</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="readelf--a-对比">readelf -a 对比<a class="hash-link" href="#readelf--a-对比" title="标题的直接链接">​</a></h3><p>readelf -a 对比发现有很多差别，而其中变化很多的内容都指向了 <strong>debug_str</strong> 字段，那 <strong>ko 中的这些字段是咋生成的呢？</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="config_debug_info-配置">CONFIG_DEBUG_INFO 配置<a class="hash-link" href="#config_debug_info-配置" title="标题的直接链接">​</a></h2><p>网上搜索这个 <strong>debug_str</strong> 获知这个内容与内核的 <strong>CONFIG_DEBUG_INFO</strong> 配置有关系，当内核使能了这个配置后，生成的 ko 中会带有调试信息。</p><p>首先确认了下我们编译的内核中都<strong>开启了这个配置</strong>，符合预期！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="objdump--s-获取到的信息">objdump -s 获取到的信息<a class="hash-link" href="#objdump--s-获取到的信息" title="标题的直接链接">​</a></h2><p>有了上面的基础后，我通过执行 <strong>objdump -s igb_uio.ko</strong> 继续扩展输入信息，这次我注意到如下信息：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Contents of section .debug_line:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 0000 240a0000 02007407 00000101 fb0e0d00  $.....t.........</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 0010 01010101 00000001 0000012f 686f6d65  .........../home</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 0020 2f77616e 676c6f6e 677a6865 6e672f62  /wanglongzheng/b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 0030 75696c64 5f666f72 5f72656c 65617365  uild_for_release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> 0040 2f647064 6b2d3136 2e30342d 76322d6c  /dpdk-16.04-v2-l</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个信息中还记录了编译的路径，那么很显然当这个路径修改后，ko 文件的内容会改变，md5sum 也随之改变。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="是-dpdk-源码路径变化导致-igb_uioko-md5sum-变化吗">是 dpdk 源码路径变化导致 igb_uio.ko md5sum 变化吗？<a class="hash-link" href="#是-dpdk-源码路径变化导致-igb_uioko-md5sum-变化吗" title="标题的直接链接">​</a></h2><p>objdump -s 看到的信息能够说明，dpdk 源码路径变化会导致 igb_uio.ko 文件的 md5sum 变化。 基于这一事实，不难确定我<strong>本次 release dpdk 路径应该与上一次有所区别</strong>。</p><p>我仔细浏览提交记录，发现编译路径确实有差别，但是这并不是<strong>充分条件</strong>，也许只是<strong>其中的一个</strong>变化罢了，时间戳这些也可能存在。</p><p>既然我已经确定了编译路径的变化会导致 igb_uio.ko 文件的 md5sum 变化，那么只要使用同一个编译路径编译后 igb_uio.ko md5sum 与仓库中的版本一致就能够说明确实只有编译路径这一个因素的影响。</p><p>使用前几个 dpdk release 版本的编译路径重新编译，果然编译出了与仓库中 igb_uio.ko md5sum 相同的版本。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="如何让-igb_uioko-源码不变化release-内容也不变化">如何让 igb_uio.ko 源码不变化，release 内容也不变化？<a class="hash-link" href="#如何让-igb_uioko-源码不变化release-内容也不变化" title="标题的直接链接">​</a></h2><p>基于上面的认识，要让 igb_uio.ko 在<strong>源码不变化</strong>的情况下保持 release 内容不变，需要保证如下几个因素固定：</p><ol><li>编译器版本一致</li><li>内核配置一致</li><li>在内核 config 开启了 CONFIG_DEBUG_INFO 时，编译路径一致</li><li>编译环境中对编译有影响的环境变量设定内容一致</li></ol><p>第四点是我额外添加的内容，由于我们是使用自动编译工具编译 dpdk，环境变量影响不大，但实际上环境变量也是一个非常重要的条件，故而也列举出来。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="有没有更好的方式">有没有更好的方式？<a class="hash-link" href="#有没有更好的方式" title="标题的直接链接">​</a></h2><p>其实对于 igb_uio 这种内核模块，一个很好的方式是将它合入到维护的内核代码中，这样每次编译内核的时候就会自动 release，也许一个更好的方式是使用 vfio 这种方式，vfio 据我了解要比 igb_uio 的权限控制更灵活一些，而其代码本身就在内核源码树中，只需要开启相关的内核配置就行了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>本文描述了 igb_uio.ko md5sum 变化的问题，尽管这一问题得到了解决，却意义不大。</p><p>一个更加合理的方式应当是将 igb_uio 从 dpdk 中剥离出来合入内核源码，或者使用 vfio 这种替代方式。</p><p>dpdk 中的 igb_uio 其源码依赖某几个 dpdk 内部头文件，这是不合理的。这是一种耦合性，这一耦合性带来的影响是我们不得不考虑 igb_uio.ko 的版本与 dpdk 中的头文件版本是否一致，增加了维护工作的成本，这一点值得思考！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/l2fwd 支持 x710 通过 fdir 过滤非分片 ipv4 udp 报文]]></title>
        <id>/dpdk/l2fwd 支持 x710 通过 fdir 过滤非分片 ipv4 udp 报文</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/l2fwd 支持 x710 通过 fdir 过滤非分片 ipv4 udp 报文"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>需要通过 x710 网卡 fdir 功能过滤非分片 ipv4 udp 报文，直接在网卡硬件上丢弃。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="解决方案">解决方案<a class="hash-link" href="#解决方案" title="标题的直接链接">​</a></h2><p>通过修改 l2fwd 代码来验证，需要注意当开启了 fdir 的时候 hash 功能需要关闭。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-port_conf-的配置用于-dev_configure">1. port_conf 的配置，用于 dev_configure<a class="hash-link" href="#1-port_conf-的配置用于-dev_configure" title="标题的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_conf</span><span class="token plain"> port_conf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rxmode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">split_hdr_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">header_split   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Header Split disabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hw_ip_checksum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; IP checksum offload disabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hw_vlan_filter </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; VLAN filtering disabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">jumbo_frame    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Jumbo Frame Support disabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hw_strip_crc   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; CRC stripped by hardware */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">txmode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mq_mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_MQ_TX_NONE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">fdir_conf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_FDIR_MODE_PERFECT</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pballoc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_FDIR_PBALLOC_64K</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_FDIR_REPORT_STATUS</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mask </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vlan_tci_mask </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ipv4_mask     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">src_ip </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFFFFFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dst_ip </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFFFFFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ipv6_mask     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">src_ip </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0xFFFFFFFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFFFFFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFFFFFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFFFFFF</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dst_ip </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0xFFFFFFFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFFFFFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFFFFFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFFFFFF</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">src_port_mask </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dst_port_mask </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mac_addr_byte_mask </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tunnel_type_mask </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tunnel_id_mask </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFFFFFF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">drop_queue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">127</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-rte_eth_fdir_filter_info-与-rte_eth_fdir_filter-字段填充">2. rte_eth_fdir_filter_info 与 rte_eth_fdir_filter 字段填充<a class="hash-link" href="#2-rte_eth_fdir_filter_info-与-rte_eth_fdir_filter-字段填充" title="标题的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_fdir_filter_info</span><span class="token plain"> info</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_FDIR_FILTER_INPUT_SET_SELECT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flow_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_FLOW_NONFRAG_IPV4_UDP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">field</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_INPUT_SET_NONE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">inset_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_INPUT_SET_SELECT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_fdir_filter</span><span class="token plain"> arg_udpport </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">soft_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flow_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_FLOW_NONFRAG_IPV4_UDP</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">action  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_queue  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">behavior  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_FDIR_REJECT</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">report_status </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_FDIR_REPORT_ID</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-调用-rte_eth_dev_filter_ctrl-完成配置过程">3. 调用 rte_eth_dev_filter_ctrl 完成配置过程<a class="hash-link" href="#3-调用-rte_eth_dev_filter_ctrl-完成配置过程" title="标题的直接链接">​</a></h3><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_filter_ctrl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FILTER_FDIR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FILTER_SET</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ret is %d\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_filter_ctrl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FILTER_FDIR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">RTE_ETH_FILTER_ADD</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">arg_udpport</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"ret is %d\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-程序退出前指定-rte_eth_filter_flush-参数调用-rte_eth_dev_filter_ctrl-来清空配置">4. 程序退出前指定 RTE_ETH_FILTER_FLUSH 参数，调用 rte_eth_dev_filter_ctrl 来清空配置！<a class="hash-link" href="#4-程序退出前指定-rte_eth_filter_flush-参数调用-rte_eth_dev_filter_ctrl-来清空配置" title="标题的直接链接">​</a></h3>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/x710 hash 分片与非分片 tcp 报文异常问题]]></title>
        <id>/dpdk/x710 hash 分片与非分片 tcp 报文异常问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/x710 hash 分片与非分片 tcp 报文异常问题"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>当 rss_hf 中配置了 <strong>ETH_RSS_FRAG_IPV4</strong> 与 <strong>ETH_RSS_NONFRAG_IPV4_TCP</strong> 参数后，一些连接的分片报文会被 hash 到其它队列中，<strong>由于这些分片的报文没有 L4 port number</strong>。</p><p>当不配置 <strong>ETH_RSS_NONFRAG_IPV4_TCP</strong> 时，<strong>ETH_RSS_FRAG_IPV4</strong> 哈希函数不会应用到非分片报文上，这些报文将会被投递到队列 0。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="异常-hash-配置">异常 hash 配置<a class="hash-link" href="#异常-hash-配置" title="标题的直接链接">​</a></h2><p> 配置内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">RSS_X710_KEY_SIZE</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">52</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">         </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> tr_rss_key_x710</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mq_mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_MQ_RX_RSS</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_adv_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tr_rss_key_x710</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_adv_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_hf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_RSS_PROTO_MASK</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_adv_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_key_len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RSS_X710_KEY_SIZE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>设置上面的 rss_key，且 rss_hf 配置 <strong>ETH_RSS_PROTO_MASK</strong>，能 hash 到多队列，<strong>不分片报文正常，tcp 分片报文存在问题</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="流量配比">流量配比<a class="hash-link" href="#流量配比" title="标题的直接链接">​</a></h2><p><strong>tcp 非分片流，源 ip 与目的 ip 100:100 分布。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="测试验证过程">测试验证过程<a class="hash-link" href="#测试验证过程" title="标题的直接链接">​</a></h2><p>下面的测试过程中，首先打 <strong>100:100 的 tcp 非分片流，能够 hash 到多队列后修改为有分片的 tcp 流，进一步验证。</strong></p><p><strong>1.使用网卡默认的 rss_key，且修改 rss_hf 为 ETH_RSS_IPV4 | ETH_RSS_IPV6</strong></p><p>测试结果：不能 hash 到多队列。</p><p><strong>2.使用默认的 rss_key 并配置网卡 hash_filter，代码来自 google</strong></p><p>补丁代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_conf</span><span class="token plain"> new_port_conf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rxmode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mq_mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_MQ_RX_RSS</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_adv_conf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_conf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_hf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_RSS_IP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              ETH_RSS_TCP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              ETH_RSS_UDP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              ETH_RSS_SCTP</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">UINT32_BIT</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">CHAR_BIT </span><span class="token macro property expression operator" style="color:#393A34">*</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression keyword" style="color:#00009f">sizeof</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression class-name" style="color:#36acaa">uint32_t</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sym_hash_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> port_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">uint32_t</span><span class="token plain"> ftype</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token class-name">rte_eth_hash_function</span><span class="token plain"> function</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_hash_filter_info</span><span class="token plain"> info</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint32_t</span><span class="token plain"> idx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint32_t</span><span class="token plain"> offset </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_filter_supported</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FILTER_HASH</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"RTE_ETH_FILTER_HASH not supported on port: %d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                         port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_HASH_FILTER_GLOBAL_CONFIG</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">global_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hash_func </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> function</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    idx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ftype </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> UINT32_BIT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    offset </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ftype </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> UINT32_BIT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">global_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_bit_mask</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">idx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1ULL</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> offset</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">global_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sym_hash_enable_mask</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">idx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1ULL</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> offset</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_filter_ctrl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FILTER_HASH</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                  RTE_ETH_FILTER_SET</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cannot set global hash configurations"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token string" style="color:#e3116c">"on port %u"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sym_hash_set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> port_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> enable</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_hash_filter_info</span><span class="token plain"> info</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_filter_supported</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FILTER_HASH</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"RTE_ETH_FILTER_HASH not supported on port: %d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                         port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_HASH_FILTER_SYM_HASH_ENA_PER_PORT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">enable </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> enable</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_filter_ctrl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FILTER_HASH</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        RTE_ETH_FILTER_SET</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cannot set symmetric hash enable per port "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token string" style="color:#e3116c">"on port %u"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>dev_configure</strong> 使用 <strong>new_port_conf</strong> 配置，并在 <strong>dev_configure</strong> 前执行如下代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">sym_hash_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FLOW_NONFRAG_IPV4_TCP</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_HASH_FUNCTION_TOEPLITZ</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">sym_hash_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FLOW_NONFRAG_IPV4_UDP</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_HASH_FUNCTION_TOEPLITZ</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">sym_hash_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FLOW_FRAG_IPV4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_HASH_FUNCTION_TOEPLITZ</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">sym_hash_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FLOW_NONFRAG_IPV4_SCTP</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_HASH_FUNCTION_TOEPLITZ</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">sym_hash_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FLOW_NONFRAG_IPV4_OTHER</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_HASH_FUNCTION_TOEPLITZ</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">sym_hash_set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试结果：<strong>能够 hash 开，但是 tcp 分片报文仍旧有问题。</strong></p><p>3.<strong>测试使用 0x6d、0x5a .... 的 rss_key，修改 rss_hf flag 内容为 ETH_RSS_IPV4 | ETH_RSS_IPV6</strong></p><p>测试结果：不能 hash 到多队列。</p><p>4.<strong>测试使用默认的 rss_key，并在执行 dev_configure 前添加 filter_ctrl 的补丁代码</strong></p><p>测试结果：能够 hash 到多队列，tcp 分片报文 hash 异常。</p><p><strong>5.测试设置 rss_hf 为 ETH_RSS_IP flag</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> tr_rss_key_x710</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">RSS_X710_KEY_SIZE</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">52</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mq_mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_MQ_RX_RSS</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">max_rx_pkt_len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETHER_MAX_LEN</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">split_hdr_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">header_split   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Header Split disabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hw_ip_checksum </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; IP checksum offload enabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hw_vlan_filter </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; VLAN filtering disabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hw_vlan_strip  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hw_vlan_extend </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">jumbo_frame    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Jumbo Frame Support disabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hw_strip_crc   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; CRC stripped by hardware */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">txmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mq_mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_MQ_TX_NONE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_adv_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tr_rss_key_x710</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_adv_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_hf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_RSS_IP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_adv_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_key_len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RSS_X710_KEY_SIZE</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试结果：不能 hash 到多队列。</p><p>6.<strong>不设置 rss_key，只设置 rss_hf 为 ETH_RSS_PROTO_MASK</strong> </p><p>测试结果：能够 hash 到多队列，tcp 分片报文 hash 异常。</p><p><strong>7.不设置 rss_key，只设置 rss_hf 为 ETH_RSS_IP</strong> </p><p>测试结果：不能 hash 到多队列。</p><p>8.<strong>不设置 rss_key，设置 rss_hf 值如下</strong>：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        ETH_RSS_NONFRAG_IPV4_TCP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ETH_RSS_NONFRAG_IPV4_UDP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ETH_RSS_NONFRAG_IPV4_SCTP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ETH_RSS_L2_PAYLOAD </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ETH_RSS_IPV6_TCP_EX</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试结果：能够 hash 到多队列，tcp 分片报文 hash 异常。</p><p><strong>9.不设置 rss_key，设置 rss_hf 值如下：</strong></p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        ETH_RSS_NONFRAG_IPV4_TCP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ETH_RSS_NONFRAG_IPV4_UDP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ETH_RSS_NONFRAG_IPV4_SCTP</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试结果：能够 hash 到对队列，tcp 分片报文 hash 异常。</p><ol start="10"><li>不设置 rss_key，设置 rss_hf 值如下： </li></ol><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ETH_RSS_NONFRAG_IPV4_TCP</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试结果：能够 hash 到多对列，tcp 分片报文 hash 异常。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="根据测试项目得出的初步结论">根据测试项目得出的初步结论<a class="hash-link" href="#根据测试项目得出的初步结论" title="标题的直接链接">​</a></h2><p><strong>只打 tcp 非分片报文的情况下，rss_hf 设定内容必须包含 ETH_RSS_NONFRAG_IPV4_TCP 才能 hash 到多队列！</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="提问环节">提问环节<a class="hash-link" href="#提问环节" title="标题的直接链接">​</a></h2><p>1.真的理解了问题吗？</p><p>能够清晰描述问题，没有偏差。</p><p>2.收集到的信息中有哪些可参照内容？</p><p><strong>82599 使用对称 rss_key 能够正常工作，不需要额外配置，问题指向 XL710 网卡的特性。</strong></p><p>3.网上有没有相关信息？</p><p><strong>XL710 的 rss hash 存在问题，需要配置 filter_ctrl 来使能一些寄存器</strong>，网上找到的代码测试不能解决问题，<strong>可能存在代码本身问题及使用问题上，需要想方法确认。</strong></p><p>4.是否能够从手册中找到一些蛛丝马迹？</p><p>使用手册中的 rss_key 仍旧有问题。</p><p>5.手册中提到的 hash key 的有效性需要确认</p><p><strong>待确认</strong></p><p>6.从网上还能否收集到更多的信息？</p><p>进一步搜索，找到 <a href="https://dev.dpdk.narkive.com/AIj6ALhm/dpdk-dev-symmetry-for-tcp-packets-on-x710-intel" target="_blank" rel="noopener noreferrer">[dpdk-dev] Symmetry for TCP packets on X710 Intel </a> 这个链接。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="信息扩充环节">信息扩充环节<a class="hash-link" href="#信息扩充环节" title="标题的直接链接">​</a></h2><p>dpdk 官方 bugzilla 检索：</p><p>结果：无相关内容</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="针对分片报文-hash-字段设定-hash_filter-测试项目">针对分片报文 hash 字段设定 hash_filter 测试项目<a class="hash-link" href="#针对分片报文-hash-字段设定-hash_filter-测试项目" title="标题的直接链接">​</a></h2><p>仔细阅读 <a href="https://dev.dpdk.narkive.com/AIj6ALhm/dpdk-dev-symmetry-for-tcp-packets-on-x710-intel" target="_blank" rel="noopener noreferrer">[dpdk-dev] Symmetry for TCP packets on X710 Intel </a> 发现与我们遇到的问题非常吻合。</p><p>再次回到问题描述上：</p><blockquote><p>当配置了 ETH_RSS_FRAG_IPV4 与 ETH_RSS_NONFRAG_IPV4_TCP 参数后，一些连接的分片报文会被 hash 到其它队列中，<strong>由于这些分片的报文没有 L4 port number</strong>。</p></blockquote><blockquote><p>当你不配置 ETH_RSS_NONFRAG_IPV4_TCP 时，ETH_RSS_FRAG_IPV4 哈希函数不会应用到非分片报文上，这些报文将会被投递到队列 0。</p></blockquote><p>由于我们不能直接控制分片 tcp 报文，可以设定非分片 tcp 报文只使用源与目的 ip 进行 hash，思路清晰明了！</p><p>从 <a href="https://dev.dpdk.narkive.com/AIj6ALhm/dpdk-dev-symmetry-for-tcp-packets-on-x710-intel" target="_blank" rel="noopener noreferrer">[dpdk-dev] Symmetry for TCP packets on X710 Intel </a>  中摘录并修改代码为如下内容：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">UINT64_BIT</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">CHAR_BIT </span><span class="token macro property expression operator" style="color:#393A34">*</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression keyword" style="color:#00009f">sizeof</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression class-name" style="color:#36acaa">uint64_t</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">RSS_X710_KEY_SIZE</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">52</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> tr_rss_key_x710</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x6d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x5a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rxmode</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mq_mode </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_MQ_RX_RSS</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_adv_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_key </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tr_rss_key_x710</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        port_conf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rx_adv_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_key_len </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RSS_X710_KEY_SIZE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        port_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rx_adv_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_hf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_RSS_IPV4    </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">               ETH_RSS_FRAG_IPV4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_RSS_NONFRAG_IPV4_TCP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_RSS_NONFRAG_IPV4_UDP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ETH_RSS_NONFRAG_IPV4_SCTP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_RSS_NONFRAG_IPV4_OTHER </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_RSS_IPV6 </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ETH_RSS_FRAG_IPV6 </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_RSS_NONFRAG_IPV6_TCP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_RSS_NONFRAG_IPV6_UDP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_RSS_NONFRAG_IPV6_SCTP </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ETH_RSS_NONFRAG_IPV6_OTHER</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_hash_filter_info</span><span class="token plain"> hinfo</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">uint32_t</span><span class="token plain"> idx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">uint32_t</span><span class="token plain"> offset </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">uint32_t</span><span class="token plain"> ftype</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// specific commands for X710</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// select per ipv4 tcp - src ipv4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">hinfo</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hinfo</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_HASH_FILTER_INPUT_SET_SELECT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flow_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_FLOW_NONFRAG_IPV4_TCP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">field</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_INPUT_SET_L3_SRC_IP4</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">inset_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_INPUT_SET_SELECT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_filter_ctrl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FILTER_HASH</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                RTE_ETH_FILTER_SET</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">hinfo</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Failure: set select ipv4 tcp (src ipv4) for port %hhu\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// add per ipv4 tcp - dst ipv4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">hinfo</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hinfo</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_HASH_FILTER_INPUT_SET_SELECT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">flow_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_FLOW_NONFRAG_IPV4_TCP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">field</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_INPUT_SET_L3_DST_IP4</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">inset_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">input_set_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">op </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_INPUT_SET_ADD</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_filter_ctrl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FILTER_HASH</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    RTE_ETH_FILTER_SET</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">hinfo</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Failure: set add ipv4 tcp (dst ipv4) for port %hhu\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// hash global config ipv4 tcp</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">hinfo</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hinfo</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_HASH_FILTER_GLOBAL_CONFIG</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">global_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hash_func </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_HASH_FUNCTION_DEFAULT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ftype </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_ETH_FLOW_NONFRAG_IPV4_TCP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        idx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ftype </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> UINT64_BIT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        offset </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ftype </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> UINT64_BIT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">global_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">valid_bit_mask</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">idx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1ULL</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> offset</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hinfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">global_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sym_hash_enable_mask</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">idx</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1ULL</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> offset</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_filter_ctrl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> RTE_ETH_FILTER_HASH</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                RTE_ETH_FILTER_SET</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">hinfo</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cannot set global hash configurations for port %hhu protoipv4 tcp\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> portid</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述代码中 filter_ctrl 设定代码放到 tx 与 rx queue setup 之后执行，<strong>测试确认 ipv4 tcp 分片报文正常 hash!</strong></p><p>对于 ipv6 tcp 分片报文 hash，可以参照上述过程配置 RTE_ETH_FLOW_NONFRAG_IPV6_TCP flow type，实测有效！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk 中 mbuf 的结构]]></title>
        <id>/dpdk/不懂 dpdk mbuf 结构？此篇文章带你超神</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/不懂 dpdk mbuf 结构？此篇文章带你超神"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[https://doc.dpdk.org/guides/progguide/mbuflib.html]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://img-blog.csdnimg.cn/2021061518410674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="https://doc.dpdk.org/guides/prog_guide/mbuf_lib.html" class="img_ev3q">
图片摘自 <a href="https://doc.dpdk.org/guides/prog_guide/mbuf_lib.html" target="_blank" rel="noopener noreferrer">Mbuf Library</a>。</p><p>dpdk 中的 mbuf 是网络报文的抽象结构，从上图中能够看出它可以分为四部分：</p><ol><li>mbuf 结构体</li><li>headroom</li><li>dataroom</li><li>tailroom</li></ol><p>这四部分中第一部分用于存储 mbuf 内部的数据结构，第二部分与第四部分的使用由用户控制，第三部分用于存储报文内容。</p><h1>mbuf 的日常操作</h1><p>mbuf 的日常操作主要有如下几类：</p><ol><li>读取、写入 mbuf 结构中的不同字段</li><li>从 pktmbuf pool 中 alloc  mbuf</li><li>释放 mbuf 到 pktmbuf pool 中</li><li>获取 mbuf 的 dataroom 的物理地址</li><li>获取 mbuf 的 headroom 位置</li><li>获取 mbuf 的 tailroom 的位置</li><li>使用 mbuf 的 headroom 在 dataroom 前插入指定长度数据</li><li>使用 mbuf 的 tailroom 在 dataroom 后插入指定长度数据</li><li>使用已有的 mbuf 克隆一个新的 mbuf </li></ol><p>使用较为频繁的函数接口为申请 mbuf、释放 mbuf 等。</p><h1>dpdk 程序中 mbuf 的流动</h1><p>mbuf 在创建 pktmbuf pool 的时候被放到以 ring 为代表的队列中，在开启网卡收包的时候会为每一个接收描述符申请一个 mbuf，并将 mbuf 中 dataroom 区域的总线地址写入到描述符的相关字段中，用<strong>以 dma 处理时网卡填充报文到主机内存</strong>。</p><p><strong>网卡收包时 mbuf 的流动：</strong></p><p>接口 up 的时候 dpdk 会为每个收包队列上的描述符申请 mbuf 并对 dataroom 的总线地址做 dma 映射，<strong>由于描述符的基地址与长度写入了网卡寄存器，硬件能够操作描述符。</strong></p><p>硬件收到一个<strong>正常的包</strong>后会将包<strong>拷贝到一个可用的描述符中配置的 dma 地址中</strong>，同时<strong>回写描述符中的不同字段</strong>。</p><p><strong>软件收包</strong>时，首先<strong>判断是否有描述符上绑定的 dma 地址填充了报文</strong>，对 <strong>intel</strong> 的网卡来说，一般通过检查描述符的 <strong>dd</strong> 位是否为 1 来判断。</p><p>当存在一个可用的描述符时，<strong>收包函数会解析描述符内容</strong>，同时获取到此描述符绑定的 mbuf，并用描述符中的不同字段填充 mbuf 中的一些字段，<strong>保留解析描述符的结果</strong>。</p><p>此后软件在将这个 mbuf 返回上层前，需要<strong>重新分配一个新的 mbuf</strong>，并将其 dataroom <strong>起始地址的总线地址</strong>填充到<strong>描述符</strong>中，这里的逻辑类似"狸猫换太子"，不过对象换成了空的 mbuf 与已经填充了报文的 mbuf。</p><p>当 mbuf 申请失败时，没有新的 mbuf 补充，收包会终止，dpdk 内部有一个 mbuf 申请失败的字段，此字段会加 1，当接口<strong>不收包</strong>时可以观测此字段确认是否由于 <strong>mbuf 泄露</strong>导致申请 mbuf 失败进而导致接口不收包。</p><p><strong>网卡发包时 mbuf 的流动:</strong></p><p>网卡发包时，上层将待发送的 mbuf 的指针数组传递到发包函数中。在发包函数中为<strong>每一个待发送的包分配一个空闲的发送描述符</strong>，同样，mbuf 的 dataroom 起始地址的总线地址会填充到描述符中，此外 mbuf 中的一些字段也会用于发包描述符填充。</p><p>这里存在一个问题：发包时我们填充 mbuf 的 dataroom 起始地址的总线地址到描述符中后，并<strong>不会等待硬件发送完成</strong>后释放 mbuf，那 <strong>mbuf 是在哪里释放的</strong>？<strong>难道没有释放吗？</strong></p><p>在发包函数里面<strong>即时判断报文是否发送完成</strong>然后释放 mbuf 是可行的，但是这额外的等待带来的是<strong>性能的损耗</strong>。</p><p>intel 网卡的发包函数中进行了如下优化：</p><p>在获取到一个空闲的发包描述符时判断<strong>此描述符上是否已经绑定了 mbuf</strong>，如果已经绑定了表明这个包已经发送完成，就<strong>释放 mbuf</strong>。故而上一次绑定到描述符上的 mbuf，会在<strong>下一次这个描述符状态空闲并被软件再次分配使用的时候释放</strong>，这样既不影响功能，也提高了程序的性能。</p><p>一些驱动中同时使用 tx_free_thresh 门限，当空闲的描述符个数小于此门限值时，驱动会重新扫描描述符找到其它空闲的描述符。</p><p><strong>多个程序中 mbuf 的流动：</strong></p><p>基于 dpdk 开发的数通引擎可以主动申请 mbuf 并填充报文，然后调用发包函数发送出去。在收到包时可以将报文丢到 ring 中，<strong>通过 ring 来将报文传送到指定位置</strong>，实现与<strong>诸如安全引擎等的联动</strong>，这一过程是相互的，相互性意味着安全引擎也存在将处理过后的 mbuf 报文通过 ring 传送回数通引擎的情况。</p><p>这里的 ring 只是一种实现方案，dpdk 的无锁 ring 针对的是单个生产者与单个消费者的情况，在 dpdk 多进程方案设计时，为了避免对 ring 进行互斥保护，可以为每个 mbuf 传递方向都创建独立的 ring。</p><p><strong>kni 程序中 mbuf 的流动：</strong></p><p>kni 程序实现了一套高效的与内核之间传递报文的 fifo 机制，mbuf 的流动过程见下图：
<img loading="lazy" src="https://img-blog.csdnimg.cn/20210420203804299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" class="img_ev3q">这里需要注意两点问题：</p><ol><li>内核中使用的报文载体为 <strong>sk_buff</strong>，dpdk 中使用的是 <strong>mbuf</strong>，这两者需要转化，这里存在<strong>报文拷贝</strong></li><li>mbuf 地址为<strong>虚拟地址</strong>，dpdk 程序中通过将虚拟地址转化为物理地址来将数据投递到内核，内核中再次将物理地址转化为内核的虚拟地址，然后进行访问</li></ol><p><strong>物理地址对内核与用户态进程来说是唯一的</strong>，但是内核与用户态进程都<strong>不能直接访问物理地址</strong>，需要再次进行<strong>地址转化</strong>，映射为相应的虚拟地址访问。</p><p>备注：<strong>sk_buff 通过 netif_rx 函数将报文注入内核协议栈中。</strong></p><h1>mbuf 与性能</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-mbuf-的结构与性能">1. mbuf 的结构与性能<a class="hash-link" href="#1-mbuf-的结构与性能" title="标题的直接链接">​</a></h2><p>mbuf 作为 dpdk 中报文的载体，它的内容会被<strong>频繁访问</strong>，其<strong>结构</strong>对 dpdk 程序的<strong>性能</strong>有影响。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="11-mbuf-结构与-cpu-cache">1.1 mbuf 结构与 cpu cache<a class="hash-link" href="#11-mbuf-结构与-cpu-cache" title="标题的直接链接">​</a></h3><p>如果你仔细观察过 mbuf 结构体的定义，你会发现有许多<strong>非常规的方式</strong>，无论是 <strong>cache 行对齐</strong>还是每个 <strong>cache 的变量标号</strong>，这都是 dpdk 针对 mbuf 的优化。</p><p>mbuf 结构是 cache 行对齐的，这样它能够被加载到连续的 cache 行中带来更好的性能。同时在 burst 模式中，也可以使用 cache 预取语句预先将即将处理的 mbuf 的内容使用指定 cache 行标号 load 到 cache 中。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="12-mbuf-结构与向量指令">1.2 mbuf 结构与向量指令<a class="hash-link" href="#12-mbuf-结构与向量指令" title="标题的直接链接">​</a></h3><p>现代的处理器一般都支持<strong>向量指令</strong>，例如 intel 处理器支持的 <strong>sse、avx2、avx512</strong> 指令，<strong>arm</strong> 架构处理器支持的 <strong>none</strong> 指令，dpdk 作为各种性能优化方法的集大成者，也不可或缺的使用到了这些高级向量指令。</p><p>dpdk 收包逻辑中，核心过程是<strong>解析收包描述符中的字段并填充到 mbuf 中</strong>，基于 <strong>burst</strong> 的收包模式一般每次会收多个包（一般预期是 32 个)，在这种场景中解析描述符并填充到 mbuf 的操作存在<strong>批量化的可能</strong>。</p><p>引入向量指令，可以一次处理<strong>多个</strong>描述符，加之向量指令的执行时间与普通指令执行时间几乎一致（需要考证），这样就加速了收包处理过程。</p><p>使用向量收包函数带来的性能提高在小包场景是非常显著的。下图摘自 <a href="http://fast.dpdk.org/doc/perf/DPDK_20_11_Intel_NIC_performance_report.pdf" target="_blank" rel="noopener noreferrer">DPDK Intel NIC Performance Report Release 20.11</a>
<img loading="lazy" src="https://img-blog.csdnimg.cn/95f6c97541fb41c5b59ad8461af0def7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" class="img_ev3q">
从上图中可以看出，在相同的测试环境下，使用 avx512 收发包函数相较 avx2 收发包函数带来了 <strong>32.81% 的性能提升</strong>，随着<strong>包大小的提高</strong>，<strong>pps 显著下降</strong>，使用 avx512 带来的性能提升效果也<strong>逐渐下降</strong>。</p><p>尽管对于大包来说，使用更高级的向量收发包指令并不能带来性能上太大的提升，但是实际使用过程中我发现它能够<strong>降低 cpu 的利用率</strong>，这在某些情景中也有重要的作用。</p><p><strong>mbuf 结构对向量收发包函数实现的影响：</strong></p><p>向量指令针对 128-bit、256-bit 等数据单元操作，将多个描述符合并到一起的过程是高效的，但是最终这些字段需要<strong>拆分并依次填充到 mbuf 中的字段中</strong>。</p><p>此时 mbuf 中字段的结构就显得非常重要了。</p><p>dpdk-16.04 中 mbuf 结构的 rearm_data 标号标识一个连续 6 字节长度的起始位置，相关定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* next 6 bytes are initialised on RX descriptor rearm */</span><span class="token plain">                                                                                                           </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    MARKER8 rearm_data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint16_t</span><span class="token plain"> data_off</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**  </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * 16-bit Reference counter.                                                                                                                                             </span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * It should only be accessed using the following functions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * rte_mbuf_refcnt_update(), rte_mbuf_refcnt_read(), and</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * rte_mbuf_refcnt_set(). The functionality of these functions (atomic,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * or non-atomic) is controlled by the CONFIG_RTE_MBUF_REFCNT_ATOMIC</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * config option.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">union</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">rte_atomic16_t</span><span class="token plain"> refcnt_atomic</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Atomically accessed refcnt */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">uint16_t</span><span class="token plain"> refcnt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Non-atomically accessed refcnt */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint8_t</span><span class="token plain"> nb_segs</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Number of segments. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint8_t</span><span class="token plain"> port</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Input port. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint64_t</span><span class="token plain"> ol_flags</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Offload features. */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk-20.11 中 rearm_data 标识 8 个字节的起始位置，相关定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">496</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/* next 8 bytes are initialised on RX descriptor rearm */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">497</span><span class="token plain">     MARKER64 rearm_data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">498</span><span class="token plain">     </span><span class="token class-name">uint16_t</span><span class="token plain"> data_off</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">499</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">500</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">501      * Reference counter. Its size should at least equal to the size</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">502      * of port field (16 bits), to support zero-copy broadcast.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">503      * It should only be accessed using the following functions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">504      * rte_mbuf_refcnt_update(), rte_mbuf_refcnt_read(), and</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">505      * rte_mbuf_refcnt_set(). The functionality of these functions (atomic,</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">506      * or non-atomic) is controlled by the CONFIG_RTE_MBUF_REFCNT_ATOMIC</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">507      * config option.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">508      */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">509</span><span class="token plain">     RTE_STD_C11</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">510</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">union</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">511</span><span class="token plain">         </span><span class="token class-name">rte_atomic16_t</span><span class="token plain"> refcnt_atomic</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Atomically accessed refcnt */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">512</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/** Non-atomically accessed refcnt */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">513</span><span class="token plain">         </span><span class="token class-name">uint16_t</span><span class="token plain"> refcnt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">514</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">515</span><span class="token plain">     </span><span class="token class-name">uint16_t</span><span class="token plain"> nb_segs</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Number of segments. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">516</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">517</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/** Input port (16 bits to support more than 256 virtual ports).</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">518      * The event eth Tx adapter uses this field to specify the output port.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">519      */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">520</span><span class="token plain">     </span><span class="token class-name">uint16_t</span><span class="token plain"> port</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">521</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">522</span><span class="token plain">     </span><span class="token class-name">uint64_t</span><span class="token plain"> ol_flags</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Offload features. */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dpdk-20.11 mbuf 结构中 port 与 nb_segs 的大小变为了 <strong>2 个字节</strong>，带来的影响是 rearm_data 标识指向一个 <strong>8-byte</strong> 长度的起始位置，而 16.04 为 <strong>6-byte</strong>。</p><p>向量指令操作的单元基于 128-bit、256-bit，8-byte 为 64-bit 使用向量指令存储时逻辑简单，6-byte 为 48-bit，需要执行额外的拆分逻辑，这就是性能差异的一个点，同时这种拆分也提高了收发包函数的设计复杂度。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-mbuf-的地址与性能">2. mbuf 的地址与性能<a class="hash-link" href="#2-mbuf-的地址与性能" title="标题的直接链接">​</a></h2><p>dpdk 程序一般会创建 pktmbuf_pool 内存池来存储 mbuf，在真实的业务场景中，收发包过程使用的 mbuf 的<strong>地址离散时将会带来较差的性能</strong>。</p><p>可以针对这个问题进行优化，使用某个线程<strong>动态的控制 pktmbuf_pool 中的 mbuf 数量</strong>来间接的<strong>控制接口收发包分配的 mbuf 地址的分布</strong>，使用更接近<strong>连续的</strong>分布来提高性能。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-pktmbuf-pool-cache-与性能">3. pktmbuf pool cache 与性能<a class="hash-link" href="#3-pktmbuf-pool-cache-与性能" title="标题的直接链接">​</a></h2><p>dpdk 程序运行中需要频繁的申请与释放 mbuf，这些过程每次都直接操作 pktmbuf _pool 无疑会降低性能。</p><p>为此 dpdk 在 pktmbuf_pool 的基础上添加了<strong>基于每个逻辑核的 mbuf cache 功能</strong>，使能了 cache 并配置了大小的 pktmbuf_pool，在申请与释放的时候会<strong>优先使用 cache</strong>，避免直接操作 pktmbuf_pool 中的更底层的数据结构带来的性能损耗。</p><p>这里提到每个逻辑核的 mbuf cache 功能，将粒度<strong>扩展到每个逻辑核</strong>也是提高性能的手段，类似于<strong>逻辑核本地数据</strong>的方法。</p><p>不过在复杂的使用场景中，我就遇到过数通引擎中<strong>多个线程绑定到同一个逻辑核中</strong>，并且共<strong>享了同一个 mempool</strong> 的情况。</p><p>在这种场景中，mempool 中针对此逻辑核的 cache 被多个线程共享，当多个线程同时访问时就会出现<strong>不一致</strong>的情况，dpdk 内部并没有针对这个 cache 做<strong>互斥处理</strong>，常常遇到的情况是数通引擎莫名其妙段错误，<strong>查看位置发现与 mbuf 内容相关，但是看逻辑却解释不了 mbuf 的变化</strong>。</p><p>对于这种场景，可以针对性创建 cache_size 为 0 的 pktmbuf_pool 解决之。</p><h1>mbuf 与地址转换</h1><p>dpdk-19.11 中有如下代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    m</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">buf_iova </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_mempool_virt2iova</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">m</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> mbuf_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">  </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>rte_mempool_virt2iova</strong> 函数用于将 mbuf 的地址转化为物理地址，将物理地址加上 <strong>mbuf_size</strong> 执行 <strong>mbuf</strong> 中 <strong>headroom</strong> 起始位置的物理地址，可以从本文开篇出的那张图上看出来。</p><p>感兴趣的读者可以阅读下 <strong>rte_mempool_virt2iova</strong> 函数的代码，看看 <strong>dpdk</strong> 如何实现将<strong>虚拟地址转化为物理地址</strong>。</p><h1>使用 mbuf 中的 headroom 与 tailroom</h1><p>基于 dpdk 开发的数通引擎在收到报文后需要对报文进行解析，这个解析过程一般是一次性的，此后报文继续流动，在其它模块、进程中存在使用预先解析内容的情况，这时如果重新解析报文势必造成重复处理。</p><p>那么如何消除重复处理的情况呢？</p><p>此时 mbuf 的 headroom 与 tailroom 就派上了用场。每个 mbuf 中 headroom 的大小与 tailroom 的大小在创建的时候就已经确定，数通引擎中可以将解析报文得到的会被其它模块继续使用的字段存储到 mbuf 的 headroom、tailroom 中，其它模块、进程在获取到 mbuf 后，通过增加相应的偏移就能够获取到已经解析过程字段值。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="headroom-大小的问题">headroom 大小的问题<a class="hash-link" href="#headroom-大小的问题" title="标题的直接链接">​</a></h2><p>曾经在适配某 nxp dpaa2 网卡时，遇到 <strong>headroom 大小限制</strong>的问题。驱动、硬件中限制了 headroom 的大小不能超过 512，一旦超过就会收包异常，收到的报文都为 0。</p><p>我们的 dpdk 中配置的 headroom 大小超过了 512，这个大小是根据数通引擎中解析报文字段的需求设置的，<strong>不能裁剪</strong>。</p><p><strong>那么问题来了：如何解决 headroom 大小的问题呢？只能裁剪数通引擎中的相关结构定义吗？</strong></p><p>经过与同事的交流与思考，最终想到了一种解决方案：</p><p>将 headroom 的位置移动到 tailroom 中，<strong>减少 headroom 的大小，增加 tailroom 的大小</strong>以同时满足网卡的硬件限制 headroom 不能超过 512 的问题及数通引擎需要使用超过 512 大小的空间存储解析 mbuf 得到的字段的问题。</p><p>修改后测试确认问题得到解决。</p><h1>总结</h1><p>本篇文章描述了 dpdk mbuf 结构的一些特点及其在 dpdk 程序中的部分流动过程，跳过了一些相对使用率较少的功能描述，本文的描述不代表 mbuf 提供的完整功能，这一点需要注意。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/以 ixgbe pmd 驱动为例研究 dpdk pmd 驱动中注册中断回调函数并使能中断的过程]]></title>
        <id>/dpdk/以 ixgbe pmd 驱动为例研究 dpdk pmd 驱动中注册中断回调函数并使能中断的过程</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/以 ixgbe pmd 驱动为例研究 dpdk pmd 驱动中注册中断回调函数并使能中断的过程"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[dpdk pmd 中注册中断回调函数并使能中断]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-pmd-中注册中断回调函数并使能中断">dpdk pmd 中注册中断回调函数并使能中断<a class="hash-link" href="#dpdk-pmd-中注册中断回调函数并使能中断" title="标题的直接链接">​</a></h2><p>eth_ixgbe_dev_init 是 ixgbe 网卡的初始化函数，在这个函数的最后注册中断回调并使能中断。</p><p>在配置了收发队列等等步骤后，注册中断回调函数，调用如下代码注册：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_intr_callback_register</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pci_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">intr_handle</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                   ixgbe_dev_interrupt_handler</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                   </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">eth_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使能 uio、vfio 中断、事件描述符映射通过如下代码来完成：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* enable uio/vfio intr/eventfd mapping */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_intr_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pci_dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">intr_handle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>rte_intr_enable 函数会根据不同的中断处理类型分发到不同的函数上，在 rte_intr_handle_type 中定义不同的中断的类型，定义内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token class-name">rte_intr_handle_type</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RTE_INTR_HANDLE_UNKNOWN </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RTE_INTR_HANDLE_UIO</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; uio device handle */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RTE_INTR_HANDLE_UIO_INTX</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; uio generic handle */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RTE_INTR_HANDLE_VFIO_LEGACY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; vfio device handle (legacy) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RTE_INTR_HANDLE_VFIO_MSI</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; vfio device handle (MSI) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RTE_INTR_HANDLE_VFIO_MSIX</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; vfio device handle (MSIX) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RTE_INTR_HANDLE_ALARM</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; alarm handle */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RTE_INTR_HANDLE_EXT</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; external handler */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    RTE_INTR_HANDLE_MAX</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>ret_intr_enable 函数的代码如下所示：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_intr_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_intr_handle</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">intr_handle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">intr_handle </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> intr_handle</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> intr_handle</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">uio_cfg_fd </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">intr_handle</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">type</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* write to the uio fd to enable the interrupt */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_INTR_HANDLE_UIO</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">uio_intr_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">intr_handle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_INTR_HANDLE_UIO_INTX</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">uio_intx_intr_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">intr_handle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* not used at this moment */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_INTR_HANDLE_ALARM</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">VFIO_PRESENT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_INTR_HANDLE_VFIO_MSIX</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">vfio_enable_msix</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">intr_handle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_INTR_HANDLE_VFIO_MSI</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">vfio_enable_msi</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">intr_handle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_INTR_HANDLE_VFIO_LEGACY</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">vfio_enable_intx</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">intr_handle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* unknown handle type */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EAL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"Unknown handle type of fd %d\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    intr_handle</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到它根据 intr_handle-&gt;type 这个中断控制类型分发到不同的子函数上，这里我着重研究下标准的 UIO 设备控制中断的方式。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="标准-uio-设备控制中断">标准 UIO 设备控制中断<a class="hash-link" href="#标准-uio-设备控制中断" title="标题的直接链接">​</a></h2><p>对于标准的 uio 设备，通过<strong>向设备文件中写入 1</strong> 来<strong>使能</strong>中断，与之类似<strong>关闭中断</strong>的过程是<strong>向设备文件中写入 0</strong>。</p><p>uio_intr_enable 函数的代码摘录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">uio_intr_enable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_intr_handle</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">intr_handle</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">intr_handle</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">value</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EAL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"Error enabling interrupts for fd %d (%s)\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            intr_handle</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">strerror</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">errno</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到，这个函数通过写 1 到 uio 设备文件中来完成使能中断的过程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="写入-uio-设备文件代表怎样的行为">写入 uio 设备文件代表怎样的行为？<a class="hash-link" href="#写入-uio-设备文件代表怎样的行为" title="标题的直接链接">​</a></h2><p>uio 可以看做是一种<strong>字符设备驱动</strong>，在此驱动中注册了<strong>单独的 file_operations 函数表</strong>，可以看做是一种<strong>独立</strong>的设备类型。</p><p>file_operations 函数内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">file_operations</span><span class="token plain"> uio_fops </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">owner      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> THIS_MODULE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">open       </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_open</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">release    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_release</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">read       </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_read</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">write      </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_write</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mmap       </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_mmap</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">poll       </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_poll</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">fasync     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> uio_fasync</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">llseek     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> noop_llseek</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>该函树表在 uio_major_init 中初始化 cdev 结构体时使用，相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    cdev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">owner </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> THIS_MODULE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cdev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ops </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">uio_fops</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">kobject_set_name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">cdev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">kobj</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"%s"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cdev_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cdev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> uio_dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> UIO_MAX_DEVICES</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="uio_write-函数">uio_write 函数<a class="hash-link" href="#uio_write-函数" title="标题的直接链接">​</a></h2><p>uio_write 是写入 uio 设备文件时内核中最终调用到的写入函数，其代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token class-name">ssize_t</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uio_write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">file</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">filep</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> __user </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">buf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">size_t</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">loff_t</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ppos</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_listener</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">listener </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> filep</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">private_data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">idev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> listener</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">ssize_t</span><span class="token plain"> retval</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    s32 irq_on</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">count </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">copy_from_user</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">irq_on</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> buf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EFAULT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">mutex_lock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        retval </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">irq</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        retval </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EIO</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">irqcontrol</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        retval </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENOSYS</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    retval </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">irqcontrol</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> irq_on</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">out</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">mutex_unlock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">idev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> retval </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> retval </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到它<strong>从用户态获取</strong>到 <strong>irq_on</strong> 这个变量的值，为 1 对应要使能中断，为 0 则表示关闭中断，在获取了这个参数后，它首先<strong>占用互斥锁</strong>，然后调用 <strong>info</strong> 结构体中实例化的 <strong>irqcontrol 子函数</strong>来完成工作。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="uio_info-结构体及其实例化过程">uio_info 结构体及其实例化过程<a class="hash-link" href="#uio_info-结构体及其实例化过程" title="标题的直接链接">​</a></h2><p>uio_write 函数中的 idev 变量是一个<strong>指向 struct uio_device 的指针</strong>，<strong>struct uio_device</strong> 中又包含 一个<strong>指向 struct uio_info 的指针</strong>，<strong>struct uio_info</strong> 结构体内容如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_device</span><span class="token plain">   </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">uio_dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain">      </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain">      </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">version</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_mem</span><span class="token plain">      mem</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">MAX_UIO_MAPS</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_port</span><span class="token plain">     port</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">MAX_UIO_PORT_REGIONS</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain">            irq</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain">       irq_flags</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain">            </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">priv</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">irqreturn_t</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">handler</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> irq</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">mmap</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">vm_area_struct</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">vma</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">open</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">inode</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">inode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">release</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">inode</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">inode</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">irqcontrol</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s32 irq_on</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>每一个 uio 设备都会<strong>实例化</strong>一个 <strong>uio_info 结构体</strong>，uio 驱动自身<strong>不会</strong>实例化 uio_info 结构体，它只<strong>提供一个框架</strong>，可以在其它模块中调用 <strong>uio_register_device</strong> 来实例化 uio_info 结构体，在 dpdk 中，常见方式是<strong>在驱动绑定 igb_uio 的时候调用 uio_register_device 进行实例化。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="igb_uioc-中的相关代码">igb_uio.c 中的相关代码<a class="hash-link" href="#igb_uioc-中的相关代码" title="标题的直接链接">​</a></h2><p>可以在 igb_uio.c 的 probe 函数 <strong>igbuio_pci_probe</strong> 中找到实例化的相关代码，摘录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* fill uio infos */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"igb_uio"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">version </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"0.1"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">handler </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> igbuio_pci_irqhandler</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">irqcontrol </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> igbuio_pci_irqcontrol</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">CONFIG_XEN_DOM0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* check if the driver run on Xen Dom0 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">xen_initial_domain</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mmap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> igbuio_dom0_pci_mmap</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">priv </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> udev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pdev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* register uio driver */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uio_register_device</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> fail_remove_group</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到这里对 udev-&gt;info 中的字段进行了<strong>填充</strong>，同时<strong>设置</strong>了 <strong>handler</strong> 与 <strong>irqcontrol 回调函数等字段的值</strong>，最后通过 <strong>uio_register_device</strong> <strong>实例化</strong>一个 uio 设备。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="write-写入-uio-设备文件的完整过程">write 写入 uio 设备文件的完整过程<a class="hash-link" href="#write-写入-uio-设备文件的完整过程" title="标题的直接链接">​</a></h2><p>上文中我已经提到过使用 write 系统调用写入 uio 设备文件最终将会调用到</p><p>info 结构体中实例化的 irqcontrol 子函数来完成工作，这里 igb_uio 就完成了这样的过程。</p><p><strong>也就是说在绑定网卡到 igb_uio 时，写入接口对应的 uio 设备文件时将会调用 igb_uio 中实例化的 info-&gt;irqcontrol 函数来控制中断状态。</strong></p><p>这里提到的 irqcontrol 的实例化函数，在 igb_uio 中对应的就是 igbuio_pci_irqcontrol 函数。其代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">igbuio_pci_irqcontrol</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">uio_info</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s32 irq_state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_uio_pci_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">udev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> info</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">priv</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pdev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pdev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">pci_cfg_access_lock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pdev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_INTR_MODE_LEGACY</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">pci_intx</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pdev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">irq_state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">udev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mode </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_INTR_MODE_MSIX</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">msi_desc</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">if</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">LINUX_VERSION_CODE </span><span class="token macro property expression operator" style="color:#393A34">&lt;</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">KERNEL_VERSION</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression number" style="color:#36acaa">4</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">3</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">0</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">list_for_each_entry</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pdev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">msi_list</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">igbuio_msix_mask_irq</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> irq_state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">list_for_each_entry</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pdev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">msi_list</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">igbuio_msix_mask_irq</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">desc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> irq_state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">pci_cfg_access_unlock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pdev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里需要访问 pci 配置空间，根据不同的中断类型来控制中断状态，这就完成了所有的过程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="完整的过程草图">完整的过程草图<a class="hash-link" href="#完整的过程草图" title="标题的直接链接">​</a></h2><p>write uio -&gt; uio_write -&gt; idev-&gt;info-&gt;irqcontrol -&gt; igbuio_pci_irqcontrol</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="设定网卡中断寄存器">设定网卡中断寄存器<a class="hash-link" href="#设定网卡中断寄存器" title="标题的直接链接">​</a></h2><p>完成了上面描述的使能 uio、vfio 中断、事件描述符映射的过程后，网卡初始化函数会设定网卡自身的硬件中断寄存器来使能硬件中断。</p><p>对应 ixgbe 驱动中使能网卡硬件中断的函数调用如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* enable support intr */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">ixgbe_enable_intr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eth_dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>ixgbe_enable_intr 函数通过写入 EIMS 来使能需要的中断源，其代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">ixgbe_enable_intr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ixgbe_interrupt</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">intr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">IXGBE_DEV_PRIVATE_TO_INTR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_private</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ixgbe_hw</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">hw </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">IXGBE_DEV_PRIVATE_TO_HW</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_private</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">IXGBE_WRITE_REG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> IXGBE_EIMS</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> intr</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mask</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">IXGBE_WRITE_FLUSH</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从 82599 的手册中找到了如下内容：</p><blockquote><p>Software enables the required interrupt causes by setting the EIMS register.</p></blockquote><p>与这里设定 EIMS 寄存器的行为一致，至此就完成了所有的初始化过程。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk mempool_ops]]></title>
        <id>/dpdk/以 rte_mempool_ops_table 为例描述 dpdk 程序库链接顺序对程序执行的影响</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/以 rte_mempool_ops_table 为例描述 dpdk 程序库链接顺序对程序执行的影响"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[dpdk mempool_ops 是对旧版 mempool 代码的抽象，在 dpdk-16.07 中被引入。]]></summary>
        <content type="html"><![CDATA[<p>dpdk mempool_ops 是对旧版 mempool 代码的抽象，在 <strong>dpdk-16.07</strong> 中被引入。</p><p>老版本在创建 mempool 时会创建一个内部的 <strong>ring</strong> 来完成<strong>入队与出队的操作</strong>，底层区分了<strong>多生产者、多消费者，单生产者、单消费者</strong>模型。</p><p>老版本 mempool 创建时会<strong>将所有的元素预先 enqueue 到 ring 中</strong>，并对<strong>每个</strong>元素执行<strong>初始化</strong>操作，这部分代码隐含在 mempool 的内部实现中。用户从 mempool 中申请、释放 mem，最底层是通过 <strong>dequeue、enqueue ring</strong> 来实现的。</p><p>随着 dpdk 支持场景的拓宽，在 mempool 底层使用 <strong>ring</strong> 这一种数据结构来控制 mem 的申请与释放<strong>不能满足所有场景的使用需求</strong>。</p><p>在一些场景下，一些外部的内存子系统在使用 DPDK 时需要对 mempool 底层的入队与出队的行为进行定制化开发，这意味着底层的这部分功能需要向外部开放，必须能够让程序注册一个自定义的入队、出队方法及关联数据结构，rte_mempool_ops 就是这种功能的具体实现。</p><h1>rte_mempool_ops 的抽象</h1><p>16.07 中 rte_mempool_ops 的定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mempool_ops</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">RTE_MEMPOOL_OPS_NAMESIZE</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Name of mempool ops struct. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token class-name">rte_mempool_alloc_t</span><span class="token plain"> alloc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Allocate private data. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token class-name">rte_mempool_free_t</span><span class="token plain"> free</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">         </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Free the external pool. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token class-name">rte_mempool_enqueue_t</span><span class="token plain"> enqueue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Enqueue an object. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token class-name">rte_mempool_dequeue_t</span><span class="token plain"> dequeue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Dequeue an object. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       rte_mempool_get_count get_count</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Get qty of available objs. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> __rte_cache_aligned</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>name 用于<strong>唯一标识</strong>每个 mempool_ops，alloc 用于 mempool_ops <strong>内部数据结构的创建</strong>，free 用于 mempool_ops <strong>内部数据结构的销毁</strong>，enqueue 负责入队列，dequeue 负责出队列，get_count 用以获取当前可用的对象数量。</p><p>总结起来有如下三部分功能：</p><ol><li>mempool_ops 内部数据结构的创建与释放功能</li><li>mempool_ops 对象的入队与出队功能</li><li>mempool_ops 底层可用对象数量的查询功能</li></ol><h1>以 ring 描述在 mempool_ops 框架下 mempool_ops 的使用过程</h1><p>每一个 mempool_ops 需要实例化一个 rte_mempool_ops 结构并将此结构注册到系统中，对单生产者与单消费者这种基于 ring 的模型而言它实例化的 rte_mempool_ops 定义如下；</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mempool_ops</span><span class="token plain"> ops_sp_sc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ring_sp_sc"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">alloc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> common_ring_alloc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">free </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> common_ring_free</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">enqueue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> common_ring_sp_enqueue</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dequeue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> common_ring_sc_dequeue</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> common_ring_get_count</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用如下命令注册：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">MEMPOOL_REGISTER_OPS</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ops_sp_sc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>MEMPOOL_REGISTER_OPS 通过 gcc 的构造函数声明，调用 rte_mempool_register_ops 函数将 ops_sp_sc mempool_ops 注册到系统中。</p><p>rte_mempool_register_ops 在进行一系列的内容检查后，将 ops_sp_sc 注册到 rte_mempool_ops_table 表中（<strong>在获取到互斥锁的前提下，保证对 rte_mempool_ops_table 的互斥访问</strong>）。</p><p>成功后，会获取到 <strong>ops_index</strong> （<strong>ops 在 rte_mempool_ops_table 中的下标</strong>），这个下标会被保存到 <strong>mempool</strong> 结构的 <strong>ops_index</strong> 字段中（<strong>通过调用 rte_mempool_set_ops_byname 函数设置</strong>）。</p><p>其功能定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        * Index into rte_mempool_ops_table array of mempool ops</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        * structs, which contain callback function pointers.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        * We're using an index here rather than pointers to the callbacks</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        * to facilitate any secondary processes that may want to use</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        * this mempool.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       </span><span class="token class-name">int32_t</span><span class="token plain"> ops_index</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h1>mempool_ops 被调用的地方</h1><p>使用 mempool_ops 时，通过 rte_mempool_get 函数出队列过程函数调用图示如下：</p><p><img loading="lazy" src="https://img-blog.csdnimg.cn/20210615153814667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" class="img_ev3q">
当 cache 中没有缓存时，就调用底层 ops 中注册的 dequeue 接口来完成。</p><h1>dpdk-16.07 中相关 git commit</h1><p>相关的 commit 信息如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">commit </span><span class="token number" style="color:#36acaa">449</span><span class="token plain">c49b93a6b87506c7bb07468e82b539efddca3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Author</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> David Hunt </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">david</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hunt@intel</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">com</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Date</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   Wed Jun </span><span class="token number" style="color:#36acaa">22</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">27</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">27</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2016</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">0100</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mempool</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> support handler operations</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Until now</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> the objects stored in a mempool were internally stored in a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ring</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"> This patch introduces the possibility to </span><span class="token keyword" style="color:#00009f">register</span><span class="token plain"> external handlers</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    replacing the ring</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    The </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> behavior remains unchanged</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> but calling the new function</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_mempool_set_ops_byname</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> right after </span><span class="token function" style="color:#d73a49">rte_mempool_create_empty</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> allows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    the user to change the handler that will be used when populating</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    the mempool</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    This patch also adds a set of </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ops</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">function callbacks</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> based</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    on rte_ring</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Signed</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">off</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">by</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> David Hunt </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">david</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">hunt@intel</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">com</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Signed</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">off</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">by</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Olivier Matz </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">olivier</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">matz@</span><span class="token number" style="color:#36acaa">6</span><span class="token plain">wind</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">com</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Acked</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">by</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Shreyansh Jain </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">shreyansh</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">jain@nxp</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">com</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Acked</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">by</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Olivier Matz </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">olivier</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">matz@</span><span class="token number" style="color:#36acaa">6</span><span class="token plain">wind</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">com</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此接口在后面的版本有一些优化，但是主体框架没有大的变动。注册一个自己的 mempool_ops 的实例<strong>可以参照 vpp  dpdk_plugins 中的实现代码</strong>。</p><h1>19.11 中 dpdk 程序初始化后 rte_mempool_ops_table 的布局情况</h1><p>dpdk-19.11 中 dpdk 程序初始化后 rte_mempool_ops_table 结构示例如下图：
<img loading="lazy" src="https://img-blog.csdnimg.cn/20210615103819679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" class="img_ev3q">
上图中，rte_mempool_ops_table 的不同表项指向不同的 mempool_ops 实例。</p><p>使用静态库时，链接不同 <strong>mempool_ops</strong> 所在库的<strong>顺序决定了</strong> <strong>rte_mempool_ops_table</strong> 中不同 <strong>mempool_ops</strong> 的<strong>布局</strong>。如果 dpdk primary 进程与 secondary 进程<strong>链接</strong>不同 mempool_ops 构造函数所在<strong>库的顺序不同</strong>，则会有<strong>不同的</strong> rte_mempool_ops_table <strong>布局</strong>，当 mempool 需要在 primary 与 secondary 中共享时，不同的 rte_mempool_ops_table 布局就会带来严重的问题！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="第一种布局方式dpdk-内部示例程序的布局">第一种布局方式——dpdk 内部示例程序的布局<a class="hash-link" href="#第一种布局方式dpdk-内部示例程序的布局" title="标题的直接链接">​</a></h2><p>这里以 dpdk-pdump 为代表，其链接参数可以查看如下文件：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">x86_64-native-linuxapp-gcc/build/app/pdump/.dpdk-pdump.cmd</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此种方式下 rte_mempool_ops_table 的前 4 个元素布局情况见下图：<img loading="lazy" src="https://img-blog.csdnimg.cn/20210615110317285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" class="img_ev3q">
可以看到，mp_mc 这种基于 ring 的多生产者与多消费者占据 rte_mempool_ops_table 表中 ops 数组的第一个表项，examples 目录下的 dpdk primary 程序中 rte_mempool_ops_table 表的布局与 app 下的程序布局一致。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用-libdpdka-链接外部程序时的布局情况">使用 libdpdk.a 链接外部程序时的布局情况<a class="hash-link" href="#使用-libdpdka-链接外部程序时的布局情况" title="标题的直接链接">​</a></h2><p>libdpdk.a 中 mempool 相关静态库的链接顺序如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> ./x86_64-native-linux-gcc/lib/libdpdk.a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">GROUP </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.librte_mempool_bucket.a librte_mempool_dpaa2.a librte_mempool_octeontx.a librte_mempool_octeontx2.a librte_mempool_ring.a librte_mempool_stack.a </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此时程序运行后，rte_mempool_ops_table 表中 mempool_ops 的布局情况见下图：
<img loading="lazy" src="https://img-blog.csdnimg.cn/20210615111522370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" class="img_ev3q">
可以看到，此时 mempool_bucket_ops 占据 rte_mempool_ops_table 中 ops 的第一个元素，这与第一种情况是不同的。</p><h1>问题描述</h1><p>primary 进程使用 libdpdk.a 中的链接顺序，使用第二种 rte_mempool_ops_table 布局方式，secondary 进程使用 dpdk-pdump，使用此程序来抓取报文。</p><p>问题现象：</p><p><strong>打流情况下，dpdk-pdump 程序运行起来后会导致 primary 进程段错误。</strong></p><h1>dpdk-pdump dump 报文的原理浅析</h1><p><strong>dpdk-pdump</strong> 首先创建 <strong>pdump_tuples</strong> 中使能表项的不同字段，一个 <strong>pdump_tuples 表项</strong> 能够<strong>完整</strong>的描述一个待 dump 的目标接口。</p><p><strong>dpdk-pdump</strong> 会为每一个 pdump_tuples 创建<strong>单独的 pktmbuf_pool</strong> 并使用 <strong>mp_mc_ops</strong> 这种 <strong>mempool_ops</strong>，同时会根据配置的功能，来创建相应的 <strong>ring</strong>。</p><p><strong>pdump_tuples 及 vdev 接口初始化完成后</strong>，<strong>dpdk-pdump</strong> 会调　<strong>rte_pdump_enable_by_deviceid</strong> 来使能 dump 指定接口指定队列上指定收、方向报文的功能。</p><p><strong>rte_pdump_enable_by_deviceid</strong> 会使用 <strong>pdump_tuples</strong> 中配置表项的内容作为参数，构造一条<strong>请求</strong>，然后将这条请求通过<strong>本地套接字</strong>发送给 <strong>primary</strong> 进程。</p><p><strong>primary</strong> 进程收到这条消息后，进行解析并调用 <strong>pdump_server</strong> 函数，<strong>pdump_server</strong> 调用 <strong>set_pdump_rxtx_cbs</strong> 来向请求的 port 与 queue 的 rx、tx 方向注册回调函数，rx 这方为 <strong>pdump_rx</strong>，tx 这方为 <strong>pdump_tx</strong>。</p><p>完成了上述操作后，<strong>pdump_server</strong> 会向对方发送一个 <strong>reply</strong>，表明配置状态。</p><p>当程序调用 <strong>rte_eth_rx_burst</strong> 时，<strong>成功收到报文后</strong>，会<strong>遍历接收回调函数并执行</strong>，在这里就调用到了 <strong>pdump_rx</strong> 函数。</p><p><strong>pdump_r</strong>x 函数使用 <strong>dpdk-pdump</strong> 发送请求中指定的 <strong>mempool</strong> 来申请 <strong>mbuf</strong>，然后拷贝报文到 <strong>mbuf</strong> 中，成功后就尝试将报文投递到 dpdk-pdump 发送请求中指定的 ring 中，失败则直接释放报文。</p><p>由于 dpdk 程序在初始化的过程中已经执行了一些<strong>内存的共享操作</strong>，primary 进程能够<strong>直接使用 secondary 进程中的一些虚拟地址</strong>，这里的 mempool 的地址就是一个实例。</p><p>问题就出在这里！当 primary 进程收到包后，调用到 pdump_rx 函数时，在从 mempool 中申请 mbuf 的时候，由于 <strong>dpdk-pdump 与 primary 进程的 rte_mempool_ops_table 表中 mempool_ops 的布局不同</strong>，在 dpdk-pdump 对应 <strong>ops_mp_mc</strong> 这个 <strong>mempool_ops</strong> 的表项处，在 primary 进程中实际对应的是 <strong>bucket</strong> 的 <strong>mempool_ops</strong>，就造成了 primary 进程<strong>段错误</strong>！</p><h1>解决方案</h1><p>调整 libdpdk.a 中 mempool_ops 所在库的链接顺序，与 dpdk-pdump 保持一致，重新编译 primary 程序。</p><h1>总结</h1><p>本文从 rte_mempool_ops 着手描述，目的在于说明由于库链接顺序的区别导致 dpdk primary 进程与 secondary 进程中 mempool_ops 在 rte_mempool_ops_table 占据不同的表项，进一步造成程序段错误的问题。</p><p>使用 gcc 的 constructor 修饰符来声明构造函数，在使用静态库的情况下，<strong>链接顺序就决定了初始化的顺序，进而影响到了在不同程序中表单的布局</strong>，这一布局又随着多个程序之间的交互被误用，最终造成了严重的问题。</p><p>使用 constructor 修饰符<strong>让 mempool_ops 的动态添加</strong>变得非常简单，避免了硬编码。但是使用了 <strong>constructor</strong> 的同时也继承了 <strong>constructor</strong> 潜在的问题，即链接的顺序决定了初始化的顺序，这算是种隐式的依赖，不太容易发现！</p><p>正如一件事物有好有坏，一个技术也有好有坏，更准确点说应该是<strong>有优势也有限制条件</strong>。我们应当做到既清楚它的优势也清楚它的限制条件，正如我们需要明悟自己的长短一般，并不是那么容易！</p><p>本篇文章算是使用 <strong>groff</strong> 绘图的一个开端，绘出的图让人挺满意的，这是一个很好的开端，也是一个改变的点。</p><p>最后将 <strong>mempool_ops</strong> 中某张图片的 pic 代码贴到下面，仅供参考！</p><div class="language-pic codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-pic codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">.PS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">define rte_mempool_ops { </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    box "..........";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    box $1 fill 0.4;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    box $2 fill 0.6;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">boxht=0.4;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">boxwid=2.5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">A:box "sl";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">down;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">box "num_ops" with .nw at A.sw;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">B:box "ops[0]" fill 0.5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">C:box "ops[1]" fill 0.5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">D: box "ops[2]" fill 0.5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">E: box "ops[3]" fill 0.5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">F:box "ops[...]" fill 0.5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">boxwid=1.8;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">H:box "octeontx" with .nw at A.se + (2, -4) fill 0.2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_mempool_ops("otx2_npa_enq", "otx2_npa_deq");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">I:box "dpaa" with .nw at A.e + (2, 0.5) fill 0.2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_mempool_ops("dpaa_mbuf_free_bulk", "dpaa_mbuf_alloc_bulk");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">J:box "bucket" with .nw at A.se + (2, 3) fill 0.2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_mempool_ops("bucket_enqueue", "bucket_dequeue");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">K:box "dpaa2" with .nw at A.se + (2, -1.5) fill 0.2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rte_mempool_ops("irte_hw_mbuf_free_bulk", "rte_dpaa2_mbuf_alloc_bulk");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"\fBrte_mempool_ops_table\fR" textwid 2 with .nw at A.c + (0, 0.4);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"\fB  mempool_octeontx_ops\fR" textwid 2 with .nw at H.c + (0, 0.4);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"\fB  mempool_dpaa_ops\fR" textwid 2 with .nw at I.c + (0, 0.4);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"\fB  mempool_bucket_ops\fR" textwid 2 with .nw at J.c + (0, 0.4);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"\fB  mempool_dpaa2_ops\fR" textwid 2 with .nw at K.c + (0, 0.4);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">line chop 0 chop 0 from B.e to J.w -&gt;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">line chop 0 chop 0 from C.e to I.w -&gt;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">line chop 0 chop 0 from D.e to K.w -&gt;;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">line chop 0 chop 0 from E.e to H.w -&gt;;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[环境介绍]]></title>
        <id>/dpdk/使用内核驱动上手 x710 flow directory 功能</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/使用内核驱动上手 x710 flow directory 功能"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[i40e 驱动版本为 5.0 内核主线版本，网卡为 x710 网卡。需要测试 flow directory 功能能否正常使用。]]></summary>
        <content type="html"><![CDATA[<p>i40e 驱动版本为 5.0 内核主线版本，网卡为 x710 网卡。需要测试 flow directory 功能能否正常使用。</p><h1>第一个问题：不支持 flow-type 为 ether</h1><p>使用下面这条命令，设定一个 flow-type 为 ether 类型的过滤条件时报了 NOTSUPP 的错误。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">ethtool</span><span class="token plain"> -U enp11s0f0  flow-type ether  </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="分析-flow-type-为-ether-时的执行过程">分析 flow-type 为 ether 时的执行过程<a class="hash-link" href="#分析-flow-type-为-ether-时的执行过程" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ethtool-中的流程分析">ethtool 中的流程分析<a class="hash-link" href="#ethtool-中的流程分析" title="标题的直接链接">​</a></h3><p>ethtool 中解析代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">strcmp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argp</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"ether"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        flow_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETHER_FLOW</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fsp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flow_type </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> flow_type</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当 ethtool 命令行中设定了 flow-type 为 ether 时，ethtool 会将 flow_type 设定为 <strong>ETHER_FLOW</strong>。</p><p>然后立刻判断 <strong>flow_type</strong>，分发到不同的 <strong>options</strong> 中，相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ETHER_FLOW</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        options </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rule_nfc_ether</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        n_opts </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ARRAY_SIZE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rule_nfc_ether</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>options 表示解析参数的规则，rule_nfc_ether 定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rule_opts</span><span class="token plain"> rule_nfc_ether</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"src"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> OPT_MAC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NFC_FLAG_SADDR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> h_u</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ether_spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">h_source</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> m_u</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ether_spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">h_source</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"dst"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> OPT_MAC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NFC_FLAG_DADDR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> h_u</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ether_spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">h_dest</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> m_u</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ether_spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">h_dest</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"proto"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> OPT_BE16</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NFC_FLAG_PROTO</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> h_u</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ether_spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">h_proto</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> m_u</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ether_spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">h_proto</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"action"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> OPT_U64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NFC_FLAG_RING</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ring_cookie</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"vf"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> OPT_RING_VF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NFC_FLAG_RING_VF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ring_cookie</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"queue"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> OPT_RING_QUEUE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NFC_FLAG_RING_QUEUE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ring_cookie</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"loc"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> OPT_U32</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NFC_FLAG_LOC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> location</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"vlan-etype"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> OPT_BE16</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NTUPLE_FLAG_VETH</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> h_ext</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vlan_etype</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> m_ext</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vlan_etype</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"vlan"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> OPT_BE16</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NTUPLE_FLAG_VLAN</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> h_ext</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vlan_tci</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> m_ext</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">vlan_tci</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"user-def"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> OPT_BE64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NTUPLE_FLAG_UDEF</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> h_ext</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">offsetof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rx_flow_spec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> m_ext</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>解析完所有的参数同时配置好 <strong>struct ethtool_rx_flow_spec</strong> 结构体，然后调用 <strong>ioctl</strong> 来下发配置到网卡。</p><p>配置方式有两种类型，相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* attempt to add rule via N-tuple specifier */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">do_srxntuple</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rx_rule_fs</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* attempt to add rule via network flow classifier */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rxclass_rule_ins</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rx_rule_fs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rss_context</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">fprintf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">stderr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot insert"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token string" style="color:#e3116c">" classification rule\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>第一种配置方式是 ntuple，第二种是 classifier，这两种不同方式<strong>传递给 ioctl 的 ethtool 子命令存在区别</strong>。</p><p><strong>当驱动不支持 ntuple 方式配置时（返回值为 EOPNOTSUPP 时），不会打印失败信息，继续尝试 classifier 方式</strong>。</p><p>当两种方式都失败后，软件执行如下代码打印错误信息：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">fprintf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">stderr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Cannot insert"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token string" style="color:#e3116c">" classification rule\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="ntuple-方式-ioctl-的参数">ntuple 方式 ioctl 的参数<a class="hash-link" href="#ntuple-方式-ioctl-的参数" title="标题的直接链接">​</a></h4><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* send rule via N-tuple */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ntuplecmd</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">cmd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETHTOOL_SRXNTUPLE</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">send_ioctl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">ntuplecmd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="classifier-方式-ioctl-的参数">classifier 方式 ioctl 的参数<a class="hash-link" href="#classifier-方式-ioctl-的参数" title="标题的直接链接">​</a></h4><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* notify netdev of new rule */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nfccmd</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">cmd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETHTOOL_SRXCLSRLINS</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nfccmd</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">rss_context </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rss_context</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    nfccmd</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">fs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">fsp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    err </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">send_ioctl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">nfccmd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="i40e-内核驱动支持哪一种类型">i40e 内核驱动支持哪一种类型?<a class="hash-link" href="#i40e-内核驱动支持哪一种类型" title="标题的直接链接">​</a></h4><p>5.0 内核中，ethtool 框架不支持 ntuple 方式。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="ioctl-的内核流程">ioctl 的内核流程<a class="hash-link" href="#ioctl-的内核流程" title="标题的直接链接">​</a></h3><p>ethool 调用 ioctl 最终会走到 <strong>dev_ethtool</strong> 函数中，在这个函数中 ETHTOOL_SRXCLSRLINS 被分发到 ethtool_set_rxnfc 函数中，相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">2705</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ETHTOOL_SRXFH</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2706</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ETHTOOL_SRXCLSRLDEL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2707</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ETHTOOL_SRXCLSRLINS</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2708</span><span class="token plain">         rc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ethtool_set_rxnfc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ethcmd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> useraddr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2709</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>ethtool_set_rxnfc 核心代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ethtool_ops</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">set_rxnfc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到它调用了 <strong>ethtool_ops</strong> 中的 <strong>set_rxnfc</strong> 函数指针，此函数指针在 <strong>i40e_ethtool.c</strong> 中实现，<strong>i40e_ethtool.c</strong> 中实现的函数代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">4308</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">i40e_set_rxnfc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">netdev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ethtool_rxnfc</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">cmd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4309</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4310</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">i40e_netdev_priv</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">np </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">netdev_priv</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">netdev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4311</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">i40e_vsi</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">vsi </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> np</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">vsi</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4312</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">i40e_pf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> vsi</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">back</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4313</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EOPNOTSUPP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4314</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4315</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cmd</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">cmd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4316</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ETHTOOL_SRXFH</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4317</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">i40e_set_rss_hash_opt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pf</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cmd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4318</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4319</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ETHTOOL_SRXCLSRLINS</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4320</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">i40e_add_fdir_ethtool</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vsi</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cmd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4321</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4322</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ETHTOOL_SRXCLSRLDEL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4323</span><span class="token plain">         ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">i40e_del_fdir_entry</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vsi</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cmd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4324</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4325</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4326</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4327</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4328</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4329</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4330</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>i40e_add_fdir_ethtool</strong> 在真正设定到网卡前做了许多检查，其中有 <strong>i40e_check_fdir_input_set</strong> 这个对 input_set 的检查。</p><p><strong>i40e_check_fdir_input_set</strong> 中判断 <strong>flow_type</strong>，当这个字段设定为 <strong>ETHER_FLOW</strong> 此函数将会返回 -EOPNOTSUPP。相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">3801</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fsp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flow_type </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">~</span><span class="token plain">FLOW_EXT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3802</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> SCTP_V4_FLOW</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3803</span><span class="token plain">         index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> I40E_FILTER_PCTYPE_NONF_IPV4_SCTP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3804</span><span class="token plain">         fdir_filter_count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd_sctp4_filter_cnt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3805</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3806</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> TCP_V4_FLOW</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3807</span><span class="token plain">         index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> I40E_FILTER_PCTYPE_NONF_IPV4_TCP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3808</span><span class="token plain">         fdir_filter_count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd_tcp4_filter_cnt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3809</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3810</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> UDP_V4_FLOW</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3811</span><span class="token plain">         index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> I40E_FILTER_PCTYPE_NONF_IPV4_UDP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3812</span><span class="token plain">         fdir_filter_count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd_udp4_filter_cnt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3813</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3814</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> IP_USER_FLOW</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3815</span><span class="token plain">         index </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> I40E_FILTER_PCTYPE_NONF_IPV4_OTHER</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3816</span><span class="token plain">         fdir_filter_count </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">pf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd_ip4_filter_cnt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3817</span><span class="token plain">         flex_l3 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3818</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3819</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3820</span><span class="token plain">         </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EOPNOTSUPP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3821</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以确定对于执行 <strong>ethtool -U devname ether xxx</strong> 的设定 linux 5.0 的 i40e 驱动并不支持！</p><h1>第二个问题：如何丢掉所有的 ipv4 udp 报文?</h1><p>在测试前我首先执行 <strong>ifconfig enp11s0f0 -promisc</strong> 命令打开混淆模式。</p><p>构造 udp 报文开始打流，然后执行如下命令能够丢掉所有的 ipv4 udp 报文：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">ethtool</span><span class="token plain"> -U enp11s0f0  flow-type udp4  action -1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>设定完成可以通过 <strong>ethtool -u enp11s0f0</strong> 来查看配置内容，同时可以通过执行如下命令查看 <strong>fdir_match</strong> 计数确定配置生效：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">ethtool</span><span class="token plain"> -S enp11s0f0 </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> fdir</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>设定后会得到一个 id，我测试时 id 是 7679，可以使用 <strong>ethtool -U enp11s0f0  delete 7679</strong> 来移除这一条配置。</p><h1>第三个问题：如何使用 flex filter 功能？</h1><p>linux 内核源码树 networking/device_drivers/intel/i40e.rst 文件中描述了可以通过使用 user-def 字段来匹配协议的 payload 中的字段内容。</p><p>manual 说明贴到下面：</p><div class="language-manual codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-manual codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">The driver also supports matching user-defined data within the packet payload.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">This flexible data is specified using the "user-def" field of the ethtool</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">command in the following way:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+----------------------------+--------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| 31    28    24    20    16 | 15    12    8    4    0  |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+----------------------------+--------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| offset into packet payload | 2 bytes of flexible data |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+----------------------------+--------------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">For example,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">::</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ... user-def 0x4FFFF ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tells the filter to look 4 bytes into the payload and match that value against</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0xFFFF. The offset is based on the beginning of the payload, and not the </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">beginning of the packet. Thus</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">::</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  flow-type tcp4 ... user-def 0x8BEAF ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">would match TCP/IPv4 packets which have the value 0xBEAF 8 bytes into the </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TCP/IPv4 payload.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述说明信息讲了下面这几个内容：</p><ol><li>user-def 只能从 payload 开始匹配</li><li>user-def 由 4 字节组成，高 16 位的两个字节代表相对 payload 的偏移量，低 16 位为匹配的内容</li></ol><p>由于 flexible data 的单位是两个字节，offset 只支持偶数，不能使用奇数。实际测试时，我发现按照上面的描述配置能够正常配置，但是过滤功能并不生效。</p><p>唯一一次生效的命令如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">ethtool</span><span class="token plain"> -U enp11s0f0 flow-type udp4 user-def 0x0 action -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Added rule with ID </span><span class="token number" style="color:#36acaa">7679</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>测试仪发送的 udp 报文，其 payload 的前两个字节都是 0，dmesg 有如下信息：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.336866</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> i40e </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">b</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00.0</span><span class="token plain"> enp11s0f0</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Input set change requested </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> udp4 flows</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.336871</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> i40e </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">b</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00.0</span><span class="token plain"> enp11s0f0</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">   Current input set</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.336874</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> i40e </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">b</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00.0</span><span class="token plain"> enp11s0f0</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Requested input set</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.336877</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> i40e </span><span class="token number" style="color:#36acaa">0000</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">b</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">00.0</span><span class="token plain"> enp11s0f0</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> FLEX index </span><span class="token number" style="color:#36acaa">0</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> Offset </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>根据上面的描述，当针对 UDPv4 设置 flex 的时候，payload 的起始位置指向的是 UDPv4 报文的 data 区域起始位置。</p><p>我构造如下 udp payload 内容进行测试：
<img loading="lazy" src="https://img-blog.csdnimg.cn/20201205111937571.png" alt="在这里插入图片描述" class="img_ev3q">
测试命令如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">ethtool</span><span class="token plain"> -U enp11s0f0 flow-type udp4 user-def 0x9013 action -1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>dmesg 的打印信息如下：</p><div class="language-dmesg codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dmesg codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[163317.273795] i40e 0000:0b:00.0 enp11s0f0: Input set change requested for udp4 flows:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[163317.273801] i40e 0000:0b:00.0 enp11s0f0:   Current input set: 2000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[163317.273805] i40e 0000:0b:00.0 enp11s0f0: Requested input set: 2000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[163317.273808] i40e 0000:0b:00.0 enp11s0f0: FLEX index 0: Offset -&gt; ０</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以确定设置成功了，但是没有生效，怀疑大小端、偏移量的影响并都进行了排查，没有找到问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="对-flex-filter-的认识">对 flex filter 的认识<a class="hash-link" href="#对-flex-filter-的认识" title="标题的直接链接">​</a></h2><p>flex filter 是针对报文的 <strong>payload</strong> 进行 filter，也就是说我们无法针对报文的 header 进行过滤，但是在网络报文封装中，<strong>上层的协议帧可以看做是下层协议帧的 payload</strong>．</p><p>也就是说如果我们要过滤一个 96 字节的 udp 报文，那么要设定过滤一个 ip 报文的命令，因为在过滤 ip 报文的时候 udp 的头是可见的，有了这个知识，然后计算出 96 字节支持的 udp 包的大小，编写命令。</p><p>同时需要了解的是<strong>接口的混淆模式可能对过滤条件有影响</strong>，根据测试情况看，在<strong>开混淆模式后过滤功能仍然能够生效</strong>。</p><p>有了上面的理解，我继续尝试过滤 udp 报文的 payload 字段，结果都失败了，网上搜索了下发现相关的内容非常少，看来只有怼代码了！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="尝试分析代码以找到-flex-filter-不能生效的原因">尝试分析代码以找到 flex filter 不能生效的原因<a class="hash-link" href="#尝试分析代码以找到-flex-filter-不能生效的原因" title="标题的直接链接">​</a></h2><p>研究代码，发现设定一个 flow directory 规则的流程大致如下：</p><ol><li>选择 input set </li><li>获取 fdir 对应的 ring</li><li>根据 flow-type 等参数设定一个 i40e_filter_program_desc 描述符内容</li><li>构造一个报文，此报文根据 flow-type 等参数来设定，它也需要占一个描述符</li><li>写入 tail 让网卡处理这两个描述符</li><li>检查设定是否生效</li></ol><p>i40e_fdir 函数负责填充 i40e_filter_program_desc 描述符，这个描述符的定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">i40e_filter_program_desc</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    __le32 qindex_flex_ptype_vsi</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    __le32 rsvd</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    __le32 dtype_cmd_cntindex</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    __le32 fd_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>i40e_fdir 代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">i40e_fdir</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">i40e_ring</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">tx_ring</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">i40e_fdir_filter</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">fdata</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> bool add</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">i40e_filter_program_desc</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">fdir_desc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">i40e_pf</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pf </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tx_ring</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">vsi</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">back</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    u32 flex_ptype</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dtype_cmd</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    u16 i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* grab the next descriptor */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tx_ring</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next_to_use</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fdir_desc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">I40E_TX_FDIRDESC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">tx_ring</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tx_ring</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">next_to_use </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> tx_ring</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">count</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flex_ptype </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> I40E_TXD_FLTR_QW0_QINDEX_MASK </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fdata</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">q_index </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> I40E_TXD_FLTR_QW0_QINDEX_SHIFT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flex_ptype </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> I40E_TXD_FLTR_QW0_PCTYPE_MASK </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fdata</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pctype </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> I40E_TXD_FLTR_QW0_PCTYPE_SHIFT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flex_ptype </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> I40E_TXD_FLTR_QW0_PCTYPE_MASK </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fdata</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flex_offset </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> I40E_TXD_FLTR_QW0_FLEXOFF_SHIFT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* Use LAN VSI Id if not programmed by user */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flex_ptype </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> I40E_TXD_FLTR_QW0_DEST_VSI_MASK </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fdata</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dest_vsi </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> pf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">vsi</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">pf</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">lan_vsi</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">               I40E_TXD_FLTR_QW0_DEST_VSI_SHIFT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dtype_cmd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> I40E_TX_DESC_DTYPE_FILTER_PROG</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dtype_cmd </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> add </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             I40E_FILTER_PROGRAM_DESC_PCMD_ADD_UPDATE </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             I40E_TXD_FLTR_QW1_PCMD_SHIFT </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             I40E_FILTER_PROGRAM_DESC_PCMD_REMOVE </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             I40E_TXD_FLTR_QW1_PCMD_SHIFT</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dtype_cmd </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> I40E_TXD_FLTR_QW1_DEST_MASK </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fdata</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dest_ctl </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> I40E_TXD_FLTR_QW1_DEST_SHIFT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dtype_cmd </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> I40E_TXD_FLTR_QW1_FD_STATUS_MASK </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fdata</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd_status </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"> I40E_TXD_FLTR_QW1_FD_STATUS_SHIFT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fdata</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">cnt_index</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dtype_cmd </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> I40E_TXD_FLTR_QW1_CNT_ENA_MASK</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dtype_cmd </span><span class="token operator" style="color:#393A34">|=</span><span class="token plain"> I40E_TXD_FLTR_QW1_CNTINDEX_MASK </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u32</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">fdata</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">cnt_index </span><span class="token operator" style="color:#393A34">&lt;&lt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  I40E_TXD_FLTR_QW1_CNTINDEX_SHIFT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fdir_desc</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">qindex_flex_ptype_vsi </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cpu_to_le32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">flex_ptype</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fdir_desc</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">rsvd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cpu_to_le32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fdir_desc</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dtype_cmd_cntindex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cpu_to_le32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dtype_cmd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fdir_desc</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cpu_to_le32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fdata</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的代码中，<strong>dtype_cmd</strong> 是个非常重要的字段，它经过一系列的判断设定其值。</p><p>i40e_fdir 中设定描述符字段内容完成后，将 <strong>tx_ring-&gt;next_to_use</strong> 向后拨一个单位，表示<strong>占用了一个描述符</strong>。</p><p>i40e_fdir 填充完成后，继续<strong>填充 raw_packet，占据下一个描述符</strong>，并设定相关的字段。</p><p>过滤 udp 报文时构造 raw_packet 报文的代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x08</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token number" style="color:#36acaa">0x45</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1c</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x40</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x40</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x11</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    raw_packet </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kzalloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">I40E_FDIR_MAX_RAW_PACKET_SIZE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> GFP_KERNEL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">raw_packet</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENOMEM</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">memcpy</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">raw_packet</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> I40E_UDPIP_DUMMY_PACKET_LEN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ip </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">iphdr</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">raw_packet </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> IP_HEADER_OFFSET</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    udp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">udphdr</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">raw_packet </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> IP_HEADER_OFFSET</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">iphdr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ip</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">daddr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fd_data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dst_ip</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    udp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dest </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fd_data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dst_port</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ip</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">saddr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fd_data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">src_ip</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    udp</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">source </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fd_data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">src_port</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fd_data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flex_filter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">payload </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> raw_packet </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> I40E_UDPIP_DUMMY_PACKET_LEN</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __be16 pattern </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fd_data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flex_word</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u16 off </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fd_data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flex_offset</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__force __be16 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">payload </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> off</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pattern</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fd_data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">pctype </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> I40E_FILTER_PCTYPE_NONF_IPV4_UDP</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用了 ethtool 设定 user-def 的时候 fd_data-&gt;flex_filter 为 true，这时可以看到对 udp 报文的 payload + off 字段的填充逻辑。</p><p><strong>I40E_UDPIP_DUMMY_PACKET_LEN</strong> 的定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">I40E_UDPIP_DUMMY_PACKET_LEN</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">42</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述代码计算的 payload 的起始位置正是 udp 报文的 data 字段的起始位置。</p><p>与此类似，过滤 tcpv4 报文时填充 payload 字段的代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fd_data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flex_filter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u8 </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">payload </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> raw_packet </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> I40E_TCPIP_DUMMY_PACKET_LEN</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        __be16 pattern </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fd_data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flex_word</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        u16 off </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> fd_data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flex_offset</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__force __be16 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">payload </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> off</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pattern</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>I40E_TCPIP_DUMMY_PACKET_LEN</strong> 宏的定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">I40E_TCPIP_DUMMY_PACKET_LEN</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">54</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以确定 <strong>tcpv4 flex payload</strong> 从报文的第 54 字节开始，同理 <strong>ipv4 flex payload</strong> 从报文的第 <strong>34</strong> 字节开始，<strong>sctp flex payload</strong> 从报文的第 <strong>46</strong> 字节开始。</p><p>构造完成一个 raw_packet 后同样需要填充描述符，tx_ring-&gt;next_to_use 再次向后拨动一个单位。完成上述过程后，最终将 <strong>tx_ring-&gt;next_to_use</strong> 写入到 <strong>tx_ring-&gt;tail</strong> 以通知网卡处理， t<strong>x_ring-&gt;tail</strong> 是网卡中映射的一个<strong>物理地址</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="修改代码打印填充的-raw_packet-报文内容">修改代码，打印填充的 raw_packet 报文内容<a class="hash-link" href="#修改代码打印填充的-raw_packet-报文内容" title="标题的直接链接">​</a></h2><p>经过上面对 flex filter 设定过程的研究，我觉得可能是填充的 raw_packet 报文的内容存在问题，故而在驱动中添加了打印报文内容的操作重试。</p><p>测试过程记录如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># dmesg -c &gt;/dev/null ; ethtool -U enp11s0f0 flow-type udp4 user-def 0x212da action -1; dmesg | grep -A 10 'packet\[42\]'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Added rule with ID </span><span class="token number" style="color:#36acaa">7679</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165607.394687</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">42</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165607.394688</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">43</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165607.394689</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">44</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">12</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165607.394691</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">45</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is da</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165607.394692</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">46</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165607.394693</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">47</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165607.394694</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">48</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165607.394696</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">49</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165607.394697</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">50</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165607.394698</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">51</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165607.394700</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">52</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>根据打出的报文内容看，设定是正确的！但是仍旧没有真正生效，看来还是哪里没有整对。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="唯一一次成功的-use-def-配置时的-raw_packet-内容">唯一一次成功的 use-def 配置时的 raw_packet 内容<a class="hash-link" href="#唯一一次成功的-use-def-配置时的-raw_packet-内容" title="标题的直接链接">​</a></h2><p>一番折腾后，我想到也许可以把那唯一一次生效的 raw_packet 内容打出来，看看有什么不同，结果也没有找到怀疑点，测试过程还是记录到下面。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">root</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># dmesg -c &gt;/dev/null ; ethtool -U enp11s0f0 flow-type udp4 user-def 0x0 action -1; dmesg | grep -A 10 'packet\[42\]'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Added rule with ID </span><span class="token number" style="color:#36acaa">7679</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.336866</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> i40e 0000:0b:00.0 enp11s0f0: Input </span><span class="token builtin class-name">set</span><span class="token plain"> change requested </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> udp4 flows:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.336871</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> i40e 0000:0b:00.0 enp11s0f0:   Current input set: </span><span class="token number" style="color:#36acaa">2000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.336874</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> i40e 0000:0b:00.0 enp11s0f0: Requested input set: </span><span class="token number" style="color:#36acaa">2000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.336877</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> i40e 0000:0b:00.0 enp11s0f0: FLEX index </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">: Offset -</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337433</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337435</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337436</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337437</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337439</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is e6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337440</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is ff</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337442</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is ff</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337443</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is ff</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337444</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">8</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337446</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">9</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337447</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337448</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">11</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337450</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">12</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337451</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">13</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337452</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">14</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">45</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337454</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">15</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337455</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337456</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">17</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is 1c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337458</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">18</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337459</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">19</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337460</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">20</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">40</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337462</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">21</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337463</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">22</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">40</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">165763.337464</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> packet</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">23</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> is </span><span class="token number" style="color:#36acaa">11</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>x710 flow directory 是个挺高级的功能，但是我们的业务场景中从来没有使用过，没有相应的技术积累，这次搞起来就显得困难重重。</p><p>flex filter 功能没有用起来，但是五元组过滤算是上手了，这个功能刚好能够解决我们遇到的问题，不过当场景切换到 dpdk 中时，即便一个简单的过滤 udp 报文的功能也研究了好几天，期间一度想放弃，被搞到想哭，最终搞定了后又激动到想哭。</p><p>现在想想在某天 21:00 的时候，我心怀忐忑的准备测试看 dpdk 中的 flow directory 功能是否生效，之前已经失败了好多次了，仔细 check，最终确定成功了后，我真的激动到眼泪快掉下来！</p><p>这并不只是技术上的突破，这更是突破自我局限的一次成功案例，我的成就感又回来了！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/关闭 stdout 引发的灾难]]></title>
        <id>/dpdk/关闭 stdout 引发的灾难</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/关闭 stdout 引发的灾难"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>2021 年前的 dpdk 版本中默认的 log 为 <strong>stdout</strong>，在实际使用中发现在<strong>调用 rte_eal_init 之前关闭 stdout 时</strong>，dpdk 程序<strong>运行异常</strong>。</p><p>表面上看有点匪夷所思，真正研究起来竟然发现在 dpdk 的框架中这个问题算是一个正常的现象，让人忍不住叹了叹气~</p><p>在本文中我将探讨下这个正常的异常现象，同时也引申描述一个真实场景中的问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题模拟">问题模拟<a class="hash-link" href="#问题模拟" title="标题的直接链接">​</a></h2><p>修改 dpdk-19.11.1 版本 l2fwd 示例程序代码，代码修改如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Index</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> examples</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">l2fwd</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">main</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> examples</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">l2fwd</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">main</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> examples</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">l2fwd</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">main</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">530</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">530</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> nb_lcores </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> nb_mbufs</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">       </span><span class="token function" style="color:#d73a49">close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>运行 l2fwd 后发现程序卡住，卡住的位置与反汇编信息如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Thread </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Thread </span><span class="token number" style="color:#36acaa">0x7f84b9150440</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">LWP </span><span class="token number" style="color:#36acaa">33746</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"l2fwd"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x0000000000654d59</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_eal_memzone_init</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">1</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x00000000006463a5</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">rte_eal_init</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#</span><span class="token number" style="color:#36acaa">2</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">0x000000000049255c</span><span class="token plain"> in </span><span class="token function" style="color:#d73a49">main</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> disass</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Dump of assembler code </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> function rte_eal_memzone_init</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d30</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">0</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">     push   </span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rbx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d31</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">     sub    $</span><span class="token number" style="color:#36acaa">0x10</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rsp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d35</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">5</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">     call   </span><span class="token number" style="color:#36acaa">0x645340</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_eal_get_configuration</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d3a</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">10</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    mov    $</span><span class="token number" style="color:#36acaa">0xffffffff</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">ecx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d3f</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">15</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    mov    </span><span class="token number" style="color:#36acaa">0x438</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rax</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rbx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d46</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">22</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    lea    </span><span class="token number" style="color:#36acaa">0x10</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rbx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rdx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d4a</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">26</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    </span><span class="token function" style="color:#d73a49">mov</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rdx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">eax</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d4c</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">28</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    test   </span><span class="token operator" style="color:#393A34">%</span><span class="token plain">eax</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">eax</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d4e</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">30</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    mov    </span><span class="token operator" style="color:#393A34">%</span><span class="token plain">eax</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rsp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d51</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">33</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    je     </span><span class="token number" style="color:#36acaa">0x654d5e</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_eal_memzone_init</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">46</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d53</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">35</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    pause</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d55</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">37</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    </span><span class="token function" style="color:#d73a49">mov</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rdx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">eax</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d57</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">39</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    test   </span><span class="token operator" style="color:#393A34">%</span><span class="token plain">eax</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">eax</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x0000000000654d59</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">41</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    mov    </span><span class="token operator" style="color:#393A34">%</span><span class="token plain">eax</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rsp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d5c</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">44</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    jne    </span><span class="token number" style="color:#36acaa">0x654d53</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_eal_memzone_init</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">35</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d5e</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">46</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    </span><span class="token function" style="color:#d73a49">mov</span><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rsp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">eax</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d61</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">49</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    lock cmpxchg </span><span class="token operator" style="color:#393A34">%</span><span class="token plain">ecx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">rdx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d65</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">53</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    jne    </span><span class="token number" style="color:#36acaa">0x654da8</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_eal_memzone_init</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">120</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d67</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">55</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    call   </span><span class="token number" style="color:#36acaa">0x646910</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">rte_eal_process_type</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0x0000000000654d6c</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">60</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">    test   </span><span class="token operator" style="color:#393A34">%</span><span class="token plain">eax</span><span class="token punctuation" style="color:#393A34">,</span><span class="token operator" style="color:#393A34">%</span><span class="token plain">eax</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>将反汇编的结果与源代码比对，确认卡在如下代码处：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_rwlock_write_lock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">mcfg</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mlock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此时 ps 检索到 l2fwd 程序的 pid 为 33746，查看 /proc/33746/fd 目录内容，收集到如下关键信息：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@debian</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">home</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">longyu</span><span class="token operator" style="color:#393A34">/</span><span class="token plain"># ls </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">lh </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">proc</span><span class="token operator" style="color:#393A34">/</span><span class="token number" style="color:#36acaa">33746</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">fd</span><span class="token operator" style="color:#393A34">/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">total </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwx</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> Apr </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">39</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">pts</span><span class="token operator" style="color:#393A34">/</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwx</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> Apr </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">40</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">run</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwx</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> Apr </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">40</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">pts</span><span class="token operator" style="color:#393A34">/</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lr</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">x</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> Apr </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">40</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token char">'pipe:[173766]'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">l</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">wx</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> Apr </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">40</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token char">'pipe:[173766]'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwx</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> Apr </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">40</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token char">'anon_inode:[timerfd]'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwx</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> Apr </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">40</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token char">'socket:[173775]'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwx</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> Apr </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">40</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token char">'socket:[173770]'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwx</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> Apr </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">40</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token char">'anon_inode:[eventpoll]'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lr</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">x</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">64</span><span class="token plain"> Apr </span><span class="token number" style="color:#36acaa">20</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">40</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">hugepages</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到 <strong>/run/dpdk/rte/config</strong> 文件的 fd 为 1，恰好对应关闭的 stdout 描述符。在此基础上，使用 od -c 查看 <strong>/run/dpdk/rte/config</strong> 文件信息如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@debian</span><span class="token operator" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">home</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">longyu</span><span class="token operator" style="color:#393A34">/</span><span class="token plain"># od </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">c </span><span class="token operator" style="color:#393A34">/</span><span class="token plain">run</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">dpdk</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">rte</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0000000</span><span class="token plain">   E   A   L   </span><span class="token operator" style="color:#393A34">:</span><span class="token plain">       P   r   o   b   i   n   g       V   F   I</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0000020</span><span class="token plain">   O       s   u   p   p   o   r   t   </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">   </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">   </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">  \n  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0000040</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0040300</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">260</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">377</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">276</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">376</span><span class="token plain">   </span><span class="token operator" style="color:#393A34">?</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0040320</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  \</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0040400</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到 <strong>rte_config</strong> 文件最开始的内容变为了 <strong>EAL:Probing VFIO support...</strong>，结合上文中描述的 l2fwd 卡在 <strong>rte_rwlock_write_lock</strong> 的现象，可以明确卡住的原因是获取不到 <strong>mlock</strong> 的写锁。</p><p><strong>rte_config</strong> 文件在 dpdk 中被映射为一个 <strong>rte_mem_config</strong> 结构，此结构的定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_mem_config</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> </span><span class="token class-name">uint32_t</span><span class="token plain"> magic</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Magic number - sanity check. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint32_t</span><span class="token plain"> version</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Prevent secondary processes using different DPDK versions. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* memory topology */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint32_t</span><span class="token plain"> nchannel</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Number of channels (0 if unknown). */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">uint32_t</span><span class="token plain"> nrank</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">       </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; Number of ranks (0 if unknown). */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * current lock nest order</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     *  - qlock-&gt;mlock (ring/hash/lpm)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     *  - mplock-&gt;qlock-&gt;mlock (mempool)</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     * Notice:</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     *  *ALWAYS* obtain qlock first if having to obtain both qlock and mlock</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">     */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">rte_rwlock_t</span><span class="token plain"> mlock</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">/**&lt; used by memzones for thread safety. */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>一个 rte_rwlock_t 的大小是 4 个字节，它由一个 CNT 变量组成。在<a href="https://blog.csdn.net/Longyu_wlz/article/details/124261738?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">程序启动顺序引发的血案之 dpdk 进程死锁</a> 这篇文章中，我描述过 dpdk 内部实现的读写锁机制如下：</p><ol><li>一把锁由一个定义为 volatile 的 32 位计数值描述，定义为 volatile 限定每次都从内存中读取此计数值</li><li>计数值为 0 表明没有人占有锁，计数值大于 0 表明有读者占用，计数值小于 0 表明有写者占用</li><li>获取读锁通过原子操作给计数值加 1，获取写锁通过原子操作给计数值减 1</li><li>获取写锁的时候不能有人读、写，获取读锁的时候不能有人写，条件不成立则一直重试</li></ol><p>根据此时 <strong>rte_config 文件的内容与 mlock 在 rte_mem_config 中的偏移</strong>，可以确定此时 mlock 中 cnt 的值为 <strong>" sup"</strong>，此值<strong>不为 0</strong> 表明有人占了锁，从而导致获取写锁失败，l2fwd 程序死锁。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="关闭-stdout-影响到了什么">关闭 stdout 影响到了什么？<a class="hash-link" href="#关闭-stdout-影响到了什么" title="标题的直接链接">​</a></h3><p>在上文中，我通过访问 <strong>/proc</strong> 目录查看到了 l2fwd 运行时 <strong>rte_config</strong> 文件的 fd 为 1，而 stdout 对应的描述符也是 1。</p><p>同时我在 dpdk 代码中搜索 <strong>"Probing VFIO support"</strong>，搜索到如下代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INFO</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EAL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Probing VFIO support...\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>进一步阅读代码确认上述信息将会输出到 stdout 中，而此时由于 stdout 对应的 fd 1 对应的是 rte_config 文件，则 <strong>stdout 的输出内容会输出到 rte_config 文件中</strong>，进而覆盖 <strong>dpdk</strong> 内部 <strong>rte_mem_config</strong> 结构的内容，导致 mlock 字段的值被异常覆盖，导致 dpdk 进程死锁。</p><p>这一切的触发因素仅仅是在调用 rte_eal_init 前关闭了 stdout 描述符，而 dpdk 也并没有明确限定不能关闭，难道这是一种潜规则？那为何会有这样的表现呢？</p><p>这个问题的表面原因是 dpdk 的内部 log 输出到 stdout，查阅 dpdk git log，发现针对默认的 log 有如下 commit：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">commit 5988725d0efeb7021670986aafeb3ff3d87839e1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Author: Ferruh Yigit &lt;ferruh.yigit@intel.com&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Date:   Tue Feb 9 15:06:20 2021 +0000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    log/linux: make default output stderr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    In Linux by default DPDK log goes to stdout, as well as syslog.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    It is possible for an application to change the library output stream</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    via 'rte_openlog_stream()' API, to set it to stderr, it can be used as:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rte_openlog_stream(stderr);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    But still updating the default log output to 'stderr'.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Bugzilla ID: 8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Fixes: af75078fece3 ("first public release")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Cc: stable@dpdk.org</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Reported-by: Alexandre Ferrieux &lt;alexandre.ferrieux@orange.com&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Signed-off-by: Ferruh Yigit &lt;ferruh.yigit@intel.com&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此 commit 将 dpdk 默认 log 设置为 stderr，此时要复现相同的问题，只需要将 close 的描述符改为 stderr 即可！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么关闭-stdout-会带来如此大的影响呢">为什么关闭 stdout 会带来如此大的影响呢？<a class="hash-link" href="#为什么关闭-stdout-会带来如此大的影响呢" title="标题的直接链接">​</a></h2><p>在 <a href="https://blog.csdn.net/Longyu_wlz/article/details/124261738?spm=1001.2014.3001.5501" target="_blank" rel="noopener noreferrer">程序启动顺序引发的血案之 dpdk 进程死锁</a> 这篇文章中，我描述了 dpdk 内部多进程之间共享的数据结构，核心的结构图如下：
<img loading="lazy" src="https://img-blog.csdnimg.cn/271474e9e9b54b6cbf480f19fa445641.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbG9uZ3l1X3dseg==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" class="img_ev3q">rte_config 结构在多个 dpdk 进程之间共享，其核心思想是多个进程 mmap 相同的文件到特定的地址来共享内存。</p><p>核心代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">305</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pathname </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">eal_runtime_config_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">310</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mem_cfg_fd </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">311</span><span class="token plain">         mem_cfg_fd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pathname</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> O_RDWR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">278</span><span class="token plain">     mapped_mem_cfg_addr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">mmap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_mem_cfg_addr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">279</span><span class="token plain">             cfg_len_aligned</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PROT_READ </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> PROT_WRITE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">280</span><span class="token plain">             MAP_SHARED </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> MAP_FIXED</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> mem_cfg_fd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>代码细节不用赘述。当在执行 rte_eal_init 函数前关闭 stdout 时，内核回收 1 号描述符，此时可用的最小的 fd 就是 1。</p><p>dpdk 在打开 rte_config 文件时分配到的 fd 为 1，而 stdout 对应的也是 1。此后 dpdk 继续初始化，<strong>内部 log 信息输出到 stdout 中的效果就是写入到 rte_config 文件中</strong>，导致 dpdk 内部 <strong>rte_mem_config</strong> 的内容被破坏，进程异常！</p><p>一个非常明显的方案是在 rte_config_init 后 close 掉 rte_config 文件，可是真的可行吗？</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么-dpdk-primary-进程未关闭-rte_config-文件">为什么 dpdk primary 进程未关闭 rte_config 文件?<a class="hash-link" href="#为什么-dpdk-primary-进程未关闭-rte_config-文件" title="标题的直接链接">​</a></h2><p>dpdk primary 进程创建 rte_config 文件用于多进程间共享 rte_mem_config 结构的主要过程如下图：
<img loading="lazy" src="https://img-blog.csdnimg.cn/9da9f2241bed4db487bbf4f222de94b2.png#pic_center" alt="在这里插入图片描述" class="img_ev3q">在上述的流程中，dpdk primary 进程会为 rte_config 文件映射到的 rte_mem_config 结构中的 memsegs 字段获取写文件锁，这把锁dpdk  用于自动检测进程属于 secondary 进程还是 primary 进程。只有 primary 进程才能成功获取到锁，同时 primary 进程保证在运行期间不会关闭 rte_config 文件。</p><p>dpdk 自动检测进程类型的函数实现如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/* Detect if we are a primary or a secondary process */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token class-name">rte_proc_type_t</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">eal_proc_type_detect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token class-name">rte_proc_type_t</span><span class="token plain"> ptype </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_PROC_PRIMARY</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pathname </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">eal_runtime_config_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* if there no shared config, there can be no secondary processes */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">internal_config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">no_shconf</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">/* if we can open the file but not get a write-lock we are a</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                 * secondary process. NOTE: if we get a file handle back, we</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                 * keep that open and don't close it to prevent a race condition</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                 * between multiple opens.</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                 */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mem_cfg_fd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pathname</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> O_RDWR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">fcntl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mem_cfg_fd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> F_SETLK</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">wr_lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        ptype </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> RTE_PROC_SECONDARY</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INFO</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> EAL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Auto-detected process type: %s\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        ptype </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> RTE_PROC_PRIMARY </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"PRIMARY"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"SECONDARY"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ptype</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>核心逻辑为打开 rte_config 文件后尝试获取 wr_lock 中设定的 memsegs 字段的写锁，成功获取则为 primary 进程，获取失败则为 secondary 进程。</p><p>这就是 dpdk primary 进程未关闭 rte_config 文件的原因 ，close 了这个文件后，primary 进程在其上获取的文件锁会释放，这样就不能自动检测 dpdk 进程的类型了！</p><p>要实现关闭 rte_config 的功能需要提供另外一种不依赖文件加锁的探测 dpdk 程序类型的机制。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="真实环境中的问题">真实环境中的问题<a class="hash-link" href="#真实环境中的问题" title="标题的直接链接">​</a></h2><p>上文中通过 l2fwd 模拟这个问题看上去挺轻松，但这个问题在真实环境中出现的时候我们只观测到 strace 中有 close stdout 的操作，但是由于代码过于复杂，仔细找了下却没有找到这个逻辑是在哪里被调用的。</p><p>为了解决这个问题，我们想到了一种思路：</p><ol><li>hook c 库 close 函数</li><li>在 hook 函数中判断关闭的 fd 是否为 1，为 1 则回溯函数调用栈帧信息，根据栈帧信息确认出现问题的地方</li><li>指定 LD_PRELOAD 加载 hook close 函数的 so 来复现问题</li></ol><p>hook close 函数的示例代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">_GNU_SOURCE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;unistd.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;dlfcn.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;unistd.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;fcntl.h&gt;</span><span class="token macro property" style="color:#36acaa">           </span><span class="token macro property comment" style="color:#999988;font-style:italic">/* Definition of AT_* constants */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;execinfo.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdlib.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">BACKTRACE_SIZE</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">256</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/* dump the stack of the calling core */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">dump_stack</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">func</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">BACKTRACE_SIZE</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">symb </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">backtrace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> BACKTRACE_SIZE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        symb </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">backtrace_symbols</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">func</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">symb </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%d: [%s]\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> symb</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">size </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                size </span><span class="token operator" style="color:#393A34">--</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">free</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">symb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">BUFFER_SIZE</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">1024</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token class-name">close_t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> fd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">close_t</span><span class="token plain"> old_close</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fd </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">dump_stack</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        old_close </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">dlsym</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">RTLD_NEXT</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"close"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">old_close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用如下命令编译：</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">gcc </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">fPIC </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">shared hook_close</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">c</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">o close</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">so</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ldl</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>复现问题后，排查发现问题指向的函数中没有相关的代码，但位置大致明确。有了这个信息后，仔细分析代码确认问题出在一个对象的析构函数调用中，问题得到解决！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>有些问题的表象简单却不容易定位，对于这些问题可能得结合一些其它的技术来加速。在上文描述的要找到关闭 stdout 的位置时，由于已经确定了进程一定会关闭 stdout，则可以在这个关键路径上下功夫，hook close c 库函数就是一次这样的实践！</p><p>同时也需要注意的是特定的框架设计，可能存在一些限定因素，有时候这些因素并不那么明显，需要对框架的实现细节仔细分析，有这样的过程就能够有所提升！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/杀掉数通引擎导致虚拟机重启问题定位]]></title>
        <id>/dpdk/杀掉数通引擎导致虚拟机重启问题定位</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/杀掉数通引擎导致虚拟机重启问题定位"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p><strong>在虚拟机内重启数通引擎会导致虚机重启</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="环境信息">环境信息<a class="hash-link" href="#环境信息" title="标题的直接链接">​</a></h2><p><strong>arm 虚拟机</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题定位过程">问题定位过程<a class="hash-link" href="#问题定位过程" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-调大-printk-级别后-kill-数通引擎查看串口输出">1. 调大 printk 级别后 kill 数通引擎查看串口输出<a class="hash-link" href="#1-调大-printk-级别后-kill-数通引擎查看串口输出" title="标题的直接链接">​</a></h3><p>串口输出中<strong>未见明显异常信息</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-重命名负责绑定网卡接口到-igb_uio-的程序测试">2. 重命名负责绑定网卡接口到 igb_uio 的程序测试<a class="hash-link" href="#2-重命名负责绑定网卡接口到-igb_uio-的程序测试" title="标题的直接链接">​</a></h3><p>根据过去的经验，在 dpdk 数通引擎运行的时候如果去解绑业务口，也可能会导致系统重启。需要排除负责绑定网卡接口程序的影响。</p><p>重命名并杀掉相关程序后，<strong>kill 引擎后虚机仍旧重启</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-运行-l2fwd-程序并-kill-观察是否重启">3. 运行 l2fwd 程序并 kill 观察是否重启<a class="hash-link" href="#3-运行-l2fwd-程序并-kill-观察是否重启" title="标题的直接链接">​</a></h2><p>l2fwd 代表数通引擎的极简原型，关联大的内容是 igb_uio.ko。使用 l2fwd 测试是怀疑 igb_uio.ko 的影响导致虚机重启。</p><p><strong>测试确认不会重启。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-运行-kni-程序并-kill-观察是否重启">4. 运行 kni 程序并 kill 观察是否重启<a class="hash-link" href="#4-运行-kni-程序并-kill-观察是否重启" title="标题的直接链接">​</a></h3><p>kni 与数通引擎一样都使用了 rte_kni.ko 模块，一旦出现问题可能导致系统异常。使用 kni 程序做相同的测试，以排除 rte_kni.ko 的嫌疑。</p><p><strong>测试确认不会重启。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="5-移动数通引擎使用的一些内核-ko仍旧会重启">5. 移动数通引擎使用的一些内核 ko，仍旧会重启<a class="hash-link" href="#5-移动数通引擎使用的一些内核-ko仍旧会重启" title="标题的直接链接">​</a></h3><p>虚拟机中的数通引擎在启动的时候会加载一些内部功能用到的一些内核 ko，怀疑可能是这部分 ko 的影响。</p><p>重命名 ko 所在的目录后，重新测试，<strong>确认虚机还是会重启</strong>。‘</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="6-重命名-rebootshutdown-命令杀掉数通引擎后仍旧重启">6. 重命名 reboot、shutdown 命令，杀掉数通引擎后仍旧重启<a class="hash-link" href="#6-重命名-rebootshutdown-命令杀掉数通引擎后仍旧重启" title="标题的直接链接">​</a></h3><p>怀疑可能是主动调用 reboot、shutdown 命令重启了虚拟机。重命名这些程序后，测试确认<strong>虚机仍旧会重启。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="初步结论与问题">初步结论与问题<a class="hash-link" href="#初步结论与问题" title="标题的直接链接">​</a></h2><p>初步结论：<strong>问题出在环境上、外部。</strong></p><p>问题 1：在虚拟机内部没有看到任何相关的异常信息，做的排查也没有找到问题，问题是否在外部？</p><p>问题 2：如果是主动重启，dmesg 中会有一些相关日志的输出，然而检查日志发现没有相关内容，是否有其它影响输出的功能？</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="是否宿主机上有人杀了虚拟机">是否宿主机上有人杀了虚拟机<a class="hash-link" href="#是否宿主机上有人杀了虚拟机" title="标题的直接链接">​</a></h2><p>经过上文中一通排查后，怀疑点渐渐向外前进。ps 查看到 kvm 程序的 pid 等信息，怀疑宿主机上有人可能会杀 kvm 程序导致虚机重启。</p><p>由于宿主机上<strong>缺少 gdb、strace</strong>，考虑到还有其它虚机在跑，<strong>不能执行进一步的操作排除问题，直接放弃。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题对称过程">问题对称过程<a class="hash-link" href="#问题对称过程" title="标题的直接链接">​</a></h2><p><strong>目标：</strong></p><p>使用<strong>老镜像跑新的数通引擎</strong></p><p><strong>现状：</strong></p><p>使用<strong>新的镜像在跑新数通引擎</strong></p><p><strong>分析建议：换为老镜像，快速验证是否有相同的问题，有问题再处理</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="几十分钟后确认到的真正的问题">几十分钟后确认到的真正的问题<a class="hash-link" href="#几十分钟后确认到的真正的问题" title="标题的直接链接">​</a></h2><p>几十分钟后，产品反馈问题不在虚拟机内部，是宿主机上启动的一个服务里面<strong>检测到虚拟机不转发报文</strong>就<strong>重启镜像</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="解决方案">解决方案<a class="hash-link" href="#解决方案" title="标题的直接链接">​</a></h2><p>在<strong>宿主机</strong>上关掉了相关服务，重启数通引擎之后设备就没有重启了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题与思考">问题与思考<a class="hash-link" href="#问题与思考" title="标题的直接链接">​</a></h2><ol><li><p><strong>在虚拟机中重启系统时，宿主机上的 kvm 进程会终止并重新创建吗？</strong></p><ol><li><strong>在虚拟机中重启系统，kvm 进程不会终止，pid 不会变化，观测 kvm 进程的 pid 就能够排查问题</strong></li><li><strong>虚拟机内核 crash 自动重启时 kvm 进程的 pid 也不会变化（目前暂时没有条件验证）</strong></li></ol></li><li><p>杀掉数通引擎所带来的直接与间接的影响能否梳理出来？为什么忽略了杀数通引擎带来的报文转发终止的特点呢？l2fwd 也存在报文转发终止问题但是为什么没有相同的问题？是检测有特定的要求？</p><p>直接扎进问题比较<strong>容易关注眼前的现象而忽略稍远距离的现象。没有梳理出来杀掉数通引擎带来的一些间接的影响。</strong></p></li><li><p>kvm 虚机的进程在哪些情况下会变化？</p><p><strong>在宿主机上销毁虚拟机、stop、start 虚拟机、杀掉虚机的 kvm 进程，会导致虚机的 kvm 进程的 pid 变化。</strong></p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题定位过程的重整">问题定位过程的重整<a class="hash-link" href="#问题定位过程的重整" title="标题的直接链接">​</a></h2><ol><li>调大虚机的内核打印级别，复现问题，查看 dmesg 信息</li><li>确认 dmesg 信息没有任何异常后，继续复现问题，在宿主机上观察虚拟机对应的 kvm 程序的 pid 是否变化</li><li>当虚机对应的 kvm 程序的 pid 变化时在宿主机上找问题，没变化时继续在虚机中找问题</li></ol>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/网卡接口绑定驱动及其使用的 bind、unbind、new_id 等 sys 文件]]></title>
        <id>/dpdk/网卡接口绑定驱动及其使用的 bind、unbind、new_id 等 sys 文件</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/网卡接口绑定驱动及其使用的 bind、unbind、new_id 等 sys 文件"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[网卡接口绑定驱动]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="网卡接口绑定驱动">网卡接口绑定驱动<a class="hash-link" href="#网卡接口绑定驱动" title="标题的直接链接">​</a></h2><p>在我的虚拟机中，有如下网络接口：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@virt-debian10:~$ lspci </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Eth'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">01:00.0 Ethernet controller: Red Hat, Inc Virtio network device </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rev 01</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">04:00.0 Ethernet controller: Intel Corporation 82574L Gigabit Network Connection</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">08:00.0 Ethernet controller: Intel Corporation 82574L Gigabit Network Connection</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">09:00.0 Ethernet controller: Intel Corporation 82574L Gigabit Network Connection</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里第一个网络接口为 virtio，后三个都是 e1000e 虚拟网卡 82574L。</p><p>在dpdk 的使用过程中我们常常需要将网卡绑定到不同的驱动上，这一般是通过 dpdk_nic_bind.py 脚本来完成的，这个脚本具体的用法我不在这里赘述，感兴趣的读者可以研究研究。</p><p>注意这里的 01:00.0、04:00.0、08:00.0、09:00.0 表示的是网络接口对应的 pci 号，<strong>这些 pci 号唯一表示一个接口，在绑定驱动与解绑驱动时会使用到。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="绑定网卡接口驱动的具体过程">绑定网卡接口驱动的具体过程<a class="hash-link" href="#绑定网卡接口驱动的具体过程" title="标题的直接链接">​</a></h2><p>网卡接口绑定主要与 bind 与 new_id 两个特殊的文件有关。在我的系统上，我搜索 /sys 下的名为 bind 的文件，搜索到了不同驱动的 bind 文件，截取部分信息如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@virt-debian10:~$ </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">find</span><span class="token plain"> /sys -name </span><span class="token string" style="color:#e3116c">'bind'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/sys/devices/virtual/vtconsole/vtcon0/bind</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/sys/devices/virtual/vtconsole/vtcon1/bind</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/sys/bus/serio/drivers/serio_raw/bind</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/sys/bus/serio/drivers/atkbd/bind</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/sys/bus/pci/drivers/shpchp/bind</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/sys/bus/pci/drivers/agpgart-sis/bind</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/sys/bus/pci/drivers/e1000e/bind</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里我以 e1000e 驱动为例，看看 /sys/bus/pci/dirvers 目录下有那些东东。</p><p>执行 ls 命令查看 /sys/bus/pci/drivers 目录的内容，输出如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@virt-debian10:~$ </span><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> /sys/bus/pci/drivers/e1000e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:04:00.0  0000:08:00.0  0000:09:00.0  </span><span class="token builtin class-name">bind</span><span class="token plain">  module  new_id  remove_id  uevent  unbind</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里的 0000:04:00.0、0000:08:00.0、0000:09:00.0 表示绑定到 e1000e 驱动上的 pci 接口的 pci 号。</p><p>bind 与 new_id 是绑定驱动过程中会使用到的文件，unbind 是解绑驱动过程中会使用到的文件。<strong>具体的绑定与解绑的过程就是向这几个文件中写入规定格式的数据完成的。</strong></p><p>linux kernel 源码目录中的 ABI/testing/sysfs-bus-pci 对这几个文件的描述信息如下：</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-sysbuspcidriversbind">1. /sys/bus/pci/drivers/.../bind<a class="hash-link" href="#1-sysbuspcidriversbind" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        Writing a device location to this file will cause</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        the driver to attempt to bind to the device found at</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this location.  This is useful for overriding default</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        bindings.  The format for the location is: DDDD:BB:DD.F.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        That is Domain:Bus:Device.Function and is the same as</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        found in /sys/bus/pci/devices/.  For example:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # echo 0000:00:19.0 &gt; /sys/bus/pci/drivers/foo/bind</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (Note: kernels before 2.6.28 may require echo -n).</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里写入的 0000:00:19.0 就是上面我们提到过的 pci 号。<strong>对 bind 文件写入每一个接口的 pci 号意味着我们可以将一个网卡上的不同口绑定到不同的驱动上。</strong></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-sysbuspcidriversunbind">2. /sys/bus/pci/drivers/.../unbind<a class="hash-link" href="#2-sysbuspcidriversunbind" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        Writing a device location to this file will cause the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        driver to attempt to unbind from the device found at</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this location.  This may be useful when overriding default</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        bindings.  The format for the location is: DDDD:BB:DD.F.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        That is Domain:Bus:Device.Function and is the same as</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        found in /sys/bus/pci/devices/. For example:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # echo 0000:00:19.0 &gt; /sys/bus/pci/drivers/foo/unbind</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        (Note: kernels before 2.6.28 may require echo -n).</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里向 unbind 文件写入接口的 pci 号就会解除当前绑定的驱动。一个接口可以不绑定到任何驱动上面，不过我们常常不会这样去做。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-sysbuspcidriversnew_id">3. /sys/bus/pci/drivers/.../new_id<a class="hash-link" href="#3-sysbuspcidriversnew_id" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        Writing a device ID to this file will attempt to</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dynamically add a new device ID to a PCI device driver.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        This may allow the driver to support more hardware than</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        was included in the driver's static device ID support</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        table at compile time.  The format for the device ID is:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        VVVV DDDD SVVV SDDD CCCC MMMM PPPP.  That is Vendor ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Device ID, Subsystem Vendor ID, Subsystem Device ID,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Class, Class Mask, and Private Driver Data.  The Vendor ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        and Device ID fields are required, the rest are optional.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Upon successfully adding an ID, the driver will probe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for the device and attempt to bind to it.  For example:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # echo "8086 10f5" &gt; /sys/bus/pci/drivers/foo/new_id</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>向 new_id 中写入设备 id，将会动态的在 pci 设备驱动中添加一个新的设备 id。这种功能允许驱动添加更多的硬件而非仅有在编译时包含到驱动中的静态支持设备 ID 列表中的硬件。</p><p><strong>写入这个文件的格式中，Vendor Id 与 Device Id 字段是必须的，其它的字段可以不指定。</strong></p><p>成功添加一个设备 ID 时，驱动会尝试 probe 系统中匹配到的设备并尝试绑定到它之上。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-sysbuspcidriversremove_id">4. /sys/bus/pci/drivers/.../remove_id<a class="hash-link" href="#4-sysbuspcidriversremove_id" title="标题的直接链接">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        Writing a device ID to this file will remove an ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        that was dynamically added via the new_id sysfs entry.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        The format for the device ID is:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        VVVV DDDD SVVV SDDD CCCC MMMM.  That is Vendor ID, Device</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ID, Subsystem Vendor ID, Subsystem Device ID, Class,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        and Class Mask.  The Vendor ID and Device ID fields are</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        required, the rest are optional.  After successfully</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        removing an ID, the driver will no longer support the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        device.  This is useful to ensure auto probing won't</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        match the driver to the device.  For example:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # echo "8086 10f5" &gt; /sys/bus/pci/drivers/foo/remove_id</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>remove_id 中写入的格式与 new_id 的写入格式相同。写入 remove_id 可以用来确保内核不会自动 probe 匹配到这个驱动的设备。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-绑定解绑网卡接口时的一些问题">dpdk 绑定、解绑网卡接口时的一些问题<a class="hash-link" href="#dpdk-绑定解绑网卡接口时的一些问题" title="标题的直接链接">​</a></h2><p>dpdk 中最常使用的驱动是 igb_uio，我们经常需要将网卡接口绑定到 igb_uio 上。我们必须了解的是 igb_uio 驱动并没有添加任何的静态设备 id 列表，这表明初始状态它是不支持任何设备的。</p><p>igb_uio 驱动与 pci 驱动类似，在其源码中可以找到如下 pci_driver 结构体。</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">608</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_driver</span><span class="token plain"> igbuio_pci_driver </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">609</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"igb_uio"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">610</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id_table </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">611</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">probe </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> igbuio_pci_probe</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">612</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">remove </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> igbuio_pci_remove</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">613</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里 id_table 设置为 NULL 表示驱动中没有静态添加任何支持的设备 id 列表，这意味着加载了 igb_uio 驱动后我们不能直接写入 bind 文件绑定驱动。</p><p>为了更清楚的说明这个 id_table，我是用 e1000e 驱动中的相关数据结构进行对比。</p><p>下面是 e1000e 驱动中 netdev.c 中定义的 pci_driver 结构体的内容：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">7556</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* PCI Device API Driver */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7557</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_driver</span><span class="token plain"> e1000_driver </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7558</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> e1000e_driver_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7559</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">id_table </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> e1000_pci_tbl</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7560</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">probe    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> e1000_probe</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7561</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">remove   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> e1000_remove</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7562</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">driver   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7563</span><span class="token plain">         </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">pm </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">e1000_pm_ops</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7564</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7565</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">shutdown </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> e1000_shutdown</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7566</span><span class="token plain">     </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">err_handler </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">e1000_err_handler</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">7567</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里的 id_table 与 igb_uio 不同，它指向了 e1000_pci_tbl 这个数组。e1000_pci_tbl 数组的部分内容截取如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_device_id</span><span class="token plain"> e1000_pci_tbl</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82571EB_COPPER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> board_82571 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82571EB_FIBER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> board_82571 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82571EB_QUAD_COPPER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> board_82571 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82571EB_QUAD_COPPER_LP</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      board_82571 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82572EI</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> board_82572 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82572EI_COPPER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> board_82572 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82572EI_FIBER</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> board_82572 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82572EI_SERDES</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> board_82572 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82573E</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> board_82573 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82573E_IAMT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> board_82573 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82573L</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> board_82573 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_82574L</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> board_82574 </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们看到在 e1000_pci_tbl 中有很多型号的网卡设备。82574L 也是其中的一款。82574L 网卡对应的 Vendor Id 与 Device Id 在上述列表中，在驱动初始化的时候添加到了系统中，这样我们就可以绑定 82574L 网卡到 e1000e 驱动上。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="先写入数据到-new_id-添加设备-id-然后进行绑定">先写入数据到 new_id 添加设备 id 然后进行绑定<a class="hash-link" href="#先写入数据到-new_id-添加设备-id-然后进行绑定" title="标题的直接链接">​</a></h3><p>为了成功绑定接口到 igb_uio 上，我们首先需要在 igb_uio 中添加支持的设备，这个可以通过写入数据到 new_id 添加设备 id 后写入 bind 文件来完成。<strong>注意同一个设备 id 可以写入多次到 new_id 中，要移除也需要写入相同的次数到 remove_id 中。注意写入到 remove_id 并不会解除绑定。</strong></p><p>dpdk-17.04 中 dpdk-devbind.py 脚本中相关的代码如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> driver </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> dpdk_drivers:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        filename </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/sys/bus/pci/drivers/%s/new_id"</span><span class="token plain"> % driver</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            f </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">filename, </span><span class="token string" style="color:#e3116c">"w"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        except:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Error: bind failed for %s - Cannot open %s"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  % </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_id, filename</span><span class="token punctuation" style="color:#393A34">))</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token builtin class-name">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            f.write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%04x %04x"</span><span class="token plain"> % </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"Vendor"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">, dev</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"Device"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">))</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            f.close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        except:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Error: bind failed for %s - Cannot write new PCI ID to "</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  </span><span class="token string" style="color:#e3116c">"driver %s"</span><span class="token plain"> % </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_id, driver</span><span class="token punctuation" style="color:#393A34">))</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token builtin class-name">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># do the bind by writing to /sys</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    filename </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/sys/bus/pci/drivers/%s/bind"</span><span class="token plain"> % driver</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        f </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">filename, </span><span class="token string" style="color:#e3116c">"a"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    except:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Error: bind failed for %s - Cannot open %s"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              % </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_id, filename</span><span class="token punctuation" style="color:#393A34">))</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> saved_driver is not None:  </span><span class="token comment" style="color:#999988;font-style:italic"># restore any previous driver</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            bind_one</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_id, saved_driver, force</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin class-name">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        f.write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        f.close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述代码首先写入 new_id 中添加设备 id 到 dpdk drivers（例如 igb_uio）中，然后写入 bind 文件。</p><p>这样确保了首先有注册的设备 id，有了这个设备 id 总线才能够 match 到驱动执行 probe 操作。没有注册的设备 id，pci 总线不会匹配到指定的驱动，也无法将设备绑定到相应的驱动上。</p><p>echo "Vendor id device id" &gt; new_id 的时候会 scan，用 new_id 中的设备 id 匹配系统中的接口，将未绑定到任何驱动上的接口绑定到对应的驱动上。</p><p><strong>new_id 的写入的参数中没有 pci 号，因此不能指定只绑定相同型号网卡的单个口到驱动中。除非其它口已经绑定到了其它驱动，不然这些口都会被绑定。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="绑定失败的情况">绑定失败的情况<a class="hash-link" href="#绑定失败的情况" title="标题的直接链接">​</a></h2><ol><li>new_id 没有添加，不会 match 到指定的驱动</li><li>probe 过程异常，绑定失败
这种情况可以通过查看 dmesg 信息来分析定位。</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="写入-new_id-设备-id-触发总线匹配驱动自动-probe-问题">写入 new_id 设备 id 触发总线匹配驱动自动 probe 问题<a class="hash-link" href="#写入-new_id-设备-id-触发总线匹配驱动自动-probe-问题" title="标题的直接链接">​</a></h2><p>上文中提到过当写入设备 id 到 new_id 文件中会出触发总线匹配系统中的接口，属于写入的设备 id 的设备并且没有绑定到任何驱动上的接口将会全部会被绑定到 new_id 所属的驱动。</p><p>例如系统中有两个 82574L 网卡接口，都没有绑定驱动，这时我们写入 82574L 的设备 id 到 igb_uio 驱动对应的 new_id 文件中，会导致这两个口都绑定到 igb_uio 上。</p><p>如果这种行为对功能有所影响，那么你可以选择在绑定到 igb_uio 之前先将接口绑定到其它驱动上（一般是官方驱动），这样在写入 new_id 文件时，已经绑定到其它驱动的接口就会被 skip。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/试玩 dpdk ebfp 功能]]></title>
        <id>/dpdk/试玩 dpdk ebfp 功能</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/试玩 dpdk ebfp 功能"/>
        <updated>2022-06-21T00:32:49.000Z</updated>
        <summary type="html"><![CDATA[ebpf 是什么？]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ebpf-是什么">ebpf 是什么？<a class="hash-link" href="#ebpf-是什么" title="标题的直接链接">​</a></h2><p>eBPF 是一个在内核中运行的虚拟机，支持通过 C 等高级语言编码生成eBPF 指令码。eBPF 指令码从用户态加载到内核后以本地代码的形式和速度去执行，现已支持内核多个子系统的观测点，提供了几乎无限的可观测性。</p><p>ebpf 主要工作流程如下图：
<img loading="lazy" src="https://img-blog.csdnimg.cn/91f3ab72c26942a5860d38b9db93f52b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbG9uZ3l1X3dseg==,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-对-ebpf-的支持">dpdk 对 ebpf 的支持<a class="hash-link" href="#dpdk-对-ebpf-的支持" title="标题的直接链接">​</a></h2><p>dpdk 18.0 引入 ebpf，实现为 librte_bpf 库。支持的特性：</p><ol><li>支持 ebpf 架构（不支持 tail-pointer）</li><li>x86_64 与 arm64 架构支持使用 JIT将 ebpf 代码编译为 native code</li><li>支持 ebpf 代码校验支持用户定义的辅助函数</li><li>支持 rx/tx 包过滤</li><li>支持 ebpf 代码访问 mbuf 结构</li></ol><p>不支持的特性：</p><ol><li>cbpf</li><li>maps</li><li>stail-pointer calls</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-ebpf-的使用过程">dpdk ebpf 的使用过程<a class="hash-link" href="#dpdk-ebpf-的使用过程" title="标题的直接链接">​</a></h2><p>通过注册 rx、tx 函数内的 callback 来实现过滤功能，最终控制的是<strong>返回给上层、传输给下层的特定过滤格式的 mbuf</strong>。</p><p>过滤功能的实现通过 epbf 指令来完成，支持虚拟机模拟与 jit 两种方式。jit 会将 bpf 指令转化为 x86 指令来运行。</p><p>目前的编程方式：用 c 等高级语言编写 ebpf 过滤操作，然后编译为 bpf 指令码来加载。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-中上手-ebpf-的一些前置条件">dpdk 中上手 ebpf 的一些前置条件<a class="hash-link" href="#dpdk-中上手-ebpf-的一些前置条件" title="标题的直接链接">​</a></h2><ol><li><p>config 配置文件中使能如下配置：</p><p>RTE_LIBRTE_GRO</p><p>RTE_LIBRTE_GSO</p><p>RTE_LIBRTE_BPF</p><p>RTE_LIBRTE_BPF_ELF
RTE_TEST_PMD</p><p>RTE_ETHDEV_RXTX_CALLBACKS</p></li><li><p>使用 clang 编译 examples/bpf/ 目录下的文件为 bpf 指令码</p></li><li><p>运行 testpmd，通过 bpf-load 命令加载第二步生成的指令码</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用-dpdk-示例代码上手-dpdk-ebpf">使用 dpdk 示例代码上手 dpdk ebpf<a class="hash-link" href="#使用-dpdk-示例代码上手-dpdk-ebpf" title="标题的直接链接">​</a></h2><p>ebpf 过滤 c 程序源码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdint.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;net/ethernet.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;netinet/ip.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;netinet/udp.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;arpa/inet.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">uint64_t</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">entry</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">pkt</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ether_header</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ether_header </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">pkt</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ether_header</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ether_type </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">htons</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0x0800</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">iphdr</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">iphdr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ether_header </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">iphdr</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">protocol </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">17</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">iphdr</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">frag_off </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0x1ffff</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        iphdr</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">daddr </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">htonl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0x1020304</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> hlen </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> iphdr</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ihl </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">udphdr</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">udphdr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">iphdr </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> hlen</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">udphdr</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dest </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">htons</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">5000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述代码实现类似 <strong>tcpdump -s 1 -d 'dst 1.2.3.4 &amp;&amp; udp &amp;&amp; dst port 5000</strong>’ 命令行的功能，过滤出目的 ip 为 1.2.3.4 且目的端口为 5000 的 udp 报文。</p><p>上述源码摘自 <strong>dpdk</strong> 工程中的 <strong>examples/bpf/t1.c</strong>，编译命令如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">clang </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">O2 </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">U __GNUC__ </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">target bpf </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">c t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>编译成功后，运行 <strong>testpmd</strong> 程序，执行 <strong>bpf-load</strong> 命令，示例如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">testpmd</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> bpf</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">load rx </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> J </span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">examples</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">bpf</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">t1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_bpf_elf_load</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fname</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"./examples/bpf/t1.o"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> sname</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">".text"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> successfully creates </span><span class="token number" style="color:#36acaa">0x7f4f2d9dc000</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">jit</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">func</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x7f4f2d9b0000</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sz</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">93</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0</span><span class="token operator" style="color:#393A34">:</span><span class="token plain">Success</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>执行 <strong>bpf-unload</strong> 命令即可卸载 ebpf 规则。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-ebpf--的安全性">dpdk ebpf  的安全性<a class="hash-link" href="#dpdk-ebpf--的安全性" title="标题的直接链接">​</a></h2><p>dpdk ebpf 实现做了如下安全性保障：</p><ol><li>参数合法性校验</li><li>ebpf 指令合法性（正确的格式、有效字段值等）校验</li><li>校验是否存在不可达的指令或循环</li><li>加载前模拟执行所有可能存在的分支中的 ebpf 指令
校验失败则终止加载
其它的安全保障：</li><li>ebpf jit 翻译完成后将 rte_bpf 所在的页设置为 READ ONLY</li><li>ebpf jit 翻译后生成的 native code 存储的页设置为读与可执行</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-ebpf-框架的性能负载">dpdk ebpf 框架的性能负载<a class="hash-link" href="#dpdk-ebpf-框架的性能负载" title="标题的直接链接">​</a></h2><p>测试方法：</p><ol><li>基于 dpdk-19.11 testpmd 测试</li><li>编写一个直接返回 1 的 ebpf 空规则</li><li>使用 testpmd 加载第二步生成的 dpdk 规则</li><li>持续打流 100% 带宽观测性能数据</li></ol><p>在飞腾 D2000 上使用一个两万兆网卡测试，测试确定对 512、1518 字节性能几乎没有影响，64 字节下降了不到 3%。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考链接">参考链接<a class="hash-link" href="#参考链接" title="标题的直接链接">​</a></h2><p><a href="https://blog.csdn.net/force_eagle/article/details/117365557" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/force_eagle/article/details/117365557</a></p><p><a href="https://doc.dpdk.org/guides/testpmd_app_ug/testpmd_funcs.html#bpf-functions" target="_blank" rel="noopener noreferrer">https://doc.dpdk.org/guides/testpmd_app_ug/testpmd_funcs.html#bpf-functions</a></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk kni 口 ifconfig up down 的执行流程]]></title>
        <id>/dpdk/dpdk kni 口 ifconfig up down 的执行流程</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk kni 口 ifconfig up down 的执行流程"/>
        <updated>2022-06-20T23:48:14.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>用户执行 ifconfig netcard down、up 时 rte_kni 模块中的哪部分起作用？</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ifconfig-up-down-接口的正常流程">ifconfig up down 接口的正常流程<a class="hash-link" href="#ifconfig-up-down-接口的正常流程" title="标题的直接链接">​</a></h2><p>ifconfig 是通过调用 ioctl 来完成工作的。期间经过了一系列的函数，最终调用到的是在网卡驱动在 netdev 中注册的 netdev_ops 虚函数表中的函数指针。</p><p>netdev_ops 虚函数表中与 up 、down 相关的虚函数如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ndo_open</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ndo_close</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-中-kni-口-ifconfig-up-down-的不同流程">dpdk 中 kni 口 ifconfig up down 的不同流程<a class="hash-link" href="#dpdk-中-kni-口-ifconfig-up-down-的不同流程" title="标题的直接链接">​</a></h2><p>dpdk kni 中并不会调用 ndo_open、ndo_start 虚函数接口，它会发送一个控制命令到用户态程序中，用户态程序接收到这个控制命令后，判断命令的类型，然后调用 pmd 中实现的 start 与 stop 函数来完成 up、down。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-中-kni-模块-ifconfig-up-down-的具体流程">dpdk 中 kni 模块 ifconfig up down 的具体流程<a class="hash-link" href="#dpdk-中-kni-模块-ifconfig-up-down-的具体流程" title="标题的直接链接">​</a></h2><p>kni 模块中关联的函数是 kni_net_open 与 kni_net_close，这两个函数在 kni_net.c 中被定义。</p><p>进一步的分析上面提到的两个函数发现它们会调用 <strong>kni_net_process_request</strong> 来通过共享队列的方式向 dpdk 的用户态程序发送命令，真正的 up、down 实际是在用户态程序中完成的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-用户态程序注册的-rte_kni_ops-结构">dpdk 用户态程序注册的 rte_kni_ops 结构<a class="hash-link" href="#dpdk-用户态程序注册的-rte_kni_ops-结构" title="标题的直接链接">​</a></h2><p>dpdk 用户态程序需要预先注册一个 rte_kni_ops 结构，相关的代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    ops</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">config_network_if </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> kni_config_network_interface</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ops</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">set_ethtools_cmd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> kni_set_ethtool</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个 ops 作为 rte_kni_alloc 函数的第三个参数传入到 dpdk 中。</p><p>这里需要关注的是 <strong>kni_config_network_interface</strong> 这个函数。这个函数中会完成网络设备的 up 与 down。</p><p>dpdk-19.11 examples 中的 kni 代码中就是 kni_config_network_interface 的标准实现。</p><p>其代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/* Callback for request of configuring network interface up/down */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">kni_config_network_interface</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">uint16_t</span><span class="token plain"> port_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">uint8_t</span><span class="token plain"> if_up</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token function" style="color:#d73a49">rte_eth_dev_is_valid_port</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> APP</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Invalid port id %d\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">EINVAL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INFO</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> APP</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Configure network interface of %d %s\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    port_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> if_up </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"up"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"down"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_atomic32_inc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_pause</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">if_up </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Configure network interface up */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_eth_dev_stop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eth_dev_start</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Configure network interface down */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_eth_dev_stop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">rte_atomic32_dec</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">kni_pause</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> APP</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Failed to start port %d\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到它实际是调用 <strong>rte_eth_dev_stop、rte_eth_dev_start</strong> 来完成接口的 up、down。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="rte_kni_handle_request">rte_kni_handle_request<a class="hash-link" href="#rte_kni_handle_request" title="标题的直接链接">​</a></h2><p>上文中我提到 kni 会通过共享队列发送一个控制消息到用户态，在 dpdk 用户态程序中需要轮询获取 kni 共享队列中的消息，这一般是在收发包间隙或者单独创建的一个管理线程中执行的。</p><p>其核心逻辑是调用 <strong>rte_kni_handle_request</strong> 函数进行处理。dpdk-19.11 中该函数的实现部分内容截取如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">rte_kni_handle_request</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_kni</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">kni</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> ret</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_kni_request</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">req </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* Get request mbuf */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">kni_fifo_get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">req_q</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">req</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* It is OK of can not getting the request mbuf */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">sync_addr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_LOG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ERR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> KNI</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Wrong req pointer %p\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> req</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* Analyze the request and call the relevant actions for it */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">req</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">req_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_KNI_REQ_CHANGE_MTU</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Change MTU */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ops</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">change_mtu</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            req</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ops</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">change_mtu</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ops</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            req</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">new_mtu</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> RTE_KNI_REQ_CFG_NETWORK_IF</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* Set network interface up/down */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ops</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">config_network_if</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            req</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ops</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">config_network_if</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ops</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                 req</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">if_up</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述代码中 <strong>kni_fifo_get</strong> 负责从共享队列中获取消息，获取成功后校验消息是否合法，合法的消息则根据 req_id 进行分发，<code>RTE_KNI_REQ_CFG_NETWORK_IF</code>类型的消息会调用 kni 初始化中注册的 ops 中的 config_network_if 接口来处理。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>对 dpdk kni 口执行 ifconfig up down 操作会涉及内核与用户态的通信，kni 共享队列实现了内核与用户态的一种高效的通信方式。可以看到对 dpdk kni 口执行 up、down 其流程与普通的网卡驱动处理方式不同，实际是调用用户态的 pmd 驱动来完成的。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 中 rte_config.h 配置文件生成的问题]]></title>
        <id>/dpdk/dpdk 中 rte_config.h 配置文件生成的问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 中 rte_config.h 配置文件生成的问题"/>
        <updated>2022-06-20T23:48:14.000Z</updated>
        <summary type="html"><![CDATA[为什么要生成 rte_config.h 头文件]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="为什么要生成-rte_configh-头文件">为什么要生成 rte_config.h 头文件<a class="hash-link" href="#为什么要生成-rte_configh-头文件" title="标题的直接链接">​</a></h2><p>dpdk 有单独的一套 config 配置文件，在 RTE_TARGET 变量指定的目标目录下需要生成一个 .config 文件，这个 .config 文件用来配置 dpdk 中不同组件的功能。</p><p>dpdk 大部分代码都是用 C 语言编写的，不能够直接使用 .config 文件。在 dpdk 编译过程中会根据 RTE_TARGET 变量指定的目标目录中的 .config 文件生成 rte_config.h 文件，dpdk 内部实际是使用 rte_config.h 文件工作的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-编译过程中生成-rte_target-目录中的-include-目录">dpdk 编译过程中生成 RTE_TARGET 目录中的 include 目录<a class="hash-link" href="#dpdk-编译过程中生成-rte_target-目录中的-include-目录" title="标题的直接链接">​</a></h2><p>dpdk 编译时首先会在 include 目录中生成需要使用的头文件，一个标准的目录内容如下：
<img loading="lazy" src="https://img-blog.csdnimg.cn/20200805105306287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvbmd5dV93bHo=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" class="img_ev3q">从上图中可以发现 rte_config.h 文件的颜色与其他文件、目录的颜色不同，这里 ls 用不同的颜色标注了不同的文件类型。</p><p>rte_config.h 是个<strong>普通文件</strong>，其他的头文件都是<strong>链接文件</strong>，这是 rte_config.h 的特别之处。</p><p>ls -l 查看 rte_config.h 与任意一个其它的头文件信息，输出如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[localhost include]$ ls -lh rte_eal.h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lrwxrwxrwx 1 xx xx 45 Aug  4 19:15 rte_eal.h -&gt; ../../lib/librte_eal/common/include/rte_eal.h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[localhost include]$ ls -lh ./rte_config.h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 xx xx 11K Aug  4 15:55 ./rte_config.h</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到 rte_eal.h 是一个链接文件，指向 dpdk 源码目录中的头文件；rte_config.h 则是一个普通文件。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rte_configh-文件的生成过程">rte_config.h 文件的生成过程<a class="hash-link" href="#rte_configh-文件的生成过程" title="标题的直接链接">​</a></h3><p>上文中已经提到过 rte_config.h 文件是使用 .config 文件生成的，这里分析下具体的生成过程。</p><p>dpdk 源码目录下 mk 子目录中的  rte.sdkconfig.mk Makefile 文件中描述了 rte_config.h 的生成过程。</p><p>相关的 Makefile 脚本内容如下：</p><div class="language-Makefile codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-Makefile codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$(RTE_OUTPUT)/include/rte_config.h: $(RTE_OUTPUT)/.config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        $(Q)rm -rf $(RTE_OUTPUT)/include $(RTE_OUTPUT)/app \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                $(RTE_OUTPUT)/hostapp $(RTE_OUTPUT)/lib \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                $(RTE_OUTPUT)/hostlib $(RTE_OUTPUT)/kmod $(RTE_OUTPUT)/build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        $(Q)mkdir -p $(RTE_OUTPUT)/include</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        $(Q)$(RTE_SDK)/scripts/gen-config-h.sh $(RTE_OUTPUT)/.config \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                &gt; $(RTE_OUTPUT)/include/rte_config.h</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的格式是 Makefile 文件的写法。可以看到目标 rte_config.h 文件依赖 .config 文件来生成。
需要更新 rte_config.h 文件时，会执行如下步骤：</p><ol><li>删除 RTE_TARGET 目录中的 include app lib hostlib kmod 等中间生成的目录</li><li>重新创建 RTE_TARGET include 目录</li><li>调用 gen-config-h.sh 文件生成 rte_config.h，重定向会清空已经存在的 rte_config.h 文件内容</li></ol><p>gen-config-h.sh 脚本内容如下：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token shebang important">#!/bin/sh</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"#ifndef __RTE_CONFIG_H"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"#define __RTE_CONFIG_H"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> CONFIG_ </span><span class="token variable" style="color:#36acaa">$1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> -v </span><span class="token string" style="color:#e3116c">'^[ \t]*#'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sed</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'s,CONFIG_\(.*\)=y.*$,#undef \1\</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">#define \1 1,'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sed</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'s,CONFIG_\(.*\)=n.*$,#undef \1,'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sed</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'s,CONFIG_\(.*\)=\(.*\)$,#undef \1\</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">#define \1 \2,'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sed</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'s,\# CONFIG_\(.*\) is not set$,#undef \1,'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"#endif /* __RTE_CONFIG_H */"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述脚本中的 $1 就是 .config 文件的路径，这个脚本用来生成 rte_config.h 文件。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="什么时候需要生成-rte_configh-文件">什么时候需要生成 rte_config.h 文件？<a class="hash-link" href="#什么时候需要生成-rte_configh-文件" title="标题的直接链接">​</a></h3><p>按照 Makefile 的规则，目标文件并不是在任何时候都会更新。只有在以下两种情况下 rte_config.h 文件会更新：</p><ol><li>目标文件不存在时</li><li>目标文件存在且时间戳落后于依赖文件时</li></ol><p>当 rte_config.h 文件不存在时，dpdk 在编译时需要首先根据 rte_config.h 文件生成，这样的逻辑没有问题。</p><p>当 rte_config.h 文件存在时，dpdk 在编译时需要检查时间戳来判断是否需要重新生成，这里就会判断 .config 文件与 rte_config.h 文件的时间戳，只有当 rte_config.h 时间戳比 .config 文件早时（落后于依赖文件时）才会重新生成。</p><p>这里就有一个潜在的问题。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="svn-库中-rte_target-目标目录中-include-目录存在-rte_configh-的情况">svn 库中 RTE_TARGET 目标目录中 include 目录存在 rte_config.h 的情况<a class="hash-link" href="#svn-库中-rte_target-目标目录中-include-目录存在-rte_configh-的情况" title="标题的直接链接">​</a></h3><p>上面我已经说明了 rte_config.h 文件更新的时机，在我们维护的 dpdk 版本中 RTE_TARGET 目标目录中 include 存在 rte_config，因此只有当 rte_config.h 时间戳比 .config 文件早的时候，rte_config.h 文件才会重新生成，否则它会使用 svn 库中存在的版本。</p><p>我重新拉取一个 dpdk 版本，然后查看 .config 文件与 rte_config.h 文件的时间戳，输出信息如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ls -l --full-time .config ./include/rte_config.h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 xx xx 15969 2020-08-05 11:37:11.780409454 +0800 .config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-rw-rw-r-- 1 xx xx 10695 2020-08-05 11:37:11.781409454 +0800 ./include/rte_config.h</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到 rte_config.h 的时间戳要比 .config 晚，所以在这种情况下 rte_config.h 文件不会更新。</p><p>目标目录中执行 make V=1 打印详细信息，有如下输出</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[localhost x86_64-native-linuxapp-gcc]$ make V=1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make -f /tmp/dpdk-16.04/mk/rte.sdkconfig.mk checkconfig</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make -f /tmp/dpdk-16.04/mk/rte.sdkconfig.mk \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        headerconfig NODOTCONF=1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make -s depdirs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make -f /tmp/dpdk-16.04/mk/rte.sdkbuild.mk all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">== Build lib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make S=lib -f /tmp/dpdk-16.04/lib/Makefile -C /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/build/lib all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">== Build lib/librte_compat</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  SYMLINK-FILE include/rte_compat.h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ln -nsf `/tmp/dpdk-16.04/scripts/relpath.sh /tmp/dpdk-16.04/lib/librte_compat/rte_compat.h /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include` /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述输出中没有执行生成 rte_config.h 的操作。</p><p>这时我们修改 .config 文件的内容，例如修改 MAX_ETHPORTS 为 128，相关修改如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Index: .config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">===================================================================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--- .config     (revision 19876)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+++ .config     (working copy)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ -129,7 +129,7 @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> # Compile generic ethernet library</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> CONFIG_RTE_LIBRTE_ETHER=y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> CONFIG_RTE_LIBRTE_ETHDEV_DEBUG=n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-CONFIG_RTE_MAX_ETHPORTS=64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+CONFIG_RTE_MAX_ETHPORTS=128</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> CONFIG_RTE_MAX_QUEUES_PER_PORT=1024</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> CONFIG_RTE_LIBRTE_IEEE1588=n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> CONFIG_RTE_ETHDEV_QUEUE_STAT_CNTRS=16</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p> 修改完成后，重新执行 make V=1 有如下输出：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">make -f /tmp/dpdk-16.04/mk/rte.sdkconfig.mk checkconfig</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">make -f /tmp/dpdk-16.04/mk/rte.sdkconfig.mk \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        headerconfig NODOTCONF=1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -rf /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/app \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/hostapp /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/lib \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/hostlib /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/kmod /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mkdir -p /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/tmp/dpdk-16.04/scripts/gen-config-h.sh /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/.config \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        &gt; /tmp/dpdk-16.04/x86_64-native-linuxapp-gcc/include/rte_config.h</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到这次 rte_config.h 文件确实更新了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="需要提交-rte_configh-文件的修改吗">需要提交 rte_config.h 文件的修改吗？<a class="hash-link" href="#需要提交-rte_configh-文件的修改吗" title="标题的直接链接">​</a></h2><p>上面的操作是没有问题的，在这个基础上进行 release 也是没有问题的。</p><p><strong>但是我们在提交对 .config 文件的修改时，很少有人会同步修改 svn 中的 rte_config.h 文件，这样就存在了一个隐患。</strong></p><p>当其他人<strong>重新拉取 dpdk svn 编译时</strong>，由于 svn 中<strong>存在 rte_config.h 且 rte_config.h 文件的时间戳比 .config 文件晚</strong>，这次编译将<strong>不会重新成 rte_config.h 文件</strong>，这样<strong>一直使用的就是 svn 库中存在的 rte_config.h 文件</strong>，这就可能<strong>造成问题</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="最终的解决方案">最终的解决方案<a class="hash-link" href="#最终的解决方案" title="标题的直接链接">​</a></h2><p>同步修改 svn 库中的 rte_config.h 文件能够避免这个问题，但是不是很好的解决方案。</p><p>实际上，我们不应该在 svn 的源码路径中管理这些编译过程中会<strong>自动生成的文件</strong>，这样一方面可能<strong>干扰到正常的编译过程</strong>，另一方面也可能在我们提交修改时出现遗漏从而埋下一个隐患。</p><p>故而针对这个问题，选择直接删除 dpdk svn 库中的 include 目录即可，这样每次 rte_config.h 文件都能根据 .config 文件来更新，不会产生 .config 文件不生效的问题。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 中 rte_eth_link_get_wait、nowait 函数研究]]></title>
        <id>/dpdk/dpdk 中 rte_eth_link_get_wait、nowait 函数研究</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 中 rte_eth_link_get_wait、nowait 函数研究"/>
        <updated>2022-06-20T23:48:14.000Z</updated>
        <summary type="html"><![CDATA[对 rteethlinkgetwait\nowait 函数的研究]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="对-rte_eth_link_get_waitnowait-函数的研究">对 rte_eth_link_get_wait\nowait 函数的研究<a class="hash-link" href="#对-rte_eth_link_get_waitnowait-函数的研究" title="标题的直接链接">​</a></h2><p>与 rte_eth_link_get_nowait 函数功能类似的函数是 rte_eth_link_get 函数。 这两个函数的主要逻辑如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">RTE_ETH_VALID_PORTID_OR_RET</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        dev </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">rte_eth_devices</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">port_id</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">intr_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lsc </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">rte_eth_dev_atomic_read_link_status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> eth_link</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">RTE_FUNC_PTR_OR_RET</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_ops</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">link_update</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_ops</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">link_update</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* 1 =&gt; wait，0 =&gt; no wait */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">eth_link </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_link</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使能-lsc-中断的情况">使能 lsc 中断的情况<a class="hash-link" href="#使能-lsc-中断的情况" title="标题的直接链接">​</a></h2><p>如果使能了 lsc——link status change 中断，则直接原子读取 dev 中的 data-&gt;dev_link 成员，根据读取到的结果来判断链接状态是否改变。使用这种方式的应用程序需要注册一个 lsc 中断的回调函数，可以参考 examples/link_status_interrupt。</p><p>在 link_status_interrupt 的 demo 中，注册 lsc 中断回调函数的语句如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">rte_eth_dev_callback_register</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">portid</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        RTE_ETH_EVENT_INTR_LSC</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> lsi_event_callback</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在 lsi_event_callback 函数的核心是调用 rte_eth_link_get_nowait 来获取链路 状态。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="未使能-lsc-中断的情况">未使能 lsc 中断的情况<a class="hash-link" href="#未使能-lsc-中断的情况" title="标题的直接链接">​</a></h2><p>如果没有使用 lsc 中断，则调用 pmd 驱动中实现的 dev_ops-&gt;link_update 函数来完成。 wait 与 nowait 的区别就是在 link_update 函数中体现的。</p><p><strong>一般来说 wait 方式倾向于检测到接口 up 状态</strong>，在设定的时间内（9s) 内不断的轮询接口状态，当<strong>获取到一次 up 就立刻返回</strong>，或者<strong>当时间耗尽时仍旧为 down 则返回 down 的状态</strong>。</p><p>nowait 方式则不存在这种倾向，它直接读取接口的当前状态返回。</p><p>这里 link_update 的返回值表示<strong>链路状态与上一次的状态相比是否有变化</strong>，有变化则返回 0，无变化则返回 -1。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ixgbe-驱动中-link_update-函数的实现">ixgbe 驱动中 link_update 函数的实现<a class="hash-link" href="#ixgbe-驱动中-link_update-函数的实现" title="标题的直接链接">​</a></h2><p>ixgbe pmd 驱动中 link_update 函数的源码在 ixgbe_ethdev.c 文件中实现，摘录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">ixgbe_dev_link_update</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_dev</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> wait_to_complete</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">ixgbe_hw</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">hw </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">IXGBE_DEV_PRIVATE_TO_HW</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_private</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_eth_link</span><span class="token plain"> link</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ixgbe_link_speed link_speed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> IXGBE_LINK_SPEED_UNKNOWN</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> link_up</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> diag</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_status </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_LINK_DOWN</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_speed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_duplex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_LINK_HALF_DUPLEX</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">memset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">old</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">old</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_ixgbe_dev_atomic_read_link_status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">old</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hw</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">mac</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_link_status </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* check if it needs to wait to complete, if lsc interrupt is enabled */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">wait_to_complete </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">data</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">dev_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">intr_conf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lsc </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                diag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ixgbe_check_link</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">link_speed</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">link_up</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                diag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ixgbe_check_link</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hw</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">link_speed</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">link_up</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">diag </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_speed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_SPEED_NUM_100M</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_duplex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_LINK_FULL_DUPLEX</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">rte_ixgbe_dev_atomic_write_link_status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">link</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_status </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_status</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">link_up </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">rte_ixgbe_dev_atomic_write_link_status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">link</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_status </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_status</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_status </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_LINK_UP</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_duplex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_LINK_FULL_DUPLEX</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">link_speed</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">default</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> IXGBE_LINK_SPEED_UNKNOWN</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_duplex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_LINK_FULL_DUPLEX</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_speed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_SPEED_NUM_100M</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> IXGBE_LINK_SPEED_100_FULL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_speed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_SPEED_NUM_100M</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> IXGBE_LINK_SPEED_1GB_FULL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_speed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_SPEED_NUM_1G</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> IXGBE_LINK_SPEED_10GB_FULL</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_speed </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ETH_SPEED_NUM_10G</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_ixgbe_dev_atomic_write_link_status</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">link</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">link</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_status </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> old</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">link_status</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>ixgbe_check_link 函数中会读取硬件寄存器来获取链路状态内容。这之后链路的当前状态会被更新到 dev 中的 data-&gt;dev_link 成员中，update_link 函数执行完成后，rte_eth_link_get_nowait、rte_eth_link_get 函数会将 <strong>dev 中更新后 的 data-&gt;dev_link 成员的值写入到传入的 eth_link 参数中</strong>，上层通过该参数就能获取到当前的链路状态。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-获取到的链路状态到底是什么组件的状态">dpdk 获取到的链路状态到底是什么组件的状态？<a class="hash-link" href="#dpdk-获取到的链路状态到底是什么组件的状态" title="标题的直接链接">​</a></h2><p>dpdk 中获取到的链路状态实际上是 phy 的状态，在实际应用中这个状态会产生的震荡现象，这其实也是 phy 状态的抖动造成的结果，阅读网卡手册能够找到 MAC 寄存器中也存在 LINK status 寄存器，是否可以考虑获取 MAC 中与链路状态相关的寄存器来作为网卡链路状态呢？这种方式是否能够行得通呢？这需要进一步的思考与尝试了！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[uio 设备文件创建的问题]]></title>
        <id>/dpdk/dpdk 常见问题：uio 设备文件创建以及 iommu 导致 x710 网卡初始化失败问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 常见问题：uio 设备文件创建以及 iommu 导致 x710 网卡初始化失败问题"/>
        <updated>2022-06-20T23:48:14.000Z</updated>
        <summary type="html"><![CDATA[使用 dpdk 程序进行收发包需要依赖 uio 设备文件，这个设备文件在一些系统中并不会自动创建，我们需要在启动流程中添加相应的创建流程。一般来说我们会在绑定驱动前来完成这个任务。]]></summary>
        <content type="html"><![CDATA[<p>使用 dpdk 程序进行收发包需要依赖 uio 设备文件，这个设备文件在一些系统中并不会自动创建，我们需要在启动流程中添加相应的创建流程。一般来说我们会在绑定驱动前来完成这个任务。</p><p>可以使用如下脚本来完成：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token shebang important">#!/bin/bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">uiomajor_id</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">awk</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable string" style="color:#e3116c">'/ uio$/ {print $1}'</span><span class="token variable" style="color:#36acaa"> /proc/devices</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token for-or-select variable" style="color:#36acaa">id</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">seq</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable number" style="color:#36acaa">0</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable number" style="color:#36acaa">63</span><span class="token variable" style="color:#36acaa">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">mknod</span><span class="token plain"> /dev/uio</span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$id</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> c </span><span class="token variable" style="color:#36acaa">$uiomajor_id</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">done</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里需要注意，uio 设备文件的 major 号可能会改变，因此我们最好每次都从 /proc/devices 文件中获取最新的，避免造成问题。</p><p>同时注意这里我创建了 64 个 uio 设备文件，这意味着系统中最多使用 64 个网络接口。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="iommu-导致-x710-网卡初始化失败问题">iommu 导致 x710 网卡初始化失败问题<a class="hash-link" href="#iommu-导致-x710-网卡初始化失败问题" title="标题的直接链接">​</a></h2><p>网上搜索了下，这个问题与 iommu 相关，按照这个思路，进行了如下尝试：</p><ol><li>bios 中关闭 VT-d 后进行测试问题仍旧存在</li><li>修改 grub.cfg 脚本，设定 linux 启动参数 intel_iommu=off </li></ol><p>添加 <strong>intel_iommu=off</strong> 参数后 x710 网卡能够正常使用，这个 iommu 导致问题的情况在 dpdk known issues 中应该是有说明的。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 程序创建 kni 虚拟网络接口失败的问题]]></title>
        <id>/dpdk/dpdk 程序创建 kni 虚拟网络接口失败的问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 程序创建 kni 虚拟网络接口失败的问题"/>
        <updated>2022-06-20T23:48:14.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><p>今天接到了同事的一个反馈，说更新了 dpdk 后 kni 口无法正常创建。怀疑可能是 rte_kni.ko 模块存在问题导致创建失败。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="排查过程">排查过程<a class="hash-link" href="#排查过程" title="标题的直接链接">​</a></h2><p>运行产品的 dpdk 程序后发现确实<strong>没有创建</strong> kni 口，并且 dpdk 程序在不断的<strong>重启</strong>。</p><p>使用 kni 命令也能够复现问题，在这种基础上，需要排查问题出在<strong>内核还是用户态程序</strong>中。这时我想到在 kni 口创建过程中内核会有信息打印，查看 dmesg 信息，发现 ioctl 的过程没有任何相关的打印。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="是否打印级别的问题">是否打印级别的问题？<a class="hash-link" href="#是否打印级别的问题" title="标题的直接链接">​</a></h2><p>没有打印可能是 printk 打印级别的问题，可以通过修改 /proc/sys/kernel/printk 文件来解决。manual 中相关内容摘录如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">   /proc/sys/kernel/printk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       /proc/sys/kernel/printk  is  a writable file containing four integer values that influence kernel printk() behavior when printing or logging error messages.  The</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       four values are:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       console_loglevel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              Only messages with a log level lower than this value will be printed to the console.  The default value for this field  is  DEFAULT_CONSOLE_LOGLEVEL  (7),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              but  it  is set to 4 if the kernel command line contains the word "quiet", 10 if the kernel command line contains the word "debug", and to 15 in case of a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              kernel fault (the 10 and 15 are just silly, and equivalent to 8).  The value of console_loglevel can be set (to a value in the range 1–8)  by  a  syslog()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              call with a type of 8.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       default_message_loglevel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              This  value  will be used as the log level for printk() messages that do not have an explicit level.  Up to and including Linux 2.6.38, the hard-coded de‐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              fault value for this field was 4 (KERN_WARNING); since Linux 2.6.39, the default value is a defined by the kernel configuration option CONFIG_DEFAULT_MES‐</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              SAGE_LOGLEVEL, which defaults to 4.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       minimum_console_loglevel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              The value in this field is the minimum value to which console_loglevel can be set.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       default_console_loglevel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              This is the default value for console_loglevel.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>重要的东西在于 console_loglevel 这个字段，只有当消息的日志级别低于这个值才会打印，我将这个值调高到 7 后重新执行程序发现还是没有打印，修改了 kni 中创建虚拟网络接口的代码，重新测试发现也没有打印，确定是没有调用到。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内核与用户态问题界定">内核与用户态问题界定<a class="hash-link" href="#内核与用户态问题界定" title="标题的直接链接">​</a></h2><p>根据上面的结果，我没有界定出问题到底出在内核中还是用户态程序中，我对 kni 口创建的过程比较清楚，知道这个是用户态程序中调用 ioctl 发 IOCTL_CREATE 子命令到内核中，调用 kni_ioctl_create 函数来完成的。</p><p>那么我要界定问题出在哪里其实很简单，使用 strace 跟踪系统调用就可以了。用 strace 跟踪，确认程序没有调用到 ioctl 来创建 kni 口，确定问题出在用户态。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="用户态程序中创建-kni-口的流程">用户态程序中创建 kni 口的流程<a class="hash-link" href="#用户态程序中创建-kni-口的流程" title="标题的直接链接">​</a></h2><p>用户态程序中创建 kni 接口的步骤主要有如下两步：</p><ol><li>rte_kni_init 初始化相关数据结构</li><li>rte_kni_alloc 创建 kni 虚拟接口</li></ol><p>dpdk-16.04 中 rte_kni_alloc 中相关代码如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    snprintf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mz_name, sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mz_name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">, RTE_MEMPOOL_OBJ_NAME,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pktmbuf_pool-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    mz </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> rte_memzone_lookup</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mz_name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    KNI_MEM_CHECK</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mz </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dev_info.mbuf_va </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> mz-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dev_info.mbuf_phys </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> mz-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">phys_addr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ctx-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">pktmbuf_pool </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> pktmbuf_pool</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ctx-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">group_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> conf-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">group_id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ctx-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">slot_id </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> slot-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">id</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ctx-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">mbuf_size </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> conf-</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">mbuf_size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> ioctl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">kni_fd, RTE_KNI_IOCTL_CREATE, </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>怀疑是在这个 KNI_MEM_CHECK 这出了问题，进一步排查确认了问题确实是 mz 为 NULL 导致没有调用 ioctl 就提前终止了。至于为啥 rte_memzone_lookup 没有找到 mz_name，原因是没有人创建它。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>在分析一个问题时首先要对问题进行界定，界定问题是为了缩小问题的范围。在这个问题中内核与用户态就是需要界定的点，没有这个界定问题就不好搞。其实也是在这里进行了一个 2 分法，这个过程可以一直执行下去，直到解决了问题。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk 问题排查的第一关：基础环境的排查]]></title>
        <id>/dpdk/dpdk 问题排查的第一关：基础环境的排查</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk 问题排查的第一关：基础环境的排查"/>
        <updated>2022-06-20T23:48:14.000Z</updated>
        <summary type="html"><![CDATA[uio 驱动是否加载]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="uio-驱动是否加载">uio 驱动是否加载<a class="hash-link" href="#uio-驱动是否加载" title="标题的直接链接">​</a></h2><p>igb_uio 驱动依赖 uio 驱动，<strong>实际上 igb_uio 可以看做是一个使用 uio 驱动映射硬件设备到用户态的实例</strong>。</p><p>一般来说 uio 驱动大多都是直接编译到内核中的，不过也存在将这个驱动编译为模块的方式。</p><p>检查 uio 驱动是否加载可以通过查看 <strong>/sys/class/uio 文件是否存在</strong>来判断。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="igb_uio-与-rte_kni-驱动是否加载">igb_uio 与 rte_kni 驱动是否加载<a class="hash-link" href="#igb_uio-与-rte_kni-驱动是否加载" title="标题的直接链接">​</a></h2><p>编译 dpdk 时一般会生成两个内核模块：</p><ol><li>igb_uio.ko</li><li>rte_kni.ko</li></ol><p>igb_uio 驱动负责<strong>将硬件设备映射到用户态</strong>，rte_kni 负责<strong>创建虚拟网络设备用于 ifconfig、ethtool 命令控制、获取接口状态</strong>。</p><p>一般来说 igb_uio.ko 是<strong>必须加载</strong>的，而 rte_kni.ko 是否加载则看业务需求，在一些不需要创建 kni 虚拟网络接口的程序中，不需要加载 rte_kni.ko。</p><p>可以通过查看 /<strong>sys/module/igb_uio</strong> 与 <strong>/sys/module/rte_kn</strong>i 目录是否存在来判断这两个驱动是否正常加载，或者执行 <strong>lsmod | grep igb_uio</strong>、l<strong>smod | grep rte_kni</strong> 来判断。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="网卡是否绑定驱动">网卡是否绑定驱动<a class="hash-link" href="#网卡是否绑定驱动" title="标题的直接链接">​</a></h2><p>dpdk 控制的硬件是网卡接口，网卡在 linux 内核中一般都有自己的内核驱动，dpdk 要正常使用的话，需要<strong>将这些网卡接口绑定到 igb_uio 驱动中</strong>以在<strong>用户态控制硬件</strong>。</p><p>dpdk 中提供了一个 dpdk-devbind.py 的脚本来完成接口绑定的工作，在老版本中这个脚本的名字是 dpdk_nic_bind.py。</p><p>执行 -s 命令来查看需要使用的网卡接口是否绑定到了 igb_uio 中，执行示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@virt-debian10:~/dpdk-test$ dpdk-devbind.py -s </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Network devices using DPDK-compatible driver</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:04:00.0 </span><span class="token string" style="color:#e3116c">'82574L Gigabit Network Connection'</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">drv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">igb_uio </span><span class="token assign-left variable" style="color:#36acaa">unused</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:08:00.0 </span><span class="token string" style="color:#e3116c">'82574L Gigabit Network Connection'</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">drv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">igb_uio </span><span class="token assign-left variable" style="color:#36acaa">unused</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:09:00.0 </span><span class="token string" style="color:#e3116c">'82574L Gigabit Network Connection'</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">drv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">igb_uio </span><span class="token assign-left variable" style="color:#36acaa">unused</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Network devices using kernel driver</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:01:00.0 </span><span class="token string" style="color:#e3116c">'Virtio network device'</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">if</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">enp1s0 </span><span class="token assign-left variable" style="color:#36acaa">drv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">virtio-pci </span><span class="token assign-left variable" style="color:#36acaa">unused</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">igb_uio *Active*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Other network devices</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">==</span><span class="token operator" style="color:#393A34">=</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>drv=igb_uio 表示接口绑定到了 igb_uio 驱动上，可以看到我上面的示例中 04:00.0、08:00.0、09:00.0 这三个 e100e 的 82574L 网卡都绑定到了 igb_uio 中。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="devuiox-设备文件是否正常生成">/dev/uioX 设备文件是否正常生成<a class="hash-link" href="#devuiox-设备文件是否正常生成" title="标题的直接链接">​</a></h2><p>在一些内核中，在将网卡接口绑定到 igb_uio 的时候会自动生成 /dev/uioX 文件，在另外一些内核中 /dev/uioX 文件不会自动生成，需要手动创建。</p><p>这种需要手动创建的情况可能会出现 major 设备号不一致的情况，这常常会导致 dpdk 程序运行异常。</p><p>首先我们查看 /dev/uioX 字符设备文件中 major id 的值，可以执行 ls -lh 来查看。执行示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@virt-debian10:~/dpdk-test$ </span><span class="token function" style="color:#d73a49">ls</span><span class="token plain"> -lh /dev/uio*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">crw------- </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">244</span><span class="token plain">, </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token plain">月   </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">13</span><span class="token plain">:46 /dev/uio0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">crw------- </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">244</span><span class="token plain">, </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token plain">月   </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">13</span><span class="token plain">:41 /dev/uio1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">crw------- </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">244</span><span class="token plain">, </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token plain">月   </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">13</span><span class="token plain">:41 /dev/uio2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">longyu@virt-debian10:~/dpdk-test$ </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里 244 就是 uio 设备 major_id 的值，0, 1, 2 为 minor_id 的值，这里的 major_id 要与 /proc/devices 文件中 uio 设备的 major_id 对应。</p><p>我们可以执行如下命令查看当前系统中 uio 设备文件的 major_id:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@virt-debian10:~/dpdk-test$ </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">' uio$'</span><span class="token plain"> /proc/devices </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">244</span><span class="token plain"> uio</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里 244 表示 major_id 的值，uio 表示一类设备名称，可以看到这里的 244 与上面 /dev/uioX 中的 major_id 能够对应的上，这就是正常的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="devuiox-能否正常访问">/dev/uiox 能否正常访问<a class="hash-link" href="#devuiox-能否正常访问" title="标题的直接链接">​</a></h2><p>dpdk 程序中通过 uio 设备文件映射物理硬件的硬件资源，同时监听 uio 设备文件事件来捕获中断，在一些情况中，/dev/uiox 文件尽管已经创建了但是不能正常访问，这也会造成问题。</p><p>可以 cat /dev/uiox 文件来查看是否能够正常访问此文件。执行示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@virt-debian10:/home/longyu/dpdk-test</span><span class="token comment" style="color:#999988;font-style:italic"># cat /dev/uio2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cat: /dev/uio2: Invalid argument</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里 Invalid argument 表示我们可以正常打开文件，不过因为 /dev/uiox 文件并不像普通的文件那样能够直接读取字符，会报 Invalid argument 的错误。</p><p>一个异常情况如下所示：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@virt-debian10:/home/longyu/dpdk-test</span><span class="token comment" style="color:#999988;font-style:italic"># cat /dev/uio4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cat: /dev/uio4: No such device</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@virt-debian10:/home/longyu/dpdk-test</span><span class="token comment" style="color:#999988;font-style:italic"># ls -lh /dev/uio4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">crw-r--r-- </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">244</span><span class="token plain">, </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token plain">月   </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">13</span><span class="token plain">:52 /dev/uio4</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到当我们 cat /dev/uio4 的时候报了 No such device 的错误，而我们 ls 查看发现这个设备文件确实是存在的，这就是一个异常的状态。这种状态多半还是某个网卡接口没有绑定到 igb_uio 上的结果。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="devkni-文件是否创建">/dev/kni 文件是否创建<a class="hash-link" href="#devkni-文件是否创建" title="标题的直接链接">​</a></h2><p>对于要使用 rte_kni 程序创建虚拟网络接口的设备来说，/dev/kni 文件需要正常创建。</p><p>kni 中注册了一个 misc 设备，并且动态分配了 misc 设备的 minor id。我们可以提通过执行如下命令获取 misc 的 major id 与 kni 动态分配的 minor id。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@virt-debian10:/home/longyu/dpdk-test</span><span class="token comment" style="color:#999988;font-style:italic"># grep 'misc' /proc/devices </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> misc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@virt-debian10:/home/longyu/dpdk-test</span><span class="token comment" style="color:#999988;font-style:italic"># grep 'kni' /proc/misc</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token number" style="color:#36acaa">58</span><span class="token plain"> kni</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到在我的系统中，misc 的 major id 为 10，kni 动态分配的 minor id 为 58，有了这个信息我们查看 /dev/kni 文件信息来判断是否正确生成。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@virt-debian10:/home/longyu/dpdk-test</span><span class="token comment" style="color:#999988;font-style:italic"># ls -lh /dev/kni</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">crw------- </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> root root </span><span class="token number" style="color:#36acaa">10</span><span class="token plain">, </span><span class="token number" style="color:#36acaa">58</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token plain">月   </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> 08:52 /dev/kni</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到，/dev/kni 设备文件存在，且 major id 与 minor id 正常。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="大页内存是否正常">大页内存是否正常<a class="hash-link" href="#大页内存是否正常" title="标题的直接链接">​</a></h2><p>dpdk 程序的启动一般都会依赖大页内存，使用大页内存能够<strong>降低缺页带来的性能损耗达到提高性能的目的</strong>。</p><p>dpdk 程序运行前需要配置好大页内存，一些系统在启动时指定启动参数预留指定大小的大页内存数目，一些系统在启动过程中写入 <strong>/sys/kernel/mm/hugepages/hugepages-*/nr_hugepages</strong> 来创建大页内存。</p><p>我们可以通过查看 <strong>/proc/meinfo</strong> 来查看系统中大页内存的使用情况，示例信息如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">HugePages_Total:     </span><span class="token number" style="color:#36acaa">512</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HugePages_Free:      </span><span class="token number" style="color:#36acaa">512</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HugePages_Rsvd:        </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">HugePages_Surp:        </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hugepagesize:       </span><span class="token number" style="color:#36acaa">2048</span><span class="token plain"> kB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Hugetlb:         </span><span class="token number" style="color:#36acaa">1048576</span><span class="token plain"> kB</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述字段的含义如下表：</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>HugePages_Total</td><td>大页总数</td></tr><tr><td>HugePages_Free</td><td>空闲的大页数目</td></tr><tr><td>HugePages_Rsvd</td><td>保留的大页内存数目（已经提交 alloc 申请但是没有真正 alloc 的大页数目）</td></tr><tr><td>HugePages_Surp</td><td>大页内存池中超过 /proc/sys/vm/nr_hugepages 的大页数目</td></tr><tr><td>Hugepagesize</td><td>大页的单个页面大小</td></tr><tr><td>Hugetlb</td><td>大页的总大小</td></tr></tbody></table><p>我们需要关注 HugePages_total 的数目，在一些情况下可能会有大页内存数目过少导致 dpdk 程序无法正常启动的问题。</p><p>确认了大页内存的数目后，还需要检查 hugetlbfs 文件系统是否正常挂载。可以通过查看 /etc/mtab 来判断。一个正常的示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@virt-debian10:/home/longyu</span><span class="token comment" style="color:#999988;font-style:italic"># grep 'huge' /etc/mtab</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nodev /mnt/huge hugetlbfs rw,relatime,pagesize</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">2M </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里 /mnt/huge 的目录并不固定，在一些系统中它也可能是 /dev/huge 等目录。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="网卡接口类型是否正确">网卡接口类型是否正确<a class="hash-link" href="#网卡接口类型是否正确" title="标题的直接链接">​</a></h2><p>dpdk 官方的 demo 中通过获取 pci 的信息来判断网卡的型号。产品的业务可能需要针对每个接口写额外的配置信息，这样一般会生成一个配置文件，这个配置文件中描述了网卡接口的配置信息，其中与 dpdk 关联比较大的就是网卡的型号，需要确定<strong>网卡的接口类型与真实类型对应</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="一个简单的检测脚本">一个简单的检测脚本<a class="hash-link" href="#一个简单的检测脚本" title="标题的直接链接">​</a></h2><p>上文中我描述了排查 dpdk 程序运行的环境是否正常的基本点，这些基本点就是<strong>检测脚本的需求</strong>，我们可以预先针对不同的点编写检测脚本，要定位问题时，直接刷脚本看结果。</p><p>一个简单的示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token shebang important">#!/bin/bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function-name function" style="color:#d73a49">check_failed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">echo</span><span class="token plain"> -e </span><span class="token string" style="color:#e3116c">"</span><span class="token string entity" style="color:#36acaa">\033</span><span class="token string" style="color:#e3116c">[31m</span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string entity" style="color:#36acaa">\033</span><span class="token string" style="color:#e3116c">[0m"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /dev/stderr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">exit</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function-name function" style="color:#d73a49">check_passed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">echo</span><span class="token plain"> -e </span><span class="token string" style="color:#e3116c">"[</span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">]</span><span class="token string entity" style="color:#36acaa">\033</span><span class="token string" style="color:#e3116c">[32m check passed </span><span class="token string entity" style="color:#36acaa">\033</span><span class="token string" style="color:#e3116c">[0m"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function-name function" style="color:#d73a49">check_uio_module</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">local</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">uio_major_id</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">awk</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable string" style="color:#e3116c">'/ uio$/{print $1}'</span><span class="token variable" style="color:#36acaa"> /proc/devices</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> -z </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$uio_major_id</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        check_failed </span><span class="token string" style="color:#e3116c">"uio module not loaded"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    check_passed </span><span class="token string" style="color:#e3116c">"uio module loaded"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">return</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$uio_major_id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function-name function" style="color:#d73a49">check_specified_module_loaded</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> -z </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Invalid module_name </span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /dev/stderr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin class-name">return</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> -d </span><span class="token string" style="color:#e3116c">"/sys/module/</span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        check_passed </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c"> module loaded"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        check_failed </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c"> module not loaded"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function-name function" style="color:#d73a49">check_uiofile</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">local</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">uiofile</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">ls</span><span class="token variable" style="color:#36acaa"> /dev/uio* </span><span class="token variable operator file-descriptor important" style="color:#393A34">2</span><span class="token variable operator" style="color:#393A34">&gt;</span><span class="token variable" style="color:#36acaa">/dev/null</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">local</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">uio_major_id</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> -z </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$uio_major_id</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Invalid parameters </span><span class="token string variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /dev/stderr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin class-name">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> -z </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$uiofile</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        check_failed </span><span class="token string" style="color:#e3116c">"/dev/uio* file not created"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    check_passed </span><span class="token string" style="color:#e3116c">"/dev/uioX file exist"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token for-or-select variable" style="color:#36acaa">file</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$uiofile</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin class-name">local</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">major_id</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">ls</span><span class="token variable" style="color:#36acaa"> -l $file </span><span class="token variable operator" style="color:#393A34">|</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable function" style="color:#d73a49">awk</span><span class="token variable" style="color:#36acaa"> -F </span><span class="token variable string" style="color:#e3116c">',| '</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable string" style="color:#e3116c">'{printf("%s",$5)}'</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$major_id</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> -ne </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$uio_major_id</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        check_failed </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$file</span><span class="token string" style="color:#e3116c"> major id </span><span class="token string variable" style="color:#36acaa">$major_id</span><span class="token string" style="color:#e3116c"> invalid, should be </span><span class="token string variable" style="color:#36acaa">$uio_major_id</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        check_passed </span><span class="token string" style="color:#e3116c">"check </span><span class="token string variable" style="color:#36acaa">$file</span><span class="token string" style="color:#e3116c"> major_id checked passed"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">done</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># TODO check cat /dev/uioX</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 1. check uio module</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">check_uio_module</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">uio_device_major_id</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 2. check dpdk module</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">check_specified_module_loaded igb_uio</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">check_specified_module_loaded rte_kni</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 3. check /dev/uioX file </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">check_uiofile </span><span class="token variable" style="color:#36acaa">$uio_device_major_id</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>运行示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">root@virt-debian10:/home/longyu/dpdk-test</span><span class="token comment" style="color:#999988;font-style:italic"># ./check_dev_uio.sh </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">uio module loaded</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> check passed </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">igb_uio module loaded</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> check passed </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">rte_kni module loaded</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> check passed </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">/dev/uioX </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> exist</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> check passed </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">check /dev/uio0 major_id checked passed</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> check passed </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">check /dev/uio1 major_id checked passed</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> check passed </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">check /dev/uio2 major_id checked passed</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> check passed </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">check /dev/uio4 major_id checked passed</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> check passed </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>dpdk 程序的执行依赖诸多环节，在定位问题时我们首先要排查这些基本环节是否正确，也就是所谓的 <strong>dpdk 程序运行的基础环境是否正常</strong>。</p><p>根据我的经验 dpdk 程序运行出现的很多问题都<strong>集中</strong>在这个<strong>基础环境</strong>中，通过排查这些基本点，我们能够解决一部分问题，同时也能够为定位疑难问题清除一定的盲区。</p><p>这些排查点不能跳过，唯有当这些基础环境正常时我们才应该做进一步的排查。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/编译dpdk-19.10时遇到的问题]]></title>
        <id>/dpdk/编译dpdk-19.10时遇到的问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/编译dpdk-19.10时遇到的问题"/>
        <updated>2022-06-20T23:48:14.000Z</updated>
        <summary type="html"><![CDATA[未安装 numa 库的问题]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="未安装-numa-库的问题">未安装 numa 库的问题<a class="hash-link" href="#未安装-numa-库的问题" title="标题的直接链接">​</a></h2><div class="language-make codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-make codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/home/longyu/dpdk-19.08/lib/librte_eal/linux/eal/eal_memory.c:32:10: fatal error: numa.h: No such file or directory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> #include &lt;numa.h&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>官方网页中的相关说明内容如下：</p><blockquote><p>Library for handling NUMA (Non Uniform Memory Access).
numactl-devel in Red Hat/Fedora;
libnuma-dev in Debian/Ubuntu;</p></blockquote><p>我是在 Debian 系统中编译，需要安装 libnuma-dev 库，安装示例如下：</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08$ sudo apt-get install libnuma-dev</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="加载编译出的内核模块">加载编译出的内核模块<a class="hash-link" href="#加载编译出的内核模块" title="标题的直接链接">​</a></h2><p>加载 igb_uio 之前需要先加载 uio 内核模块。uio 模块一般都已经安装到了系统中的 /usr/lib/modules/$(uname -r)/ 目录中，只是一般没有被使用，这里可以通过 modprobe uio 直接加载此内核模块。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="编译-examples-目录下的-demo">编译 examples 目录下的 demo<a class="hash-link" href="#编译-examples-目录下的-demo" title="标题的直接链接">​</a></h2><ol><li><p>检查 RTE_SDK 与 RTE_TARGET 环境变量是否设定</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ echo -e  $RTE_SDK "\n" $RTE_TARGET</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/home/longyu/dpdk-19.08 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> x86_64-native-linuxapp-gcc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>注意这里的 RTE_SDK 为 dpdk 源码的根目录，RTE_RARGET 为编译的目标设备全名。</strong></p></li><li><p>编译 examples 目录下的 helloworld demo</p><p>进入到 helloworld 子目录中，执行 make 命令，输出报错信息如下：</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ make </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/bin/sh: 1: pkg-config: not found</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/home/longyu/dpdk-19.08/mk/internal/rte.extvars.mk:29: *** Cannot find .config in /home/longyu/dpdk-19.08/x86_64-native-linuxapp-gcc.  Stop.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ echo $RTE_SDK</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/home/longyu/dpdk-19.08</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>解决 pkg-config not found 的问题</strong></p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># 查看文件是否存在</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ sudo updatedb</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ locate 'pkg-config'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/etc/dpkg/dpkg.cfg.d/pkg-config-hook-config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/var/cache/apt/archives/pkg-config_0.29-6_amd64.deb</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/var/lib/dpkg/info/pkg-config.list</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 文件不存在则安装</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ sudo apt-get install pkg-config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 存在则检查环境变量配置</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>解决找不到 .config 文件的问题</strong></p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ make</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/home/longyu/dpdk-19.08/mk/internal/rte.extvars.mk:29: *** Cannot find .config in /home/longyu/dpdk-19.08/x86_64-native-linuxapp-gcc.  Stop.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果编译时有上面的错误，那么你需要检查编译出的目标与 RTE_TARGET 变量设定的是否一致。</p></li><li><p>编译成功的输出</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ make</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  CC main.o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  LD helloworld</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  INSTALL-APP helloworld</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  INSTALL-MAP helloworld.map</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ ls ./build/helloworld</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./build/helloworld</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>执行 helloworld 时程序 panic </p><p>我在执行 helloworld 程序时遇到了如下错误：</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ sudo ./build/helloworld</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected 2 lcore(s)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected 1 NUMA nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Multi-process socket /var/run/dpdk/rte/mp_socket</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Selected IOVA mode 'PA'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: No free hugepages reported in hugepages-2048kB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: No available hugepages reported in hugepages-2048kB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: No available hugepages reported in hugepages-1048576kB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: FATAL: Cannot get hugepage information.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Cannot get hugepage information.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PANIC in main():</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Cannot init EAL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5: [./build/helloworld(_start+0x2a) [0x55d9e3802e3a]]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4: [/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xeb) [0x7fa75466d09b]]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3: [./build/helloworld(+0xa9e0c) [0x55d9e364ee0c]]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2: [./build/helloworld(__rte_panic+0xba) [0x55d9e365f480]]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1: [./build/helloworld(rte_dump_stack+0x1b) [0x55d9e38dfa7b]]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Aborted</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从上面的输出中我发现是 hugepage 相关的问题，浏览官方网页文档，我执行了下面的操作：</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ sudo su -c 'echo 128 &gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这之后我重新执行 helloworld 程序，得到的输出如下：</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ sudo ./build/helloworld</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected 2 lcore(s)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Detected 1 NUMA nodes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Multi-process socket /var/run/dpdk/rte/mp_socket</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Selected IOVA mode 'PA'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: No available hugepages reported in hugepages-1048576kB</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: Probing VFIO support...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: WARNING: cpu flags constant_tsc=yes nonstop_tsc=no -&gt; using unreliable clock cycles !</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL: PCI device 0000:00:03.0 on NUMA socket -1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   Invalid NUMA socket, default to 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">EAL:   probe driver: 8086:100e net_e1000_em</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hello from core 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hello from core 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/examples/helloworld$ </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>尽管执行了上面的操作之后，helloworld 能够正常执行，但是对于上述操作背后涉及的东西我却没有进一步的认识，这有待我对 dpdk 的进一步研究。 	</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="绑定网络端口到内核模块的问题">绑定网络端口到内核模块的问题<a class="hash-link" href="#绑定网络端口到内核模块的问题" title="标题的直接链接">​</a></h2><ol><li><p>lspci not found 的问题</p><p>绑定网络端口到内核模块时有如下报错信息：</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08$ sudo ./usertools/dpdk-devbind.py --bind=igb_uio ens33</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">'lspci' not found - please install 'pciutils'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>根据提示信息执行如下命令，安装 pciutils。</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08$ sudo apt-get install pciutils</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>接口正在使用导致绑定端口失败的问题</p><p>解决了 lspci 命令找不到的问题之后我重新执行绑定端口的命令，有如下输出：</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08$ sudo ./usertools/dpdk-devbind.py --bind=igb_uio ens3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Warning: routing table indicates that interface 0000:00:03.0 is active. Not modifying</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从上面的输出中，我确定绑定端口失败了，我望文生义的抓住了 routing table 这个名词，觉得应该清除路由表的内容，在网上搜了一下没有发现该如何去做。这之后我想起了 TCP/IP 协议栈中对关闭网络设备的描述，记得在关闭网络设备的时候会清空路由表。基于这样的认识，我执行了如下命令 down 掉待使用的网络设备：</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08$ sudo ifconfig ens3 down</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p> 执行了这一步后我发现 ssh 连接异常了，这才让我意识到我就是通过这个网卡设备连接到虚拟机中的，关闭了设备之后网络断开，ssh 就失效了。</p><p>这个问题的解决方法如下：</p><blockquote><p>在虚拟机中添加两块网卡，一块用于正常的连接，一块用于测试。</p></blockquote></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="执行-testpmd-测试程序">执行 testpmd 测试程序<a class="hash-link" href="#执行-testpmd-测试程序" title="标题的直接链接">​</a></h2><p>指定如下参数，执行 testpmd 命令。</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-19.08/x86_64-native-linux-gcc/app$ sudo ./testpmd -l 0-1 -n 1 -- -i --portmask=0x1 --nb-cores=1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>以上参数需要根据执行的环境进行修改！</p><p>查看端口信息：</p><div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">testpmd&gt; show port info 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">********************* Infos for port 0  *********************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MAC address: 52:54:00:CE:BA:AD</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Device name: 0000:00:03.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Driver name: net_e1000_em</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Connect to socket: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">memory allocation on the socket: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Link status: up</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Link speed: 1000 Mbps</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Link duplex: full-duplex</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MTU: 1500</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Promiscuous mode: enabled</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Allmulticast mode: disabled</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Maximum number of MAC addresses: 15</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Maximum number of MAC addresses of hash filtering: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">VLAN offload: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  strip off </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  filter off </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  qinq(extend) off </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No RSS offload flow type is supported.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Minimum size of RX buffer: 256</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Maximum configurable length of RX packet: 16128</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Current number of RX queues: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Max possible RX queues: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Max possible number of RXDs per queue: 4096</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Min possible number of RXDs per queue: 32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RXDs number alignment: 8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Current number of TX queues: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Max possible TX queues: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Max possible number of TXDs per queue: 4096</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Min possible number of TXDs per queue: 32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TXDs number alignment: 8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Max segment number per packet: 255</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Max segment number per MTU/TSO: 255</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p><strong>编译 latest dpdk 的过程中会遇到很多的问题，一些问题是因为缺少必要的库与工具所致，一些问题是对某些功能的工作原理不清楚所致，最终这些问题得到了解决。在解决问题的过程中也体现出了我对 linux 中的一些基础知识有了陌生感，需要及时的复习复习。</strong></p><p><strong>下面是我对 dpdk 的一些认识：</strong></p><p><strong>dpdk 依赖 uio 内核模块来将网络设备映射到用户空间，通过重新绑定网络设备驱动到 pmd 来构建从用户空间操作网络设备的桥梁。这里的 pmd 全称为 polling mode driver，它来源于驱动设计模型中的轮询模型。</strong></p><p><strong>dpdk 使用 pmd 来拦截网络设备的硬件中断，这是轮询式数据处理的基础，也是 dpdk 所要解决的一大难题。</strong></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-kni与ethtool试玩问题记录]]></title>
        <id>/dpdk/dpdk-kni与ethtool试玩问题记录</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-kni与ethtool试玩问题记录"/>
        <updated>2022-06-19T07:40:00.000Z</updated>
        <summary type="html"><![CDATA[ethtool  能够 dump 网卡的寄存器，查看其它网卡相关的信息。在 dpdk 程序出现异常时，常常需要使用 ethtool 获取网卡的一些信息来定位问题。]]></summary>
        <content type="html"><![CDATA[<p>ethtool  能够 dump 网卡的寄存器，查看其它网卡相关的信息。在 dpdk 程序出现异常时，常常需要使用 ethtool 获取网卡的一些信息来定位问题。</p><p>我最近也尝试用了用 ethtool，中间却遇到了很多问题。<strong>我使用的 dpdk 版本是 17.05。</strong></p><p><strong>第一类是编译相关的问题，第二类是 ethtool 自身支持网卡的问题。下面我就从这两方面的问题开始描述。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用-ethtool-时的-config-配置">使用 ethtool 时的 .config 配置<a class="hash-link" href="#使用-ethtool-时的-config-配置" title="标题的直接链接">​</a></h2><p>dpdk 的官方文档中说明，要使用 ethtool 需要使能 KNI_KMOD_ETHTOOL 功能项。这通过修改 .config 配置文件来完成。修改完成之后重新编译即可，这个问题相对简单。</p><p>执行了 kni 程序之后，通过 ifconfig 可以看到多出了一个网卡，这个网卡就是之后我使用 ethtool 来查看的网卡硬件。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hugepage-内存不足导致-eal-初始化失败的问题">hugepage 内存不足导致 eal 初始化失败的问题<a class="hash-link" href="#hugepage-内存不足导致-eal-初始化失败的问题" title="标题的直接链接">​</a></h2><p>执行 ifconfig 命令看到多出来的网卡之后，我以为 ethtool 就能正常工作，结果它在启动的时候就报了错，错误信息表明 eal 初始化失败。</p><p>具体的报错信息表明没有足够的 hugepage 内存使用。</p><p>我猜是因为 kni 程序将所有的 hugepage 内存全部独占造成了这个问题，就修改了 /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages 文件，这之后 eal 初始化这一步没有报错，但是又出现了一个新的错误，错误内容如下：</p><blockquote><p>Cannot create lock on '/var/run/.rte_config'. Is another primary process running?</p></blockquote><p>在网上搜索了下这个问题，没有发现什么解决方案。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ethtool-不支持当前网卡">ethtool 不支持当前网卡<a class="hash-link" href="#ethtool-不支持当前网卡" title="标题的直接链接">​</a></h2><p>删除 /var/run/.rte_config 后重新运行 kni 程序，执行 ethtool 命令后，dmesg 查看系统信息发现了如下内容：</p><blockquote><p>Device not supported by ethtool</p></blockquote><p>这个信息表面上看来是说 ethtool 不支持我的网卡，但是我使用的是 e1000 的网卡呀，我想应该不至于不支持吧。</p><p>为了确认 ethtool 是否支持我的网卡，我使用 cscope 在源码中搜索 Device not supported by ethtool 这个字符串，发现它是在 kni_misc.c 中的 kni_ioctl_create 函数中打印的。这个函数中会用获取到的当前网卡信息查询两张表——ixgbe_pci_tbl 与 igb_pci_tbl。</p><p>这两张表的部分内容摘录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_device_id</span><span class="token plain"> ixgbe_pci_tbl</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> IXGBE_DEV_ID_82598</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> IXGBE_DEV_ID_82598AF_DUAL_PORT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> IXGBE_DEV_ID_82598AF_SINGLE_PORT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> IXGBE_DEV_ID_82598AT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* required last entry */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">pci_device_id</span><span class="token plain"> igb_pci_tbl</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_I354_BACKPLANE_1GBPS</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_I354_SGMII</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PCI_VDEVICE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">INTEL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E1000_DEV_ID_I354_BACKPLANE_2_5GBPS</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/* required last entry */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我使用 lspci 命令查看我的网卡型号，得到的信息如下：</p><blockquote><p>e1000 82545EM</p></blockquote><p>这个型号在 dpdk 中对应的宏是 E1000_DEV_82545EM，并不存在于上面的两张表中，这表明 ethtool 确实不支持此款网卡。从第二张表中我发现 e1000 网卡是一个系列，其中有很多不同型号的网卡，这是我之前没有意识到的问题。</p><p>其实这是 dpdk 的 rte_kni 模块不支持这个网卡，官方驱动是支持的。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-pdump工具编译运行]]></title>
        <id>/dpdk/dpdk-pdump工具编译运行</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-pdump工具编译运行"/>
        <updated>2022-06-19T07:40:00.000Z</updated>
        <summary type="html"><![CDATA[dpdk-pdump 是什么]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-pdump-是什么">dpdk-pdump 是什么<a class="hash-link" href="#dpdk-pdump-是什么" title="标题的直接链接">​</a></h2><p><strong>dpdk-pdump 是 dpdk 提供的一个工具。它可以可以作为 secondary 程序运行，能够捕获 dpdk 的端口的数据包。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="编译-dpdk-pdump">编译 dpdk-pdump<a class="hash-link" href="#编译-dpdk-pdump" title="标题的直接链接">​</a></h2><p><strong>dpdk-pdump</strong> 工具的源码位于 dpdk 源码根目录下的 <strong>./app/pdump</strong> 目录中，不需要像 examples 中的 demo 一样单独编译，它会在编译 dpdk 的同时也被编译，我们可以在编译生成的 app 目录中找到这个程序。</p><p>在我的虚拟机中，编译 dpdk 后，它的位置如下：</p><blockquote><p>/home/longyu/dpdk-stable-17.05.2/x86_64-native-linuxapp-gcc/app/dpdk-pdump</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用-dpdk-pdump">使用 dpdk-pdump<a class="hash-link" href="#使用-dpdk-pdump" title="标题的直接链接">​</a></h2><p><strong>dpdk-pdump 的用法如下：</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">usage: ./dpdk-pdump </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">EAL options</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> -- --pdump </span><span class="token string" style="color:#e3116c">'(port=&lt;port id&gt; | device_id=&lt;pci id or vdev name&gt;),(queue=&lt;queue_id&gt;),(rx-dev=&lt;iface or pcap file&gt; | tx-dev=&lt;iface or pcap file&gt;,[ring-size=&lt;ring size&gt;default:16384],[mbuf-size=&lt;mbuf data size&gt;default:2176],[total-num-mbufs=&lt;number of mbufs&gt;default:65535]'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--server-socket-path</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">server socket dir</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">default:/var/run/.dpdk/ </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">or</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> ~/.dpdk/</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--client-socket-path</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">client socket dir</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">default:/var/run/.dpdk/ </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">or</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> ~/.dpdk/</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">``</span><span class="token variable" style="color:#36acaa">`</span><span class="token variable" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token variable" style="display:inline-block;color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token variable" style="color:#36acaa">**dpdk-pdump** 需要依赖一个 **dpdk primary** 进程，我就以 **l2fwd** 命令作为 **dpdk primary** 进程。</span><br></span><span class="token-line" style="color:#393A34"><span class="token variable" style="display:inline-block;color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token variable" style="color:#36acaa">有了 **dpdk primary** 进程之后，根据我的环境，我使用如下命令行启动 dpdk-pdump</span><br></span><span class="token-line" style="color:#393A34"><span class="token variable" style="color:#36acaa"></span><span class="token variable" style="color:#36acaa">`</span><span class="token plain">``bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> ./dpdk-pdump -n </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> -- --pdump </span><span class="token string" style="color:#e3116c">'port=0,queue=*,rx-dev=./rx-pcap'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="no-driver-for-pcap-的问题">no driver for pcap 的问题<a class="hash-link" href="#no-driver-for-pcap-的问题" title="标题的直接链接">​</a></h2><p>我第一次执行上面的命令时程序异常终止，错误信息如下：</p><blockquote><p>EAL: no driver found for eth_pcap_rx_0
EAL: Driver, cannot attach the device</p></blockquote><p>通过搜索，我发现上面的错误是因为在编译 dpdk 时没有启用 PCAP 相关的功能所致，参考链接如下：</p><p><a href="https://stackoverflow.com/questions/44357995/dpdk-pdump-no-driver-found-for-net-pcap-rx-0" target="_blank" rel="noopener noreferrer">dpdk-pdump-no-driver-found-for-net-pcap</a></p><p>根据网页中的回答我对 <strong>.config</strong> 文件做了如下修改以使能 <strong>PCAP</strong> 的相关功能：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-stable-17.05.2/x86_64-native-linuxapp-gcc$ </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'PCAP'</span><span class="token plain"> .config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Compile software PMD backed by PCAP files</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">CONFIG_RTE_LIBRTE_PMD_PCAP</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">CONFIG_RTE_PORT_PCAP</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">y</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这之后重新编译后继续测试，这个问题得到了解决，可又遇到了一个新的问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="无法与-primary-server-端通信的问题">无法与 primary server 端通信的问题<a class="hash-link" href="#无法与-primary-server-端通信的问题" title="标题的直接链接">​</a></h2><p>解决了 <strong>pcap driver</strong> 的问题后，我重新执行 <strong>dpdk-pdump</strong> 时新的报错信息如下：</p><blockquote><p>PDUMP: failed to send to server:No such file or directory,
pdump_create_client_socket:702 PDUMP: client request for pdump
enable/disable failed PDUMP: failed to send to server:No such file or
directory, pdump_create_client_socket:702 PDUMP: client request for
pdump enable/disable failed</p></blockquote><p>通过阅读官方网页中的说明，我发现了问题所在。官方的说明中提到 <strong>dpdk-pdump</strong> 工具只能与初始化了 <strong>packet capture framework</strong> 的主程序通信，而 <strong>packet capture framework</strong> 的初始化需要修改程序的源码。</p><p>在 dpdk 提供的工具中，<strong>testpmd</strong> 工具的源码中添加了 <strong>packet capture framework</strong> 的初始化代码，我查看相关代码，找到了如下源码行：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    diag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eal_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> argv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">diag </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cannot init EAL\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_LIBRTE_PDUMP</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* initialize packet capture framework */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_pdump_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的代码会在 <strong>RTE_LIBRTE_PDUMP</strong> 宏定义时执行 <strong>rte_pdump_init</strong> 函数来进行必要的初始化，<strong>RTE_LIBRTE_PDUMP</strong> 功能在 <strong>.config</strong> 中进行配置，默认为开启。</p><p><strong>.config</strong> 中与 <strong>RTE_LIBRTE_PDUMP</strong> 功能相关的配置如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Compile architecture we compile for. pdump library</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">CONFIG_RTE_LIBRTE_PDUMP</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">y</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当使用能了这个参数后，编译目录下的头文件 <strong>rte_config.h</strong> 中会定义 <strong>RTE_LIBRTE_PDUMP</strong> 宏，相关的代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">undef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_LIBRTE_PDUMP</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">RTE_LIBRTE_PDUMP</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我按照上面的描述修改了 dpdk-pdump 程序的源码后，终于能够正常执行了！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="查看-dump-出的数据包文件">查看 dump 出的数据包文件<a class="hash-link" href="#查看-dump-出的数据包文件" title="标题的直接链接">​</a></h2><p><strong>dpdk-pdump</strong> 中已经对 dump 出的原始数据包进行了转化，我们可以直接使用 <strong>tcpdump</strong> 的 <strong>-r</strong> 选项来查看生成的文件。</p><p> 我指定 <strong>dpdk-pdump dump</strong> 端口接收到的包，指定存储文件为 <strong>./rx-pcap</strong>。我只需要执行下面的命令就可以看到接收到的数据包的详细信息。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> tcpdump -r ./rx-pcap</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p><strong>dpdk 提供的程序在使用时可能会遇到一些问题，解决这些问题的一般步骤如下：</strong></p><ol><li>查看依赖的功能是否开启（修改 .config 文件）</li><li>修改必要的源代码以执行必要的初始化工作</li><li>重新编译后再次执行</li></ol>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk-pdump编译运行]]></title>
        <id>/dpdk/dpdk-pdump编译运行</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk-pdump编译运行"/>
        <updated>2022-06-19T07:40:00.000Z</updated>
        <summary type="html"><![CDATA[dpdk-pdump 是什么]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dpdk-pdump-是什么">dpdk-pdump 是什么<a class="hash-link" href="#dpdk-pdump-是什么" title="标题的直接链接">​</a></h2><p><strong>dpdk-pdump 是 dpdk 提供的一个工具。它可以可以作为 secondary 程序运行，能够捕获 dpdk 的端口的数据包。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="编译-dpdk-pdump">编译 dpdk-pdump<a class="hash-link" href="#编译-dpdk-pdump" title="标题的直接链接">​</a></h2><p><strong>dpdk-pdump</strong> 工具的源码位于 dpdk 源码根目录下的 <strong>./app/pdump</strong> 目录中，不需要像 examples 中的 demo 一样单独编译，它会在编译 dpdk 的同时也被编译，我们可以在编译生成的 app 目录中找到这个程序。</p><p>在我的虚拟机中，编译 dpdk 后，它的位置如下：</p><blockquote><p>/home/longyu/dpdk-stable-17.05.2/x86_64-native-linuxapp-gcc/app/dpdk-pdump</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用-dpdk-pdump">使用 dpdk-pdump<a class="hash-link" href="#使用-dpdk-pdump" title="标题的直接链接">​</a></h2><p><strong>dpdk-pdump 的用法如下：</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">usage: ./dpdk-pdump </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">EAL options</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> -- --pdump </span><span class="token string" style="color:#e3116c">'(port=&lt;port id&gt; | device_id=&lt;pci id or vdev name&gt;),(queue=&lt;queue_id&gt;),(rx-dev=&lt;iface or pcap file&gt; | tx-dev=&lt;iface or pcap file&gt;,[ring-size=&lt;ring size&gt;default:16384],[mbuf-size=&lt;mbuf data size&gt;default:2176],[total-num-mbufs=&lt;number of mbufs&gt;default:65535]'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--server-socket-path</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">server socket dir</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">default:/var/run/.dpdk/ </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">or</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> ~/.dpdk/</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">--client-socket-path</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">client socket dir</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">default:/var/run/.dpdk/ </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">or</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> ~/.dpdk/</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>dpdk-pdump</strong> 需要依赖一个 <strong>dpdk primary</strong> 进程，我就以 <strong>l2fwd</strong> 命令作为 <strong>dpdk primary</strong> 进程。</p><p>有了 <strong>dpdk primary</strong> 进程之后，根据我的环境，我使用如下命令行启动 dpdk-pdump</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> ./dpdk-pdump -n </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> -- --pdump </span><span class="token string" style="color:#e3116c">'port=0,queue=*,rx-dev=./rx-pcap'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="no-driver-for-pcap-的问题">no driver for pcap 的问题<a class="hash-link" href="#no-driver-for-pcap-的问题" title="标题的直接链接">​</a></h2><p>我第一次执行上面的命令时程序异常终止，错误信息如下：</p><blockquote><p>EAL: no driver found for eth_pcap_rx_0
EAL: Driver, cannot attach the device</p></blockquote><p>通过搜索，我发现上面的错误是因为在编译 dpdk 时没有启用 PCAP 相关的功能所致，参考链接如下：</p><p><a href="https://stackoverflow.com/questions/44357995/dpdk-pdump-no-driver-found-for-net-pcap-rx-0" target="_blank" rel="noopener noreferrer">dpdk-pdump-no-driver-found-for-net-pcap</a></p><p>根据网页中的回答我对 <strong>.config</strong> 文件做了如下修改以使能 <strong>PCAP</strong> 的相关功能：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~/dpdk-stable-17.05.2/x86_64-native-linuxapp-gcc$ </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'PCAP'</span><span class="token plain"> .config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Compile software PMD backed by PCAP files</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">CONFIG_RTE_LIBRTE_PMD_PCAP</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">y</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">CONFIG_RTE_PORT_PCAP</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">y</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这之后重新编译后继续测试，这个问题得到了解决，可又遇到了一个新的问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="无法与-primary-server-端通信的问题">无法与 primary server 端通信的问题<a class="hash-link" href="#无法与-primary-server-端通信的问题" title="标题的直接链接">​</a></h2><p>解决了 <strong>pcap driver</strong> 的问题后，我重新执行 <strong>dpdk-pdump</strong> 时新的报错信息如下：</p><blockquote><p>PDUMP: failed to send to server:No such file or directory,
pdump_create_client_socket:702 PDUMP: client request for pdump
enable/disable failed PDUMP: failed to send to server:No such file or
directory, pdump_create_client_socket:702 PDUMP: client request for
pdump enable/disable failed</p></blockquote><p>通过阅读官方网页中的说明，我发现了问题所在。官方的说明中提到 <strong>dpdk-pdump</strong> 工具只能与初始化了 <strong>packet capture framework</strong> 的主程序通信，而 <strong>packet capture framework</strong> 的初始化需要修改程序的源码。</p><p>在 dpdk 提供的工具中，<strong>testpmd</strong> 工具的源码中添加了 <strong>packet capture framework</strong> 的初始化代码，我查看相关代码，找到了如下源码行：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    diag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">rte_eal_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> argv</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">diag </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">rte_panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Cannot init EAL\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_LIBRTE_PDUMP</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">/* initialize packet capture framework */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">rte_pdump_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的代码会在 <strong>RTE_LIBRTE_PDUMP</strong> 宏定义时执行 <strong>rte_pdump_init</strong> 函数来进行必要的初始化，<strong>RTE_LIBRTE_PDUMP</strong> 功能在 <strong>.config</strong> 中进行配置，默认为开启。</p><p><strong>.config</strong> 中与 <strong>RTE_LIBRTE_PDUMP</strong> 功能相关的配置如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Compile architecture we compile for. pdump library</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token assign-left variable" style="color:#36acaa">CONFIG_RTE_LIBRTE_PDUMP</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">y</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当使用能了这个参数后，编译目录下的头文件 <strong>rte_config.h</strong> 中会定义 <strong>RTE_LIBRTE_PDUMP</strong> 宏，相关的代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">undef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_LIBRTE_PDUMP</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">RTE_LIBRTE_PDUMP</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我按照上面的描述修改了 dpdk-pdump 程序的源码后，终于能够正常执行了！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="查看-dump-出的数据包文件">查看 dump 出的数据包文件<a class="hash-link" href="#查看-dump-出的数据包文件" title="标题的直接链接">​</a></h2><p><strong>dpdk-pdump</strong> 中已经对 dump 出的原始数据包进行了转化，我们可以直接使用 <strong>tcpdump</strong> 的 <strong>-r</strong> 选项来查看生成的文件。</p><p> 我指定 <strong>dpdk-pdump dump</strong> 端口接收到的包，指定存储文件为 <strong>./rx-pcap</strong>。我只需要执行下面的命令就可以看到接收到的数据包的详细信息。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> tcpdump -r ./rx-pcap</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p><strong>dpdk 提供的程序在使用时可能会遇到一些问题，解决这些问题的一般步骤如下：</strong></p><ol><li>查看依赖的功能是否开启（修改 .config 文件）</li><li>修改必要的源代码以执行必要的初始化工作</li><li>重新编译后再次执行</li></ol>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk库源码中包含内核头文件的问题]]></title>
        <id>/dpdk/dpdk库源码中包含内核头文件的问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk库源码中包含内核头文件的问题"/>
        <updated>2022-06-19T07:40:00.000Z</updated>
        <summary type="html"><![CDATA[问题描述]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="问题描述">问题描述<a class="hash-link" href="#问题描述" title="标题的直接链接">​</a></h2><ol><li>在 A 环境上与 B 环境上使用相同版本的 gcc 编译 dpdk 程序</li><li>测试发现 A 环境上编译的版本能够正常工作，B 环境上编译的版本不能工作</li></ol><p>调试确认，<strong>A 环境上编译的 dpdk 程序初始化了 vfio 的 tailq，而 B 环境上编译的 dpdk 程序没有初始化 vfio 的 tailq。</strong></p><p>dpdk 版本信息：<strong>dpdk-16.04</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="从源码着手分析">从源码着手分析<a class="hash-link" href="#从源码着手分析" title="标题的直接链接">​</a></h2><p>vfio 的 tailq 在 eal_pci_vfio.c 中通过 <strong>EAL_REGISTER_TAILQ</strong> 来注册，代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">VFIO_PRESENT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">PAGE_SIZE</span><span class="token macro property" style="color:#36acaa">   </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression function" style="color:#d73a49">sysconf</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">_SC_PAGESIZE</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">PAGE_MASK</span><span class="token macro property" style="color:#36acaa">   </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression operator" style="color:#393A34">~</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">PAGE_SIZE </span><span class="token macro property expression operator" style="color:#393A34">-</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">1</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">rte_tailq_elem</span><span class="token plain"> rte_vfio_tailq </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"VFIO_RESOURCE_LIST"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">EAL_REGISTER_TAILQ</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rte_vfio_tailq</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述代码说明，<strong>只有定义了 VFIO_PRESENT 宏才会注册 vfio 的 tailq!</strong> 重新描述问题：</p><p><strong>A 环境上编译时 VFIO_PRESENT 宏被定义，B 环境上编译时 VFIO_PRESENT 宏没有被定义。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="提问环节">提问环节<a class="hash-link" href="#提问环节" title="标题的直接链接">​</a></h2><ol><li>再次确认编译器是否一致
确认一致</li><li>确认编译的 dpdk 代码一致
确认一致</li><li>VFIO_PRESENT 在哪里被定义的？</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="对提问的回答">对提问的回答<a class="hash-link" href="#对提问的回答" title="标题的直接链接">​</a></h2><p>搜索确定 <strong>VFIO_PRESENT</strong> 在 <strong>eal_vfio.h</strong> 中被定义，代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">RTE_EAL_VFIO</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;linux/version.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">if</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">LINUX_VERSION_CODE </span><span class="token macro property expression operator" style="color:#393A34">&gt;=</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression function" style="color:#d73a49">KERNEL_VERSION</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression number" style="color:#36acaa">3</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">6</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">0</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;linux/vfio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">VFIO_PRESENT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property comment" style="color:#999988;font-style:italic">/* kernel version */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property comment" style="color:#999988;font-style:italic">/* RTE_EAL_VFIO */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>根据代码内容，VFIO_PRESENT 要被定义需要满足如下条件：</p><ol><li>config 中配置 CONFIG_RTE_EAL_VFIO 为 y</li><li>内核版本大于等于 3.6.0</li></ol><p>检查环境得到如下信息：</p><ol><li>config 中使用了 RTE_EAL_VFIO 配置</li><li>RTE_KERNELDIR 指向的内核 kernel_devel 版本一致</li></ol><p>确认了这两点信息后，得出<strong>不应该存在问题的</strong>结论。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="linuxversionh-是哪个-linuxversionh">linux/version.h 是哪个 linux/version.h?<a class="hash-link" href="#linuxversionh-是哪个-linuxversionh" title="标题的直接链接">​</a></h2><p>一通研究发现 eal_vfio.h 中包含的 linux/version.h <strong>并不是从 RTE_KERNELDIR 变量指定的路径下搜索的！</strong></p><p>总结两点问题：</p><ol><li>编译内核 ko 的源文件时 linux/version.h 从指定的内核路径下面搜索 </li><li>编译库函数时包含的 linux/version.h 头文件是<strong>从编译环境上的 /usr/include 目录搜索</strong></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="真正的问题是啥">真正的问题是啥？<a class="hash-link" href="#真正的问题是啥" title="标题的直接链接">​</a></h2><p>绕了一圈后，我确认真正的问题是不同编译机器上的 <strong>/usr/include/linux/version.h</strong> 文件不同，<strong>A 机器上 version.h 中定义的版本高于 3.6.0，B 机器上 version.h 中定义的版本低于 3.6.0</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="库函数中包含内核头文件的坏处">库函数中包含内核头文件的坏处<a class="hash-link" href="#库函数中包含内核头文件的坏处" title="标题的直接链接">​</a></h2><p>编译库函数时，库函数中包含的内核头文件会从编译环境上的 /usr/include 目录中搜索，不同的编译环境上内核头文件版本不同就是潜在的风险。</p><p><strong>更具体点说其实是将库函数与内核头文件耦合了，随之而来的是与编译环境的耦合</strong>。库函数中包含内核头文件是有需求的，如 ip 命令就依赖内核的 netlink 相关头文件，不过它本地维护了一个特定的 netlink 头文件版本，就消除了与编译环境中部署的内核头文件的耦合性。</p><p>从 eal_vfio.h 的需求来分析，它实现了不支持 3.6.0 以下内核版本的需求，而这个内核版本是 <strong>dpdk 程序运行环境的内核版本</strong>，<strong>并不要求与编译环境内核版本一致</strong>，最好的方法是使用 RTE_KERNELDIR 变量路径中的 linux/version.h 头文件，可也有些不好的地方，如何取舍不易决定！</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/dpdk收发包测试之使用内核接口给dpdk绑定的端口发包]]></title>
        <id>/dpdk/dpdk收发包测试之使用内核接口给dpdk绑定的端口发包</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/dpdk收发包测试之使用内核接口给dpdk绑定的端口发包"/>
        <updated>2022-06-19T07:40:00.000Z</updated>
        <summary type="html"><![CDATA[如何使用内核接口给 dpdk 绑定的端口发包]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="如何使用内核接口给-dpdk-绑定的端口发包">如何使用内核接口给 dpdk 绑定的端口发包<a class="hash-link" href="#如何使用内核接口给-dpdk-绑定的端口发包" title="标题的直接链接">​</a></h2><p>最近一次测试中，需要通过内核接口给 dpdk 绑定的端口发包进行测试，具体的测试方法见下文。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="硬件连接">硬件连接<a class="hash-link" href="#硬件连接" title="标题的直接链接">​</a></h2><p>两个网卡的端口连接到一起。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="软件配置">软件配置<a class="hash-link" href="#软件配置" title="标题的直接链接">​</a></h2><p>一个口绑定到内核驱动，一个口绑定 igb_uio 驱动。绑定到 igb_uio 的网卡端口，使用 l2fwd 程序来收发包。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="通过指定的端口发包">通过指定的端口发包<a class="hash-link" href="#通过指定的端口发包" title="标题的直接链接">​</a></h2><p>ping 命令的 -I 选项支持指定收发包的 netdev 端口。</p><p>使用 ping -I eth0 192.234.234.23 就可以从 eth0 口将数据包发送出去。这里的 eth0 口就是上面我们绑定到内核驱动上面的口。由于硬件连接到了一起，l2fwd 监控的端口会收到包，就可以进行测试了。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/ethtool 读到的状态与 dpdk 读到的网卡状态不一致]]></title>
        <id>/dpdk/ethtool 读到的状态与 dpdk 读到的网卡状态不一致</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/ethtool 读到的状态与 dpdk 读到的网卡状态不一致"/>
        <updated>2022-06-19T07:40:00.000Z</updated>
        <summary type="html"><![CDATA[ethtool 读到的链接状态]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="ethtool-读到的链接状态">ethtool 读到的链接状态<a class="hash-link" href="#ethtool-读到的链接状态" title="标题的直接链接">​</a></h2><p>使用 ethtool 读取网卡链接状态的一个示例如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~$ sudo /sbin/ethtool ens37 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[sudo] password for longyu: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Settings for ens37:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supported ports: [ TP ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supported link modes:   10baseT/Half 10baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            100baseT/Half 100baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            1000baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supported pause frame use: No</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supports auto-negotiation: Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supported FEC modes: Not reported</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Advertised link modes:  10baseT/Half 10baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            100baseT/Half 100baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            1000baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ......                       </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Link detected: yes</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的示例中，最后一行中的 Link detected 表示链路的状态，为 yes 表示链路 up，为 no 表示链路 down。目前链路为 up 状态。同时上面的输出中也表明此网卡支持自动协商。</p><p><strong>自动协商用于网卡端口与对端协商连接速度和双工模式，通过协商确定两端能够达到的最大连接速度与两端都支持的双工模式，主要与 phy 有关。</strong></p><p>通过搜索，我发现了如下链接：</p><p><a href="https://blog.csdn.net/skyflying2012/article/details/17557743" target="_blank" rel="noopener noreferrer">以太网自动协商的原理</a></p><p> 下面的信息来于 <a href="https://blog.csdn.net/skyflying2012/article/details/17557743" target="_blank" rel="noopener noreferrer">以太网自动协商的原理</a> 这篇博客。</p><blockquote><p>千兆光口自协商过程:</p><p>1.两端都设置为自协商模式</p><p>双方互相发送/C/码流，如果连续接收到3个相同的/C/码且接收到的码流和本端工作方式相匹配，则返回给对方一个带有Ack应答的/C/码，对端接收到Ack信息后，认为两者可以互通，设置端口为UP状态</p><p>2.一端设置为自协商，一端设置为强制</p><p>自协商端发送/C/码流，强制端发送/I/码流，强制端无法给对端提供本端的协商信息，也无法给对端返回Ack应答，故自协商端DOWN。但是强制端本身可以识别/C/码，认为对端是与自己相匹配的端口，所以直接设置本端端口为UP状态</p><p>3.两端均设置为强制模式</p><p>双方互相发送/I/码流，一端接收到/I/码流后，认为对端是与自己相匹配的端口，直接设置本端端口为UP状态</p><p>阅读上面的信息可以发现，当<strong>两端都设置为自协商模式时，自协商成功后两端的端口状态都为 UP</strong>；<strong>当一端设置自协商，一端设置强制时，自协商时设置自协商模式的端口状态会变为 DOWN，设置强制端的端口状态会变为 UP；当两端均设置为强制模式时，进行自协商会使两端端口都变为 UP 状态。</strong></p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="对端口执行自协商">对端口执行自协商<a class="hash-link" href="#对端口执行自协商" title="标题的直接链接">​</a></h2><p>有了这个基础我们来进行下面的操作，这里我使用的网卡型号如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">02:05.0 Ethernet controller: Intel Corporation 82545EM Gigabit Ethernet Controller (Copper) (rev 01)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这款网卡在我的系统中对应的 netdev 接口的名字为 ens37。</p><p><strong>1. 执行 sudo ifconfig ens37 down 命令将网卡设定为 down</strong> </p><p><strong>ethotool 查看链路状态，输出信息截取如下：</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~$ </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ethtool</span><span class="token plain"> ens37 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">sudo</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> password </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> longyu: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Settings </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> ens37:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supported ports: </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> TP </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supported </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"> modes:   10baseT/Half 10baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            100baseT/Half 100baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            1000baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supported pause frame use: No</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supports auto-negotiation: Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Link detected: no</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Link detected 为 no 表示链路为 down 状态。</p><p><strong>ethtool dump 寄存器信息，有如下与链路状态相关的信息：</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~$ </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ethtool</span><span class="token plain"> -d ens37  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> -i </span><span class="token string" style="color:#e3116c">'Link'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Link reset:                        reset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Set </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"> up:                       </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Link up:                           </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"> config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Link speed:                        1000Mb/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Link State:                        Down</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Force Link Good:                   disabled</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>此时 Link State 为 Down 与上面的 Link detected : no 一致。</p><p><strong>2. 执行 sudo ethtool -s ens37 autoneg on 进行自协商</strong> </p><p><strong>ethtool 查看链路状态，截取主要信息如下：</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~$ </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ethtool</span><span class="token plain"> ens37</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Settings </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> ens37:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supported ports: </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> TP </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supported </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"> modes:   10baseT/Half 10baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            100baseT/Half 100baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                            1000baseT/Full </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supported pause frame use: No</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Supports auto-negotiation: Yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Link detected: no</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Link detected: no 表示链路为 down 的状态。</p><p><strong>ethtool -d 查看寄存器信息，相关内容如下：</strong></p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~$ </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ethtool</span><span class="token plain"> -d ens37  </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> -i </span><span class="token string" style="color:#e3116c">'Link'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Link reset:                        reset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Set </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"> up:                       </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Link up:                           </span><span class="token function" style="color:#d73a49">link</span><span class="token plain"> config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Link speed:                        1000Mb/s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Link State:                        Up</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      Force Link Good:                   disabled</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意这里 Link State 状态变为 UP，这表明自协商成功。根据上文中引用的千兆光口自协商的过程，同时注意到我们的网卡支持自协商，我们用 ethtool -s 命令打开网卡的自协商功能，这之后 phy 的状态变为 UP 表明自协商成功，这与千兆光口自协商过程的第一种类型一致，两端都支持并开启了自协商，协商成功后两端的 phy 状态都变为了 UP。</p><p>这时候 ethtool 直接查看网卡，Link detected 显示为 no 表明链路状态为 down，为什么不是 UP 呢？</p><p>这里 phy 的状态由 DOWN 变为 UP 这是自协商成功的结果。这个是可以解释的。自协商的目的就是为了确定连接速度、双工模式这些配置，而这些配置都是要在 phy up 的状态下才有作用。</p><p>这时候直接使用 ifconfig 查看网卡信息，输出如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">longyu@longyu-pc:~$ </span><span class="token function" style="color:#d73a49">sudo</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ifconfig</span><span class="token plain"> ens37 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ens37: </span><span class="token assign-left variable" style="color:#36acaa">flags</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">409</span><span class="token operator file-descriptor important" style="color:#393A34">8</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">BROADCAST,MULTICAST</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">  mtu </span><span class="token number" style="color:#36acaa">1500</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ether 00:0c:29:5e:ba:35  txqueuelen </span><span class="token number" style="color:#36acaa">1000</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Ethernet</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        RX packets </span><span class="token number" style="color:#36acaa">1154</span><span class="token plain">  bytes </span><span class="token number" style="color:#36acaa">672588</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">656.8</span><span class="token plain"> KiB</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        RX errors </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  dropped </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  overruns </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  frame </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        TX packets </span><span class="token number" style="color:#36acaa">136</span><span class="token plain">  bytes </span><span class="token number" style="color:#36acaa">16616</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">16.2</span><span class="token plain"> KiB</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        TX errors </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  dropped </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> overruns </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  carrier </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">  collisions </span><span class="token number" style="color:#36acaa">0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的输出表明网卡的链路状态为 down，这与 ethtool 命令查看到的网卡状态为 no 是一致的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ethtool-link-detected-no-是怎样检测的">ethtool: Link detected: no 是怎样检测的？<a class="hash-link" href="#ethtool-link-detected-no-是怎样检测的" title="标题的直接链接">​</a></h2><p>这里我使用 ethtool-4.19 的源代码进行分析。</p><p>首先是 ethtool 中设定 ETHTOOL_GLINK 命令，调用 ioctl 函数获取链路状态。相关代码如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">edata.cmd = ETHTOOL_GLINK;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">err = send_ioctl(ctx, &amp;edata);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if (err == 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fprintf(stdout, "   Link detected: %s\n",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        edata.data ? "yes":"no");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    allfail = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} else if (errno != EOPNOTSUPP) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    perror("Cannot get link status");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>edata.cmd 中填充的是 ethtool 中的子命令，属于 SIOCETHTOOL 下面的子命令。send_ioctol 函数的源码如下：</p><p>注意这里的子命令通过 ctx-&gt;ifr 来传递给 ioctl。</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">send_ioctl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">cmd_context</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">cmd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ctx</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ifr</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ifr_data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> cmd</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ioctl</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">fd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> SIOCETHTOOL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">ctx</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ifr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这之后 ioctl 会进行分发，由 ioctl 到 sock_ioctl 到 dev_ioctl 到 dev_ethtool 适配层。dev_ethtool 适配层相关函数在内核路径下的 net/core/ethtool.c 文件中。</p><p>dev_ethtool 函数是一个大的分发函数，通过 switch 来将不同的 ethtool 子命令分发到不同的子函数调用之上。子函数里面的核心逻辑在于调用网卡内核接口 net_device 中注册的 ethtool_ops 虚函数表中的函数。</p><p>上面 Link detected 中使用的 ethtool 子命令为 ETHTOOL_GLINK，在 dev_ethtool 函数中被分发到 ethtool_get_link 子函数。相关代码如下： </p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> ETHTOOL_GLINK</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        rc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ethtool_get_link</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> useraddr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>ethtool_get_link 子函数的核心在于下面这行代码：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">edata</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">netif_running</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">ethtool_ops</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token function" style="color:#d73a49">get_link</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>netif_running 函数在内核头文件路径 include/linux/netdevice.h 中定义，它通过检测 netdev 结构体中 state 变量的 __LINK_STATE_START 位来确定接口是否 running。</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">inline</span><span class="token plain"> bool </span><span class="token function" style="color:#d73a49">netif_running</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">net_device</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">dev</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test_bit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__LINK_STATE_START</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">dev</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">state</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>了解了 ethtool_get_link 子函数的部分代码，我们可以发现，上文中提到的在网卡接口 down 的状态下进行自协商后，phy 的状态变为 UP，而 ethtool 输出的 Link detected 项为 no 的情况是正常的现象。</p><p>此时 ifconfig 显示的网卡状态不是 RUNNING，netif_running 将会返回 false，&amp;&amp; 语句之后的读取硬件寄存器中保存的链路状态的操作将被忽略，edata.data 将会返回 false，对应 ethtool 中 Link detected 项的输出为 no。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dev-ethtool_ops-get_linkdev-vs-rte_eth_link_get">dev-&gt;ethtool_ops-&gt;get_link(dev) vs rte_eth_link_get<a class="hash-link" href="#dev-ethtool_ops-get_linkdev-vs-rte_eth_link_get" title="标题的直接链接">​</a></h2><p><code>dev-&gt;ethtool_ops-&gt;get_link(dev)</code>最终是通过访问网卡中的寄存器来获取链路状态。</p><p>dpdk 中的 rte_eth_link_get 函数根据 lsc 中断是否开启，有两种不同的处理方式。</p><ol><li><p>lsc 中断使能</p><p>原子读取 dev 结构体中的 eth_link 成员。这个成员只能在 interrupt host 线程中被更新。用户注册的 lsc 中断回调函数也是在 interrupt host 线程中被调用的，可以在 lsc 中断回调函数中改变 eth_link 的值。</p></li><li><p>lsc 中断关闭
调用 dev_ops 中实现的 link_update 函数，该函数通过直接访问网卡寄存器来获取链路的最新状态。</p></li></ol><p>在 lsc 中断关闭的情况下，rte_eth_link_get 与 dev-&gt;ethtool-ops-&gt;get_link(dev) 最终都是通过访问网卡寄存器来确定链路状态的。</p><p>至于说 ethtool 读到的状态与 dpdk 读到的网卡状态不一致，这是指 ethtool 中的 Link detected 中检测到的链路状态与 rte_eth_link_get 函数的输出不同。</p><p><strong>从上面的分析中我们可以发现，ethtool 中的 Link detected 输出 yes 的必备条件还有 netif_running 返回 true，而 rte_eth_link_get 却没有使用这个状态，这两者从逻辑上来说也不是在任何时候都会一致的。</strong></p><p><strong>综上所述，这个问题其实不是功能的问题，而是不了解功能的实现而误判的问题。</strong></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/将网卡绑定到官方驱动测试过程]]></title>
        <id>/dpdk/将网卡绑定到官方驱动测试过程</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/将网卡绑定到官方驱动测试过程"/>
        <updated>2022-06-19T07:40:00.000Z</updated>
        <summary type="html"><![CDATA[将网卡绑定到官方驱动进行测试]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="将网卡绑定到官方驱动进行测试">将网卡绑定到官方驱动进行测试<a class="hash-link" href="#将网卡绑定到官方驱动进行测试" title="标题的直接链接">​</a></h2><p>对于网卡的一些异常情况，常常需要使用官方驱动进行相同的测试以确认问题。
本文叙述了将网卡绑定到官方驱动进行测试的过程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="网卡解绑定">网卡解绑定<a class="hash-link" href="#网卡解绑定" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-lsof-devuio-找到使用-devuiox-设备文件的产品程序">1. lsof /dev/uio* 找到使用 /dev/uioX 设备文件的产品程序。<a class="hash-link" href="#1-lsof-devuio-找到使用-devuiox-设备文件的产品程序" title="标题的直接链接">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[root]# lsof /dev/uio*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF  NODE NAME</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">l2fwd     21178 root   30u   CHR  248,1      0t0 28807 /dev/uio1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">l2fwd     21178 root   32u   CHR  248,0      0t0 28805 /dev/uio0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">l2fwd     21178 root   34u   CHR  248,3      0t0 25875 /dev/uio3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">........</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从上面的输出里面可以确认，产品的 server 为 l2fwd 程序，这个 l2fwd 程序使用了
设备文件 /dev/uioX。</p><p>我们首先需要 kill 产品的 server ，确保在没人使用的情况下解绑定网卡。为了防止
kill 程序后守护程序将 server 重新拉起来，<strong>可以将 server 重命名，然后 kill server。</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-网卡从-igb_uio-驱动解绑">2. 网卡从 igb_uio 驱动解绑<a class="hash-link" href="#2-网卡从-igb_uio-驱动解绑" title="标题的直接链接">​</a></h3><p>首先需要确定需要解绑定网卡的 pci 号。一般可以通过 lspci 命令来查询。</p><p>某设备上 X710 网卡的 pci 号相关信息示例如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[root]# lspci |grep 'Eth'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0f:00.0 Ethernet controller: Intel Corporation Ethernet Controller X710 for 10GbE backplane (rev 02)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0f:00.1 Ethernet controller: Intel Corporation Ethernet Controller X710 for 10GbE backplane (rev 02)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面 0f:00.0 与 0f:00.1 就是 X710 网卡的 pci 号。</p><p>解绑定需要使用 dpdk_nic_bind.py 脚本来完成，不同的产品这个脚本的位置可能不同，这点需要注意。</p><p>解绑定示例如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[root]# /usr/local/bin/dpdk_nic_bind.py -u 0f:00.0 0f:00.1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在上面的命令行中，-u 表示解除绑定，0f:00.0 与 0f:00.1 表示要解除绑定的网口。执行完成后，可以执行</p><p>dpdk_nic_bind.py -s 命令查看绑定信息，确认是否成功解绑。</p><p>示例如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[root]# /usr/local/bin/dpdk_nic_bind.py -s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">............</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Other network devices</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">=====================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:0f:00.0 'Ethernet Controller X710 for 10GbE backplane' unused=igb_uio,uio_pci_generic</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:0f:00.1 'Ethernet Controller X710 for 10GbE backplane' unused=igb_uio,uio_pci_generic</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从上面的输出中可以看到，0000:0f:00.0 与 0000:0f:00.1 网卡接口已经解除了绑定，没有绑定到
任何驱动上面。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="加载网卡的官方驱动-ko-时自动识别并绑定">加载网卡的官方驱动 ko 时自动识别并绑定<a class="hash-link" href="#加载网卡的官方驱动-ko-时自动识别并绑定" title="标题的直接链接">​</a></h2><p>当我们将网卡从 igb_uio 驱动上面解绑之后，就可以加载网卡使用的官方驱动了。这里的官方驱动
一般系统上会带有（一般放在 /bin 目录下），没有的话就需要自己编译后上传到设备上来加载了。</p><p>上面的示例操作中，网卡已经解除 igb_uio 的绑定。这样当我们在加载官方驱动的时候，内核会自
动识别到网卡，并执行对应的 probe 操作。</p><p>X710 网卡使用的官方驱动是 intel 的 i40e 驱动，加载 i40e 驱动的示例如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[root]# insmod /bin/i40e.ko </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root]# dmesg | tail -n 20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.260739] i40e: Intel(R) Ethernet Connection XL710 Network Driver - version 1.4.25-k</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.260746] i40e: Copyright (c) 2013 - 2014 Intel Corporation.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.279249] i40e 0000:0f:00.0: fw 6.1.49420 api 1.7 nvm 6.80 0x80003cf0 0.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.279258] i40e 0000:0f:00.0: The driver for the device detected a newer version of the NVM image than expected. Please install the most recent version of the network driver.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.365299] i40e 0000:0f:00.0: MAC address: 98:30:00:1e:42:20</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.369576] i40e 0000:0f:00.0: SAN MAC: 00:00:00:00:02:00</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.432223] i40e 0000:0f:00.0 enp15s0f0: renamed from eth2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.496835] i40e 0000:0f:00.0: PCI-Express: Speed 8.0GT/s Width x8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.502928] i40e 0000:0f:00.0: Features: PF-id[0] VFs: 64 VSIs: 66 QP: 16 RX: 1BUF RSS FD_ATR FD_SB NTUPLE VxLAN PTP VEPA</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.522602] i40e 0000:0f:00.1: fw 6.1.49420 api 1.7 nvm 6.80 0x80003cf0 0.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.522611] i40e 0000:0f:00.1: The driver for the device detected a newer version of the NVM image than expected. Please install the most recent version of the network driver.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.610493] i40e 0000:0f:00.1: MAC address: 98:30:00:1e:42:21</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.614555] i40e 0000:0f:00.1: SAN MAC: 00:00:00:00:02:01</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.842767] i40e 0000:0f:00.1: PCI-Express: Speed 8.0GT/s Width x8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.849279] i40e 0000:0f:00.1: Features: PF-id[1] VFs: 64 VSIs: 66 QP: 16 RX: 1BUF RSS FD_ATR FD_SB NTUPLE VxLAN PTP VEPA</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[79357.966780] i40e 0000:0f:00.1 enp15s0f1: renamed from eth2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从上面的输出中可以看到，加载了 i40e.ko 后，0f:00.0 与 0f:00.1 网卡接口被自动识别并绑定到
了 i40e 驱动，对应的 netdev 名称分别为：enp15s0f0 与 enp15s0f1，这之后我们就可以进行测试
了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="手动绑定网卡到官方驱动上">手动绑定网卡到官方驱动上<a class="hash-link" href="#手动绑定网卡到官方驱动上" title="标题的直接链接">​</a></h2><p>如果我们先加载了网卡的官方驱动，然后再解除 igb_uio 的绑定并重新绑定到官方驱动上面，可以
执行下面的命令手动将网卡接口绑定到官方驱动上。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">dpdk_nic_bind.py -b driver_name pcinum</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>driver_name 为加载的官方驱动的名称，pcinum 为产品的 pci 号，多个 pcinum 之间使用空格分隔。</p><p>一个示例如下：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[root]# /usr/local/bin/dpdk_nic_bind.py -b i40e 0f:00.0 0f:00.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root]# /usr/local/bin/dpdk_nic_bind.py -s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">········</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Network devices using kernel driver</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">===================================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:0f:00.0 'Ethernet Controller X710 for 10GbE backplane' if=enp15s0f0 drv=i40e unused=igb_uio,uio_pci_generic </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000:0f:00.1 'Ethernet Controller X710 for 10GbE backplane' if=enp15s0f1 drv=i40e unused=igb_uio,uio_pci_generic </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的示例中首先通过 dpdk_nic_bind.py -b 将 0f:00.0 与 0f:00.1 绑定到 i40e 官方驱动上，然后
执行 dpdk_nic_bind.py -s 显示当前的网卡设备状态。从输出可以发现，0f:00.0 与 0f:00.1 已经被
绑定到了官方驱动上面。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="重新绑定到-igb_uio-中并恢复">重新绑定到 igb_uio 中并恢复<a class="hash-link" href="#重新绑定到-igb_uio-中并恢复" title="标题的直接链接">​</a></h2><p>测试完成后，我们需要重新将网卡绑定到 igb_uio 上，执行 dpdk_nic_bind.py -b 命令来完成。</p><p>如果绑定的过程中有如下报警，则需要执行 ifconfig netdev down 命令来将网卡 down 掉，再解除
绑定。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[root]# /usr/local/bin/dpdk_nic_bind.py -b igb_uio 0f:00.0 0f:00.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Routing table indicates that interface 0000:0f:00.0 is active. Not modifying</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>ifconfig down 掉网卡后再重新绑定的示例：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[root]# ifconfig enp15s0f0 down</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root]# /usr/local/bin/dpdk_nic_bind.py -b igb_uio 0f:00.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/记录一次编译器版本过低导致 dpdk 无法成功编译的问题]]></title>
        <id>/dpdk/记录一次编译器版本过低导致 dpdk 无法成功编译的问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/记录一次编译器版本过低导致 dpdk 无法成功编译的问题"/>
        <updated>2022-06-19T07:40:00.000Z</updated>
        <summary type="html"><![CDATA[编译 dpdk-20.02 时，有如下报错信息：]]></summary>
        <content type="html"><![CDATA[<p>编译 dpdk-20.02 时，有如下报错信息：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">error: ‘__ATOMIC_RELAXED’ undeclared (first use in this function)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">error: ‘__ATOMIC_ACQUIRE’ undeclared (first use in this function)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">error: ‘__ATOMIC_RELAXED’ undeclared (first use in this function)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">error: ‘__ATOMIC_ACQUIRE’ undeclared (first use in this function)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="分析解决">分析解决<a class="hash-link" href="#分析解决" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="头文件的问题">头文件的问题<a class="hash-link" href="#头文件的问题" title="标题的直接链接">​</a></h3><p>根据过去的经验，未声明的符号这个错误很大概率是头文件的问题。首先需要确定的是编译的源码中是否有相关的符号声明。</p><p>使用上述符号在 dpdk-20.02 的源码里面搜索，只发现很多使用的地方，没有发现声明。</p><p>这意味着上面找不到的符号不是 dpdk 内部定义的符号，那么这些符号可能是 dpdk 依赖的外部头文件中声明的。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="内核头文件是否声明这些符号">内核头文件是否声明这些符号<a class="hash-link" href="#内核头文件是否声明这些符号" title="标题的直接链接">​</a></h3><p>考虑到 dpdk 编译的时候需要指定内核源码路径，这些符号可能在内核头文件中声明。</p><p>使用上述符号在内核源码中全局搜索，没有找到。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="在网上搜索">在网上搜索<a class="hash-link" href="#在网上搜索" title="标题的直接链接">​</a></h3><p>搜索了下，发现如下链接中有相同的问题案例：</p><p><a href="https://github.com/nim-lang/Nim/issues/2620" target="_blank" rel="noopener noreferrer">__ATOMIC_RELAXED undeclared</a></p><p>浏览上述链接网页，发现这个问题可能是 gcc 版本过低导致的。网页中的讨论中有下面这一句：</p><blockquote><p>The atomic builtins referenced in atomic.nim are only available with GCC 4.7+</p></blockquote><p>我检查自己编译环境下的 gcc 版本，发现使用的 gcc 为 4.5.3 版本。</p><p>这之后我在另外一个编译环境上重新编译，编译前确认 gcc 的版本高于 4.7，编译成功。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[dpdk/设置 EXTRA_CFLAGS 以编译 debug 版本 dpdk 库]]></title>
        <id>/dpdk/设置 EXTRA_CFLAGS 以编译 debug 版本 dpdk 库</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/dpdk/设置 EXTRA_CFLAGS 以编译 debug 版本 dpdk 库"/>
        <updated>2022-06-19T07:40:00.000Z</updated>
        <summary type="html"><![CDATA[命令行指定 CFLAGS 不生效]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="命令行指定-cflags-不生效">命令行指定 CFLAGS 不生效<a class="hash-link" href="#命令行指定-cflags-不生效" title="标题的直接链接">​</a></h2><p>dpdk 的 Makefile 中有对 CFLAGS 的设定，在很多 Makefile 单独设定了 CFLAGS 增加 -O3 参数。</p><p>下面是 dpdk-17.05 中一些 Makefile 在 CFLAGS 标志中增加 -O3 选项的语句。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">.......</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./lib/librte_reorder/Makefile:37:CFLAGS += -O3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./drivers/net/fm10k/Makefile:39:CFLAGS += -O3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./drivers/net/tap/Makefile:42:CFLAGS += -O3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./drivers/net/pcap/Makefile:40:CFLAGS += -O3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./drivers/net/sfc/Makefile:38:CFLAGS += -O3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./drivers/net/vhost/Makefile:41:CFLAGS += -O3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./drivers/net/null/Makefile:39:CFLAGS += -O3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./drivers/net/mlx4/Makefile:47:CFLAGS += -O3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">./drivers/net/af_packet/Makefile:45:CFLAGS += -O3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">........</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>全局设定 <code>export CFLAGS=" -O0 0g"</code>后重新编译发现还是使用了 -O3 编译，这表明 dpdk 的编译脚本中对 CFLAGS 的值重新进行了设定，<strong>不能通过命令行指定 CFLAGS 来编译出 debug 版本。</strong></p><p>在 doc 目录下找到了如下相关内容：</p><div class="language-rst codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rst codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">331 Variables that Can be Set/Overridden in a Makefile Only</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">332 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">333 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">334 *   VPATH: The path list that the build system will search for sources. By default, RTE_SRCDIR will be included in VPATH.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">335 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">336 *   CFLAGS: Flags to use for C compilation. The user should use +=  to append data in this variable.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">337 </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从上面的内容中可以看出，用户不能通过命令行设定 CFLAGS，只能通过 Makefile 文件来设定。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="命令行设置-extra_cflags-标志生成-debug-版">命令行设置 EXTRA_CFLAGS 标志生成 debug 版<a class="hash-link" href="#命令行设置-extra_cflags-标志生成-debug-版" title="标题的直接链接">​</a></h2><p>继续阅读 doc 目录中的帮助文档，我发现 EXTRA_CFLAGS 标志可以使用。文档中相关的内容摘取如下：</p><div class="language-rst codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rst codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Variables that Can be Set/Overridden by the User in a Makefile or Command Line</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">389 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">390 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">391 *   CFLAGS_my_file.o: Specific flags to add for C compilation of my_file.c.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">392 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">393 *   LDFLAGS_my_app: Specific flags to add when linking my_app.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">394     </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">395 *   EXTRA_CFLAGS: The content of this variable is appended after CFLAGS when compiling.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">396 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">397 *   EXTRA_LDFLAGS: The content of this variable is appended after LDFLAGS when linking.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">398 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">399 *   EXTRA_LDLIBS: The content of this variable is appended after LDLIBS when linking.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">400 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">401 *   EXTRA_ASFLAGS: The content of this variable is appended after ASFLAGS when assembling.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">402 </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">403 *   EXTRA_CPPFLAGS: The content of this variable is appended after CPPFLAGS when using a C preprocessor on assembly files.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上面的介绍表明 EXTRA_CFLAGS 变量可以通过命令行进行设定，同时它会在编译时追加到 CFLAGS 内容之后。</p><p>执行 export EXTRA_CFLAGS="-O0 -g" 后重新编译 dpdk 的库，使用 gdb 调试 app 目录下生成的可执行文件发现 gdb 能够读取到调试信息。</p><p>虽然有了调试信息，但是 Makefile 中对 CFLAGS 变量增加的 -O3 选项可能意味着编译出来的是 O3 版本的程序，这样就不能算作是 debug 版本。</p><p>我查看编译编译目录中 *.o.cmd 中保存的编译命令，发现库函数的编译命令中同时设定了 -O3 与 -O0 -g 参数。</p><p>示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:22:02:09</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> x86_64-native-linuxapp-gcc $ </span><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> ./build/lib/librte_eal/linuxapp/eal/.eal_alarm.o.cmd </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cmd_eal_alarm.o </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> gcc -Wp,-MD,./.eal_alarm.o.d.tmp  -m64 -pthread  -march</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">native -DRTE_MACHINE_CPUFLAG_SSE -DRTE_MACHINE_CPUFLAG_SSE2 -DRTE_MACHINE_CPUFLAG_SSE3 -DRTE_MACHINE_CPUFLAG_SSSE3 -DRTE_MACHINE_CPUFLAG_SSE4_1 -DRTE_MACHINE_CPUFLAG_SSE4_2 -DRTE_MACHINE_CPUFLAG_AES -DRTE_MACHINE_CPUFLAG_PCLMULQDQ -DRTE_MACHINE_CPUFLAG_AVX -DRTE_MACHINE_CPUFLAG_RDRAND -DRTE_MACHINE_CPUFLAG_FSGSBASE -DRTE_MACHINE_CPUFLAG_F16C -DRTE_MACHINE_CPUFLAG_AVX2  -I/home/longyu/Downloads/dpdk-stable-17.02.1/x86_64-native-linuxapp-gcc/include -include /home/longyu/Downloads/dpdk-stable-17.02.1/x86_64-native-linuxapp-gcc/include/rte_config.h -I/home/longyu/Downloads/dpdk-stable-17.02.1/lib/librte_eal/linuxapp/eal/include -I/home/longyu/Downloads/dpdk-stable-17.02.1/lib/librte_eal/common -I/home/longyu/Downloads/dpdk-stable-17.02.1/lib/librte_eal/common/include -W -Wall -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wold-style-definition -Wpointer-arith -Wcast-align -Wnested-externs -Wcast-qual -Wformat-nonliteral -Wformat-security -Wundef -Wwrite-strings -O3  -O0 -g  -o eal_alarm.o -c /home/longyu/Downloads/dpdk-stable-17.02.1/lib/librte_eal/linuxapp/eal/eal_alarm.c  </span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>查看到编译命令，我想到了一个问题——<strong>指定了多个优化选项时 gcc 编译时会使用哪个呢？</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="gcc-同时指定多个优化选项的问题">gcc 同时指定多个优化选项的问题<a class="hash-link" href="#gcc-同时指定多个优化选项的问题" title="标题的直接链接">​</a></h2><p>经过搜索，我发现 gcc 的官方网页中对这个问题进行了描述。当 gcc 编译命令中指定了多个优化选项时，只有最后一个优化选项生效。</p><p>-O3 是在 CFLAGS 变量中指定的，EXTRA_CFLAGS 是我们在命令行中指定的，根据 dpdk 的帮助文档中的说明，EXTRA_CFLAGS 的值会在编译时追加到 CFLAGS 的值后，这样我们就看到了有 -O3 ..... -O0 -g 这样的编译命令。</p><p>-O0 是最后一个指定的优化选项，实际生效的是 -O0，而非 -O3，这样我们通过设定 EXTRA_CFLAGS 为 -O0 -g 就能够编译出 debug 版本的 dpdk。</p><p>备注: EXTRA_CFLAGS 是在  mk/internal/rte.compile-pre.mk 中使用的。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="最终确定的编译-dpdk-debug-版本的方法">最终确定的编译 dpdk debug 版本的方法<a class="hash-link" href="#最终确定的编译-dpdk-debug-版本的方法" title="标题的直接链接">​</a></h2><p>命令行中执行如下命令设定 EXTRA_CFLAGS 后重新编译即可。</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">EXTRA_CFLAGS</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"-O0 -g"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[libc/使用mtrace跟踪内存泄露问题]]></title>
        <id>/libc/使用mtrace跟踪内存泄露问题</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/libc/使用mtrace跟踪内存泄露问题"/>
        <updated>2022-06-19T07:40:00.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="标题的直接链接">​</a></h2><p>研究动态链接的原理中，无意间发现了 <strong>mtrace</strong> 这个东东。它是一个 libc 库提供的函数，<strong>通过向 malloc、calloc、free 等函数注册 hook 函数来实现内存申请与释放的跟踪</strong>，可以用来<strong>定位内存泄露问题</strong>。</p><p>在本文中，我将描述一个具体的使用实例，及使用过程中遇到的一些问题。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="mtrace-示例-demo">mtrace 示例 demo<a class="hash-link" href="#mtrace-示例-demo" title="标题的直接链接">​</a></h2><p><strong>man 3 mtrace</strong> 查看 manual 信息，发现 manual 中已经提供了一个非常简单的示例 demo，其源码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;mcheck.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdlib.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">argv</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">mtrace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">/* Never freed--a memory leak */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">/* Never freed--a memory leak */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_SUCCESS</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>将上述代码保存为 t_mtrace.c 源文件，执行如下命令进行编译：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">gcc -g t_mtrace.c -o t_mtrace</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在运行之前，我们需要设定 <strong>MALLOC_TRACE</strong> 环境变量，这个环境变量指向 mtrace 输出记录文件的路径。</p><p>MALLOC_TRACE 设定示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">MALLOC_TRACE</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">/tmp/t</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>设定了这个变量之后就可以运行 <strong>t_mtrace</strong> 程序，运行完成后 /tmp/t 文件中将会保存输出的记录，示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:19:25:40</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> program-problem $ </span><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> /tmp/t</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ ./t_mtrace:</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">0x55555555518c</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> + 0x5555555596a0 0x64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ ./t_mtrace:</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">0x55555555518c</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> + 0x555555559710 0x64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ ./t_mtrace:</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">0x5555555551a5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> + 0x555555559780 0x100</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>/tmp/t</strong> 的输出并不直观，libc 库提供了一个同样名为 mtrace 的 perl 脚本来解析这个记录，mtrace 脚本需要提供两个参数，第一个参数为<strong>可执行程序的路径名</strong>，第二个参数为 <strong>mtrace 函数输出的记录文件</strong>。</p><p>执行示例如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:19:29:08</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> program-problem $ mtrace ./t_mtrace </span><span class="token variable" style="color:#36acaa">$MALLOC_TRACE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Memory not freed:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           Address     Size     Caller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x00005555555596a0     0x64  at 0x55555555518c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000555555559710     0x64  at 0x55555555518c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000555555559780    0x100  at 0x5555555551a5</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里我得到的输出信息与 manual 中的信息不同，<strong>没有显示出调用者所在源码中的行号。</strong></p><p>manual 中的输出信息如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">           $ mtrace ./t_mtrace </span><span class="token variable" style="color:#36acaa">$MALLOC_TRACE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           Memory not freed:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           -----------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              Address     Size     Caller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           0x084c9378     0x64  at /home/cecilia/t_mtrace.c:12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           0x084c93e0     0x64  at /home/cecilia/t_mtrace.c:12</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           0x084c9448    0x100  at /home/cecilia/t_mtrace.c:16</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>重新 <strong>check</strong> 我的运行过程，我确定与 manual 中描述的一致，看来一定是哪里出了问题了。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="对-mtrace-脚本解析不到行号问题的解决过程">对 mtrace 脚本解析不到行号问题的解决过程<a class="hash-link" href="#对-mtrace-脚本解析不到行号问题的解决过程" title="标题的直接链接">​</a></h2><p>对这个问题，我最开始进行了如下尝试：</p><ol><li>-O0 -g 编译后测试发现仍旧没有打印</li><li>修改文件名为绝对路径后也没有打印</li><li>对比加了-g、没有加 -g  /tmp/t 文件的区别，发现内容完全相同</li><li>网上搜索发现有相关的描述，不过网页中同 manual 中一样能够显示源代码行号</li></ol><p>在上面的尝试都失败后，我开始使用 strace 大法。用了 strace 后看到了一堆系统调用，其中<strong>有执行 addr2line 的过程</strong>，看来这个 mtrace 脚本实际是运行 addr2line 命令获取到的行号，那<strong>问题是否出在 addr2line 中呢？</strong></p><p>我单独使用 addr2line 获取 /tmp/t 中函数调用地址对应的行号，发现根本获取不到任何信息，输出内容为 ??。</p><p>搞到这里我还是没有发现根本问题，只能硬着头皮用 perl -d 来运行这个 mtrace 脚本，调试了下也没有发现关键的点。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="进一步的分析">进一步的分析<a class="hash-link" href="#进一步的分析" title="标题的直接链接">​</a></h3><p>在一系列的尝试后，我暂时没有找到一个解决方案，不过我觉得 <strong>addr2line 是个非常重要的怀疑对象</strong>。为了验证我的猜测，我将代码进行了如下修改：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;mcheck.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdlib.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">argv</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">mtrace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%p\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> mtrace</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> j</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">malloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">/* Never freed--a memory leak */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">calloc</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">16</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">             </span><span class="token comment" style="color:#999988;font-style:italic">/* Never freed--a memory leak */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">pause</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">EXIT_SUCCESS</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我这里打印出了 <strong>mtrace 函数的地址</strong>，编译并执行后会得到 mtrace 函数的地址，然后我使用 addr2line 命令，指定这个地址来获取源码行号，发现仍旧打印的是 ??，这让我觉的很大概率是 <strong>addr2line 命令的问题</strong>。</p><p>在这个基础上，我执行 <strong>objdump -d 反汇编可执行文件</strong>，然后使用 main 函数的<strong>相对地址为参数</strong>继续调用 addr2line 命令来解析，这一次<strong>能够解析到了。</strong></p><p>测试过程记录如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:19:50:39</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> program-problem $ objdump -d t_mtrace </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    109d:   </span><span class="token number" style="color:#36acaa">48</span><span class="token plain"> 8d 3d c1 00 00 00    lea    0xc1</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">%rip</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">,%rdi        </span><span class="token comment" style="color:#999988;font-style:italic"># 1165 &lt;main&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    10a4:   ff </span><span class="token number" style="color:#36acaa">15</span><span class="token plain"> 2e 2f 00 00       callq  *0x2f2e</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">%rip</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># 3fd8 &lt;__libc_start_main@GLIBC_2.2.5&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000000000001165 </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">main</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    119b:   eb 0e                   jmp    11ab </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">main+0x4</span><span class="token operator file-descriptor important" style="color:#393A34">6</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    11af:   7e ec                   jle    119d </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">main+0x3</span><span class="token operator file-descriptor important" style="color:#393A34">8</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:19:50:44</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> program-problem $ addr2line -e ./t_mtrace </span><span class="token number" style="color:#36acaa">1165</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/home/longyu/problem_and_solution/program-problem/./t_mtrace.c:7</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到在最后一行，addr2line 打印出了行号！</p><p>然后使用 gdb 运行，start 后在 main 函数处停下来后，反汇编 main 函数，发现 <strong>main 函数的地址与 objdump -d 的输出完全不同</strong>，看来应该是<strong>基地址被修改了。</strong></p><p>测试记录如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Temporary breakpoint </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> at 0x1174: </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> ./mtrace.c, line </span><span class="token number" style="color:#36acaa">10</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Starting program: /home/longyu/problem_and_solution/program-problem/t_mtrace </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Temporary breakpoint </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">, main </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain">, </span><span class="token assign-left variable" style="color:#36acaa">argv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x7fffffffdae8</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at ./mtrace.c:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10</span><span class="token plain">                 mtrace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> disass main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Dump of assembler code </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> main:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x0000555555555165 </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">+</span><span class="token operator file-descriptor important" style="color:#393A34">0</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">: push   %rbp</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到这里 main 函数的地址变为了 <strong>0x0000555555555165</strong>，这就造成 addr2line 命令不能解析到源码行号。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="关闭-aslr">关闭 ASLR<a class="hash-link" href="#关闭-aslr" title="标题的直接链接">​</a></h3><p><strong>再次执行此程序</strong>，我发现每次打印的 mtrace 函数的地址都不一样，这点让我想起了 ASLR 这个功能，首先查看 /proc/sys/kernel/randomize_va_space 文件的内容，发现值为 2 表示<strong>这个功能确实是打开的。</strong></p><p>使用 root 权限向 /proc/sys/kernel/randomize_va_space 文件写入 0 关闭这个功能后，重新执行上面的测试，发现<strong>仍旧不能获取到行号信息</strong>。</p><p>看来还是得从 addr2line 命令上着手！</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="以-addr2line-cannot-work-为关键词搜索互联网">以 addr2line cannot work 为关键词搜索互联网<a class="hash-link" href="#以-addr2line-cannot-work-为关键词搜索互联网" title="标题的直接链接">​</a></h3><p>使用 addr2line cannot work 搜索后，我在 <a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=860394" target="_blank" rel="noopener noreferrer">addr2line cannot decode addresses that gdb does</a> 这篇链接中看到了如下关键信息：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">There are 2 things going on. First, by default gcc is now building</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">executables as position independent (-pie). This can be explicitly</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">disabled with the -no-pie linking option. Disabling PIE should result in</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">things working as they did before.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The second thing going on is Address Space Layout Randomization</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">(ASLR). This is now active by default and will cause all PIE executables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">to be loaded to random addresses. This can be disabled globally with</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">sysctl:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $ sudo sysctl -w kernel.randomize_va_space=0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Or with a boot argument:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    norandmaps</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Or (preferrably) locally for the process you are interested:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    $ setarch `uname -m` -R /some/program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Often it is convenient to use the above command with /bin/bash so as to</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">quickly create a non-randomized environment for yourself.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">However, be aware that even when ASLR is disabled, if it is a PIE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">exectuable, it will always load to the same address, but that is not the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">address within the executable. That means that for PIE executables, many</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">binutils (such as addr2line) will require you to recalculate the offset.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我<strong>已经关闭了 ASLR 功能</strong>，对应上述描述的第二点，第一点描述说与 pie 有关，通过指定 <strong>-no-pie</strong> 参数重新编译上述程序，直接在 gdb 中运行，再次反汇编 main 函数，这次得到了如下输出信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Temporary breakpoint </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> at 0x401171: </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> ./mtrace.c, line </span><span class="token number" style="color:#36acaa">10</span><span class="token plain">.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Starting program: /home/longyu/problem_and_solution/program-problem/t_mtrace </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Temporary breakpoint </span><span class="token number" style="color:#36acaa">1</span><span class="token plain">, main </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">argc</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">1</span><span class="token plain">, </span><span class="token assign-left variable" style="color:#36acaa">argv</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">0x7fffffffdae8</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> at ./mtrace.c:10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">10</span><span class="token plain">                 mtrace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">gdb</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> disass main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Dump of assembler code </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> main:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x0000000000401162 </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">+</span><span class="token operator file-descriptor important" style="color:#393A34">0</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">: push   %rbp</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到这次，main 函数地址变为了 <strong>0x401162</strong>，objdump -d 输出的 main 函数地址如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">0000000000401162 </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">main</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">401162</span><span class="token plain">:   </span><span class="token number" style="color:#36acaa">55</span><span class="token plain">                      push   %rbp</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到，<strong>这次 objdump 得到的函数地址与运行时的地址一致了</strong>，看来应该没有问题了。</p><p>运行程序后，继续查看 /tmp/t 的内容，这次得到了如下信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:20:09:00</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> program-problem $ </span><span class="token function" style="color:#d73a49">cat</span><span class="token plain"> /tmp/t</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Start</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ /lib/x86_64-linux-gnu/libc.so.6:</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">_IO_file_doallocate+0x8c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">0x7ffff7e5971c</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> + 0x4056a0 0x400</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ ./t_mtrace:</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">0x4011a4</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> + 0x405ab0 0x64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ ./t_mtrace:</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">0x4011a4</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> + 0x405b20 0x64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ ./t_mtrace:</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">0x4011bd</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> + 0x405b90 0x100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@ /lib/x86_64-linux-gnu/libc.so.6:</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">0x7ffff7f52ad4</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> - 0x4056a0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这个输出看上去非常正常，看来问题应该能够得到解决了！再次执行 mtrace 脚本，这次确实能够获取到源码行号了，操作记录如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:20:10:06</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> program-problem $ mtrace ./t_mtrace /tmp/t</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Memory not freed:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-----------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           Address     Size     Caller</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000405ab0     0x64  at /home/longyu/problem_and_solution/program-problem/./t_mtrace.c:13 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">discriminator </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000405b20     0x64  at /home/longyu/problem_and_solution/program-problem/./t_mtrace.c:13 </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">discriminator </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0x0000000000405b90    0x100  at /home/longyu/problem_and_solution/program-problem/./t_mtrace.c:17</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>如果你对这里的行号足够敏感，你会发现这里的行号并不准确，其实在 manual 中已经说明了这个问题。</p><p>上述 demo 中调用了 malloc 与 calloc 函数并且都没有调用 free 来释放，<strong>模拟内存泄露的情况</strong>，根据 mtrace 的输出，我们就能够马上定位到内存泄露的位置。</p><p>同时需要注意的是，当 <strong>MALLOC_TRACE</strong> 指向了一个合法的可以写的文件路径时，mtrace 能够运行，但是可能会带来<strong>性能上的损耗！</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="mtrace-是咋样实现的">mtrace 是咋样实现的？<a class="hash-link" href="#mtrace-是咋样实现的" title="标题的直接链接">​</a></h2><p>解决了 addr2line 不能显示源码行号的问题，mtrace 算正式上手了，下一个问题是 mtrace 是如何实现的呢？</p><p>mtrace 函数的源码位于 glibc 源码中的 <strong>malloc/mtrace.c</strong> 中，核心逻辑是设定 malloc、calloc、realloc、free 等几个申请、释放内存空间函数使用的内部 hook 函数。相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">308</span><span class="token plain">           tr_old_free_hook </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> __free_hook</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">309</span><span class="token plain">           __free_hook </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tr_freehook</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">310</span><span class="token plain">           tr_old_malloc_hook </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> __malloc_hook</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">311</span><span class="token plain">           __malloc_hook </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tr_mallochook</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">312</span><span class="token plain">           tr_old_realloc_hook </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> __realloc_hook</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">313</span><span class="token plain">           __realloc_hook </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tr_reallochook</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">                                                                                                                               </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">314</span><span class="token plain">           tr_old_memalign_hook </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> __memalign_hook</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">315</span><span class="token plain">           __memalign_hook </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> tr_memalignhook</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>那这些 hook 函数是在哪里被调用的呢？这里我以 malloc 函数中的调用代码为例来描述，旨在抛出<strong>如何获取返回地址</strong>这一问题。</p><p>相关代码如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">3018</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3019</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">__libc_malloc</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">size_t</span><span class="token plain"> bytes</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3020</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3021</span><span class="token plain">   mstate ar_ptr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3022</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">victim</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3023</span><span class="token plain">   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3024</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">hook</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">size_t</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3025</span><span class="token plain">     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">atomic_forced_read</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">__malloc_hook</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3026</span><span class="token plain">   </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">__builtin_expect</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hook </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3027</span><span class="token plain">     </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">hook</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">bytes</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">RETURN_ADDRESS</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意当 <strong>__malloc_hook</strong> 不为 NULL 的时候（调用了 mtrace 函数会设定 __malloc_hook 函数指针），该 hook 函数会被被调用，调用 hook 函数传递的第二个参数 <strong>RETURN_ADDRESS (0)</strong> 值得研究。</p><p>这个 RETURN_ADDRESS(0) 是一个宏，其定义如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/* Determine the return address.  */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">RETURN_ADDRESS</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">nr</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property punctuation" style="color:#393A34">\</span><span class="token macro property" style="color:#36acaa"></span><br></span><span class="token-line" style="color:#393A34"><span class="token macro property" style="color:#36acaa">  </span><span class="token macro property expression function" style="color:#d73a49">__builtin_extract_return_addr</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression function" style="color:#d73a49">__builtin_return_address</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">nr</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里使用了 gcc 的扩展功能来获取函数的返回地址，这里的 nr 对应的是栈帧的层级，0 表示当前函数的返回地址，放在这就是 <strong>malloc 函数执行完成后继续执行的下一条指令地址。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="__builtin_return_address-是如何实现的">__builtin_return_address 是如何实现的？<a class="hash-link" href="#__builtin_return_address-是如何实现的" title="标题的直接链接">​</a></h2><p>写到这里与 mtrace 相关的内容告一段落，开始跳到 __builtin_return_address 的实现上。</p><p>关于这个函数的实现，根据之前学习 《CSAPP》的印象，其实关键在于获取到栈中不同栈帧的 EBP 与 EIP 的值，<strong>EBP 表示栈底，而 EIP 则是返回地址。</strong></p><p>函数调用时，<strong>参数首先压栈，按照从右向左的顺序</strong>，然后<strong>返回地址入栈</strong>，然后<strong>调用者的 EBP （旧的EBP ）压栈</strong>。x86 中栈是向下增长的，我们只需要获取到当前 EBP 寄存器的值向上拨动一个数据单元（32-bit 4 字节，64-bit 8 字节），访问这个地址就能够得到返回地址。同时上一级函数栈帧的 EBP 又可以通过当前函数的 EBP 获取到（<strong>访问当前函数 EBP 寄存器值指向的地址</strong>）。</p><p>由于函数调用存在嵌套性，可能存在多个函数栈帧，我们需要<strong>递归执行</strong>上述过程。</p><p>更具体的信息请访问：</p><p><a href="https://blog.csdn.net/absurd/article/details/4207357?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160423542319724836730112%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=160423542319724836730112&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-4207357.pc_v1_rank_blog_v1&amp;utm_term=%E8%B0%83%E7%94%A8&amp;spm=1018.2118.3001.4450" target="_blank" rel="noopener noreferrer">系统程序员成长计划－像机器一样思考(二)</a>
<a href="https://blog.csdn.net/absurd/article/details/4207357?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160423542319724836730112%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=160423542319724836730112&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-4207357.pc_v1_rank_blog_v1&amp;utm_term=%E8%B0%83%E7%94%A8&amp;spm=1018.2118.3001.4450" target="_blank" rel="noopener noreferrer"></a></p><p>上述链接中的示例代码直接编译运行在我的系统上会报段错误，我修改了部分内容，新的 demo 如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token macro property" style="color:#36acaa"> </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">NEW_GCC</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">MAX_LEVEL</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">ifdef</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression" style="color:#36acaa">NEW_GCC</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">OFFSET</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name" style="color:#36acaa">OFFSET</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">endif</span><span class="token macro property comment" style="color:#999988;font-style:italic">/*NEW_GCC*/</span><span class="token macro property" style="color:#36acaa"> </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">backtrace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token operator" style="color:#393A34">*</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> buffer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> n </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xfefefefe</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">long</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> p </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain">  i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> ebp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> OFFSET</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> eip </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> OFFSET</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        buffer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">eip</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        p </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">long</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">ebp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ebp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        eip </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> p</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test2</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> buffer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">MAX_LEVEL</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">backtrace</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">buffer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> MAX_LEVEL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> MAX_LEVEL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"called by %p\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">    buffer</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test1</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> a</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x11111111</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> b</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x11111112</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">test2</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> a</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x10000000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> b</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0x10000002</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">test1</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> argv</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>将上述代码保存为 backtrace.c，编译运行能够正常，记录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">10</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">21</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">29</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> program</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">problem $ gcc </span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">backtrace</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">o backtrace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">10</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">21</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">31</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> program</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">problem $ </span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">backtrace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">called by </span><span class="token number" style="color:#36acaa">0x555555555204</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">called by </span><span class="token number" style="color:#36acaa">0x555555555258</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">called by </span><span class="token number" style="color:#36acaa">0x555555555281</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">called by </span><span class="token number" style="color:#36acaa">0x5555555552a3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><a href="https://blog.csdn.net/absurd/article/details/4207357?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160423542319724836730112%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=160423542319724836730112&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-4207357.pc_v1_rank_blog_v1&amp;utm_term=%E8%B0%83%E7%94%A8&amp;spm=1018.2118.3001.4450" target="_blank" rel="noopener noreferrer">系统程序员成长计划－像机器一样思考(二)</a>
<a href="https://blog.csdn.net/absurd/article/details/4207357?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160423542319724836730112%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=160423542319724836730112&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-6-4207357.pc_v1_rank_blog_v1&amp;utm_term=%E8%B0%83%E7%94%A8&amp;spm=1018.2118.3001.4450" target="_blank" rel="noopener noreferrer"></a>这篇李先静大神的博客中，从根本上解释了我之前描述的 addr2line 命令不能获取到行号的问题。</p><p>相关的内容摘录如下：</p><blockquote><p>对于共享库，addr2line无法根据这个地址找到对应的源代码位置了。原因是：addr2line只能通过地址偏移量来查找，而打印出的地址是绝对地址。由于共享库加载到内存的位置是不确定的，为了计算地址偏移量，我们还需要进程maps文件的帮助</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="进程-maps-文件的使用">进程 maps 文件的使用<a class="hash-link" href="#进程-maps-文件的使用" title="标题的直接链接">​</a></h2><p>每一个进程都有自己的虚拟内存空间，其虚拟内存空间映射可以通过查看 /proc/<!-- -->[pid]<!-- -->/maps 文件来确定。</p><p>上文中已经描述了运行 backtrace 程序得到的如下输出信息：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">10</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">21</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">04</span><span class="token operator" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">31</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> program</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">problem $ </span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">backtrace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">called by </span><span class="token number" style="color:#36acaa">0x555555555204</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">called by </span><span class="token number" style="color:#36acaa">0x555555555258</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">called by </span><span class="token number" style="color:#36acaa">0x555555555281</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">called by </span><span class="token number" style="color:#36acaa">0x5555555552a3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="用-gdb-来验证">用 gdb 来验证<a class="hash-link" href="#用-gdb-来验证" title="标题的直接链接">​</a></h3><p>gdb 挂起程序，反汇编调用到的不同函数，调用指令与返回地址指令列举如下：</p><div class="language-asm codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-asm codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">   0x000055555555529e &lt;+20&gt;:    callq  0x555555555261 &lt;test&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   **0x00005555555552a3 &lt;+25&gt;:  mov    $0x0,%eax**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x000055555555527c &lt;+27&gt;:    callq  0x555555555238 &lt;test1&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   **0x0000555555555281 &lt;+32&gt;:  mov    -0x8(%rbp),%eax**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x0000555555555253 &lt;+27&gt;:    callq  0x5555555551c4 &lt;test2&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   **0x0000555555555258 &lt;+32&gt;:  mov    -0x8(%rbp),%eax**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   0x00005555555551ff &lt;+59&gt;:    callq  0x555555555135 &lt;backtrace&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   **0x0000555555555204 &lt;+64&gt;:  movl   $0x0,-0x4(%rbp)**</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里加粗的表示返回地址，可以看到与上面的输出是对应的，不过由于 backtrace 是向后回溯的，与这里的<strong>顺序刚好相反</strong>。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用-maps-文件来验证">使用 maps 文件来验证<a class="hash-link" href="#使用-maps-文件来验证" title="标题的直接链接">​</a></h3><p>上面 backtrace 程序运行的输出信息中 0x555555555204 这些地址是<strong>程序被映射到虚拟内存空间的虚拟地址</strong>，我通过执行如下步骤来获取到程序虚拟内存空间布局：</p><ol><li>使用 gdb 运行 backtrace 程序并在 main 函数处停下来</li><li>使用 pmap 查看 backtrace 程序的虚拟内存空间映射</li></ol><p>虚拟内存空间映射表如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:21:17:56</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> glibc-2.28 $ pmap -p </span><span class="token number" style="color:#36acaa">5201</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">5201</span><span class="token plain">:   /home/longyu/problem_and_solution/program-problem/backtrace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000555555554000      4K r---- /home/longyu/problem_and_solution/program-problem/backtrace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000555555555000      4K r-x-- /home/longyu/problem_and_solution/program-problem/backtrace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000555555556000      4K r---- /home/longyu/problem_and_solution/program-problem/backtrace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000555555557000      4K r---- /home/longyu/problem_and_solution/program-problem/backtrace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000555555558000      4K rw--- /home/longyu/problem_and_solution/program-problem/backtrace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7dea000    136K r---- /usr/lib/x86_64-linux-gnu/libc-2.28.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7e0c000   1312K r-x-- /usr/lib/x86_64-linux-gnu/libc-2.28.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7f54000    304K r---- /usr/lib/x86_64-linux-gnu/libc-2.28.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7fa0000      4K ----- /usr/lib/x86_64-linux-gnu/libc-2.28.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7fa1000     16K r---- /usr/lib/x86_64-linux-gnu/libc-2.28.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7fa5000      8K rw--- /usr/lib/x86_64-linux-gnu/libc-2.28.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7fa7000     24K rw---   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> anon </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7fd0000     12K r----   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> anon </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7fd3000      8K r-x--   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> anon </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7fd5000      4K r---- /usr/lib/x86_64-linux-gnu/ld-2.28.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7fd6000    120K r-x-- /usr/lib/x86_64-linux-gnu/ld-2.28.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7ff4000     32K r---- /usr/lib/x86_64-linux-gnu/ld-2.28.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7ffc000      4K r---- /usr/lib/x86_64-linux-gnu/ld-2.28.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7ffd000      4K rw--- /usr/lib/x86_64-linux-gnu/ld-2.28.so</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffff7ffe000      4K rw---   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> anon </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00007ffffffdd000    136K rw---   </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> stack </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> total             2148K</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这里我们需要关注 backtrace 程序在虚拟内存空间中的布局，可以看到有几个项目，起始地址为 0000555555554000，对应的项目如下：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">0000555555554000      4K r---- /home/longyu/problem_and_solution/program-problem/backtrace</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>0000555555554000  即为 backtrace 程序映射的起始地址，我们用 backtrace 程序的输出地址减掉这个起始地址，将会得到下面几个地址：</p><p>0x1204
0x1258
0x1281
0x12a3</p><p>将这几个地址写入一个名为 test 的文件中，使用 xargs 读取这个文件制作参数调用 addr2line 命令，得到了如下信息：</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">longyu@debian-10:21:37:35</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> program-problem $ </span><span class="token function" style="color:#d73a49">xargs</span><span class="token plain"> -a ./test  addr2line -e ./backtrace </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/home/longyu/problem_and_solution/program-problem/./backtrace.c:38</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/home/longyu/problem_and_solution/program-problem/./backtrace.c:52</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/home/longyu/problem_and_solution/program-problem/./backtrace.c:63</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/home/longyu/problem_and_solution/program-problem/./backtrace.c:72</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>可以看到 addr2line 成功解析出了指令在代码中的位置。对于动态库中的函数地址，有类似的过程！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>一个简单的知识背后可能蕴藏了很多的问题，这些问题环环相扣，当你处在分析问题的过程中时，常常会感到头痛，但将整个过程串联起来后，却又会有非常大的成就感。</p><p>从一个问题跳跃到另外一个问题，绕来绕去最终又回到最初的问题，不过此时知识面得到了扩充，输入增加了，有了这个增加的输入信息，最初的问题已经不算是问题了！</p><p>本文的问题脉络大致有如下几点：</p><ol><li>如何使用 mtrace？</li><li>mtrace 脚本为什么不能打印源码行号？</li><li>addr2line 为什么不能打印源码行号？</li><li>mtrace 函数是如何工作的？</li><li>RETURN_ADDRESS 宏的定义是什么？</li><li>gcc 内建的 __builtin_return_address 是如何实现的？</li><li>从 backtrace 程序再次回到第三个问题</li></ol><p>注意在第 7 个关键点的时候，又回到了 3 这个点，不过这时候我有了 maps 文件这个输入，这个输入让 addr2line 不能打印行号的问题迎刃而解！</p><p>列出这些关键点只想抛出一个问题：<strong>你觉得自己会在哪个点结束呢？</strong></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux-kernel/linux-内核模块中引用符号是如何链接的]]></title>
        <id>/linux-kernel/linux-内核模块中引用符号是如何链接的</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/linux-kernel/linux-内核模块中引用符号是如何链接的"/>
        <updated>2022-06-19T07:40:00.000Z</updated>
        <summary type="html"><![CDATA[前言]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="标题的直接链接">​</a></h2><p>linux 内核模块的加载流程去年大致琢磨了一遍，简单的写了个草稿后就在草稿箱里积压着。按照以往的风格，应当以一篇长文呈现，今天想想却觉得不太可取。为什么不从关键的问题着手，使用较短的篇幅来逐个击破呢？</p><p>最终选择了从问题出发的描述方式，在这种方式下，我首先得提出关键问题，这需要一定的训练，本文便是这样的一次实践。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="我的问题">我的问题<a class="hash-link" href="#我的问题" title="标题的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-linux-内核模块是如何链接的">1. <strong>linux 内核模块是如何链接的？</strong><a class="hash-link" href="#1-linux-内核模块是如何链接的" title="标题的直接链接">​</a></h3><p>暂时无法回答。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-为什么要提这个问题">2. 为什么要提这个问题？<a class="hash-link" href="#2-为什么要提这个问题" title="标题的直接链接">​</a></h3><p>常规的 c 程序要经过编译链接来生成可执行文件，链接的过程会按照链接脚本的配置来完成可执行文件的 layout 同时也会对所有的可重定位项目进行重定位，以确定访问地址偏移。</p><p>linux 内核模块也有类似的过程，可编译生成的内核模块只是一个【可重定位目标文件】，<strong>那它的链接过程是在哪里执行的呢？</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="经验之谈">经验之谈<a class="hash-link" href="#经验之谈" title="标题的直接链接">​</a></h2><p>内核模块一般通过 insmod、modprobe 命令加载运行，既然要运行，肯定需要确定模块内调用的外部符号的偏移地址，这一过程可能在如下流程中进行：</p><ol><li>insmod、modprobe 命令中</li><li>内核代码中模块加载流程中</li></ol><p>曾经 strace 跟踪过 insmod 加载内核模块的过程，核心逻辑是调用 finit_module、init_module 系统调用，没有看到其它操作，于是判断内核模块的链接应当是在内核代码中做的。</p><p>下面我以一个简单的 hello world 内核模块为例，探讨内核中执行模块链接的过程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="一个简单的内核模块源码">一个简单的内核模块源码<a class="hash-link" href="#一个简单的内核模块源码" title="标题的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;linux/module.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;linux/init.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> __init </span><span class="token function" style="color:#d73a49">my_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printk</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KERN_INFO </span><span class="token string" style="color:#e3116c">"Hello from Hello Module\\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> __exit </span><span class="token function" style="color:#d73a49">my_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printk</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KERN_INFO </span><span class="token string" style="color:#e3116c">"Bye from Hello Module\\n"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">module_init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">my_init</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">module_exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">my_exit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">MODULE_DESCRIPTION</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Sample Hello World Module"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">MODULE_LICENSE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"GPL"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>将上述内容保存为 mymodule.c 使用如下 Makefile 内容编译：</p><div class="language-makefile codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-makefile codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">MODULE_FILENAME</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">mymodule</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">PWD </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">shell</span><span class="token plain"> pwd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obj-m </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">MODULE_FILENAME</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">.o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">KO_FILE</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">MODULE_FILENAME</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">.ko</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">export</span><span class="token plain"> KROOT</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">/lib/modules/</span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">shell</span><span class="token plain"> uname -r</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">/build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token target symbol" style="color:#36acaa">modules</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">@</span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">MAKE</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> -C </span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">KROOT</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> M</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">PWD</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token target symbol" style="color:#36acaa">modules_install</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">@</span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">MAKE</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> -C </span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">KROOT</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> M</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">PWD</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> modules_install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token target symbol" style="color:#36acaa">clean</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">@</span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">MAKE</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> -C </span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">KROOT</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> M</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">PWD</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> clean</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    rm -rf Modules.symvers modules.order</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token target symbol" style="color:#36acaa">insert</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sudo insmod </span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">KO_FILE</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token target symbol" style="color:#36acaa">remove</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sudo rmmod </span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">MODULE_FILENAME</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token target symbol" style="color:#36acaa">printlog</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sudo dmesg -c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sudo insmod </span><span class="token variable" style="color:#36acaa">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">KO_FILE</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dmesg</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="objdump--d-mymoduleko">objdump -d mymodule.ko<a class="hash-link" href="#objdump--d-mymoduleko" title="标题的直接链接">​</a></h2><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Disassembly of section .init.text:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000000000000000 </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">init_module</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">:   e8 00 00 00 00          callq  </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">init_module+0x</span><span class="token operator file-descriptor important" style="color:#393A34">5</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">5</span><span class="token plain">:   </span><span class="token number" style="color:#36acaa">48</span><span class="token plain"> c7 c7 00 00 00 00    mov    </span><span class="token variable" style="color:#36acaa">$0x0</span><span class="token plain">,%rdi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   c:   e8 00 00 00 00          callq  </span><span class="token number" style="color:#36acaa">11</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">init_module+0x1</span><span class="token operator file-descriptor important" style="color:#393A34">1</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">11</span><span class="token plain">:   </span><span class="token number" style="color:#36acaa">31</span><span class="token plain"> c0                   xor    %eax,%eax</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token number" style="color:#36acaa">13</span><span class="token plain">:   c3                      retq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Disassembly of section .exit.text:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">0000000000000000 </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">cleanup_module</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">:   </span><span class="token number" style="color:#36acaa">48</span><span class="token plain"> c7 c7 00 00 00 00    mov    </span><span class="token variable" style="color:#36acaa">$0x0</span><span class="token plain">,%rdi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   </span><span class="token number" style="color:#36acaa">7</span><span class="token plain">:   e9 00 00 00 00          jmpq   c </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">__UNIQUE_ID_description1</span><span class="token operator file-descriptor important" style="color:#393A34">8</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>init_module 为模块的初始化函数，在其中调用到的两个 <strong>callq</strong> 指令用于子函数调用。<strong>callq</strong> 指令的字节码为 <strong>0xe8</strong>，其后四个字节为函数跳转偏移，这里两个 <strong>callq</strong> 指令的函数跳转偏移值都为 0，这符合可重定位目标文件的特征，这里就是两处需要链接过程完成的重定位对象。</p><p>第二个 callq 可以明确是 printk，第一个 callq 根据 readelf -r 的输出判断是 <code>__fentry__ </code>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="readelf--r-mymoduleko">readelf -r mymodule.ko<a class="hash-link" href="#readelf--r-mymoduleko" title="标题的直接链接">​</a></h2><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Relocation section </span><span class="token string" style="color:#e3116c">'.rela.init.text'</span><span class="token plain"> at offset 0x1cb30 contains </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> entries:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">000000000001  002600000004 R_X86_64_PLT32    0000000000000000 __fentry__ - </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">000000000008  00060000000b R_X86_64_32S      0000000000000000 .rodata.str1.1 + </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">00000000000d  002800000004 R_X86_64_PLT32    0000000000000000 printk - </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Relocation section </span><span class="token string" style="color:#e3116c">'.rela.exit.text'</span><span class="token plain"> at offset 0x1cb78 contains </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> entries:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">000000000003  00060000000b R_X86_64_32S      0000000000000000 .rodata.str1.1 + 1b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">000000000008  002800000004 R_X86_64_PLT32    0000000000000000 printk - </span><span class="token number" style="color:#36acaa">4</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>readelf -r 参数获取可执行目标文件的可重定位 section 表项。上述输出中有如下两个可重定位 section:</p><ol><li>.rela.init.text</li><li>.rela.exit.text</li></ol><p>每个 section 中都列举出了【需要重定位的项目】，一个项目有五个方面的内容，其中 <strong>Offset 为可重定位目标地址相对文件起始地址的偏移量</strong>，<strong>Type 为重定位的类型</strong>，用于计算偏移地址，<strong>Sym. Name + Addend 字段为符号名称以及计算地址偏移量时的修正值。</strong></p><p><strong>.rela.init_text section</strong> 中有两种重定位类型，<strong>R_X86_64_PLT32</strong>  用于函数偏移计算，<strong>R_X86_64_32S</strong> 用于数据偏移计算。str1.1 实际指向 init_module 函数中 printk 函数打印的字符串。</p><p>函数偏移的计算可以参考如下内容来学习：</p><blockquote><p>So despite the fact that the type of the relocation entry is R_X86_64_PLT32 the linker will still use the R_X86_64_PC32 computation (S + A - P) for the relocation target being modified, where:</p><p>   S is the value of the symbol (st_value of Elf64_Sym)
A is the addend (-4 in your case)
P is the address of the memory location being relocated (the start of the address of the call to Other)</p></blockquote><p>上述英文摘自 <a href="https://stackoverflow.com/questions/64424692/how-does-the-address-of-r-x86-64-plt32-computed" target="_blank" rel="noopener noreferrer">How does the address of R_X86_64_PLT32 computed?</a> 更多的信息可以阅读《深入理解计算机系统》第三版 7.7 节。</p><p>在下文中我会用一个实例来说明函数偏移地址的计算过程。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="在内核源码中找到模块链接相关代码">在内核源码中找到模块链接相关代码<a class="hash-link" href="#在内核源码中找到模块链接相关代码" title="标题的直接链接">​</a></h2><p>使用 R_X86_64_PLT32 关键字进行如下搜索：</p><ol><li>搜索 kernel 目录</li><li>搜索 arch/x86 目录
确定模块链接流程在 arch/x86/kernel/module.c 中实现。</li></ol><p>阅读 module.c 的代码，发现有一个调试信息，于是修改内核代码，开启调试信息。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内核代码修改-patch">内核代码修改 patch<a class="hash-link" href="#内核代码修改-patch" title="标题的直接链接">​</a></h2><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">diff </span><span class="token operator" style="color:#393A34">--</span><span class="token plain">git a</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">arch</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">x86</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">kernel</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c b</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">arch</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">x86</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">kernel</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">index b052e883dd8c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token number" style="color:#36acaa">.11e39304</span><span class="token plain">c55f </span><span class="token number" style="color:#36acaa">100644</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> a</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">arch</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">x86</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">kernel</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">++</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> b</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">arch</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">x86</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">kernel</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">37</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">7</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">37</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">7</span><span class="token plain"> @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;asm/setup.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;asm/unwind.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">-</span><span class="token plain">#</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">#</span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">define</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property macro-name function" style="color:#d73a49">DEBUGP</span><span class="token macro property expression punctuation" style="color:#393A34">(</span><span class="token macro property expression" style="color:#36acaa">fmt</span><span class="token macro property expression punctuation" style="color:#393A34">,</span><span class="token macro property expression" style="color:#36acaa"> </span><span class="token macro property expression punctuation" style="color:#393A34">.</span><span class="token macro property expression punctuation" style="color:#393A34">.</span><span class="token macro property expression punctuation" style="color:#393A34">.</span><span class="token macro property expression punctuation" style="color:#393A34">)</span><span class="token macro property expression" style="color:#36acaa">                               \\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">printk</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">KERN_DEBUG fmt</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ##__VA_ARGS__</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">196</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">196</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">7</span><span class="token plain"> @@ </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apply_relocate_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Elf64_Shdr </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">sechdrs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> invalid_relocation</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        val </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u32 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">if</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property expression number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">val </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s32 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> overflow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@@ </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">212</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">6</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token number" style="color:#36acaa">213</span><span class="token punctuation" style="color:#393A34">,</span><span class="token number" style="color:#36acaa">7</span><span class="token plain"> @@ </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">apply_relocate_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Elf64_Shdr </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">sechdrs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                               me</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ELF64_R_TYPE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rel</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">r_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ENOEXEC</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">+</span><span class="token plain">               </span><span class="token function" style="color:#d73a49">DEBUGP</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"val is 0x%llx\\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="重新编译并更新内核后加载-mymoduleko-后-dmesg-部分打印信息">重新编译并更新内核后加载 mymodule.ko 后 dmesg 部分打印信息<a class="hash-link" href="#重新编译并更新内核后加载-mymoduleko-后-dmesg-部分打印信息" title="标题的直接链接">​</a></h2><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">109.974417</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token builtin class-name">type</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> st_value ffffffffbda016d0 r_addend fffffffffffffffc loc ffffffffc0106001</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">  </span><span class="token number" style="color:#36acaa">109.974418</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> val is 0xfffffffffd8fb6cb</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>由于打印信息很多，我只截取了其中的一条项目。在上述项目中关键的信息解析如下：</p><ol><li><p>type 4 表示重定位类型为 R_X86_64_PLT32 </p></li><li><p>st_value ffffffffbda016d0 表示 <code>__fentry__</code>符号地址</p><p>通过访问 /proc/kallsyms 文件确定，相关信息摘录如下；</p></li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">```bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[root@debian-10:17:55:34] helloworld_module # grep __fentry__ /proc/kallsyms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ffffffffbda016d0 T __fentry__</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">```</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol><li><p>r_addend fffffffffffffffc  为上文中 readelf -r 输出中 <code>__fentry__</code>函数的 Addend 值—— -4</p></li><li><p>loc ffffffffc0106001 表示上文中 readelf -r 输出中<code>__fentry__</code>被重定位区域在内核的实际地址</p></li><li><p>val is 0xfffffffffd8fb6cb，val 为最终计算出的访问 <code>__fentry__</code>函数的偏移量，会被填充到 loc 指向的地址中</p><p>val 计算公式为 S + A - P: ffffffffbda016d0 + fffffffffffffffc  - ffffffffc0106001 = <strong>0xfffffffffd8fb6cb</strong></p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="核心内核代码">核心内核代码<a class="hash-link" href="#核心内核代码" title="标题的直接链接">​</a></h2><p>内核代码中相关函数调用关系如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">init_module</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">finit_module</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    load_module</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       apply_relocations</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           apply_relocate_add</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>apply_relocate_add 函数中完成重定向任务，核心代码摘录如下：</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> sechdrs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">relsec</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sh_size </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">rel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">/* This is where to make the change */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                loc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">sechdrs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">sechdrs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">relsec</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sh_info</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sh_addr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> rel</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">r_offset</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic">/* This is the symbol it is referring to.  Note that all</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">                   undefined symbols have been resolved.  */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                sym </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Elf64_Sym </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">sechdrs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">symindex</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sh_addr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ELF64_R_SYM</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rel</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">r_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token function" style="color:#d73a49">DEBUGP</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"type %d st_value %Lx r_addend %Lx loc %Lx\\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                       </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token function" style="color:#d73a49">ELF64_R_TYPE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rel</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">r_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                       sym</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">st_value</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> rel</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">r_addend</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                val </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> sym</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">st_value </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> rel</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">r_addend</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">ELF64_R_TYPE</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">rel</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">r_info</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> R_X86_64_NONE</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> R_X86_64_64</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u64 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> invalid_relocation</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u64 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> R_X86_64_32</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u32 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> invalid_relocation</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u32 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">val </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u32 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> overflow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> R_X86_64_32S</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s32 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> invalid_relocation</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s32 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">val </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s32 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> overflow</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> R_X86_64_PC32</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> R_X86_64_PLT32</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u32 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token keyword" style="color:#00009f">goto</span><span class="token plain"> invalid_relocation</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        val </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">u32 </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain">loc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>上述代码遍历每个可重定位 section 项目，loc 指向模块加载到内核后存储每个可重定位项目被重定位区域的内存地址，代表 <strong>R_X86_64_PLT32</strong>  中的标号 <strong>P</strong>。</p><p>sym 中保存已经 resolve 的未定义符号，sym-&gt;value 表示符号加载地址，代表 <strong>R_X86_64_PLT32</strong>  中的标号 <strong>S</strong>。</p><p>rel<!-- -->[i]<!-- -->.r_addend 保存可重定位项目的 <strong>Addend</strong> 值，代表 <strong>R_X86_64_PLT32</strong>  中的标号 <strong>A</strong>。</p><p>在确定了这些信息后，switch 语句通过可重定位项目的 Type 字段进行逻辑分发，计算并填充重定位后的地址。对于 R_X86_64_PLT32  这种类型来说，计算公式就是 <strong>S + A - P</strong>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a class="hash-link" href="#总结" title="标题的直接链接">​</a></h2><p>善于提问是一种很好的能力。主动发现并提出问题然后积极的寻找答案，最后给出合理的答案，收获成就感并推动自己继续提出新的问题，这是一个正反馈。从自己能够回答的小问题开始，不断的循环往复，雪球会越滚越大，时间正站在你这边。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[写博客的意义]]></title>
        <id>/2022/06/12/序言</id>
        <link href="https://longyuwlz.github.io/longyu.github.io/blog/2022/06/12/序言"/>
        <updated>2022-06-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[我没有养成写博客的习惯，我一直对自己的记忆力抱有某种特别的自信。最近我发现，我也忘记了很多东西。我在几周前搜集了一些资料，学习了如何使用虚拟机来调试 linux 内核，但我没有总结。现在虽然环境已经搭建好了，但我忘记了操作串口的命令行，我还得继续查资料，又将花费很多时间。如果有一天，我升级了系统，那么我需要重新以过来人的身份从零开始，这只是简单的重复，没有学习的空间。]]></summary>
        <content type="html"><![CDATA[<p>我没有养成写博客的习惯，我一直对自己的记忆力抱有某种特别的自信。最近我发现，我也忘记了很多东西。我在几周前搜集了一些资料，学习了如何使用虚拟机来调试 linux 内核，但我没有总结。现在虽然环境已经搭建好了，但我忘记了操作串口的命令行，我还得继续查资料，又将花费很多时间。如果有一天，我升级了系统，那么我需要重新以过来人的身份从零开始，这只是简单的重复，没有学习的空间。</p><p>事实上，我最近几年忘记了学过的很多东西。我一直都没养成记录的习惯，我觉得这样下去我永远在前学后忘，永远重新开始，而不是站在过去的基础之上。</p><p>站在巨人的肩膀之上，这是一句很经典的名言。我即便不能站在巨人的肩膀之上，我只要能够站在过去努力的基础之上就能够看得更远，毕竟我站的更高了呀。可是我发现过去没有成为我足下的土地，它仅仅成为了我的一段模糊记忆。为此，我感到惭愧，更感到惋惜。我明明可以站的更高，可不好的习惯却让我总是站在平地。</p><p>今天我所拥有的一切都是我自己一步步获取的，这些事情有好有坏，它构成了我现在所有的生活。如果我有任何的不满与悔恨，我都只能抱怨自己。我觉得自己很可耻，自己很可悲，自己很可怜。可我更明白只有改变能够让我拥有进入一个好环境的入场券，我要这样去做。</p><p>写博客是文字的一个突破点。想要更加准确、清楚的表达出一件事情，这本身就需要强大的文笔支持。我确实写过了很多文章，但我唯一清楚的是我还有很大的上升空间，我的文字还可以更好。这就是写博客对我的一大意义。</p><p>同时，写博客也将帮助我保留住过去的基础，让我不用每次都重新开始，哪怕仅仅能够提供轻微的参考价值，这也能节省我的时间。</p><p>写博客也是向他人展示自我的一次尝试，虽然这点并不是初衷所在。</p><p>现有博文的数量已经十分庞大，我想写的东西很多人都已经写过了。可我想我仍旧能够写出新的东西，我以自己的视角与思维来组织文字，至少这些文字是独门独院的，它拥有仅仅属于我的风格。那么就让我以博客来描绘出完整的自我肖像吧！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="写博客推动思考">写博客推动思考<a class="hash-link" href="#写博客推动思考" title="标题的直接链接">​</a></h2><p>这篇文章已经发了有一两年了，今天我觉得其实我写博客的主要目的是想凭借这一过程来推动自我思考。在研究一些代码时，可能不够深入，看的模模糊糊，可真正总结起来，却不得不深入的思考以免写出云里雾里的文章。</p><p>我力求让写博客成为推动自己思考的一种方式，更进一步将其发展为一种习惯，这样思考便能够扩大，而这正是我认可的竞争力所在！恐怕这才是我写博客的意义！至于说形式上的，或者别人认为的，或者其它的东西在这个意义面前都变得无关紧要了！</p>]]></content>
        <category label="blog" term="blog"/>
    </entry>
</feed>